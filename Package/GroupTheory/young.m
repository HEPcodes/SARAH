(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
(* ----------------------- *)
(* Young tableaux *)
(* ----------------------- *)

v[j_,m_]:=1/Sqrt[2 m (m+1)] (Sum[Delta[j,k],{k,1,m}]-m Delta[j,m+1]);
vec[k_,n_]:=Table[v[k,i],{i,1,n-1}];
weight[i_,n_]:=Sum[vec[k,n],{k,1,i}];

SA`Casimir[vector_]:=Sum[weight[i,Length[vector]+1] vector[[i]],{i,1,Length[vector]}].(Sum[weight[i,Length[vector]+1] vector[[i]],{i,1,Length[vector]}]+2 Sum[weight[i,Length[vector]+1],{i,1,Length[vector]}]);

YoungTableaux[rows_,N_]:=Block[{p,q,i,j,k, DynkinVector,hook,columns,cas,dimm},
dimm=1;
For[i=1,i<=Length[rows],
For[j=1,j<=rows[[i]],
hook=rows[[i]]-j+1;
For[k=i+1,k<=Length[rows],
If[rows[[k]]>=j,hook++;];
k++;];
distance=-i+j;
dimm=dimm*(N+distance)/hook;
j++;];
i++;];
p=0;
q=0;
columns=Table[1,{i,1,rows[[1]]}];
For[i=2,i<=Length[rows],
For[k=1,k<=rows[[i]],
columns[[k]]=columns[[k]]+1;
k++;];
i++;];

For[i=1,i<=Length[columns],
If[columns[[i]]==1,p++;,
q=q+(N-columns[[i]]);];
i++;];
saveRows=rows;
DynkinVector={};
rowLengthOld=rows[[1]];
For[i=2,i<=N,If[Length[rows]<i,rowLength=0;,rowLength=rows[[i]];];
DynkinVector=Join[DynkinVector,{rowLengthOld-rowLength}];
rowLengthOld=rowLength;
i++;];
cas=Simplify[SA`Casimir[DynkinVector]];
Return[{dimm,p,q,cas,cas*dimm/(N^2-1), DynkinVector}];
];

FieldDim[field_,gauge_]:=Block[{},
If[Head[Fields[[field,gauge+3]]]===List,
Return[Fields[[field,gauge+3,1]]];,
Return[Fields[[field,gauge+3]]];
];
];

getRepresentationMatrix[field_]:=Block[{i,j,ind,pos,res={},indFinal={},k},
pos=Position[ListFields,field][[1,1]];
For[j=1,j<=Length[Gauge],
ind=Select[ListFields[[pos]],(FreeQ[#,Gauge[[j,3]]]==False)&];
If[ind=!={},
ind=ind[[1]]; indFinal={};
For[k=1,k<=Length[ind[[1]]],
If[ind[[2,k]]===Gauge[[j,3]] || ind[[2,k]]===-Gauge[[j,3]],
indFinal = Join[indFinal,{ind[[1,k]]}];
];
k++;];
If[indFinal=!={},
res=Join[res,{RM[Gauge[[j,2]],Fields[[pos,3+j]],field]@@indFinal}];,
If[Gauge[[j,2]]===U[1],res=Join[res,{IR[field][1]}];,res=Join[res,{1}];];
];,
If[Gauge[[j,2]]===U[1],res=Join[res,{IR[field][1]}];,res=Join[res,{1}];];
];
j++;];
Return[res];
];

CheckIrrepSUN[x_,1]:={x,0,0,x^2,x^2,{1}};
CheckIrrepSUN[a_,b_]:=TestDim[a,b];
CheckIrrepSUN[{a_,b_},c_]:=TestDim[{a,b},c];


TestDim[dim_,N_]:=Block[{height, max},
correctTableaux=False; height=1; max=N;
While[height<=N-1&&correctTableaux==False,
(* AddRow[10 N,1,height,{},dim,N]; *)
AddRow[3 N,1,height,{},dim,N];
height++;];
If[Ytab[[2]]==0 && Ytab[[3]] > N/2,Ytab[[2]]=N-Ytab[[3]]; Ytab[[3]]=0];
Return[Ytab];
];

TestDim[{dim_,dyn_},N_]:=Block[{height, max},
correctTableaux=False;height=1;max=N;
While[height<=N-1&&correctTableaux==False,
(* AddRow[10 N,1,height,{},dim,dyn,N]; *)
AddRow[3 N,1,height,{},dim,dyn,N];
height++;];
If[Ytab[[2]]==0 && Ytab[[3]] > N/2,Ytab[[2]]=N-Ytab[[3]]; Ytab[[3]]=0];
Return[Ytab];
];


AddRow[max_,height_,maxheight_,tableaux_,dim_,dyn_,N_]:=Block[{i,cdim},
i=1;
 While[i<=max&&correctTableaux==False, 
tab=Join[tableaux,{i}];
If[height==maxheight,
Ytab=YoungTableaux[tab,N];
If[Ytab[[1]]==dim &&  Ytab[[6]]==dyn,
correctTableaux=True;
];,
AddRow[i,height+1,maxheight,tab,dim,dyn,N];
];
i++];
];

AddRow[max_,height_,maxheight_,tableaux_,dim_,N_]:=Block[{i,cdim},
i=1;
cdim = 0;
While[i<=max&&correctTableaux==False,
tab=Join[tableaux,{i}];
If[height==maxheight,
Ytab=YoungTableaux[tab,N];
If[Ytab[[1]]==dim,correctTableaux=True;];,
AddRow[i,height+1,maxheight,tab,dim,N];
];
i++];
];


ClueBoxes[tab_,nBoxes_,a_]:=Block[{nRows,integers,i,res={}},
nRows=Length[tab[[1]]]+1;
integers=Table[i,{i,0,nBoxes}];
If[nBoxes<nRows,integers=Join[integers,Table[0,{nRows-nBoxes}]];];
combinations=Select[Tuples[integers,nRows],(Plus@@#==nBoxes)&];

tabtemp={Join[tab[[1]],{0}],Join[tab[[2]],{{}}]};
tabres=Transpose[{(tabtemp[[1]]+#)&/@combinations,(JoinI[tabtemp[[2]],#])&/@(a combinations)}];
tabres=DeleteCases[Intersection[Select[tabres,(Sort[#[[1]],(#2<#1)&]==#[[1]])&]],0,2];

(* make sure not to use the same column! *)

 (* Print["b  ",tabres];  *)
 For[i=1,i<=Length[tabres],
(* If[CheckColumnCondition[tabres[[i]]]\[Equal]True, *)
 (* Print[" c  ",tabres[[i]]];   *)
  If[CheckColumnCondition[{T1[[1]],tabres[[i,2]]}]==True,  
(* If[CheckColumnCondition[{tabtemp[[1]],tabres[[i,2]]}]\[Equal]True,  *)
res=Join[res,{tabres[[i]]}];
];
i++;]; 
(* Print[res]; *)
 Return[res];  
Return[tabres];

];

CheckColumnCondition[tab_]:=Block[{temp,i,j,double},
temp=JoinI[List/@tab[[1]],tab[[2]]];
temp=DeleteCases[DeleteCases[Transpose[FillLinesYT[DeleteCases[Flatten/@((Flatten/@temp //.a_ *aa[b_]:>Table[aa[b],{a}]) //. aa[b_Integer]:>aa[ToString[b]]//.a_Integer:>Table[bb,{a}]),{},2]]],bb,3],{},3];
 double=Cases[temp,{a___,aa[b_],d___,aa[b_],c___}];
(*  Print[tab,"  ",temp,"  ",double, double==={}];  *)
(* If[temp===Intersection/@temp, *)
(*  Print[temp,"  ",double];  *)
If[double==={},
Return[True];,
Return[False];
];
];

FillLinesYT[tab_]:=Block[{temp,max,i},
max=Max[Length/@tab];
temp=Table[Flatten[Join[tab[[i]],Table[bb,{max-Length[tab[[i]]]}]]],{i,1,Length[tab]}];
Return[temp];
];


JoinI[a_,b_]:=Block[{i,temp={}},
For[i=1,i<=Length[a],
temp=Join[temp,{Join[a[[i]],{b[[i]]}]}];
i++;];
If[Length[b]>Length[a],
For[i=Length[a]+1,i<=Length[b],
temp=Join[temp,{{b[[i]]}}];
i++;];
];
Return[DeleteCases[temp,0,2]];
];

UseHookFormular[rowsIN_,N_]:=Block[{i,j,k,dimm,distance,hook,sign,ct},
dimm=1;
correcttablaux=False;
sign=1;
rows=DeleteCases[rowsIN,0,2];
If[Length[rows]>N,Return[0]];
While[Length[rows]===N,
rows=DeleteCases[rows-Table[1,{N}],0,2];
];
If[rows==={},Return[1];];
ct=CheckYonjugatedYT[rows,N];
rows=ct[[1]];sign=ct[[2]];
For[i=1,i<=Length[rows],
For[j=1,j<=rows[[i]],
hook=rows[[i]]-j+1;
For[k=i+1,k<=Length[rows],
If[rows[[k]]>=j,hook++;];
k++;];
distance=-i+j;
dimm=dimm*(N+distance)/hook;
j++;];
i++;];
Return[sign*dimm];
];


CheckYonjugatedYT[rowsIN_,N_]:=Block[{lines,rowsinvers,sign=1},
rows=rowsIN;
nrL=Max[rows];
If[(nrL*N)/2<Plus@@rows,
rows=InvertYT[rows,N];
sign=-1;
];
Return[{rows,sign}];
];

InvertYT[rows_,N_]:=Block[{nrL,i,lines},
nrL=Max[rows];
lines=Table[Length[Select[rows,(#>= i)&]],{i,1,nrL}];
lines=-lines+Table[N,{Length[lines]}];
Return[Table[Length[Select[lines,(#>= i)&]],{i,1,Max[lines]}]];
];


MultiplyReps[a_,b_,N_]:=Block[{i,j,k,dims,tempTab,tempFin,dimA,dimB},
If[Head[a]===List,
T1=DynkinToYoung[a];
dimA=UseHookFormular[T1,N];,
T1=getYoungTableaux[a,N];
dimA=a;
];
If[Head[b]===List,
T2=DynkinToYoung[b];
dimB=UseHookFormular[T2,N],
T2=getYoungTableaux[b,N];
dimB=b;
];

T1={T1,Table[{},{Length[T1]}]};
 tempTab={T1}; 
For[i=1,i<=Length[T2],
tempTab=(ClueBoxes[#,T2[[i]],aa[i]]&/@tempTab);
save=tempTab;
 tempTab=Flatten[tempTab,1]; 
i++;];
(* Print["before ",Table[tempTab[[i,1]],{i,1,Length[tempTab]}]]; *)
tempFin={};
 (* Print[UseHookFormular[#,N]&/@DeleteCases[tempFin,0,2]];  *)
 For[i=1,i<=Length[tempTab],
 (* Print["dim ", UseHookFormular[DeleteCases[tempTab[[i,1]],0,2],N],"  ",DeleteCases[tempTab[[i,1]],0,2]];   *)
(* Print["tab ",tempTab[[i,1]]]; *)
 If[CheckAllowedYT[tempTab[[i,2]]]==True, 
tempFin=Join[tempFin,{tempTab[[i,1]]}];
  ];  
i++;];
 (* Print["after ",tempFin]; *)
(* tempFin=Intersection[tempFin];  *)
dims=DeleteCases[UseHookFormular[#,N]&/@DeleteCases[tempFin,0,2],0,2];
If[Plus@@(Abs[dims])=!=Abs[dimA*dimB],Print["Problem with product ",a," x ",b," under SU(",N,")"];];
Return[{dims,DeleteCases[YoungToDynkin[#,N]&/@tempFin,NOTAB]}];  

];

getYoungTableaux[dim_,N_]:=Block[{},
TestDim[Abs[dim],N];
If[dim<0,
Return[InvertYT[tab,N]];,
Return[tab];
];
];

CheckAllowedYT[seq_]:=Block[{allowed=True,i,j,fin,remaining,max},
fin=Flatten[Flatten[Reverse/@seq]//.a_ *aa[b_]:>Table[aa[b],{a}]];
max=Max[Cases[fin,x_Integer,5]];
For[i=1,i<=Length[fin],
int =fin[[i]] /. coeff___ aa[j_Integer]->j /. aa[j_Integer]->j;
If[int>1,
(* remaining=Take[fin,{i,Length[fin]}]; *)
remaining=Take[fin,{1,i}];
(* counts=Table[{Count[remaining,aa[j]],Count[remaining,aa[j-1]]},{j,1,max}]; *)
counts= {{Count[remaining,aa[int]],Count[remaining,aa[int-1]]}};
(* Print[fin,"  ",i,"  ",counts, "int ",int,"  ",Select[counts,(#[[1]]>#[[2]] )&]=!={}];   *)
If[Select[counts,(#[[1]]>#[[2]]) &]=!={},allowed=False;];
(* remaining=Take[fin,{i+1,Length[fin]}] /. aa[j_]\[RuleDelayed]1/;(j\[Equal](int-1)) /. aa[j_Integer]\[Rule]0;
 previous=Take[fin,{1,i}] /. aa[j_Integer]\[RuleDelayed]1/;(j\[Equal]int) /. aa[j_Integer]\[Rule]0;
Print[previous, "  ",remaining, i];
If[(Plus@@previous)>  (Plus@@remaining) && (Plus@@remaining=!=0),allowed=False; Print[False];];
i++;]; *)
];
i++;];
(* Print["fin ",fin," ",allowed]; *)
 (* Print["allowed ",allowed];  *)
Return[allowed];
];

CalculateDynkinAndCasimir[gauge_,dim_]:=Block[{i,temp55},
If[Gauge[[gauge,2]]===U[1],
temp55=CheckIrrepSUN[dim,1];
Return[{GUTren[gauge]^2*temp55[[4]],GUTren[gauge]^2*temp55[[5]]}];,
If[dim===1,
Return[{0,0}];,
temp55=CheckIrrepSUN[dim,Gauge[[gauge,2]][[1]]];
Return[{temp55[[4]],temp55[[5]]}];
];
];
];

