(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
Block[{$Path={$sarahSPhenoPackageDir}},
<<SPhenoCoupling`;
<<SPhenoMain`;
<<SPhenoFunc`;
<<SPhenoTreeDecays`;
<<SPheno3BodyDecay`;
<<SPhenoTreeMasses`;
<<SPhenoRGE`;
<<SPhenoInOut`;
<<SPhenoBoundaries`;
<<SPhenoRunRGE`;
<<SPhenoBoundaryEW`;
<<SPhenoBR`;
<<SPhenoLoopMasses`;
<<SPhenoMassShift`;
<<SPhenoModelData`;
<<SPhenoLoopCouplings`;
<<SPhenoLesHouchesAndMake`;
<<SPhenoLoopContributions`;
<<SPhenoTadpoles`;
<<SPhenoFT`;
<<SPhenoRGEsSM`;
<<SPhenoCouplingsDecays`;

<<SPhenoLowEnergy`;
<<SPhenoHiggsBoundsOutput`;

<<SPhenoCT`; 

 <<SPhenoHiggsCS`; 
<<SPhenoTadpoles`;

<<SPhenoEffPot`;
<<SPheno2LPole`;
];

Options[MakeSPheno]={Eigenstates->EWSB,TwoLoop->True,ReadLists->False, InputFile->"SPheno.m", StandardCompiler->"gfortran",IncludeFlavorKit->True};

MakeSPheno[opt___ ]:=MakeSPhenoOutput[Eigenstates/.{opt}/.Options[MakeSPheno],TwoLoop/.{opt}/.Options[MakeSPheno],ReadLists/.{opt}/.Options[MakeSPheno],InputFile/.{opt}/.Options[MakeSPheno],StandardCompiler/.{opt}/.Options[MakeSPheno],IncludeFlavorKit/.{opt}/.Options[MakeSPheno]];

MakeSPhenoOutput[Eigenstates_, TwoL_,ReadL_, inputfile_,scompiler_,flavorkit_]:=Block[{i,i1,i2,temp,startedtime},
startedtime=TimeUsed[];
Print[StyleForm["Generate SPheno Source Code","Section"]];

Print[StyleForm["Performing necessary calculations","Section",FontSize->10]];

SPhenoFile=ToFileName[{$sarahCurrentModelDir},inputfile];
SetOptions[CalcRGEs,WriteFunctionsToRun->False];
SPheno`Eigenstates=Eigenstates;
SA`CurrentStates=Eigenstates;

If[flavorkit===False || SkipFlavorKit===True,
SkipFlavorKit=True;
];

AbortStartSPheno=False;
SARAHFortran=True;
parametersSave= parameters;



AddLowEnergyConstraint=True;
RhoParameterAtTreeLevel;

Off[FileByteCount::nffil];

If[FileByteCount[SPhenoFile]===$Failed,
Print["File for SPheno-Output does not exist!"];
AbortStartSPheno=True;,
Get[SPhenoFile];
If[SA`Version === "SARAHVERSION",FlagLoopContributions=True;];
];

If[EXTPAR==={},
Clear[EXTPAR];
];
If[SupersymmetricModel===True,
Include2LoopCorrections=True;,
Include2LoopCorrections=False;
];

(* If[OnlyLowEnergySPheno=!=True, *)
GenerateMatchingConditions;
(* ]; *)

If[AlwaysInclude2Loop===True,
Include2LoopCorrections=True;
];

If[UseHiggs2LoopMSSM===True || Use2LoopFromLiterature===True,
UseHiggs2LoopMSSM=True;
];

If[Head[BoundaryRenScale]===List  && SupersymmetricModel==False,
BoundarySUSYScale=BoundaryRenScale;
];

If[SPhenoOnlyForHM===True,
OnlyLowEnergySPheno=True;
UseHiggs2LoopMSSM = False;
Clear[BoundaryLowScaleInput];
ParametersToSolveTadpolesLowScaleInput=ParametersToSolveTadpolesLowScaleInputHM ;
ParametersToSolveTadpoles=ParametersToSolveTadpolesHM ;
];


NameForModel = ModelName;

If[AbortStartSPheno==False,

If[Length[Thresholds]>0,
GenerateInformationForThresholds;
SetOptions[CalcRGEs,VariableGenerations->ThresholdParticles];
SetOptions[CalcRGEs,WriteFunctionsToRun->False];
ImplementThresholds=True;,
ImplementThresholds=False;
];

If[Head[HeavyFields]===List && IntermediateScale ==True,
temp = {};
For[i=1,i<=Length[HeavyFields],
If[Head[HeavyFields[[i]]]===Symbol,
temp = Join[temp,{HeavyFields[[i]]}];
getStartHeavy[HeavyFields[[i]]]=1;,
temp = Join[temp,{HeavyFields[[i,0]]}];
StartGenHeavyField[HeavyFields[[i,0]]]=HeavyFields[[i,1]];
getStartHeavy[HeavyFields[[i,0]]]=HeavyFields[[i,1]];
];
i++;];

HeavyFields=temp;

SetOptions[CalcLoopCorrections,OnlyWith->HeavyFields];
];


If[IntermediateScale ===True,
SuffixRegime="R"<>ToString[RegimeNr];
If[Head[HeavyFields]===List,
(* ModelOutput[Eigenstates, ReadLists\[Rule]ReadL, IncludeLoopCorrections \[Rule]True,IncludeRGEs\[Rule]True, VerticesForLoops\[Rule]True,IncludeVertices\[Rule]True];  *)
 ModelOutput[Eigenstates, ReadLists->ReadL, IncludeLoopCorrections ->False,IncludeRGEs->True, VerticesForLoops->False,IncludeVertices->False];
getUnmixedMassesDummy[Eigenstates]; ,
 ModelOutput[Eigenstates, ReadLists->ReadL, IncludeLoopCorrections ->False,IncludeRGEs->True, VerticesForLoops->False,IncludeVertices->False]; 
];,


If[OnlyLowEnergySPheno===True,
If[SA`AddOneLoopDecay===True,
Print[" Include 1-loop RGEs to check cancellations of divergencies"];
ModelOutput[Eigenstates, ReadLists->ReadL, IncludeLoopCorrections ->True,IncludeRGEs->True,VerticesForLoops->True,TwoLoopRGEs->False];,
MakeDummyListRGEs;
ModelOutput[Eigenstates, ReadLists->ReadL, IncludeLoopCorrections ->True,IncludeRGEs->False,VerticesForLoops->True];
];,
ModelOutput[Eigenstates, ReadLists->ReadL, IncludeLoopCorrections ->True,IncludeRGEs->True, VerticesForLoops->True];
];

 (* ModelOutput[Eigenstates, ReadLists\[Rule]ReadL, IncludeLoopCorrections \[Rule]True,IncludeRGEs\[Rule]True, VerticesForLoops\[Rule]True];  *)
SuffixRegime="";
];

If[IntermediateScale =!=True,CreateTeXForm;];

If[OutputSeparateSPhenoDir===True,
$sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"<>ModelName}];,
$sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}];
];


If[FileExistsQ[$sarahCurrentSPhenoDir]=!=True,
CreateDirectory[$sarahCurrentSPhenoDir];,
DeleteDirectory[$sarahCurrentSPhenoDir,DeleteContents->True];
CreateDirectory[$sarahCurrentSPhenoDir];
];

(*
Print["--------------------------------"];
Print["Generate SPheno Source Code"];
Print["--------------------------------"];
*)

Print[];
Print[StyleForm["Preparing SPheno code","Section",FontSize->12]];

SPhenoParameters = parameters;

NewNumericalDependences ={};
NewNumericalDependencesSub = {};

temp  ={};
For[i=1,i<=Length[subDependencesSPheno],
If[FreeQ[parameters,subDependencesSPheno[[i,1]]]==False,
temp = Join[temp,{subDependencesSPheno[[i]]}];
];
i++;];
subDependencesSPheno = temp;

If[AuxiliaryHyperchargeCoupling, 
hyperchargeCoupling = gYaux;
hyperchargeAuxParameters =Intersection[Cases[Flatten[{ExpressionAuxHypercharge}],x_?((Head[#]===Symbol&& FreeQ[Transpose[parameters][[1]],#]==False)&),5]];
];

For[i=1,i<=Length[rotationAngleGaugeBoson],
NewNumericalDependences =Join[NewNumericalDependences ,{{rotationAngleGaugeBoson[[i]],rotationAngleGaugeBoson[[i]]/.subNumDependences}}];
NewNumericalDependencesSub = Join[NewNumericalDependencesSub,{rotationAngleGaugeBoson[[i]]->(rotationAngleGaugeBoson[[i]]/.subNumDependences)}];
i++;
];

If[Length[Thresholds]>0,
GenerateInformationForThresholds;
SetOptions[CalcRGEs,VariableGenerations->ThresholdParticles];
SetOptions[CalcRGEs,WriteFunctionsToRun->False];
ImplementThresholds=True;,
ImplementThresholds=False;
];



MakeSPhenoFortran;



SameTadpoleSolutions=False;
SeveralIndependentTadpoleSolutionsSave=SeveralIndependentTadpoleSolutions;
If[Head[ParametersToSolveTadpolesLowScaleInput]===List && FreeQ[Particles[ALL],VEV]===False && UseGivenTadpoleSolutionLowScale=!=True && Complement[ParametersToSolveTadpoles,ParametersToSolveTadpolesLowScaleInput]=!={},
SolveTadpoleEquation[Eigenstates,ParametersToSolveTadpolesLowScaleInput];

SeveralIndependentTadpoleSolutionsLowScale = SeveralIndependentTadpoleSolutions;
SeveralIndependentTadpoleSolutions=SeveralIndependentTadpoleSolutionsSave;
SubSolutionsTadpolesTreeLowScale = SubSolutionsTadpolesTree; 
SubSolutionsTadpolesLoopLowScale = SubSolutionsTadpolesLoop;,
SameTadpoleSolutions=True;
ParametersToSolveTadpolesLowScaleInput = ParametersToSolveTadpoles;
SeveralIndependentTadpoleSolutionsLowScale = SeveralIndependentTadpoleSolutions;
InitializationTadpoleParametersLowScaleInput=InitializationTadpoleParameters;
];


If[FreeQ[Particles[ALL],VEV]===False && UseGivenTadpoleSolution=!=True,
SolveTadpoleEquation[Eigenstates,ParametersToSolveTadpoles];

If[SameTadpoleSolutions,
SubSolutionsTadpolesTreeLowScale = SubSolutionsTadpolesTree; 
SubSolutionsTadpolesLoopLowScale = SubSolutionsTadpolesLoop;
];,
If[UseGivenTadpoleSolution===True,
SA`NrTadpoleEquations=Length[SubSolutionsTadpolesTree];
If[(Head[SubSolutionsTadpolesLoop]=!=List) || (Length[SubSolutionsTadpolesLoop]<Length[SubSolutionsTadpolesTree]),
SubSolutionsTadpolesLoop = SubSolutionsTadpolesTree;
SubSolutionsTadpolesLoopLowScale = SubSolutionsTadpolesTree;
];
];
];



CheckSMrges;

If[IntermediateScale =!=True, InitSMParameters[Eigenstates];];
If[OnlyLowEnergySPheno=!=True,
InitInfoForSPheno[Eigenstates];
];


If[Head[RealParameters]===List,
realVar = Join[realVar,RealParameters];
];

If[Head[RegimeNr]==Integer,
If[IntermediateScale =!=True,
(* $sarahMetaDir=ToFileName[{ToFileName[{$sarahModelDir,Modelname}],"Meta"}]; *)
 $sarahMetaDir=ToFileName[{$sarahCurrentModelMainDir,"Meta"}];
If[FileExistsQ[$sarahMetaDir]=!=True,CreateDirectory[$sarahMetaDir];];
Print["-------------------------------------------------- "];
Print["Evaluating all Regimes: This can last some time!"];
Print["A new Mathematica Kernel is started."];
Print["Progress can be supervised in ", $sarahMetaDir];
Print["-------------------------------------------------- "];
ListFormerParameters = LowScaleParameter;
For[i=RegimeNr-1,i>= 1,
Print["Current Regime: ", i];
CalculateIntermediateScale[i,ReadL];
Print["...  finished!"];
Print[""];
i--;];

DimensionsOtherRegimes = Table[{},{RegimeNr}];
GenerationsOfHeavyFieldsAllRegimes = Table[{},{RegimeNr}];
LowScaleParametersAllRegimes= Table[{},{RegimeNr}];
HighScaleParametersAllRegimes= Table[{},{RegimeNr}];
HighScaleParametersAllwithVEVsRegimes= Table[{},{RegimeNr}];
NumberLowAllRegimes= Table[{},{RegimeNr}];
NumberHighAllRegimes= Table[{},{RegimeNr}];
NumberAllwithVEVsAllRegimes= Table[{},{RegimeNr}];
ListOfRegimeEigenstates = Table[{},{RegimeNr}];
ListOfAdditionalParameters ={};
ListVEVsAllRegimes = Table[{},{RegimeNr}];
GaugeCouplingsAllRegimes= Table[{},{RegimeNr}];
GauginosAllRegimes= Table[{},{RegimeNr}];
GroupFactorHeavyFields= Table[{},{RegimeNr}];
YukawaCouplingsAllRegimes= Table[{},{RegimeNr}];
LHnamesAllRegimes= Table[{},{RegimeNr}];
GFnamesAllRegimes= Table[{},{RegimeNr}];


ParametersToSolveTadpolesAllRegimes= Table[{},{RegimeNr}];


GaugeCouplingsAllRegimes[[RegimeNr]]=Intersection[Table[Gauge[[i,4]],{i,1,AnzahlGauge}]];
GauginosAllRegimes[[RegimeNr]]=Intersection[Table[MassGauge[i],{i,1,AnzahlGauge}]];
ParametersToSolveTadpolesAllRegimes[[RegimeNr]] = ParametersToSolveTadpoles;

Print["Reading information of all Regimes"];

For[i=1,i<RegimeNr,
ReadInformationOtherRegimes[i];
i++;];
AdditionalFortranForm;
];
];


CheckDefinitionParameters;

InitInputOutput;
GenerateSPhenoRGEs; 


GenerateSPhenoTreeMasses[Eigenstates];
If[IntermediateScale=!= True,
GenerateSPhenoCouplingList;
GenerateSPhenoLoopCouplings[Eigenstates];


If[Include2LoopCorrections=!=False,
GenerateSPhenoEffPot;
GenerateSPheno2LPole[ReadL];
];
GenerateSPhenoLoopMasses[Eigenstates];

GenerateSPhenoTreeLevelDecays[Eigenstates];
If[SA`AddOneLoopDecay === True,
GenerateSPhenoOneLoopDecays[Eigenstates];
];
GenerateSPhenoBR[Eigenstates];

If[SPhenoOnlyForHM=!=True,
GenerateSPhenoHiggsCS[Eigenstates];
];

MakePDGList[Eigenstates];
MakeModelData;
If[OnlyLowEnergySPheno=!=True,
GenerateBoundaries;
];

If[SPhenoOnlyForHM=!=True,
If[SPhenoLowEnergyIncluded =!=True, AddLowEnergyConstraint=False;];
If[AddLowEnergyConstraint ===True, 
GenerateSPhenoLowEnergy;
];
];

GenerateInOut;
];
GenerateSPhenoTadpoleInformation;

If[IncludeFineTuning===True,
GenerateFineTuning;
];

If[IntermediateScale=!= True,
GenerateSPhenoMain[NameForModel];
WriteRunRGEsSM;

GenerateSPhenoRunningCouplingsDecay;



GenerateLesHouchesFile;
GenerateMakeFile[NameForModel,scompiler];

If[SPhenoOnlyForHM=!=True,
If[UseHiggs2LoopMSSM==True,CreateHiggs2Loop;];
];

If[Head[RegimeNr]===Integer,MakeShiftsFile;];,
GenerateSPhenoMassShift[Eigenstates];
WriteMetaInformation[RegimeNr,Eigenstates];
];


If[ThreeIndexParametersInvolved===True,
BetaLijkl=BetaLijklSave;
BetaYijk=BetaYijkSave;
BetaTijk=BetaTijkSave;
BetaMuij=BetaMuijSave;
BetaBij=BetaBijSave;
BetaMi=BetaMiSave;
Betam2ij=Betam2ijSave;
BetaGauge=BetaGaugeSave;
BetaVEV=BetaVEVSave;
TraceAbbr=TraceAbbrSave;
Gij=GijSave;
];

If[SA`SPhenoCleanUp==True,
SARAHFortran=False;
parameters= parametersSave;
];

Print[""];
Print["Finished! SPheno code generated in ",TimeUsed[]-startedtime,"s"];
Print["Output saved in ",StyleForm[$sarahCurrentSPhenoDir,"Section",FontSize->10] ];
Print[""];
Print["The following steps are now necessary to implement the model in SPheno: "];
Print["  1. Copy the created files to a new subdirectory \"/",NameForModel,"\" of your SPheno "<>ToString[StyleForm["3.3.8 (or later)","Section",FontSize->10]]<>" installation"];
Print["  2. Compile the model by using "];
Print["        make Model=",NameForModel];
Print["     in the main directory of SPheno"];

If[WriteModelDirectories==True,
WriteString[DirectoryNamesFile,"SPhenoDir="<>ToString[$sarahCurrentSPhenoDir] <>"\n"];
WriteString[DirectoryNamesFile,"NumberChargedHiggs="<>ToString[SA`NumberChargedHiggs] <>"\n"];
WriteString[DirectoryNamesFile,"NumberNeutralHiggs="<>ToString[SA`NumberNeutralHiggs] <>"\n"];
];
];

];


(* ::Input::Initialization:: *)
SolveTadpoleEquation[Eigenstates_,parameters_]:=Block[{i,j,k,off,TEquLocal, subReal,i1,i2,temp,pos,parName},
Print["  Solve tadpole equations for: ",parameters,"  (",Dynamic[DynamicStatusSPhenoTad[parameters]],") "];
DynamicStatusSPhenoTad[parameters]="preparing equations";
resLoop={};
resTree={};
EquLoop={};
EquTree={};
SquaredParametersTadpoles={};

temp={};
tempWF={};
basis={};
vevs={};

For[k=1,k<=Length[NameOfStates],
If[Head[TadpoleEquations[NameOfStates[[k]]]]===List,
temp=Join[temp,TadpoleEquations[NameOfStates[[k]]]];
tempWF=SA`TadpoleEquationsWithField[NameOfStates[[k]]];
];
If[Head[DEFINITION[NameOfStates[[k]]][MatterSector]]===List,
basis=Join[basis,DEFINITION[NameOfStates[[k]]][MatterSector]];
];
If[Head[DEFINITION[NameOfStates[[k]]][VEVs]]===List,
vevs=Join[vevs,DEFINITION[NameOfStates[[k]]][VEVs]];
];
k++;];

TEquLocal={};
vevWithGen={};

For[i=1,i<=Length[tempWF],
For[j=1,j<=getGenALL[tempWF[[i,1]]],
TEquLocal = Join[TEquLocal, {tempWF[[i,2]] //. {gt1->j}//. sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]}];
If[getGenALL[tempWF[[i,1]]]===1,
vevWithGen=Join[vevWithGen,{tempWF[[i,1]]}];,
vevWithGen = Join[vevWithGen,{tempWF[[i,1]][j]}];
];
j++;];
i++;];

TEquSave=TEquLocal;

(* to match calculated correction to the right vev *)
vcount=1;
vevTemp=Map[Sort[#,(Position[basis,vevs[[Position[vevs,#][[1,1]]]][[4,1]]][[1,3]]<Position[basis,vevs[[Position[vevs,#2][[1,1]]]][[4,1]]][[1,3]])&]&,listVEVseparated];
subTadpoleNumber={};
For[i=1,i<=Length[ScalarsForTadpoles],
(* For[j=1,j\[LessEqual]Length[listVEVseparated[[i]]], *)
If[FreeQ[basis,ScalarsForTadpoles[[i]]],
currentbasis={ScalarsForTadpoles[[i]]};,
pos=Position[basis,ScalarsForTadpoles[[i]]][[1,1]];
currentbasis=basis[[pos]][[1]];
];

For[j=1,j<=Length[currentbasis],
If[getGenALL[currentbasis[[j]]]===1,
subTadpoleNumber = Join[subTadpoleNumber,{currentbasis[[j]]->vcount}];
vcount++;,
For[k=1,k<=getGenALL[currentbasis[[j]]],
subTadpoleNumber = Join[subTadpoleNumber,{currentbasis[[j]][k]->vcount}];
vcount++;
k++;];
];
j++;];
i++;];

For[i=1,i<=Length[TEquLocal],
If[TEquLocal[[i]]=!=0,
EquLoop = Join[EquLoop,{TEquLocal[[i]]-Tad1Loop[vevWithGen[[i]]  /. subTadpoleNumber]==0}];
EquTree = Join[EquTree,{TEquLocal[[i]]==0}];
];
i++;];

If[subTadpoleNumber==={},
EquLoop=EquTree;
];

(*
EquLoop = EquLoop;
EquTree = EquTree;
*)

SA`NrTadpoleEquations=Length[TEquLocal];

subReal = {};
subSPhenoForm={};
subSPhenoFormBack={};
subGenParameters={};
subReImPar={};


For[i=1,i<=Length[parameters],
If[Head[parameters[[i]]]===re || Head[parameters[[i]]]===im,
temp = parameters[[i,1]] /. a_[b_Integer]->a  /. a_[b_Integer,c_Integer]->a;
subReal=Join[subReal,{conj[ToExpression["re"<>SPhenoForm[temp]]]->ToExpression["re"<>SPhenoForm[temp]],conj[ToExpression["im"<>SPhenoForm[temp]]]->ToExpression["im"<>SPhenoForm[temp]],conj[ToExpression["re"<>SPhenoForm[temp]][a__Integer]]->ToExpression["re"<>SPhenoForm[temp]][a],conj[ToExpression["im"<>SPhenoForm[temp]][a__Integer]]->ToExpression["im"<>SPhenoForm[temp]][a]}];
subReImPar=Join[subReImPar,{re[temp]->ToExpression["re"<>SPhenoForm[temp]],im[temp]->ToExpression["im"<>SPhenoForm[temp]],
re[temp[a__Integer]]->ToExpression["re"<>SPhenoForm[temp]][a],im[temp[a__Integer]]->ToExpression["im"<>SPhenoForm[temp]][a]}];
subSPhenoForm=Join[subSPhenoForm,{temp[a__Integer]-> ToExpression["re"<>SPhenoForm[temp]][a]+I ToExpression["im"<>SPhenoForm[temp]][a],temp-> ToExpression["re"<>SPhenoForm[temp]]+I ToExpression["im"<>SPhenoForm[temp]]}];
subSPhenoFormBack=Join[subSPhenoFormBack,{ToExpression["re"<>SPhenoForm[temp]][a__Integer]->re[temp[a]],ToExpression["im"<>SPhenoForm[temp]][a__Integer]->im[temp[a]],ToExpression["re"<>SPhenoForm[temp]]->re[temp],ToExpression["im"<>SPhenoForm[temp]]->im[temp]}];
If[getDimSPheno[parameters[[i,1]]]=!={1} && getDimSPheno[parameters[[i,1]]]=!={} && Length[getDimSPheno[parameters[[i,1]]]]==1,
subGenParameters = Join[subGenParameters,{parameters[[i,1]]-> Table[parameters[[i,1]][k],{k,1,getDimSPheno[parameters[[i,1]]][[1]]}]}];
];,
subReal = Join[subReal,{conj[parameters[[i]]]->parameters[[i]], conj[parameters[[i]][a__Integer]]->parameters[[i]][a]}];
temp = parameters[[i]] /. a_[b_Integer]->a  /. a_[b_Integer,c_Integer]->a;
If[Head[temp]=!=Symbol,
subSPhenoForm=Join[subSPhenoForm,{temp-> ToExpression[SPhenoForm[temp]]}];
subSPhenoFormBack=Join[subSPhenoFormBack,{ToExpression[SPhenoForm[temp]]->temp}];,
If[FreeQ[ParameterDefinitions,T[temp]] ==False && FreeQ[parameters,T[temp]],
subSPhenoForm=Join[subSPhenoForm,{T[temp]-> ToExpression[SPhenoForm[T[temp]]]}];
subSPhenoFormBack=Join[subSPhenoFormBack,{ToExpression[SPhenoForm[T[temp]]]->T[temp]}];
];
If[FreeQ[ParameterDefinitions,B[temp]] ==False && FreeQ[parameters,B[temp]],
subSPhenoForm=Join[subSPhenoForm,{B[temp]-> ToExpression[SPhenoForm[B[temp]]]}];
subSPhenoFormBack=Join[subSPhenoFormBack,{ToExpression[SPhenoForm[B[temp]]]->B[temp]}];
];
If[FreeQ[ParameterDefinitions,L[temp]] ==False && FreeQ[parameters,L[temp]],
subSPhenoForm=Join[subSPhenoForm,{L[temp]-> ToExpression[SPhenoForm[L[temp]]]}];
subSPhenoFormBack=Join[subSPhenoFormBack,{ToExpression[SPhenoForm[L[temp]]]->L[temp]}];
];
];
If[getDimSPheno[parameters[[i]]]=!={1} && getDimSPheno[parameters[[i]]]=!={} && getDimSPheno[parameters[[i]]]=!={0},
If[Length[getDimSPheno[parameters[[i]]]]==1,subGenParameters = Join[subGenParameters,{parameters[[i]]-> Table[parameters[[i]][k],{k,1,getDimSPheno[parameters[[i]]][[1]]}]}];];
];
];
i++;];

subSquaredPar1={};
subSquaredPar2={};
NewParametersFromTadpoles={};
SignumsTadpoles={};

(*
EquLoop = EquLoop /. subReal  /. subSPhenoForm/. conj[x_]\[Rule]x ;
EquTree = EquTree /. subReal  /. subSPhenoForm/. conj[x_]\[Rule]x;
*)

EquLoop = EquLoop /. subReal  /. subSPhenoForm/. subReal //. sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]  //. AssumptionsTadpoleEquations;
EquTree = EquTree /. subReal  /. subSPhenoForm/. subReal//. sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]  //. AssumptionsTadpoleEquations;

If[NumericalSolutionTadpoleEquations=!=True,
SquaredParameterInvolved=0;
For[i=1,i<=Length[parameters],
If[FreeQ[(EquLoop /. conj[x_]->x),(parameters[[i]]/.subSPhenoForm)^2]==False && FreeQ[(EquLoop /. conj[x_]->x /. (parameters[[i]]/.subSPhenoForm)^2->abs),(parameters[[i]]/.subSPhenoForm)]==True,
SquaredParameterInvolved++;
];
i++;];


DynamicStatusSPhenoTad[parameters]="solve equations";
resTree=Solve[EquTree,Flatten[(parameters /.subReImPar    /. subGenParameters /. subSPhenoForm)]]/. subSPhenoFormBack;
resLoop=Solve[EquLoop,Flatten[(parameters /.subReImPar  /. subGenParameters /. subSPhenoForm )]] /. subSPhenoFormBack;

If[Length[resLoop]> 1 && Length[resLoop]==2^SquaredParameterInvolved,
SubSolutionsTadpolesLoop={};
SubSolutionsTadpolesTree={};
For[i=1,i<=Length[resLoop[[1]]],
If[FreeQ[EquLoop,(resLoop[[1,i,1]]^2 /. subSPhenoForm)] || FreeQ[EquLoop /. (resLoop[[1,i,1]]^2 /. subSPhenoForm)->AbsP,(resLoop[[1,i,1]] /. subSPhenoForm)] ==False,
SubSolutionsTadpolesLoop=Join[SubSolutionsTadpolesLoop,{resLoop[[1,i]]}];
SubSolutionsTadpolesTree=Join[SubSolutionsTadpolesTree,{resTree[[1,i]]}];,
absName = ToExpression["Abs2"<>SPhenoForm[resLoop[[1,i,1]]]];
phaseName=ToExpression["Signum"<>SPhenoForm[resLoop[[1,i,1]]]];
SignumsTadpoles = Join[SignumsTadpoles,{{resLoop[[1,i,1]], phaseName}}];
SquaredParametersTadpoles=Join[SquaredParametersTadpoles,{{absName,resLoop[[1,i,1]],phaseName}}];
NewParametersFromTadpoles=Join[NewParametersFromTadpoles,{absName}];
SPhenoParameters = Join[SPhenoParameters,{{absName,{},{}}}];
realVar=Join[realVar,{absName}]; 
SubSolutionsTadpolesLoop=Join[SubSolutionsTadpolesLoop,{absName->resLoop[[1,i,2]]^2,resLoop[[1,i,1]]->phaseName*Sqrt[absName]}];
SubSolutionsTadpolesTree=Join[SubSolutionsTadpolesTree,{absName->resTree[[1,i,2]]^2,resTree[[1,i,1]]->phaseName*Sqrt[absName]}]; 
];
i++;];,
If[Length[resLoop]>1 ,
SeveralIndependentTadpoleSolutions=True;
SubSolutionsTadpolesTree=resTree;
If[Length[resLoop]>Length[resTree],
SubSolutionsTadpolesLoop={};
For[i=1,i<=Length[resTree],
added=False;
For[j=1,j<=Length[resLoop],
If[added==False,
If[Intersection[Simplify[resTree[[i]]-(resLoop[[j]]  /. Tad1Loop[a_]->0)]]==={0},
added=True;
SubSolutionsTadpolesLoop = Join[SubSolutionsTadpolesLoop,{resLoop[[j]]}];
];
];
j++;];
i++;];,
SubSolutionsTadpolesLoop=resLoop ;
SubSolutionsTadpolesTree=resTree; 
];,
SeveralIndependentTadpoleSolutions=False;
SubSolutionsTadpolesLoop=Flatten[resLoop] ;
SubSolutionsTadpolesTree=Flatten[resTree]; 
];
];

If[SubSolutionsTadpolesLoop=={},
Message[SPheno::Tadpoles, parameters];
];

(* Print["   Simplify solutions"]; *)
DynamicStatusSPhenoTad[parameters]="simplify solutions";

If[SPhenoOnlyForHM=!=True,
If[SA`SimplifyTadpoleSolutions=!=False,
SubSolutionsTadpolesLoop=Simplify[Map[Expand,SubSolutionsTadpolesLoop,3] //. Power[a__, Rational[-1,2]]-> 1/sqrt[a] //. Sqrt[a_]->sqrt[a] //.  sqrt[a_] sqrt[b_]->sqrt[a b] //. sqrt[a_] / sqrt[b_] -> sqrt[a/b] //. sqrt ->Sqrt];
SubSolutionsTadpolesTree=Simplify[Map[Expand,SubSolutionsTadpolesTree,3]//. Power[a__, Rational[-1,2]]-> 1/sqrt[a] //. Sqrt[a_]->sqrt[a] //.  sqrt[a_] sqrt[b_]->sqrt[a b] //. sqrt[a_] / sqrt[b_] -> sqrt[a/b] //. sqrt ->Sqrt];,
SubSolutionsTadpolesLoop=Expand[Map[Expand,SubSolutionsTadpolesLoop,3] //. Power[a__, Rational[-1,2]]-> 1/sqrt[a] //. Sqrt[a_]->sqrt[a] //.  sqrt[a_] sqrt[b_]->sqrt[a b] //. sqrt[a_] / sqrt[b_] -> sqrt[a/b] //. sqrt ->Sqrt];
SubSolutionsTadpolesTree=Expand[Map[Expand,SubSolutionsTadpolesTree,3]//. Power[a__, Rational[-1,2]]-> 1/sqrt[a] //. Sqrt[a_]->sqrt[a] //.  sqrt[a_] sqrt[b_]->sqrt[a b] //. sqrt[a_] / sqrt[b_] -> sqrt[a/b] //. sqrt ->Sqrt]; 
];
];,
SubSolutionsTadpolesLoop = {};
SubSolutionsTadpolesTree = {};
];

If[Head[AftermathTadpoles]===List,
If[Head[SubSolutionsTadpolesLoop[[1]]]===Rule,
SubSolutionsTadpolesLoop=Join[SubSolutionsTadpolesLoop,AftermathTadpoles];
SubSolutionsTadpolesTree=Join[SubSolutionsTadpolesTree,AftermathTadpoles];,
SubSolutionsTadpolesLoop=Join[#,AftermathTadpoles]&/@SubSolutionsTadpolesLoop;
SubSolutionsTadpolesTree=Join[#,AftermathTadpoles]&/@SubSolutionsTadpolesTree;
];
];

];




InitInfoForSPheno[Eigenstates_]:=Block[{i,pos,tempName,i1,i2,neededParameters,neededParameterNames,namelist,length},
If[IntermediateScale=!=True,
(*If[AuxiliaryHyperchargeCoupling=!=True,
If[AddOHDM=!=True,
neededParameters={UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling,ElectronMatrixL,ElectronMatrixR,DownMatrixL,DownMatrixR,UpMatrixL,UpMatrixR,VEVSM1,VEVSM2,HiggsMixingMatrix};
neededParameterNames={"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Hypercharge-Coupling","Left-Coupling","Strong-Coupling","Left-Lepton-Mixing-Matrix","Right-Lepton-Mixing-Matrix","Left-Down-Mixing-Matrix","Right-Down-Mixing-Matrix","Left-Up-Mixing-Matrix","Right-Up-Mixing-Matrix","Down-VEV","Up-VEV","Scalar-Mixing-Matrix"};,
neededParameters={UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling,ElectronMatrixL,ElectronMatrixR,DownMatrixL,DownMatrixR,UpMatrixL,UpMatrixR,VEVSM};
neededParameterNames={"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Hypercharge-Coupling","Left-Coupling","Strong-Coupling","Left-Lepton-Mixing-Matrix","Right-Lepton-Mixing-Matrix","Left-Down-Mixing-Matrix","Right-Down-Mixing-Matrix","Left-Up-Mixing-Matrix","Right-Up-Mixing-Matrix","EW-VEV"};
];,
If[AddOHDM=!=True,
neededParameters=Flatten[{UpYukawa,DownYukawa,ElectronYukawa,leftCoupling,strongCoupling,ElectronMatrixL,ElectronMatrixR,DownMatrixL,DownMatrixR,UpMatrixL,UpMatrixR,VEVSM1,VEVSM2,HiggsMixingMatrix,hyperchargeAuxParameters}];
neededParameterNames={"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Left-Coupling","Strong-Coupling","Left-Lepton-Mixing-Matrix","Right-Lepton-Mixing-Matrix","Left-Down-Mixing-Matrix","Right-Down-Mixing-Matrix","Left-Up-Mixing-Matrix","Right-Up-Mixing-Matrix","Down-VEV","Up-VEV","Scalar-Mixing-Matrix"};,
neededParameters=Flatten[{UpYukawa,DownYukawa,ElectronYukawa,leftCoupling,strongCoupling,ElectronMatrixL,ElectronMatrixR,DownMatrixL,DownMatrixR,UpMatrixL,UpMatrixR,VEVSM,hyperchargeAuxParameters}];
neededParameterNames={"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Left-Coupling","Strong-Coupling","Left-Lepton-Mixing-Matrix","Right-Lepton-Mixing-Matrix","Left-Down-Mixing-Matrix","Right-Down-Mixing-Matrix","Left-Up-Mixing-Matrix","Right-Up-Mixing-Matrix","EW-VEV"};
];
];

If[DEFINITION[UseNonStandardYukwas]===True,
neededParameters=DeleteCases[neededParameters,UpYukawa|DownYukawa|ElectronYukawa];
neededParameterNames=DeleteCases[neededParameterNames,"Up-Yukawa-Coupling"|"Down-Yukawa-Coupling"|"Lepton-Yukawa-Coupling"];
neededParameters=Join[neededParameters,DEFINITION[NonStandardYukawas]];
neededParameterNames=Join[neededParameterNames,ToString/@DEFINITION[NonStandardYukawas]];
];

If[Head[DEFINITION[MoreEWvevs]]===List,
neededParameters=DeleteCases[neededParameters,VEVSM|VEVSM1|VEVSM2];
neededParameterNames=DeleteCases[neededParameterNames,"EW-VEV"|"Down-VEV"|"Up-VEV"];
];
*)

neededParameters={ElectronMatrixL,ElectronMatrixR,DownMatrixL,DownMatrixR,UpMatrixL,UpMatrixR,HiggsMixingMatrix};
neededParameterNames={"Left-Lepton-Mixing-Matrix","Right-Lepton-Mixing-Matrix","Left-Down-Mixing-Matrix","Right-Down-Mixing-Matrix","Left-Up-Mixing-Matrix","Right-Up-Mixing-Matrix","Scalar-Mixing-Matrix"};

For[i=1,i<=Length[neededParameters],
If[FreeQ[parameters,neededParameters[[i]]],
Message[SPheno::UndefinedParameter,neededParameterNames[[i]]];
];
i++;];

neededParameters={Electron,BottomQuark,TopQuark,VectorP,VectorG,VectorW,VectorZ,HiggsBoson,Neutrino};
neededParameterNames={"Leptons","Down-Quarks","Up-Quarks","Photon","Gluon","W-Boson","Z-Boson","Higgs","Neutrinos"};


namelist=getParticleNameDirac /@ Table[Particles[Eigenstates][[i,1]],{i,1,Length[Particles[EWSB]]}];
For[i=1,i<=Length[neededParameters],
If[FreeQ[namelist,neededParameters[[i]]] &&  FreeQ[Particles[Eigenstates],neededParameters[[i]]] ,
Message[SPheno::UndefinedParticle,neededParameterNames[[i]]];
];
i++;];
];

(* checking for deviations of Z and W mass from SM *)

If[IntermediateScale=!=True  &&OnlyLowEnergySPheno=!=True,
If[AddOHDM=!=True,
MZ2sm=(VEVSM1^2+VEVSM2^2)/4*(hyperchargeCoupling Sin[Weinberg]+leftCoupling Cos[Weinberg])^2;
MW2sm=(VEVSM1^2+VEVSM2^2)/4*(leftCoupling)^2;,
MZ2sm=(VEVSM^2)/4*(hyperchargeCoupling Sin[Weinberg]+leftCoupling Cos[Weinberg])^2;
MW2sm=(VEVSM^2)/4*(leftCoupling)^2;
];
MZ2current=-Vertex[{VectorZ,VectorZ}][[2,1]];
MW2current=-Vertex[{VectorW,conj[VectorW]}][[2,1]];


OffSetZ2 = Simplify[MZ2sm -MZ2current];
OffSetW2 = Simplify[MW2sm -MW2current];

OffSetTW = Simplify[(MW2current-(1 - Sin[Weinberg]^2)MZ2current) /. subDependences];

If[OffSetZ2===0,SA`OffMZ2 = "0._dp";,SA`OffMZ2=SPhenoForm[OffSetZ2];];
If[OffSetW2===0,
SA`OffMW2 = "0._dp";
SA`OffSetVEV="0._dp";,
SA`OffMW2=SPhenoForm[OffSetW2];
SA`OffSetVEV="("<>SPhenoForm[FullSimplify[-4 OffSetW2/(leftCoupling)^2 //.sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]]]<>")";
];
If[OffSetTW ===0, SA`OffTW = "0._dp";,SA`OffTW=SPhenoForm[OffSetTW];];



];


Print["  Build parameter lists"];
SeveralBoundaryConditions=False;

realVar = Join[realVar,{RealParameters}];

If[Depth[BoundaryHighScale]>2,
If[BoundaryHighScale[[1]]=!={},
If[Head[BoundaryHighScale[[1,1]]]===List,SeveralBoundaryConditions=True; length=Length[BoundaryHighScale];];
];
];
If[Depth[BoundarySUSYScale]>2,
If[BoundarySUSYScale[[1]]=!={},
If[Head[BoundarySUSYScale[[1,1]]]===List,SeveralBoundaryConditions=True; length=Length[BoundaryHighScale];];
];
];
If[Depth[BoundaryEWSBScale]>2,
If[BoundaryEWSBScale[[1]]=!={},
If[Head[BoundaryEWSBScale[[1,1]]]===List,SeveralBoundaryConditions=True; length=Length[BoundaryHighScale];];
];
];

If[SeveralBoundaryConditions==True,
If[Head[BoundaryHighScale]=!=List,BoundaryHighScale=Table[{},{length}];];
If[Head[BoundarySUSYScale]=!=List,BoundarySUSYScale=Table[{},{length}];];
If[Head[BoundaryEWSBScale]=!=List,BoundaryEWSBScale=Table[{},{length}];];
];


If[SeveralBoundaryConditions==True,
If[BoundarySUSYScale=!={} && Head[BoundarySUSYScale]===List,BoundarySUSY=BoundarySUSYScale[[1]];];
If[BoundaryEWSBScale=!={} && Head[BoundaryEWSBScale]===List,BoundaryEWSB=BoundaryEWSBScale[[1]];];
If[BoundaryHighScale=!={} && Head[BoundaryHighScale]===List,BoundaryHigh=BoundaryHighScale[[1]];];,
BoundarySUSY=BoundarySUSYScale;
BoundaryEWSB=BoundaryEWSBScale;
BoundaryHigh=BoundaryHighScale;
];



If[ListDecayParticles===Automatic,
TwoBDList=Automatic;
ListDecayParticles = Join[Join[Join[AllScalarNonSM,AllVectorNonSM],AllFermionNonSM],{TopQuark}];
ListDecayParticles = Select[ListDecayParticles,(getGenSPhenoStart[#]<=getGenSPheno[#])&];  (* Filter Goldstones *)
 ];

If[ListDecayParticles3B===Automatic,
ThreeBDList=Automatic;
ListDecayParticles3B={};
For[i=1,i<=Length[AllFermionNonSM],
If[FreeQ[massless,AllFermionNonSM[[i]]],
ListDecayParticles3B= Join[ListDecayParticles3B,{{AllFermionNonSM[[i]],ToString[AllFermionNonSM[[i]]]<>"_"<>ModelName<>".f90"}}];
];
i++;];

If[ListDecayParticles3B==={},
AllFermion=Intersection[RE/@(Transpose[Select[Particles[Eigenstates],getType[#[[1]]]==F&]][[1]] /. diracSubBack[ALL])];
For[i=1,i<=Length[AllFermion],
If[FreeQ[massless,AllFermion[[i]]],
ListDecayParticles3B= Join[ListDecayParticles3B,{{AllFermion[[i]],ToString[AllFermion[[i]]]<>"_"<>ModelName<>".f90"}}];
If[AllFermion[[i]]=!=TopQuark,ListDecayParticles = Join[ListDecayParticles,{AllFermion[[i]]}];];
];
i++;];
];

(* If[InlcudeBeta3Bscalar===True, *)
For[i=1,i<=Length[AllScalarNonSM],
If[FreeQ[massless,AllScalarNonSM[[i]]] && AllScalarNonSM[[i]]=!=HiggsBoson && AllScalarNonSM[[i]]=!=PseudoScalar && AllScalarNonSM[[i]]=!=ChargedHiggs,
ListDecayParticles3B= Join[ListDecayParticles3B,{{AllScalarNonSM[[i]],ToString[AllScalarNonSM[[i]]]<>"_"<>ModelName<>".f90"}}];
];
i++;];
(* ]; *)
  ]; 

If[getGen[Electron]>3,
If[TwoBDList===Automatic, ListDecayParticles = Join[ListDecayParticles,{Electron}];];
If[ThreeBDList===Automatic, ListDecayParticles3B = Join[ListDecayParticles3B,{{Electron,ToString[Electron]<>"_"<>ModelName<>".f90"}}];];
];

If[getGen[Neutrino]>3,
If[TwoBDList===Automatic, ListDecayParticles = Join[ListDecayParticles,{Neutrino}];];
If[ThreeBDList===Automatic, ListDecayParticles3B = Join[ListDecayParticles3B,{{Neutrino,ToString[Neutrino]<>"_"<>ModelName<>".f90"}}];];
];

If[getGen[BottomQuark]>3,
If[TwoBDList===Automatic, ListDecayParticles = Join[ListDecayParticles,{BottomQuark}];];
If[ThreeBDList===Automatic, ListDecayParticles3B = Join[ListDecayParticles3B,{{BottomQuark,ToString[BottomQuark]<>"_"<>ModelName<>".f90"}}];];
];

If[getGen[TopQuark]>3,
If[ThreeBDList===Automatic, ListDecayParticles3B = Join[ListDecayParticles3B,{{TopQuark,ToString[TopQuark]<>"_"<>ModelName<>".f90"}}];];
];



If[Head[LowScaleParameter]=!=List || Head[HighScaleParameter]=!=List,

NeededParametersForRGEs = {};

If[IntermediateScale ===True,
MakeListOfAllParameters;
LowScaleParameter=Select[ListAllInputParameters,(FreeQ[BCup,#]==False)&];,
(*
If[AuxiliaryHyperchargeCoupling=!=True,
LowScaleParameter = {hyperchargeCoupling,leftCoupling,strongCoupling,ElectronYukawa,DownYukawa,UpYukawa};,
LowScaleParameter = Flatten[{hyperchargeAuxParameters,leftCoupling,strongCoupling,ElectronYukawa,DownYukawa,UpYukawa}];
];
If[DEFINITION[UseNonStandardYukwas]==True,
LowScaleParameter=DeleteCases[LowScaleParameter,ElectronYukawa|DownYukawa|UpYukawa];
LowScaleParameter=Join[LowScaleParameter,DEFINITION[NonStandardYukawas]];
]; *)
LowScaleParameter=DimensionlessParametersInMatching;
];


NeededForTracesTemp={};
NeededForTraces={};

If[Head[TraceAbbr]===List,
For[i=1,i<=2,
For[j=1,j<=Length[TraceAbbr[[i]]],
NeededForTracesTemp=Join[NeededForTracesTemp,{{TraceAbbr[[i,j,1]],Select[getInvolvedParameters[TraceAbbr[[i,j,2]]],(FreeQ[Transpose[Betam2ij][[1]],#]==False)&]}}];
j++;];
i++;];
];

NeededForTraces=NeededForTracesTemp;

HighScaleParameter = Table[Gauge[[i,4]],{i,1,AnzahlGauge}];

For[i=1,i<=Length[BetaGauge],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaGauge[[i,1]],getInvolvedParameters[BetaGauge[[i]]]}}];
i++;];

If[Length[BetaLijkl]!= 0,
tempList=Transpose[BetaLijkl][[1]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaLijkl],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaLijkl[[i,1]],getInvolvedParameters[BetaLijkl[[i]]]}}];
i++;];
];

If[Length[BetaYijk]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listWtriOne /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaYijk][[1]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaYijk],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaYijk[[i,1]],getInvolvedParameters[BetaYijk[[i]]]}}];
i++;];
];

If[Length[listW4One]!= 0,
tempList=Transpose[Transpose[listW4One/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaWijkl],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaWijkl[[i,1]],getInvolvedParameters[BetaWijkl[[i]]]}}];
i++;];
];

If[Length[listA4One]!= 0,
tempList=Transpose[Transpose[listA4One/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaQijkl],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaQijkl[[i,1]],getInvolvedParameters[BetaQijkl[[i]]]}}];
i++;];
];

If[Length[BetaMuij]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listWbiOne/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaMuij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaMuij],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaMuij[[i,1]],getInvolvedParameters[BetaMuij[[i]]]}}];
i++;];

];

If[AddRGEsNonHolomorphic===True,
If[Length[BetaRijk]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listA3p/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaRijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaRijk],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaRijk[[i,1]],getInvolvedParameters[BetaTijk[[i]]]}}];
i++;];
];

If[Length[BetaMFij]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listWbip/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaMFij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaMFij],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaMFij[[i,1]],getInvolvedParameters[BetaTijk[[i]]]}}];
i++;];
];
];

If[Length[BetaTijk]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listAtriOne/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaTijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaTijk],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaTijk[[i,1]],getInvolvedParameters[BetaTijk[[i]]]}}];
i++;];
];

If[Length[BetaBij]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listAbiOne/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];,
tempList=Transpose[BetaBij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaBij],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaBij[[i,1]],getInvolvedParameters[BetaBij[[i]]]}}];
i++;];
];

If[Length[listSM]!= 0,
tempList=Transpose[listSM/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]] /. Delta[a__]->1;
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[Betam2ij],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{Betam2ij[[i,1]],getInvolvedParameters[Betam2ij[[i]]]}}];
i++;];
];

If[Length[SA`DiracGauginoMassTerms]!= 0,
tempList=SA`DiracGauginoMassTerms/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. Delta[a__]->1;
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaDGi],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaDGi[[i,1]],getInvolvedParameters[BetaDGi[[i]]]}}];
i++;];
];

If[Length[BetaFIi]!= 0,
tempList=Transpose[BetaFIi][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. Delta[a__]->1;
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaFIi],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaFIi[[i,1]],getInvolvedParameters[BetaFIi[[i]]]}}];
i++;];
];

If[Length[BetaLi]!= 0,
If[SupersymmetricModel===True,
tempList=Transpose[Transpose[listWone/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]] /. Delta[a__]->1;,
tempList=Transpose[BetaLi][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. Delta[a__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};
];
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaLi],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaLi[[i,1]],getInvolvedParameters[BetaLi[[i]]]}}];
i++;];
];

If[Length[listAone]!= 0,
tempList=Transpose[Transpose[listAone/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]] /. Delta[a__]->1;
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaLSi],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaLSi[[i,1]],getInvolvedParameters[BetaLSi[[i]]]}}];
i++;];
];



If[Length[listGM]!= 0,
tempList=Transpose[listGM/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]] /. Delta[a__]->1;
HighScaleParameter = Join[HighScaleParameter,tempList];

For[i=1,i<=Length[BetaMi],
NeededParametersForRGEs= Join[NeededParametersForRGEs,{{BetaMi[[i,1]],getInvolvedParameters[BetaMi[[i]]]}}];
i++;];

];

NeededParametersForRGEs = NeededParametersForRGEs/. A_[b_Integer]->A;

For[i=1,i<=Length[BoundaryEWSB],
If[FreeQ[HighScaleParameter,BoundaryEWSB[[i,1]]]==False,
LowScaleParameter=Join[LowScaleParameter,{BoundaryEWSB[[i,1]]}];
];
i++;];

For[i=1,i<=Length[BoundarySUSY],
If[FreeQ[HighScaleParameter,BoundarySUSY[[i,1]]]==False && FreeQ[LowScaleParameter,BoundarySUSY[[i,1]]],
LowScaleParameter=Join[LowScaleParameter,{BoundarySUSY[[i,1]]}];
];
i++;];


For[i=1,i<=Length[BoundaryConditionsUp],
For[i2=1,i2<=Length[BoundaryConditionsUp[[i]]],
If[FreeQ[HighScaleParameter,BoundaryConditionsUp[[i,i2,1]]]==False,
LowScaleParameter=Join[LowScaleParameter,{BoundaryConditionsUp[[i,i2,1]]}];
];
i2++;];
i++;];


SolveTadpoleEquationFirst = False;

If[Head[BoundaryHigh]===List  && BoundaryHigh=!={},
conditionalParameters = Transpose[BoundaryHigh][[2]];,
conditionalParameters = {};
];

For[i=1,i<=Length[NeededParametersForRGEs],
For[j=1,j<=Length[ParametersToSolveTadpoles],
If[FreeQ[NeededParametersForRGEs[[i,2]], ParametersToSolveTadpoles[[j]] /. {re[x_]->x,im[x_]->x, A_[b__Integer]->A} ]==False || FreeQ[conditionalParameters , ParametersToSolveTadpoles[[j]] /. {re[x_]->x,im[x_]->x, A_[b__Integer]->A}]==False,
If[FreeQ[ParametersToSolveTadpoles,NeededParametersForRGEs[[i,1]]]==True,
SolveTadpoleEquationFirst= True;
];
];
j++;];
i++;];



If[SolveTadpoleEquationFirst==True,
LowScaleParameter=Join[LowScaleParameter,DeleteCases[DeleteCases[ParametersToSolveTadpoles /. {re[x_]->x,im[x_]->x},x_?((FreeQ[Transpose[Particles[ALL]][[1]],#]==False)&)],x_?((FreeQ[Transpose[parameters][[1]],#]==True)&)]];
];

LowScaleParameterOld=nix;
FirstRun=True;

LowScaleParameter = LowScaleParameter /. a_[b_Integer]->a /. a_[b_Integer,c_Integer]->a;



While[LowScaleParameterOld =!= LowScaleParameter || First==True,
LowScaleParameterOld=LowScaleParameter;
LowScaleParameter={};
FirstRun=False;
For[i=1,i<=Length[LowScaleParameterOld],
If[FreeQ[Transpose[NeededParametersForRGEs][[1]],LowScaleParameterOld[[i]]],
Print["Unknown Parameter: ",LowScaleParameterOld[[i]]];
Interrupt[];
]; 
pos = Position[Transpose[NeededParametersForRGEs][[1]],LowScaleParameterOld[[i]]][[1,1]];
LowScaleParameter = Join[LowScaleParameter,Extract[NeededParametersForRGEs,pos][[2]]];
LowScaleParameter=Complement[Intersection[LowScaleParameter],UnfixedCharges];
i++;];
];


HighScaleParameter = DeleteCases[DeleteCases[DeleteCases[HighScaleParameter,gen1,3],gen2,3],gen3,3] /. a_[] ->a;

HighScaleParameter = Complement[Complement[HighScaleParameter,LowScaleParameter],UnfixedCharges];
];

If[HighScaleParameter==={},
AllRGEsRunning=True;,
(* If[Complement[HighScaleParameter,ParametersToSolveTadpoles /. {re[x_]\[Rule]x,im[x_]\[Rule]x}]==={}, *)
If[Intersection[LowScaleParameter,ParametersToSolveTadpoles /. {re[x_]->x,im[x_]->x}]=!={},
AllRGEsRunning=True;
(* LowScaleParameter = Join[LowScaleParameter,ParametersToSolveTadpoles /. {re[x_]\[Rule]x,im[x_]\[Rule]x}]; *)
LowScaleParameter=Join[LowScaleParameter,HighScaleParameter];
HighScaleParameter={};,
AllRGEsRunning=False;
];
];


];

CheckSMrges:=Block[{},
AddOHDM = False;
If[SupersymmetricModel===True,
If[AuxiliaryHyperchargeCoupling=!=True,
If[Head[DEFINITION[NonStandardYukawas]]=!=List,
If[Select[{"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Hypercharge-Coupling","Left-Coupling","Strong-Coupling"},(FreeQ[ParameterDefinitions,#])& ] === {}  && (FreeQ[ParameterDefinitions,"Down-VEV"]==False || FreeQ[ParameterDefinitions,"EW-VEV"]),
AddSMrunning = True;,
AddSMrunning=False;
];,
If[Select[{"Hypercharge-Coupling","Left-Coupling","Strong-Coupling"},(FreeQ[ParameterDefinitions,#])& ] === {}  && (FreeQ[ParameterDefinitions,"Down-VEV"]==False || FreeQ[ParameterDefinitions,"EW-VEV"]),
AddSMrunning = True;,
AddSMrunning=False;
];
];,
If[Head[DEFINITION[NonStandardYukawas]]=!=List,
If[Select[{"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Left-Coupling","Strong-Coupling"},(FreeQ[ParameterDefinitions,#])& ] === {}  && (FreeQ[ParameterDefinitions,"Down-VEV"]==False || FreeQ[ParameterDefinitions,"EW-VEV"]),
AddSMrunning = True;,
AddSMrunning=False;
];,
If[Select[{"Left-Coupling","Strong-Coupling"},(FreeQ[ParameterDefinitions,#])& ] === {}  && (FreeQ[ParameterDefinitions,"Down-VEV"]==False || FreeQ[ParameterDefinitions,"EW-VEV"]),
AddSMrunning = True;,
AddSMrunning=False;
];
];
];
AddOHDM = False;,

If[Head[DEFINITION[NonStandardYukawas]]=!=List,
If[Select[{"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Hypercharge-Coupling","Left-Coupling","Strong-Coupling","Down-VEV","Up-VEV"},(FreeQ[ParameterDefinitions,#])& ] === {} ,
AddSMrunning = True;
AddOHDM = False;,
If[Select[{"Up-Yukawa-Coupling","Down-Yukawa-Coupling","Lepton-Yukawa-Coupling","Hypercharge-Coupling","Left-Coupling","Strong-Coupling","EW-VEV"},(FreeQ[ParameterDefinitions,#])& ] === {} ,
AddSMrunning=True;
AddOHDM= True;,
AddSMrunning=False;
];
];,
If[Select[{"Hypercharge-Coupling","Left-Coupling","Strong-Coupling","Down-VEV","Up-VEV"},(FreeQ[ParameterDefinitions,#])& ] === {} ,
AddSMrunning = True;
AddOHDM = False;,
If[Select[{"Hypercharge-Coupling","Left-Coupling","Strong-Coupling","EW-VEV"},(FreeQ[ParameterDefinitions,#])& ] === {} ,
AddSMrunning=True;
AddOHDM= True;,
AddSMrunning=False;
];
];
];
];
];



getInvolvedParameters[x_]:=Block[{i,temp,i1,i2},
temp={};
For[i=1,i<=Length[parameters],
If[FreeQ[x,parameters[[i,1]]]==False,
temp = Join[temp,{parameters[[i,1]]}];
];
i++;];
For[i=1,i<=Length[NeededForTraces],
If[FreeQ[x,NeededForTraces[[i,1]]]==False,
temp = Intersection[Join[temp,NeededForTraces[[i,2]]]];
];
i++;];
Return[temp];
];



(* ::Input::Initialization:: *)
GenerateInformationForThresholds:=Block[{i,j,k,temp,sf,pos, gIndexNeeded,tempMasses, tempFinal,i1,i2},
Print["Generate information for thresholds"];

ThresholdInvolvedCouplings={};
ThresholdParticles={};
ThresholdCouplings={};
ThresholdMasses={};
ThresholdMassesExParticles={};

For[i=1,i<=Length[Thresholds],
temp={};
tempMasses={};
For[j=1,j<=Length[Thresholds[[i,2]]],
If[Depth[Thresholds[[i,2,j]]]==1,
sf=Thresholds[[i,2,j]];
gIndexNeeded=False;
tempMasses=Join[tempMasses,{{sf,1,getGenSF[sf]}}];,
sf=Thresholds[[i,2,j,0]];
gIndexNeeded=True;
gIndex = Thresholds[[i,2,j,1]];
If[FreeQ[tempMasses,sf],
tempMasses=Join[tempMasses,{{sf,Thresholds[[i,2,j,1]],Thresholds[[i,2,j,1]]}}];,
pos = Position[tempMasses,sf][[1,1]];
If[tempMasses[[pos,2]]>Thresholds[[i,2,j,1]],
tempMasses[[pos,2]]=Thresholds[[i,2,j,1]];
];
If[tempMasses[[pos,3]]<Thresholds[[i,2,j,1]],
tempMasses[[pos,3]]=Thresholds[[i,2,j,1]];
];
];
];
ThresholdParticles=Join[ThresholdParticles,{sf}];
pos=Position[Transpose[SuperPotential][[2]],sf];
AnalyzedPos={};
For[k=1,k<=Length[pos],
If[gIndexNeeded==False,
temp = Join[temp,{{SuperPotential[[pos[[k,1]],1,2]],ALL}}];
temp = Join[temp,{{getSoftBreaking[SuperPotential[[pos[[k,1]],1,2]]],ALL}}];,
temp = Join [temp,{{SuperPotential[[pos[[k,1]],1,2]],getPositionIndex[SuperPotential[[pos[[k,1]],2]],sf,Count[AnalyzedPos,pos[[k,1]]]+1],Length[getDimSPheno[SuperPotential[[pos[[k,1]],1,2]]]],gIndex,sf}}];
temp = Join [temp,{{getSoftBreaking[SuperPotential[[pos[[k,1]],1,2]]],getPositionIndex[SuperPotential[[pos[[k,1]],2]],sf,Count[AnalyzedPos,pos[[k,1]]]+1],Length[getDimSPheno[SuperPotential[[pos[[k,1]],1,2]]]],gIndex,sf}}];
];
AnalyzedPos=Join[AnalyzedPos,{pos[[k,1]]}];
ThresholdCouplings = Join[ThresholdCouplings,{SuperPotential[[pos[[k,1]],1,2]],getSoftBreaking[SuperPotential[[pos[[k,1]],1,2]]]}];
k++;];
ThresholdCouplings = Join[ThresholdCouplings,{MassScalar[sf]}];
If[gIndexNeeded==False,
temp = Join[temp,{{MassScalar[sf],ALL}}];,
temp = Join [temp,{{MassScalar[sf],1,2,gIndex,conj[sf]}}];
temp = Join [temp,{{MassScalar[sf],2,2,gIndex,sf}}];
];
j++;];
ThresholdInvolvedCouplings=Join[ThresholdInvolvedCouplings,{temp}];
ThresholdMasses = Join[ThresholdMasses,{tempMasses}];
i++;];
ThresholdCouplings=Intersection[ThresholdCouplings];
ThresholdParticles = Intersection[ThresholdParticles];

BilinearSuperpotential = Cases[SuperPotential,{{a___},{b_,c_}}];
NeededOtherFields={};

tempFinal={};
For[i=1,i<=Length[ThresholdMasses],
temp={};
For[j=1,j<=Length[ThresholdMasses[[i]]],
pos = Position[BilinearSuperpotential,ThresholdMasses[[i,j,1]]];
otherfield=DeleteCases[Extract[Extract[BilinearSuperpotential,pos[[1,1]]],2],ThresholdMasses[[i,j,1]]];
If[otherfield==={},
otherfield=NOTNEEDED;,
otherfield=otherfield[[1]];
];
If[FreeQ[ThresholdMasses,otherfield]==True && otherfield=!=NOTNEEDED,
Print["ERROR in Thresholds: No Superpotential mass for ",ThresholdMasses[[i,j,1]]];
Interrupt[];,
If[FreeQ[temp,otherfield]==True,
temp = Join[temp,{Join[ThresholdMasses[[i,j]],{Extract[BilinearSuperpotential[[pos[[1,1]]]],1][[2]]}]}];
If[ otherfield=!=NOTNEEDED,
NeededOtherFields=Join[NeededOtherFields,{{ThresholdMasses[[i,j,1]],otherfield}}];
];
];
];
j++;];
tempFinal = Join[tempFinal,{temp}];
i++;];
ThresholdMasses = tempFinal;

];

getPositionIndex[list_,particle_,app_]:=Block[{i,found,foundNr,IndexNr,index,i1,i2},
found=False;
IndexNr=1;
index=1;
foundNr=0;
While[found==False,
If[list[[index]]===particle,
foundNr++;
If[foundNr==app,
found=True;,
If[getGenSF[list[[index]]]>1,
IndexNr++;
];
index++;
];,
If[getGenSF[list[[index]]]>1,
IndexNr++;
];
index++;
];
];
Return[IndexNr];
];


(* ::Input::Initialization:: *)
CalculateIntermediateScale[nr_,readlists_]:=Block[{},
inputfile=OpenWrite["SARAH-Intermediate.m"];
(* $sarahMetaDir=ToFileName[{ToFileName[{$sarahModelDir,Modelname}],"Meta"}]; *)
$sarahMetaDir=ToFileName[{$sarahCurrentModelMainDir,"Meta"}];
outputfile = ToFileName[$sarahMetaDir,"Output-Regime"<>ToString[nr]<>".m"];
WriteString[inputfile,"<<"<>$sarahDir<>"/SARAH.m \n"];
(* WriteString[inputfile,"Start[\""<>Modelname<>"\",\"Regime-"<>ToString[nr]<>"\" ] \n"]; *)
WriteString[inputfile,"Start[\""<>$sarahModelNameMain<>"\",\"Regime-"<>ToString[nr]<>"\" ] \n"];


(* minSet=GenerateMinimalSetOfParameters[ListFormerParameters,nr];

WriteString[inputfile,"MinimalParameterSetUp = "<>ToString[minSet] <>"; \n"]; *)

WriteString[inputfile,"BCup = "<>ToString[InputForm[BoundaryConditionsUp[[nr]]]]<>" \n"];

WriteString[inputfile,"MakeSPheno[ReadLists->"<>ToString[readlists]<>"] \n"];
WriteString[inputfile,"Exit \n"];
Close[inputfile];

Switch[$OperatingSystem,
"Unix",
	Run["math < SARAH-Intermediate.m > "<> outputfile];,
"MacOSX",
	Run["alias math '/Applications/Mathematica.app/Contents/MacOS/MathKernel' "];
	Run["/Applications/Mathematica.app/Contents/MacOS/MathKernel < SARAH-Intermediate.m > "<>outputfile];,
_,
	If[Run["math"]=!=0,
	unknown::system="Not possible to start second Kernel. Please write a mail to florian.staub@cern.ch.";
	Message[unknown::system];
	];
];

Run["rm SARAH-Intermediate.m"];

ListFormerParameters = minSet;

];


WriteMetaInformation[nr_,ES_]:=Block[{i,i1,i2,temp, RealParameters,pos, temp1,fac,field},
(* $sarahMetaDir=ToFileName[{ToFileName[{$sarahModelDir,Modelname}],"Meta"}]; *)
$sarahMetaDir=ToFileName[{$sarahCurrentModelMainDir,"Meta"}];
metafile=OpenWrite[ToFileName[$sarahMetaDir,"Regime"<>ToString[nr]<>".m"]];
WriteString[metafile,"HeavyFields = "<> ToString[HeavyFields]  <>"; \n \n"];
WriteString[metafile,"numberLowCurrent = " <> ToString[numberLow] <>"; \n"];
WriteString[metafile,"numberAllCurrent = " <> ToString[numberAll] <>"; \n \n"];
WriteString[metafile,"numberAllwithVEVsCurrent = " <> ToString[numberAllwithVEVs] <>"; \n \n"];
WriteString[metafile,"YukawaCouplingsCurrent = " <> ToString[Transpose[BetaYijk][[1]]] <>"; \n \n"];

WriteString[metafile, "listAll = "<> ToString[listAllParameters]<> "; \n \n"];
WriteString[metafile, "listAllwithVEVs = "<> ToString[listAllParametersAndVEVs]<> "; \n \n"];
WriteString[metafile, "listLow = "<> ToString[lowScaleNames]<> "; \n \n"];
WriteString[metafile, "listVEVsCurrent = "<> ToString[listVEVs]<> "; \n \n"];
WriteString[metafile, "listGaugeCurrent = "<> ToString[Table[Gauge[[i,4]],{i,1,AnzahlGauge}]]<> "; \n \n"];
WriteString[metafile, "listGauginosCurrent = "<> ToString[Table[MassGauge[i],{i,1,AnzahlGauge}]]<> "; \n \n"];

WriteString[metafile, "GaugeFixingCurrent = "<> ToString[Table[SA`GaugeFixingRXi[[i,1]],{i,1,Length[SA`GaugeFixingRXi]}]]<> "; \n \n"];

WriteString[metafile, "LHnamesCurrent = "<> ToString[SA`LHList]<> "; \n \n"];
WriteString[metafile, "ParametersToSolveTadpolesCurrent = "<> ToString[ParametersToSolveTadpoles]<> "; \n \n"];


temp ={};
RealParametersRegime={};

For[i=1,i<=Length[listAllParametersAndVEVs],
temp = Join[temp,{{listAllParametersAndVEVs[[i]],getDimSPheno[listAllParametersAndVEVs[[i]]]}}];
If[FreeQ[realVar,listAllParametersAndVEVs[[i]]]==False,
RealParametersRegime = Join[RealParametersRegime,{listAllParametersAndVEVs[[i]]}];
];
i++;];

(*
For[i=1,i\[LessEqual]Length[U1MixingParameters],
temp = Join[temp,{{U1MixingParameters[[i]],getDimSPheno[U1MixingParameters[[i]]]}}];
If[FreeQ[realVar,U1MixingParameters[[i]]]\[Equal]False,
RealParameters = Join[RealParameters,{U1MixingParameters[[i]]}];
];
i++;];
*)

WriteString[metafile, "DimParameters = "<> ToString[temp] <>"; \n \n"];
WriteString[metafile, "RealParametersRegime = "<> ToString[RealParametersRegime] <>"; \n \n"];


temp={};
For[i=1,i<=Length[HeavyFields],
temp = Join[temp,{{HeavyFields[[i]],getStartHeavy[HeavyFields[[i]]],getGenSPheno[HeavyFields[[i]]]}}];
i++;];

WriteString[metafile, "GenHeavyFields = "<> ToString[temp] <>"; \n \n"];

WriteString[metafile, "eigenstateName = "<> ToString[ES] <>"; \n \n"];

temp = {};

For[i=1,i<=Length[listAllParametersAndVEVs],
temp = Join[temp,{{listAllParametersAndVEVs[[i]],SPhenoForm[listAllParametersAndVEVs[[i]]]}}];
i++;];

WriteString[metafile, "FortranNames = "<> ToString[temp] <>"; \n \n"];

For[i=1,i<=Length[HeavyFields],
For[i2=1,i2<=Length[NextGauge],
mul=1;
For[i1=1,i1<=Length[NextGauge],
If[NextGauge[[i1]]=!=U[1] && i1=!=i2,
mul=mul*Abs[NextQN[[i,i1+1]]];
];
i1++;];
MultiplicityFactorNext[i2,i]=mul;
i2++;];
i++;];


temp={};
For[i=1,i<=Length[HeavyFields],
field=HeavyFields[[i]] /. A_[b_]->A;
pos = Position[NextQN,field][[1,1]];
temp1={};
(*
If[AntiField[field]===field,
fac=1/8;,fac=1/4;
]; *)

If[AntiField[field]===field,
fac=1/4;,fac=1/2;
];

(* If[getType[field]===F,fac=2 fac ]; *)
Switch[getType[field],
F, fac= 2/3  fac;,
S, fac=1/3 fac;,
V, fac=-11/3 fac;
];

If[FreeQ[diracFermion,field]==False,fac=2*fac;];

For[i1=1,i1<=Length[NextGauge],
If[NextGauge[[i1]]===U[1],
temp1=Join[temp1,{NextQN[[pos,i1+1]]^2*MultiplicityFactorNext[i1,pos] fac}];,
If[NextQN[[pos,i1+1]]===1,
temp1=Join[temp1,{0}];,
temp1=Join[temp1,{TestDim[NextQN[[pos,i1+1]],NextGauge[[i1,1]]][[5]]*MultiplicityFactorNext[i1,pos] fac}];
];
];
i1++;];
temp =Join[temp,{temp1}];
i++;];

WriteString[metafile, "HeavyFieldFactors = "<> ToString[InputForm[temp]] <>"; \n \n"];


Close[metafile];

];

ReadInformationOtherRegimes[nr_]:=Block[{i,temp,i1,i2},
(* $sarahMetaDir=ToFileName[{ToFileName[{$sarahModelDir,Modelname}],"Meta"}]; *)
metafile=ToFileName[$sarahMetaDir,"Regime"<>ToString[nr]<>".m"];

Get[metafile];


DimensionsOtherRegimes[[nr]] = DimParameters;
GenerationsOfHeavyFieldsAllRegimes[[nr]] = GenHeavyFields;
LowScaleParametersAllRegimes[[nr]]= listLow;
HighScaleParametersAllRegimes[[nr]]= listAll;
HighScaleParametersAllwithVEVsRegimes[[nr]]= listAllwithVEVs;
NumberLowAllRegimes[[nr]]= numberLowCurrent;
NumberHighAllRegimes[[nr]]= numberAllCurrent;
NumberAllwithVEVsAllRegimes[[nr]]= numberAllwithVEVsCurrent;
ListOfRegimeEigenstates[[nr]] = eigenstateName;
ListVEVsAllRegimes[[nr]] = listVEVsCurrent;
LHnamesAllRegimes[[nr]] = LHnamesCurrent;
GFnamesAllRegimes[[nr]] =GaugeFixingCurrent;

ParametersToSolveTadpolesAllRegimes[[nr]]=ParametersToSolveTadpolesCurrent;


YukawaCouplingsAllRegimes[[nr]] = YukawaCouplingsCurrent;

For[i=1,i<=Length[listGaugeCurrent],
If[FreeQ[GaugeCouplingsAllRegimes[[nr]], listGaugeCurrent[[i]]],
GaugeCouplingsAllRegimes[[nr]] =Join[GaugeCouplingsAllRegimes[[nr]],{ listGaugeCurrent[[i]]}];
];
i++;];
For[i=1,i<=Length[listGauginosCurrent],
If[FreeQ[GauginosAllRegimes[[nr]], listGauginosCurrent[[i]]],
GauginosAllRegimes[[nr]] =Join[GauginosAllRegimes[[nr]],{ listGauginosCurrent[[i]]}];
];
i++;];
GroupFactorHeavyFields[[nr]] =HeavyFieldFactors;
 
SA`LHList = Join[SA`LHList,LHnamesCurrent];

realVar = Join[realVar,RealParametersRegime];

For[i=1,i<=Length[FortranNames],
If[FreeQ[parameters,FortranNames[[i,1]]] &&  FreeQ[ListOfAdditionalParameters,FortranNames[[i,1]]],
ListOfAdditionalParameters = Join[ListOfAdditionalParameters,{FortranNames[[i]]}];
];
i++;];

ParameterDefinitionsSave=ParameterDefinitions;
(* ParameterFile=ToFileName[{ToFileName[{ToFileName[{$sarahModelDir,Modelname}],"Regime-"<>ToString[nr]}]},"parameters.m"]; *)
ParameterFile=ToFileName[{ToFileName[{$sarahCurrentModelMainDir,"Regime-"<>ToString[nr]}]},"parameters.m"];
Get[ParameterFile];
ParameterDefinitions=Join[ParameterDefinitionsSave,ParameterDefinitions];
CreateParameterFile;


];

GenerateMinimalSetOfParameters[startlist_,nr_]:=Block[{temp,i,j,i1,i2},
temp={};
For[i=1,i<=Length[startlist],
If[FreeQ[BoundaryConditionsUp[[nr]],startlist[[i]]],
temp = Join[temp,{startlist[[i]]}];,
pos=Position[BoundaryConditionsUp[[nr]],startlist[[i]]];
For[j=1,j<=Length[pos],
temp = Join[temp,{Extract[BoundaryConditionsUp[[nr]],pos[[j,1]]][[1]]}];
j++;];
];
i++;];
Return[temp];
];


CreateHiggs2Loop :=Block[{i1,i2},
sphenoHiggs2Loop=OpenWrite[ToFileName[$sarahSPhenoTwoLoopDir,"TwoLoopHiggsMass_SARAH.f90"]];
AppendSourceCode["TwoLoopHiggsMass.f90",sphenoHiggs2Loop];
Close[sphenoHiggs2Loop];

sphenoHiggs2Loopasat=OpenWrite[ToFileName[$sarahSPhenoTwoLoopDir,"effpotasat.f"]];
AppendSourceCode["effpotasat.f",sphenoHiggs2Loopasat];
Close[sphenoHiggs2Loopasat];

];



CheckDefinitionParameters:=Block[{i,j,k,temp, down, up, pRunningDown},

If[OnlyLowEnergySPheno===True,
realVar = Join[realVar,{RealParameters}];
LowScaleParameter={};
listAllParameters = {};
Return[];
];


If[IntermediateScale =!= True && Head[RegimeNr] =!= Integer,
If[Head[ConditionGUTscale]=!=Equal,
ConditionGUTscale = Gauge[[1,4]]==Gauge[[2,4]];
If[Length[UseParameterAsGUTscale]===0,
Message[SPheno::NoGUTcondition,Gauge[[1,4]]==Gauge[[2,4]]];
];
];
If[SeveralBoundaryConditions==True,
For[k=1,k<=Length[BoundaryHighScale],
temp=Select[HighScaleParameter,(MemberQ[TransposeChecked[BoundaryHighScale[[k]]][[1]]/. A_[b__Integer]->A,#]==False)&];
For[i=1,i<=Length[temp],
If[MemberQ[ParametersToSolveTadpoles,temp[[i]]],
BoundaryHighScale[[k]] = Join[BoundaryHighScale[[k]],{{temp[[i]],0}}];,
Message[SPheno::NoBoundaryGUT,temp[[i]]];
];
i++;];

temp=Select[LowScaleParameter,(MemberQ[TransposeChecked[BoundaryHighScale[[k]]][[1]]/. A_[b__Integer]->A,#]==False && MemberQ[TransposeChecked[BoundaryEWSBScale[[k]]][[1]]/. A_[b__Integer]->A,#]==False && MemberQ[TransposeChecked[BoundarySUSYScale[[k]]][[1]] /. A_[b__Integer]->A,#]==False)&];
(*
If[AuxiliaryHyperchargeCoupling=!=True,
temp=Select[temp,(FreeQ[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling},#])&];,
temp=Select[temp,(FreeQ[Flatten[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeAuxParameters,leftCoupling,strongCoupling}],#])&];
];
If[DEFINITION[UseNonStandardYukwas]===True,
temp=Select[temp,(FreeQ[DEFINITION[NonStandardYukawas],#])&];
];
*)
temp=Select[temp,(FreeQ[Transpose[DEFINITION[MatchingConditions]][[1]],#])&];

For[i=1,i<=Length[temp],
If[MemberQ[ParametersToSolveTadpoles /.{re[x_]->x,im[x_]->x,A_[b__Integer]->A},temp[[i]]]==False,
Message[SPheno::NoConditionForParameter,temp[[i]]];
];
i++;];

k++;];,

If[ImplementThresholds,
down = Table[TransposeChecked[BoundaryConditionsDown[[i]]][[1]],{i,1,Length[BoundaryConditionsDown]}][[1]] /. {a_[index1,b___]->a};
up = Table[TransposeChecked[BoundaryConditionsUp[[i]]][[1]],{i,1,Length[BoundaryConditionsUp]}][[1]]/. {a_[index1,b___]->a};
];

temp=Select[HighScaleParameter,(MemberQ[TransposeChecked[BoundaryHighScale][[1]]/. A_[b__Integer]->A,#]==False)&];
For[i=1,i<=Length[temp],
If[MemberQ[ParametersToSolveTadpoles,temp[[i]]] || MemberQ[ParametersToSolveTadpoles,re[temp[[i]]]],
BoundaryHighScale = Join[BoundaryHighScale,{{temp[[i]],0}}];,
If[MemberQ[down,temp[[i]]],
BoundaryHighScale = Join[BoundaryHighScale,{{temp[[i]],0}}];,
Message[SPheno::NoBoundaryGUT,temp[[i]]];
];
];
i++;];

temp=Select[LowScaleParameter,(MemberQ[TransposeChecked[BoundaryHighScale][[1]]/. A_[b__Integer]->A,#]==False && MemberQ[TransposeChecked[BoundaryEWSBScale][[1]]/. A_[b__Integer]->A,#]==False && MemberQ[TransposeChecked[BoundarySUSYScale][[1]]/. A_[b__Integer]->A,#]==False && MemberQ[down,#]==False && MemberQ[up,#]==False)&];
If[AuxiliaryHyperchargeCoupling=!=True,
temp=Select[temp,(FreeQ[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling},#])&];,temp=Select[temp,(FreeQ[Flatten[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeAuxParameters,leftCoupling,strongCoupling}],#])&];
];
If[DEFINITION[UseNonStandardYukwas]===True,
temp=Select[temp,(FreeQ[DEFINITION[NonStandardYukawas],#])&];
];

For[i=1,i<=Length[temp],
If[MemberQ[ParametersToSolveTadpoles /. {re[x_]->x,im[x_]->x},temp[[i]]]==False,
Message[SPheno::NoConditionForParameter,temp[[i]]];
];
i++;];
];,

If[IntermediateScale=!=True,
If[Head[ConditionGUTscale]=!=List || Length[ConditionGUTscale]=!=RegimeNr,
Message[SPheno::NoGUTconditionRegimes];
Interrupt[];
];



down = Flatten[Table[TransposeChecked[BoundaryConditionsDown[[i]]][[1]],{i,1,Length[BoundaryConditionsUp]}]]/. {a_[index1,b___]->a};
up =Flatten[Table[TransposeChecked[BoundaryConditionsUp[[i]]][[1]],{i,1,Length[BoundaryConditionsUp]}]]/. {a_[index1,b___]->a};

pRunningDown=Table[Complement[HighScaleParametersAllRegimes[[i]],LowScaleParametersAllRegimes[[i]]],{i,1,Length[LowScaleParametersAllRegimes]}];

For[i=1,i<=Length[pRunningDown],
If[i==1,
temp = Select[pRunningDown[[i]],(MemberQ[TransposeChecked[BoundaryHighScale][[1]],#]==False && MemberQ[(TransposeChecked[BoundaryConditionsDown[[i]]][[1]]/. {a_[index1,b___]->a}),#]==False ) &];,
temp = Select[pRunningDown[[i]],(MemberQ[Flatten[Table[pRunningDown[[j]],{j,1,i-1}]],#]==False &&MemberQ[(TransposeChecked[BoundaryConditionsDown[[i-1]]][[1]]/. {a_[index1,b___]->a}),#]==False)&];
];
For[j=1,j<=Length[temp],
If[MemberQ[Flatten[ParametersToSolveTadpolesAllRegimes],temp[[j]]]==False,
Message[SPheno::NoConditionForParameter,temp[[j]]];
];
j++;];
i++;];

For[i=1,i<=Length[LowScaleParametersAllRegimes],
temp = Select[LowScaleParametersAllRegimes[[i]],(MemberQ[up,#]==False && MemberQ[TransposeChecked[BoundaryHighScale][[1]],#]==False && MemberQ[TransposeChecked[BoundarySUSYScale][[1]],#]==False && MemberQ[TransposeChecked[BoundaryEWSBScale][[1]],#]==False && MemberQ[down,#]==False)&];
If[AuxiliaryHyperchargeCoupling=!=True,
temp=Select[temp,(FreeQ[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling},#])&];,
temp=Select[temp,(FreeQ[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeAuxParameters,leftCoupling,strongCoupling},#])&];
];
For[j=1,j<=Length[temp],
If[MemberQ[Flatten[ParametersToSolveTadpolesAllRegimes],temp[[j]]]==False,
Message[SPheno::NoConditionForParameter,temp[[j]]];
];
j++;];
i++;];

];
];

];

(*
MakeListOfAllParameters:=Block[{tempList={}},
If[Length[listWtriOne]\[NotEqual] 0, tempList=Transpose[Transpose[listWtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]]; ];
If[Length[listWbiOne]\[NotEqual] 0,tempList=Transpose[Transpose[listWbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[listAtriOne]\[NotEqual] 0,tempList=Transpose[Transpose[listAtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[listAbiOne]\[NotEqual] 0,tempList=Transpose[Transpose[listAbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[listAone]\[NotEqual] 0,tempList=Transpose[Transpose[listAone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[listWone]\[NotEqual] 0,tempList=Transpose[Transpose[listWone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[listSM]\[NotEqual] 0,tempList=Transpose[listSM][[2]] /. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1;];
If[Length[listGM]\[NotEqual] 0,tempList=Transpose[listGM][[2]] /. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1;];
If[Length[listW4]\[NotEqual] 0,tempList=Transpose[Transpose[listW4One/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];];
If[Length[BetaGauge]\[NotEqual] 0,tempList=Transpose[BetaGauge][[1]]/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1;];
ListAllInputParameters=tempList;
];*)

MakeListOfAllParameters:=Block[{tempList={}},
If[Length[BetaLijkl]!= 0, tempList=Transpose[BetaLijkl][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1; ];
If[Length[BetaYijk]!= 0, tempList=Transpose[BetaYijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1; ];
If[Length[BetaMuij]!= 0,tempList=Transpose[BetaMuij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[BetaTijk]!= 0,tempList=Transpose[BetaTijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[BetaBij]!= 0,tempList=Transpose[BetaBij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[BetaLi]!= 0,tempList=Transpose[BetaLi][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[listAone]!= 0,tempList=Transpose[Transpose[listAone/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];];
If[Length[listSM]!= 0,tempList=Transpose[listSM][[2]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[listGM]!= 0,tempList=Transpose[listGM][[2]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
If[Length[listW4]!= 0,tempList=Transpose[Transpose[listW4One/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];];
If[Length[BetaGauge]!= 0,tempList=Transpose[BetaGauge][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;];
ListAllInputParameters=tempList;
];

GenerateMatchingConditions:=Block[{i,equ,sol,inputpar,equTemp},
If[Head[DEFINITION[MatchingConditions]]===List,
If[Length[DEFINITION[MatchingConditions]]<7,
Matching::TooShort="Matching conditions too short: not all SM parameters involved. This might cause problems.";
Message[Matching::TooShort];
];,
If[Head[DEFINITION[MatchingConditions]]===DEFINITION,
Matching::NotDefined="No matching conditions defined: The ones for a THDM type-II are used by default. ";
Message[Matching::NotDefined];
DEFINITION[MatchingConditions]=Default[THDMII]
];
Switch[DEFINITION[MatchingConditions],
Default[THDMII],
DEFINITION[MatchingConditions]={
{hyperchargeCoupling,g1SM},
{leftCoupling,g2SM},
{strongCoupling,g3SM},
{VEVSM1,vSM/Sqrt[1+TanBeta^2]},
{VEVSM2,VEVSM1*TanBeta},
{UpYukawa,YuSM vSM/VEVSM2},
{DownYukawa,YdSM vSM/VEVSM1},
{ElectronYukawa,YeSM vSM/VEVSM1}
};,
Default[OHDM],
DEFINITION[MatchingConditions]={
{hyperchargeCoupling,g1SM},
{leftCoupling,g2SM},
{strongCoupling,g3SM},
{VEVSM,vSM},
{UpYukawa,YuSM},
{DownYukawa,YdSM},
{ElectronYukawa,YeSM}
};,
_,
Matching::Unknown="Unknown matching condtions: ``";
Message[Matching::Unknown,DEFINITION[MatchingConditions]];
Interrupt[];
];
];




DimensionlessParametersInMatching=Select[Transpose[parameters][[1]],FreeQ[Transpose[DEFINITION[MatchingConditions]][[1]],#]==False&];

listVEVs={};
For[i=1,i<=Length[Particles[Current]],If[Particles[Current][[i,4]]===VEV,listVEVs=Join[listVEVs,{Particles[Current][[i,1]]}];];
i++;];
VEVsInMatching=Select[DimensionlessParametersInMatching,FreeQ[listVEVs,#]===False&];
DimensionlessParametersInMatching=Select[DimensionlessParametersInMatching,FreeQ[listVEVs,#]===True&];

inputpar=Join[Transpose[If[Depth[MINPAR]===4,Flatten[MINPAR,1],MINPAR]][[2]],If[Head[EXTPAR]===List && EXTPAR=!={},Transpose[If[Depth[EXTPAR]===4,Flatten[EXTPAR,1],EXTPAR]][[2]],{}]];
AnglesInMatching=Intersection[Select[inputpar,FreeQ[Select[DEFINITION[MatchingConditions] /.{A_[b_Integer],c__}->{A,c},FreeQ[VEVsInMatching,#[[1]]]==False&],#]==False&]];
AnglesInMatchingQ=Table[ToExpression[ToString[AnglesInMatching[[i]]]<>"Q"],{i,1,Length[AnglesInMatching]}];
subRunningAngles=Table[AnglesInMatching[[i]]->AnglesInMatchingQ[[i]],{i,1,Length[AnglesInMatching]}];

(* Getting the relations to shift the angles *)
MatchingForVEVs=Select[DEFINITION[MatchingConditions],FreeQ[VEVsInMatching,#[[1]]/.A_[b_Integer]->A]==False&];
equ=Table[MatchingForVEVs[[i,1]]==MatchingForVEVs[[i,2]],{i,1,Length[MatchingForVEVs]}];
SolutionForRunningAngles=Select[Solve[equ,Join[{vSM},AnglesInMatching]],FreeQ[#,-a_]&][[1]];


(* Check if auxiliary hypercharge is needed *)

If[FreeQ[DEFINITION[MatchingConditions],hyperchargeCoupling]===False,
AuxiliaryHyperchargeCoupling=False;,
AuxiliaryHyperchargeCoupling=True;
(* get expression *)
equ=Select[DEFINITION[MatchingConditions],FreeQ[#,g1SM]==False&];
If[Length[equ]>1,
equTemp=equ;
For[i=1,i<=Length[equTemp],
If[(Select[inputpar,FreeQ[equTemp[[i]],#]==False&])==={},
equ=equTemp[[i]];];
i++;];
];
sol=Select[Solve[equ[[1]]==equ[[2]],{g1SM}],FreeQ[#,-a_]&][[1]];
ExpressionAuxHypercharge=g1SM /.sol[[1]]; 
];
];

