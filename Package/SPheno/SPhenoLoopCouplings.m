(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSPhenoLoopCouplings[Eigenstates_]:=Block[{},
(*
Print["----------------------------------------------"];
Print["Writing Routines for Loop Couplings"];
Print["----------------------------------------------"];
*)

Print[StyleForm["Write routine for loop couplings","Section",FontSize->12]];
 
(* $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}]; *)
sphenoLoopCoup=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"LoopCouplings_"<>ModelName<>".f90"]];

InitSPhenoLoopCouplings[Eigenstates];

WriteLoopCouplingsHeader;

If[SupersymmetricModel===True,
WriteAlphaMS;
WriteAlphaEWSB;
WriteAlphaStrong;

WriteAlphaThreshold;
WriteAlphaStrongThreshold;

GenerateDeltaVB2;


(*
Print["Generate effective Higgs-to-Fermion couplings"];

ParametersEffCouplings={};

If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False && FreeQ[ParameterDefinitions,"Scalar-Mixing-Matrix"]\[Equal]False,
GenerateHiggsFermionCouplings[HiggsBoson,Electron, ElectronYukawa,ElectronMatrixL ,ElectronMatrixR, VEVSM1,HiggsMixingMatrix, 1];
GenerateHiggsFermionCouplings[HiggsBoson,TopQuark,UpYukawa,UpMatrixL ,UpMatrixR,VEVSM2,HiggsMixingMatrix ,2];
GenerateHiggsFermionCouplings[HiggsBoson,BottomQuark, DownYukawa,DownMatrixL ,DownMatrixR,VEVSM1,HiggsMixingMatrix ,1];
];

If[FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===False && FreeQ[ParameterDefinitions,"Pseudo-Scalar-Mixing-Matrix"]\[Equal]False,
GenerateHiggsFermionCouplings[PseudoScalar,Electron,ElectronYukawa,ElectronMatrixL ,ElectronMatrixR, VEVSM1,PseudoScalarMixingMatrix, 1];
GenerateHiggsFermionCouplings[PseudoScalar,TopQuark,UpYukawa,UpMatrixL ,UpMatrixR,VEVSM2,PseudoScalarMixingMatrix ,2];
GenerateHiggsFermionCouplings[PseudoScalar,BottomQuark, DownYukawa,DownMatrixL ,DownMatrixR,VEVSM1,PseudoScalarMixingMatrix,1];
];
*)
];

If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
InitHiggsLoopCouplings;
];



WriteString[sphenoLoopCoup, "End Module LoopCouplings_"<>ModelName<>" \n \n"];

Close[sphenoLoopCoup];
];


WriteLoopCouplingsHeader:=Block[{},

Print["  Writing header"];

WriteCopyRight[sphenoLoopCoup];

WriteString[sphenoLoopCoup, "Module LoopCouplings_"<>ModelName<>" \n \n"];
WriteString[sphenoLoopCoup, "Use Control \n"];
WriteString[sphenoLoopCoup, "Use Couplings_"<>ModelName<>" \n"];
WriteString[sphenoLoopCoup, "Use Mathematics \n"];
WriteString[sphenoLoopCoup, "Use LoopFunctions \n"];
WriteString[sphenoLoopCoup, "Use StandardModel \n \n "];

(* WriteString[sphenoLoopCoup,"Logical,Save::MZ_input= .False. \n \n"]; *)

WriteString[sphenoLoopCoup, "Contains \n \n"];



];


InitSPhenoLoopCouplings[Eigenstates_]:=Block[{i,particles, partS,partF,partV,diracF,temp},
coupAlphaEWSB={};
coupAlphaStrong={};
NeededCouplingsToPhoton={};
NeededCouplingsToGluon={};

particles=Particles[Eigenstates];


partS={};
partF={};


diracTemp=diracSub[Eigenstates];

For[i=1,i<=Length[Particles[Eigenstates]],
Switch[Particles[Eigenstates][[i,4]],
S, partS = Join[partS,{Particles[Eigenstates][[i,1]]}];,
V, partS = Join[partS,{Particles[Eigenstates][[i,1]]}];,
F, pos=Position[diracTemp,Particles[Eigenstates][[i,1]]];
	If[Length[pos]>0,
	diracF=Extract[diracTemp,pos[[1,1]]][[1]];
		partF=Join[partF,{diracF}];
	diracTemp=Delete[diracTemp,pos[[1,1]]];
	];
];
i++;];



For[i=1,i<=Length[partS],
	If[NumericQ[getElectricCharge[partS[[i]]]],
	val = {getElectricCharge[partS[[i]]]};,
	val=Cases[Vertex[{conj[partS[[i]]],partS[[i]],VectorP},UseDependences->True][[2,1]], x_?NumberQ];
	];
	If[val=!={} && conj[partS[[i]]]=!=partS[[i]]  && val=!={0},
	coupAlphaEWSB= Join[coupAlphaEWSB,{{partS[[i]],Abs[val[[1]]],1,CalculateColorFactor[VectorP,partS[[i]],conj[partS[[i]]]]}}];
	NeededCouplingsToPhoton= Join[NeededCouplingsToPhoton,{getSPhenoCoupling[C[conj[partS[[i]]],partS[[i]],VectorP]][[1,1]]}];
	If[Head[val[[1]]]===Complex,
	RelativeCoupling[VectorP,partS[[i]]]=val[[1]]/I;,
	RelativeCoupling[VectorP,partS[[i]]]=val[[1]];
	];,
	RelativeCoupling[VectorP,partS[[i]]]=0;
	];
	
	val=Vertex[{conj[partS[[i]]],partS[[i]],VectorG}][[2,1]];
	If[val=!=0,
	If[partS[[i]]===conj[partS[[i]]],
	coupAlphaStrong= Join[coupAlphaStrong,{{partS[[i]],1,1,CalculateColorFactor[VectorG,partS[[i]],partS[[i]]]/2}}];,
	coupAlphaStrong= Join[coupAlphaStrong,{{partS[[i]],1,1,CalculateColorFactor[VectorG,partS[[i]],conj[partS[[i]]]]}}];
	];
	NeededCouplingsToGluon= Join[NeededCouplingsToGluon,{getSPhenoCoupling[C[conj[partS[[i]]],partS[[i]],VectorG]][[1,1]]}];
	RelativeCoupling[VectorG,partS[[i]]]=1;,
	RelativeCoupling[VectorG,partS[[i]]]=0;
	];
i++;];


	For[i=1,i<=Length[partF],
	If[NumericQ[getElectricCharge[partF[[i]]]],
	val = {getElectricCharge[partF[[i]]]};,
	val=Cases[Vertex[{bar[partF[[i]]],partF[[i]],VectorP},UseDependences->True][[2,1]], x_?NumberQ];
	];
	If[val=!={} && bar[partF[[i]]]=!=partF[[i]]   && val=!={0},
	coupAlphaEWSB= Join[coupAlphaEWSB,{{partF[[i]],Abs[val[[1]]],4,CalculateColorFactor[VectorP,partF[[i]],bar[partF[[i]]]]}}];
	NeededCouplingsToPhoton= Join[NeededCouplingsToPhoton,{getSPhenoCoupling[C[bar[partF[[i]]],partF[[i]],VectorP]][[1,1]]}];
	If[Head[val[[1]]]===Complex,
	RelativeCoupling[VectorP,partF[[i]]]=val[[1]]/I;,
	RelativeCoupling[VectorP,partF[[i]]]=val[[1]];
	];,
	RelativeCoupling[VectorP,partF[[i]]]=0;
	];
	
	val=Vertex[{bar[partF[[i]]],partF[[i]],VectorG}][[2,1]];
	If[val=!=0,
	NeededCouplingsToGluon= Join[NeededCouplingsToGluon,{getSPhenoCoupling[C[bar[partF[[i]]],partF[[i]],VectorG]][[1,1]]}];
	If[partF[[i]]===bar[partF[[i]]],
	coupAlphaStrong= Join[coupAlphaStrong,{{partF[[i]],1,4,CalculateColorFactor[VectorG,partF[[i]],partF[[i]]]/2}}];,
	coupAlphaStrong= Join[coupAlphaStrong,{{partF[[i]],1,4,CalculateColorFactor[VectorG,partF[[i]],partF[[i]]]}}];
	];
	RelativeCoupling[VectorG,partF[[i]]]=1;,
	RelativeCoupling[VectorG,partF[[i]]]=0;
	];
i++;];

ParticlesToPhoton=coupAlphaEWSB;
ParticlesToGluon=coupAlphaStrong;

(*
temp={};
For[i=1,i\[LessEqual]Length[coupAlphaStrong],
If[FreeQ[SMParticles,coupAlphaStrong[[i,1]]]\[Equal]True ,
temp=Join[temp,{coupAlphaStrong[[i]]}];
];
i++;];
coupAlphaStrong=temp;

temp={};
*)
coupAlphaStrong=Select[coupAlphaStrong,FreeQ[#,Gluon]&];

];


WriteAlphaEWSB:=Block[{i},

Print["  Writing 'AlphaEwDR'"];

WriteString[sphenoLoopCoup,"Real(dp) Function AlphaEwDR(Q,"];
For[i=1,i<=Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,SPhenoForm[SPhenoMass[coupAlphaEWSB[[i,1]]]]];
If[i!= Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,") \n \n"];


WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,"];
For[i=1,i<=Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,SPhenoMass[coupAlphaEWSB[[i,1]],getGenSPheno[coupAlphaEWSB[[i,1]]]]];
If[i!= Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,"\n"];
WriteString[sphenoLoopCoup,"Integer::i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];

WriteString[sphenoLoopCoup,"If (MZ_input) then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=1._dp-Alpha/Alpha_MZ_MS! MSbar value^=mW+light fermions \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha+alpha/(6._dp*Pi)! conversion to DRbar \n"];
(* WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-16._dp*Log(mf_u(3)/Q)/9._dp * Alpha / (2._dp * pi) \n"]; *)
For[i=1,i<=Length[coupAlphaEWSB],
If[getGenSPheno[coupAlphaEWSB[[i,1]]]>1,
WriteString[sphenoLoopCoup, "Do i1="<> ToString[getGenSPhenoStart[coupAlphaEWSB[[i,1]]]]<>","<> ToString[getGenSPheno[coupAlphaEWSB[[i,1]]]]<>"\n"];
WriteString[sphenoLoopCoup, "If ("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>".gt.Q) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)*Alpha/(2._dp*pi)  \n"];
WriteString[sphenoLoopCoup, "End if \n"];
WriteString[sphenoLoopCoup,"End Do \n"];,
WriteString[sphenoLoopCoup, "If ("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>".gt.Q) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)*Alpha/(2._dp*pi) \n"];
WriteString[sphenoLoopCoup, "End if \n"];
];
i++;];


WriteString[sphenoLoopCoup,"Else \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=7._dp*Log(Q/mW) !+16._dp*Log(mf_u(3)/Q)/9._dp \n"];
For[i=1,i<=Length[coupAlphaEWSB],
If[getGenSPheno[coupAlphaEWSB[[i,1]]]>1,
WriteString[sphenoLoopCoup, "Do i1="<> ToString[getGenSPhenoStart[coupAlphaEWSB[[i,1]]]]<>","<> ToString[getGenSPheno[coupAlphaEWSB[[i,1]]]]<>"\n"];
WriteString[sphenoLoopCoup, "If ("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>".gt.Q) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha+"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q) \n"];
WriteString[sphenoLoopCoup, "End if \n"];
WriteString[sphenoLoopCoup,"End Do \n"];,
WriteString[sphenoLoopCoup, "If ("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>".gt.Q) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha+"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)\n"];
WriteString[sphenoLoopCoup, "End if \n"];
];
i++;];

WriteString[sphenoLoopCoup,"DeltaAlpha=Delta_Alpha_Lepton+Delta_Alpha_Hadron& \n"];
WriteString[sphenoLoopCoup,"    &-alpha*DeltaAlpha/(2._dp*Pi) \n"];
WriteString[sphenoLoopCoup,"End If \n \n"];

WriteString[sphenoLoopCoup,"AlphaEwDR=Alpha/(1._dp-DeltaAlpha) \n \n"];
WriteString[sphenoLoopCoup,"End Function AlphaEwDR \n \n \n"];

];


WriteAlphaStrong:=Block[{i},

Print["  Writing 'AlphaSdr'"];

WriteString[sphenoLoopCoup,"Real(dp) Function AlphaSDR(Q,"];
For[i=1,i<=Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,SPhenoForm[SPhenoMass[coupAlphaStrong[[i,1]]]]];
If[i!= Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,") \n"];


WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,"];
For[i=1,i<=Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,SPhenoMass[coupAlphaStrong[[i,1]],getGenSPheno[coupAlphaStrong[[i,1]]]]];
If[i!= Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup," \n"];

WriteString[sphenoLoopCoup,"Integer::i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];


WriteString[sphenoLoopCoup,"DeltaAlpha = 0.5_dp !- 2._dp*Log(sqrt(mf_u2(3))/Q)/3._dp \n"];
For[i=1,i<=Length[coupAlphaStrong],
If[getGenSPheno[coupAlphaStrong[[i,1]]]>1,
WriteString[sphenoLoopCoup, "Do i1=1,"<> ToString[getGenSPheno[coupAlphaStrong[[i,1]]]]<>"\n"];
WriteString[sphenoLoopCoup," If (Abs("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q).gt.1._dp) Then \n"];
WriteString[sphenoLoopCoup,"  DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*coupAlphaStrong[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q) \n"];
WriteString[sphenoLoopCoup," End If \n"];
WriteString[sphenoLoopCoup,"End Do \n"];,
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*coupAlphaStrong[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q) \n"];
];
i++;];

WriteString[sphenoLoopCoup,"DeltaAlpha=AlphaS_mZ*DeltaAlpha/(2._dp*Pi) \n"];
WriteString[sphenoLoopCoup,"   AlphaSDR=AlphaS_mZ/(1._dp-DeltaAlpha)\n \n"];

WriteString[sphenoLoopCoup,"End Function AlphaSDR \n"];

];


WriteAlphaThreshold:=Block[{i},

Print["  Writing 'AlphaEW_Treshold'"];

WriteString[sphenoLoopCoup,"Real(dp) Function AlphaEW_T(AlphaEW_In, Q,"];
For[i=1,i<=Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,SPhenoForm[SPhenoMass[coupAlphaEWSB[[i,1]]]]];
If[i!= Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,") \n \n"];


WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::AlphaEW_In, Q,"];
For[i=1,i<=Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,SPhenoMass[coupAlphaEWSB[[i,1]],getGenSPheno[coupAlphaEWSB[[i,1]]]]];
If[i!= Length[coupAlphaEWSB],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,"\n"];
WriteString[sphenoLoopCoup,"Integer::i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];

WriteString[sphenoLoopCoup,"DeltaAlpha=1._dp/6._dp \n"];
For[i=1,i<=Length[coupAlphaEWSB],
If[getGenSPheno[coupAlphaEWSB[[i,1]]]>1,
If[SMQ[coupAlphaEWSB[[i,1]]]=!=True,
WriteString[sphenoLoopCoup, "Do i1="<> ToString[If[SMQ[coupAlphaEWSB[[i,1]]],4,getGenSPhenoStart[coupAlphaEWSB[[i,1]]]]]<>","<> ToString[getGenSPheno[coupAlphaEWSB[[i,1]]]]<>"\n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha+"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q) \n"];
WriteString[sphenoLoopCoup,"End Do \n"];
];,
If[SMQ[coupAlphaEWSB[[i,1]]]=!=True,
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha+"<>SPhenoForm[coupAlphaEWSB[[i,2]]^2*coupAlphaEWSB[[i,3]]*coupAlphaEWSB[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaEWSB[[i,1]],i1]<>"/ Q)\n"];
];
];
i++;];

WriteString[sphenoLoopCoup,"DeltaAlpha=-alpha_in*DeltaAlpha/(2._dp*Pi) \n"];

WriteString[sphenoLoopCoup,"AlphaEW_T=Alpha_in/(1._dp-DeltaAlpha) \n \n"];
WriteString[sphenoLoopCoup,"End Function AlphaEW_T \n \n \n"];

];


WriteAlphaStrongThreshold:=Block[{i},

Print["  Writing 'AlphaS_T'"];

WriteString[sphenoLoopCoup,"Real(dp) Function AlphaS_T(AlphaS_In, Q,"];
For[i=1,i<=Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,SPhenoForm[SPhenoMass[coupAlphaStrong[[i,1]]]]];
If[i!= Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup,") \n"];


WriteString[sphenoLoopCoup,"Real(dp),Intent(in):: AlphaS_In, Q,"];
For[i=1,i<=Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,SPhenoMass[coupAlphaStrong[[i,1]],getGenSPheno[coupAlphaStrong[[i,1]]]]];
If[i!= Length[coupAlphaStrong],
WriteString[sphenoLoopCoup,","];
];
i++;];
WriteString[sphenoLoopCoup," \n"];

WriteString[sphenoLoopCoup,"Integer::i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];


WriteString[sphenoLoopCoup,"DeltaAlpha = 0.5_dp \n"];
For[i=1,i<=Length[coupAlphaStrong],
If[getGenSPheno[coupAlphaStrong[[i,1]]]>1,
WriteString[sphenoLoopCoup, "Do i1=1,"<> ToString[getGenSPheno[coupAlphaStrong[[i,1]]]]<>"\n"];
WriteString[sphenoLoopCoup," If (Abs("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/mf_u(3)).gt.1._dp) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*coupAlphaStrong[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q) \n"];
WriteString[sphenoLoopCoup," End If \n"];
WriteString[sphenoLoopCoup,"End Do \n"];,
WriteString[sphenoLoopCoup,"DeltaAlpha=DeltaAlpha-"<>SPhenoForm[coupAlphaStrong[[i,2]]^2*coupAlphaStrong[[i,3]]*coupAlphaStrong[[i,4]]/3]<>"*Log("<>SPhenoMass[coupAlphaStrong[[i,1]],i1]<>"/ Q) \n"];
];
i++;];

WriteString[sphenoLoopCoup,"DeltaAlpha=AlphaS_In*DeltaAlpha/(2._dp*Pi) \n"];
WriteString[sphenoLoopCoup,"   AlphaS_T=AlphaS_In/(1._dp-DeltaAlpha)\n \n"];

WriteString[sphenoLoopCoup,"End Function AlphaS_T\n"];

];



InitHiggsLoopCouplings:=Block[{i,temp,name, ProcessList},
ParticlesToHiggs=TwoBodyDecay[HiggsBoson];
temp={};
For[i=1,i<=Length[ParticlesToHiggs],
If[getBlank[ParticlesToHiggs[[i,1]]]===getBlank[ParticlesToHiggs[[i,1]]],
temp = Join[temp,{ParticlesToHiggs[[i]]}];
];
i++;];
ParticlesToHiggs=TwoBodyDecay[PseudoScalar];
For[i=1,i<=Length[ParticlesToHiggs],
If[getBlank[ParticlesToHiggs[[i,1]]]===getBlank[ParticlesToHiggs[[i,1]]],
temp = Join[temp,{ParticlesToHiggs[[i]]}];
];
i++;];

ProcessList=temp;

NeededMassesLoopPhoton={};
NeededMassesLoopGluon={};
NeededCouplingsLoopPhoton={};
NeededCouplingsLoopGluon={};
NeededCouplingsLoopPhotonInsert={};
NeededCouplingsLoopGluonInsert={};


For[i=1,i<=Length[ProcessList],
If[FreeQ[ParticlesToPhoton,getBlank[ProcessList[[i,1]]]]==False,
If[FreeQ[NeededMassesLoopPhoton, SPhenoMass[ProcessList[[i,1]]]]==True,NeededMassesLoopPhoton=Join[NeededMassesLoopPhoton,{SPhenoMass[ProcessList[[i,1]]]}];
];
If[FreeQ[NeededCouplingsLoopPhoton, ProcessList[[i,3]]]==True,
NeededCouplingsLoopPhotonInsert=Join[NeededCouplingsLoopPhotonInsert,{{ProcessList[[i,3]]}}];
NeededCouplingsLoopPhoton=Join[NeededCouplingsLoopPhoton,{getSPhenoCoupling[ProcessList[[i,3]]][[1]]}];
];
];

If[FreeQ[ParticlesToGluon,getBlank[ProcessList[[i,1]]]]==False,
If[FreeQ[NeededMassesLoopGluon, SPhenoMass[ProcessList[[i,1]]]]==True,NeededMassesLoopGluon=Join[NeededMassesLoopGluon,{SPhenoMass[ProcessList[[i,1]]]}];
];
If[FreeQ[NeededCouplingsLoopgluon, ProcessList[[i,3]]]==True,
NeededCouplingsLoopGluonInsert=Join[NeededCouplingsLoopGluonInsert,{{ProcessList[[i,3]]}}];
NeededCouplingsLoopGluon=Join[NeededCouplingsLoopGluon,{getSPhenoCoupling[ProcessList[[i,3]]][[1]]}];
];
];
i++;];


temp={};
For[i=1,i<=Length[ParticlesToPhoton],
If[FreeQ[ProcessList,ParticlesToPhoton[[i,1]]]==False,
temp = Join[temp,{ParticlesToPhoton[[i]]}];
];
i++;];
ParticlesToPhotonAndHiggs=temp;

temp={};
For[i=1,i<=Length[ParticlesToGluon],
If[FreeQ[ProcessList,ParticlesToGluon[[i,1]]]==False,
temp = Join[temp,{ParticlesToGluon[[i]]}];
];
i++;];
ParticlesToGluonAndHiggs=temp;

temp=Complement[Join[Transpose[ParticlesToGluonAndHiggs][[1]],Transpose[ParticlesToPhotonAndHiggs][[1]]]];

NeededRatiosLoopCouplings={};
NeededRatiosLoopCouplingsPseudo={};
NeededRatiosLoopCouplingsSave={};
NeededRatiosLoopCouplingsSavePseudo={};
NeededRatiosLoopCouplingsPhoton={};
NeededRatiosLoopCouplingsGluon={};
NeededRatiosLoopCouplingsPhotonPseudo={};
NeededRatiosLoopCouplingsGluonPseudo={};


For[i=1,i<=Length[temp],
name = ToExpression["rat"<>SPhenoForm[temp[[i]]]];
name2 = ToExpression["ratio"<>SPhenoForm[temp[[i]]]];

nameP = ToExpression["ratP"<>SPhenoForm[temp[[i]]]];
nameP2 = ToExpression["ratioP"<>SPhenoForm[temp[[i]]]];

If[getGenSPheno[temp[[i]]]>1,
SPhenoParameters=Join[SPhenoParameters,{{name,{generation},{getGenSPheno[temp[[i]]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{nameP,{generation},{getGenSPheno[temp[[i]]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{name2,{generation,generation},{getGenSPheno[HiggsBoson],getGenSPheno[temp[[i]]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{nameP2,{generation,generation},{getGenSPheno[PseudoScalar],getGenSPheno[temp[[i]]]}}}];,
SPhenoParameters=Join[SPhenoParameters,{{name,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{nameP,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{name2,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{nameP2,{generation},{getGenSPheno[PseudoScalar]}}}];
];

(* realVar=Join[realVar,{name,nameP,name2,nameP2}]; *)
realVar=Join[realVar,{name2,nameP2}]; 
NeededRatiosLoopCouplings=Join[NeededRatiosLoopCouplings,{name}];
NeededRatiosLoopCouplingsSave=Join[NeededRatiosLoopCouplingsSave,{name2}];

NeededRatiosLoopCouplingsPseudo=Join[NeededRatiosLoopCouplingsPseudo,{nameP}];
NeededRatiosLoopCouplingsSavePseudo=Join[NeededRatiosLoopCouplingsSavePseudo,{nameP2}];

If[FreeQ[ParticlesToGluonAndHiggs,temp[[i]]]==False,
NeededRatiosLoopCouplingsGluon = Join[NeededRatiosLoopCouplingsGluon,{name}];
NeededRatiosLoopCouplingsGluonPseudo = Join[NeededRatiosLoopCouplingsGluonPseudo,{nameP}];
];

If[FreeQ[ParticlesToPhotonAndHiggs,temp[[i]]]==False,
NeededRatiosLoopCouplingsPhoton = Join[NeededRatiosLoopCouplingsPhoton,{name}];
NeededRatiosLoopCouplingsPhotonPseudo = Join[NeededRatiosLoopCouplingsPhotonPseudo,{nameP}];
];

i++;];

NeededRatiosLoopCouplingsSave=Join[NeededRatiosLoopCouplingsSave,{ratioGG,ratioPP}];
NeededRatiosLoopCouplingsSavePseudo=Join[NeededRatiosLoopCouplingsSavePseudo,{ratioPGG,ratioPPP}];
SPhenoParameters=Join[SPhenoParameters,{{ratioGG,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{ratioPP,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{ratioPGG,{generation},{getGenSPheno[PseudoScalar]}}}];
SPhenoParameters=Join[SPhenoParameters,{{ratioPPP,{generation},{getGenSPheno[PseudoScalar]}}}];


ParticlesToGPH=temp;


SPhenoParameters=Join[SPhenoParameters,{{cplHiggsPP,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{cplHiggsGG,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{cplHiggsZZvirt,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{cplHiggsWWvirt,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{cplPseudoHiggsPP,{generation},{getGenSPheno[PseudoScalar]}}}];
SPhenoParameters=Join[SPhenoParameters,{{cplPseudoHiggsGG,{generation},{getGenSPheno[PseudoScalar]}}}];

Print["  write loop induced couplings of Higgs to vector bosons (",Dynamic[DynamicHiggsLoopCnr],"/",8,")"];
DynamicHiggsLoopCnr=1;
GenerateHiggsLoopCoupling["Photon",NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,NeededCouplingsToPhoton,ParticlesToPhotonAndHiggs];
DynamicHiggsLoopCnr=2;
GenerateHiggsLoopCoupling["Gluon",NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,NeededCouplingsToGluon,ParticlesToGluonAndHiggs];
DynamicHiggsLoopCnr=3;
GenerateHiggsLoopCouplingSM["Photon",NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,NeededCouplingsToPhoton,ParticlesToPhotonAndHiggs];
DynamicHiggsLoopCnr=4;
GenerateHiggsLoopCouplingSM["Gluon",NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,NeededCouplingsToGluon,ParticlesToGluonAndHiggs];

DynamicHiggsLoopCnr=5;
GeneratePseudoHiggsLoopCoupling["Photon",NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,NeededCouplingsToPhoton,ParticlesToPhotonAndHiggs];
DynamicHiggsLoopCnr=6;
GeneratePseudoHiggsLoopCoupling["Gluon",NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,NeededCouplingsToGluon,ParticlesToGluonAndHiggs];
DynamicHiggsLoopCnr=7;
GeneratePseudoHiggsLoopCouplingSM["Photon",NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,NeededCouplingsToPhoton,ParticlesToPhotonAndHiggs];
DynamicHiggsLoopCnr=8;
GeneratePseudoHiggsLoopCouplingSM["Gluon",NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,NeededCouplingsToGluon,ParticlesToGluonAndHiggs];

WriteFunctionNLOcoefficients;

];

WriteFunctionNLOcoefficients:=Block[{},
WriteString[sphenoLoopCoup,"Complex(dp) Function cNLO_onehalf(mH,mQ,g) \n"];
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mH, mQ, g\n"];
WriteString[sphenoLoopCoup,"Real(dp)::tau \n"];
WriteString[sphenoLoopCoup,"tau=mH**2/(4._dp*mQ**2) \n"];
WriteString[sphenoLoopCoup,"If (g.lt.0._dp) Then \n"];
WriteString[sphenoLoopCoup,"  cNLO_onehalf = 1._dp \n"];
WriteString[sphenoLoopCoup,"Else \n"];
WriteString[sphenoLoopCoup,"  If (mH.lt.mQ) Then \n"];
WriteString[sphenoLoopCoup,"    cNLO_onehalf = 1._dp - oo4pi2*g**2  \n"];
WriteString[sphenoLoopCoup,"  Else if (mH.gt.(2._dp*mQ)) Then \n"];
WriteString[sphenoLoopCoup,"   If (tau.lt.100._dp) Then \n"];
WriteString[sphenoLoopCoup,"    If (tau.lt.1.1_dp) Then \n"];
WriteString[sphenoLoopCoup,"      cNLO_onehalf=1._dp+(g**2/(4*Pi**2))*(&\n"];
WriteString[sphenoLoopCoup,"       & (-1.033208159703536+7.10655096733206*tau-88.20900604676405*tau**2+598.6773733788388*tau**3-1967.3257953814561*tau**4+& \n"];
WriteString[sphenoLoopCoup,"       & 3247.6715405319346*tau**5-2330.127086890616*tau**6+677.9294006001846*tau**8-142.7923161120851*tau**10)& \n"];
WriteString[sphenoLoopCoup,"       &+(0._dp,1._dp)*(8.29739339711994-7.888861883558018/tau**3+10.437838040782095/tau**2-8.42394029242545/tau+0.2842283337270764*tau-&\n"];
WriteString[sphenoLoopCoup,"       & 0.054995208547411904*tau*Log(tau)-1.6113597681662795*Log(4*tau)+0.000021811438531828155*tau**2*Log(tau**2))) \n"];
WriteString[sphenoLoopCoup,"    Else \n"];
WriteString[sphenoLoopCoup,"      cNLO_onehalf=1._dp+(g**2/(4*Pi**2))*(&\n"];
WriteString[sphenoLoopCoup,"       & (-1.6170280814404576+0.40530581525102677/tau**3-0.33530992103515084/tau**2+3.9718559902660684/tau-0.000111953515865919*tau+& \n"];
WriteString[sphenoLoopCoup,"       & 9.129881821626589e-6*tau*Log(tau)+0.1338033886479311*Log(4*tau)-1.121902907800696e-12*tau**2*Log(tau**2))& \n"];
WriteString[sphenoLoopCoup,"       &+(0._dp,1._dp)*(8.29739339711994-7.888861883558018/tau**3+10.437838040782095/tau**2-8.42394029242545/tau+0.2842283337270764*tau-& \n"];
WriteString[sphenoLoopCoup,"       & 0.054995208547411904*tau*Log(tau)-1.6113597681662795*Log(4*tau)+0.000021811438531828155*tau**2*Log(tau**2))) \n"];
WriteString[sphenoLoopCoup,"    End if \n"];
WriteString[sphenoLoopCoup,"   Else ! mQ->0 \n"];
WriteString[sphenoLoopCoup,"     cNLO_onehalf=1._dp+(g**2/(4*Pi**2))*&\n"];
WriteString[sphenoLoopCoup,"      & (-(2._dp*Log(mH**2/mQ**2))/3._dp+(Pi**2-(Log(mH**2/mQ**2))**2)/18._dp+2*log(mH**2/4/mQ**2)&\n"];
WriteString[sphenoLoopCoup,"      &+(0._dp,1._dp)*Pi/3*((Log(mH**2/mQ**2))/3+2._dp))\n"];
WriteString[sphenoLoopCoup,"    End if \n"];
WriteString[sphenoLoopCoup,"  Else ! mQ~mH \n"];
WriteString[sphenoLoopCoup,"    cNLO_onehalf = 1._dp \n"];
WriteString[sphenoLoopCoup,"  End if \n"];
WriteString[sphenoLoopCoup,"End if \n"];
WriteString[sphenoLoopCoup,"End Function cNLO_onehalf \n \n"];


WriteString[sphenoLoopCoup,"Complex(dp) Function cANLO_onehalf(mH,mQ,g) \n"];
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mH, mQ, g\n"];
WriteString[sphenoLoopCoup,"Real(dp)::tau \n"];
WriteString[sphenoLoopCoup,"tau=mH**2/(4._dp*mQ**2) \n"];
WriteString[sphenoLoopCoup,"If (g.lt.0._dp) Then \n"];
WriteString[sphenoLoopCoup,"  cANLO_onehalf = 1._dp \n"];
WriteString[sphenoLoopCoup,"Else \n"];
WriteString[sphenoLoopCoup,"  If (mH.lt.mQ) Then \n"];
WriteString[sphenoLoopCoup,"    cANLO_onehalf = 1._dp  \n"];
WriteString[sphenoLoopCoup,"  Else if (mH.gt.(2._dp*mQ)) Then \n"];
WriteString[sphenoLoopCoup,"   If (tau.lt.100._dp) Then \n"];
WriteString[sphenoLoopCoup,"    If (tau.lt.1.1_dp) Then \n"];
WriteString[sphenoLoopCoup,"      cANLO_onehalf=1._dp+(g**2/(4*Pi**2))*(&\n"];
WriteString[sphenoLoopCoup,"       & (-1.033208159703536+7.10655096733206*tau-88.20900604676405*tau**2+598.6773733788388*tau**3-1967.3257953814561*tau**4+& \n"];
WriteString[sphenoLoopCoup,"       & 3247.6715405319346*tau**5-2330.127086890616*tau**6+677.9294006001846*tau**8-142.7923161120851*tau**10)& \n"];
WriteString[sphenoLoopCoup,"       &+(0._dp,1._dp)*(8.29739339711994-7.888861883558018/tau**3+10.437838040782095/tau**2-8.42394029242545/tau+0.2842283337270764*tau-&\n"];
WriteString[sphenoLoopCoup,"       & 0.054995208547411904*tau*Log(tau)-1.6113597681662795*Log(4*tau)+0.000021811438531828155*tau**2*Log(tau**2))) \n"];
WriteString[sphenoLoopCoup,"    Else \n"];
WriteString[sphenoLoopCoup,"      cANLO_onehalf=1._dp+(g**2/(4*Pi**2))*(&\n"];
WriteString[sphenoLoopCoup,"       & (-1.6170280814404576+0.40530581525102677/tau**3-0.33530992103515084/tau**2+3.9718559902660684/tau-0.000111953515865919*tau+& \n"];
WriteString[sphenoLoopCoup,"       & 9.129881821626589e-6*tau*Log(tau)+0.1338033886479311*Log(4*tau)-1.121902907800696e-12*tau**2*Log(tau**2))& \n"];
WriteString[sphenoLoopCoup,"       &+(0._dp,1._dp)*(8.29739339711994-7.888861883558018/tau**3+10.437838040782095/tau**2-8.42394029242545/tau+0.2842283337270764*tau-& \n"];
WriteString[sphenoLoopCoup,"       & 0.054995208547411904*tau*Log(tau)-1.6113597681662795*Log(4*tau)+0.000021811438531828155*tau**2*Log(tau**2))) \n"];
WriteString[sphenoLoopCoup,"    End if \n"];
WriteString[sphenoLoopCoup,"   Else ! mQ->0 \n"];
WriteString[sphenoLoopCoup,"     cANLO_onehalf=1._dp+(g**2/(4*Pi**2))*&\n"];
WriteString[sphenoLoopCoup,"      & (-(2._dp*Log(mH**2/mQ**2))/3._dp+(Pi**2-(Log(mH**2/mQ**2))**2)/18._dp+2*log(mH**2/4/mQ**2)&\n"];
WriteString[sphenoLoopCoup,"      &+(0._dp,1._dp)*Pi/3*((Log(mH**2/mQ**2))/3+2._dp))\n"];
WriteString[sphenoLoopCoup,"    End if \n"];
WriteString[sphenoLoopCoup,"  Else ! mQ~mH \n"];
WriteString[sphenoLoopCoup,"    cANLO_onehalf = 1._dp \n"];
WriteString[sphenoLoopCoup,"  End if \n"];
WriteString[sphenoLoopCoup,"End if \n"];
WriteString[sphenoLoopCoup,"End Function cANLO_onehalf \n \n"];

WriteString[sphenoLoopCoup,"Real(dp) Function cNLO_zero(mH,mQ,g) \n"];
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mH, mQ, g\n"];
WriteString[sphenoLoopCoup,"If (g.lt.0._dp) Then \n"];
WriteString[sphenoLoopCoup,"   cNLO_zero= 1._dp \n"];
WriteString[sphenoLoopCoup,"Else \n"];
WriteString[sphenoLoopCoup,"  If (mH.lt.mQ) Then \n"];
WriteString[sphenoLoopCoup,"    cNLO_zero = 1._dp + 2._dp*oo3pi2*g**2  \n"];
WriteString[sphenoLoopCoup,"  Else  \n"];
WriteString[sphenoLoopCoup,"    cNLO_zero = 1._dp \n"];
WriteString[sphenoLoopCoup,"  End if \n"];
WriteString[sphenoLoopCoup,"End if \n"];
WriteString[sphenoLoopCoup,"End Function cNLO_zero \n"];
];


GenerateHiggsCouplingRatios[Eigenstates_]:=Block[{ind, i , coup,list},
SPhenoParameters=Join[SPhenoParameters,{{coupHiggsPP,{generation},{getGenSPheno[HiggsBoson]}}}];
SPhenoParameters=Join[SPhenoParameters,{{coupHiggsGG,{generation},{getGenSPheno[HiggsBoson]}}}];


WriteString[sphenoBR, "vev = "<>SPhenoForm[2Sqrt[- Vertex[{VectorW,conj[VectorW]}][[2,1]]/leftCoupling^2] /. sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]] <>"\n"];

WriteString[sphenoBR, "cplHiggsWWvirt = " <>ToString[getSPhenoCoupling[C[HiggsBoson,VectorW,conj[VectorW]],SPhenoCouplingsAll][[1,1]]] <>"/vev \n"];

If[FreeQ[ParameterDefinitions,"Weinberg-Angle"]==False && AddSMrunning==True,
WriteString[sphenoBR, "cplHiggsZZvirt = " <>ToString[getSPhenoCoupling[C[HiggsBoson,VectorZ,VectorZ],SPhenoCouplingsAll][[1,1]]] <>"*Sqrt(7._dp/12._dp-10._dp/9._dp*Sin("<>SPhenoForm[Weinberg]<>")**2+40._dp/27._dp*Sin("<>SPhenoForm[Weinberg]<>")**2)/vev \n \n\n"];,
WriteString[sphenoBR, "! Weinberg angle not defined in model (using experimental value instead) \n"];WriteString[sphenoBR, "cplHiggsZZvirt = " <>ToString[getSPhenoCoupling[C[HiggsBoson,VectorZ,VectorZ],SPhenoCouplingsAll][[1,1]]] <>"*Sqrt(7._dp/12._dp-10._dp/9._dp*0.22290_dp+40._dp/27._dp*0.22290_dp)/vev \n \n\n"];
];



list = Table[SPhenoCouplingsAll[[i,1,1]],{i,1,Length[SPhenoCouplingsAll]}];

Print["  Write loop induced couplings to Higgs"];

If[getGenSPheno[HiggsBoson]>1 && FreeQ[ParameterDefinitions,"Down-VEV"]==False && FreeQ[ParameterDefinitions,"Up-VEV"]==False,

WriteString[sphenoBR,"\n \n !----------------------------------------------------\n"];
WriteString[sphenoBR,"! Scalar Higgs coupling ratios \n"];
WriteString[sphenoBR,"!----------------------------------------------------\n \n"];


If[getGenSPheno[HiggsBoson]>1,
WriteString[sphenoBR, "Do i1=1, "<>ToString[getGenSPheno[HiggsBoson]]<>"\n"];
];
For[i=1,i<=Length[ParticlesToGPH],
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[sphenoBR, "Do i2=1, "<>ToString[getGenSPheno[ParticlesToGPH[[i]]]]<>"\n"];
];
If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
If[FreeQ[list,C[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]]==False && FreeQ[Massless[Eigenstates],ParticlesToGPH[[i]]] && (FreeQ[Transpose[GoldstoneGhost][[2]],ParticlesToGPH[[i]]]|| getGen[ParticlesToGPH[[i]]]>1),
coup = getSPhenoCoupling[Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[1,1]];
ind = MakeIndicesCoupling[{HiggsBoson,i1},{AntiField[ParticlesToGPH[[i]]],i2},{ParticlesToGPH[[i]],i2},getSPhenoCoupling[Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[2]]][[1]];
If[FreeQ[SMParticles,ParticlesToGPH[[i]]]==True || OldApproach=!=True,
Switch[getType[ParticlesToGPH[[i]]],
F,
WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = "<>SPhenoForm[coup]<>ind<>"*1._dp*vev/"<>SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
S,
WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
V,
WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
];,
Switch[ParticlesToGPH[[i]],
Electron,
	WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>SPhenoForm[VEVSM1] <>" \n"];,
TopQuark,
	WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,2)*vev/"<>SPhenoForm[VEVSM2] <>" \n"];,
BottomQuark,
	WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>SPhenoForm[VEVSM1] <>" \n"];,
VectorW,
	WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -("<>SPhenoForm[VEVSM1]<>"*"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1) + "<>SPhenoForm[VEVSM2]<>"*"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,2))/vev  \n"];
];
];,
WriteString[sphenoBR,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
];
];
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[sphenoBR, "End Do \n"];
];
i++;];
LoopInducesCouplingRatiosScalar;
If[getGenSPheno[HiggsBoson]>1,
WriteString[sphenoBR, "End Do\n"];
];

If[FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===False,

WriteString[sphenoBR,"!----------------------------------------------------\n"];
WriteString[sphenoBR,"! Pseudo Scalar Higgs coupling ratios \n"];
WriteString[sphenoBR,"!----------------------------------------------------\n \n"];

If[getGenSPheno[PseudoScalar]>1,
WriteString[sphenoBR, "Do i1=1, "<>ToString[getGenSPheno[PseudoScalar]]<>"\n"];
];
For[i=1,i<=Length[ParticlesToGPH],
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[sphenoBR, "Do i2=1, "<>ToString[getGenSPheno[ParticlesToGPH[[i]]]]<>"\n"];
];
If[FreeQ[list,C[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]]==False && FreeQ[Massless[Eigenstates],ParticlesToGPH[[i]]],
coup = getSPhenoCoupling[Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[1,1]];
ind = MakeIndicesCoupling[{PseudoScalar,i1},{AntiField[ParticlesToGPH[[i]]],i2},{ParticlesToGPH[[i]],i2},getSPhenoCoupling[Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[2]]][[1]];
Switch[getType[ParticlesToGPH[[i]]],
F,
WriteString[sphenoBR,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = "<>SPhenoForm[coup]<>ind<>"*1._dp*vev/"<>SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
S,
WriteString[sphenoBR,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
V,
WriteString[sphenoBR,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
];,
WriteString[sphenoBR,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
];
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[sphenoBR, "End Do \n"];
];
i++;];
LoopInducesCouplingRatiosPseudoScalar;
If[getGenSPheno[PseudoScalar]>1,
WriteString[sphenoBR, "End Do\n \n\n"];
];
];,
For[i=1,i<=Length[ParticlesToGPH],
WriteString[sphenoBR,"rat"<>SPhenoForm[getBlank[ParticlesToGPH[[i]]]] <>" = 1._dp \n"];
WriteString[sphenoBR,"ratP"<>SPhenoForm[getBlank[ParticlesToGPH[[i]]]] <>" = 0._dp \n"];
i++;];
];



Print["   Writing coupling ratios for HiggsBounds"];

WriteString[sphenoBR,"!----------------------------------------------------\n"];
WriteString[sphenoBR,"! Coupling ratios for HiggsBounds \n"];
WriteString[sphenoBR,"!----------------------------------------------------\n \n"];


WriteString[sphenoBR, "Do i1=1, "<>ToString[getGenSPheno[HiggsBoson]]<>"\n"];
For[i=1,i<=Length[SMParticles],
If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
If[FreeQ[list,C[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]]==False,
ind = MakeIndicesCoupling[{HiggsBoson,i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],i2},getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[2]]][[1]];

If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[sphenoBR, "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>"\n"];
];
If[ FreeQ[Massless[Eigenstates],SMParticles[[i]]],
Switch[getType[SMParticles[[i]]],
F,
	coupL = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	coupR = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,2]];
	WriteString[sphenoBR,SPhenoRatioHBS[SMParticles[[i]],i1,i2]<>" = Abs(("<>SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];
	WriteString[sphenoBR,SPhenoRatioHBP[SMParticles[[i]],i1,i2]<>" = Abs(("<>SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];,
V,
	coup = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	WriteString[sphenoBR,SPhenoRatioHB[SMParticles[[i]],i1,i2]<>" = Abs(-0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
];,
WriteString[sphenoBR,SPhenoRatioHB[SMParticles[[i]],i1,i2]<>" = 0._dp \n"];
];
If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[sphenoBR, "End Do \n"];
];
];
];
If[FreeQ[ParticleDefinitions[Eigenstates],"Pseudo-Scalar Higgs"]===False,
If[FreeQ[list,C[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]]==False,
WriteString[sphenoBR, "If (i1.le. "<>ToString[getGenSPheno[PseudoScalar]]<>") Then\n"];
ind = MakeIndicesCoupling[{PseudoScalar,i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],i2},getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[2]]][[1]];
If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[sphenoBR, "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>"\n"];
];
If[FreeQ[Massless[Eigenstates],SMParticles[[i]]],
Switch[getType[SMParticles[[i]]],
F,
	coupL = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	coupR = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,2]];
	WriteString[sphenoBR,SPhenoRatioPseudoHBS[SMParticles[[i]],i1,i2]<>" = 1._dp*Abs(("<>SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];
	WriteString[sphenoBR,SPhenoRatioPseudoHBP[SMParticles[[i]],i1,i2]<>" = 1._dp*Abs(("<>SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];,
V,
	coup = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	WriteString[sphenoBR,SPhenoRatioPseudoHB[SMParticles[[i]],i1,i2]<>" = Abs(-0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
];,
WriteString[sphenoBR,SPhenoRatioPseudoHB[SMParticles[[i]],i1,i2]<>" = 0._dp \n" ];
];
If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[sphenoBR, "End Do \n"];
];
WriteString[sphenoBR, "End If \n"];
 ];
];
i++;];
WriteString[sphenoBR, "End Do \n"];


];


WriteScalarHiggsCouplingsRatio[file_, Eigenstates_,list_]:=Block[{i},
WriteString[file,"!----------------------------------------------------\n"];
WriteString[file,"! Scalar Higgs coupling ratios \n"];
WriteString[file,"!----------------------------------------------------\n \n"];

For[i=1,i<=Length[ParticlesToGPH],
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[file, "Do i2=1, "<>ToString[getGenSPheno[ParticlesToGPH[[i]]]]<>"\n"];
];
If[FreeQ[ParticleDefinitions[Eigenstates],"Higgs"]===False,
If[FreeQ[list,C[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]]==False && FreeQ[Massless[Eigenstates],ParticlesToGPH[[i]]] && (FreeQ[Transpose[GoldstoneGhost][[2]],ParticlesToGPH[[i]]]|| (getGen[ParticlesToGPH[[i]]]-getGenSPhenoStart[ParticlesToGPH[[i]]])>=0),
coup = getSPhenoCoupling[Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[1,1]];
ind = MakeIndicesCoupling[{HiggsBoson,i1},{AntiField[ParticlesToGPH[[i]]],i2},{ParticlesToGPH[[i]],i2},getSPhenoCoupling[Cp[HiggsBoson,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[2]]][[1]];
(* If[FreeQ[SMParticles,ParticlesToGPH[[i]]]\[Equal]True  || FreeQ[ParameterDefinitions,"Scalar-Mixing-Matrix"] || FreeQ[ParameterDefinitions,"Down-VEV"]|| FreeQ[ParameterDefinitions,"Up-VEV"] | TreatSMstatesSeparately=!=True, *)
Switch[getType[ParticlesToGPH[[i]]],
F,
WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = "<>SPhenoForm[coup]<>ind<>"*1._dp*vev/"<>SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
S,
WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
V,
WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
];(* , 
Switch[ParticlesToGPH[[i]],
Electron,
	WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>SPhenoForm[VEVSM1] <>" \n"];,
TopQuark,
	WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,2)*vev/"<>SPhenoForm[VEVSM2] <>" \n"];,
BottomQuark,
	WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1)*vev/"<>SPhenoForm[VEVSM1] <>" \n"];,
VectorW,
	WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = -("<>SPhenoForm[VEVSM1]<>"*"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,1) + "<>SPhenoForm[VEVSM2]<>"*"<>SPhenoForm[HiggsMixingMatrix]<>"(i1,2))/vev  \n"];
];
]; *),
WriteString[file,SPhenoRatio[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
];
];
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[file, "End Do \n"];
];
i++;];
];


WriteHiggsBoundsRatiosScalar[file_,Eigenstates_,list_]:=Block[{i,j},
WriteString[file,"!----------------------------------------------------\n"];
WriteString[file,"! Coupling ratios for HiggsBounds \n"];
WriteString[file,"!----------------------------------------------------\n \n"];

For[i=1,i<=Length[SMParticles],
If[FreeQ[list,C[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]]==False,
ind = MakeIndicesCoupling[{HiggsBoson,i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],i2},getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[2]]][[1]];

If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[file, "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>"\n"];
];
If[ FreeQ[Massless[Eigenstates],SMParticles[[i]]],
Switch[getType[SMParticles[[i]]],
F,
	coupL = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	coupR = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,2]];
	WriteString[file,SPhenoRatioHBS[SMParticles[[i]],i1,i2]<>" = Abs(("<>SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];
	WriteString[file,SPhenoRatioHBP[SMParticles[[i]],i1,i2]<>" = Abs(("<>SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];,
V,
	coup = getSPhenoCoupling[Cp[HiggsBoson,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	WriteString[file,SPhenoRatioHB[SMParticles[[i]],i1,i2]<>" = Abs(-0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
];,
WriteString[file,SPhenoRatioHB[SMParticles[[i]],i1,i2]<>" = 0._dp \n"];
];
If[getGenSPheno[SMParticles[[i]]]>1, WriteString[file, "End Do \n"];];
];
i++;];
];


WritePseudoScalarCouplingsRatio[file_,Eigenstates_,list_]:=Block[{i,j},
WriteString[file,"!----------------------------------------------------\n"];
WriteString[file,"! Pseudo Scalar Higgs coupling ratios \n"];
WriteString[file,"!----------------------------------------------------\n \n"];

For[i=1,i<=Length[ParticlesToGPH],
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[file, "Do i2=1, "<>ToString[getGenSPheno[ParticlesToGPH[[i]]]]<>"\n"];
];
If[FreeQ[list,C[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]]==False && FreeQ[Massless[Eigenstates],ParticlesToGPH[[i]]] && ((getGen[ParticlesToGPH[[i]]]-getGenSPhenoStart[ParticlesToGPH[[i]]])>=0),
coup = getSPhenoCoupling[Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[1,1]];
ind = MakeIndicesCoupling[{PseudoScalar,i1},{AntiField[ParticlesToGPH[[i]]],i2},{ParticlesToGPH[[i]],i2},getSPhenoCoupling[Cp[PseudoScalar,AntiField[ParticlesToGPH[[i]]],ParticlesToGPH[[i]]]][[2]]][[1]];
Switch[getType[ParticlesToGPH[[i]]],
F,
WriteString[file,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = "<>SPhenoForm[coup]<>ind<>"*1._dp*vev/"<>SPhenoMass[ParticlesToGPH[[i]],i2]<>" \n" ];,
S,
WriteString[file,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];,
V,
WriteString[file,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = -0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[ParticlesToGPH[[i]],i2]<>" \n" ];
];,
WriteString[file,SPhenoRatioPseudo[ParticlesToGPH[[i]],i2]<>" = 0._dp \n"]; 
];
If[getGenSPheno[ParticlesToGPH[[i]]]>1,
WriteString[file, "End Do \n"];
];
i++;];
];

WriteHiggsBoundsRatiosPseudoScalar[file_,Eigenstates_,list_]:=Block[{i,j,i1,i2},
WriteString[file,"!----------------------------------------------------\n"];
WriteString[file,"! Coupling ratios for HiggsBounds \n"];
WriteString[file,"!----------------------------------------------------\n \n"];

For[i=1,i<=Length[SMParticles],
If[FreeQ[list,C[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]]==False,
ind = MakeIndicesCoupling[{PseudoScalar,i1},{AntiField[SMParticles[[i]]],i2},{SMParticles[[i]],i2},getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[2]]][[1]];
If[getGenSPheno[SMParticles[[i]]]>1,
WriteString[file, "Do i2=1, "<>ToString[getGenSPheno[SMParticles[[i]]]]<>"\n"];
];
If[FreeQ[Massless[Eigenstates],SMParticles[[i]]],
Switch[getType[SMParticles[[i]]],
F,
	coupL = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	coupR = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,2]];
	WriteString[file,SPhenoRatioPseudoHBS[SMParticles[[i]],i1,i2]<>" = 1._dp*Abs(("<>SPhenoForm[coupL]<>ind<>"+"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];
	WriteString[file,SPhenoRatioPseudoHBP[SMParticles[[i]],i1,i2]<>" = 1._dp*Abs(("<>SPhenoForm[coupL]<>ind<>"-"<>SPhenoForm[coupR]<>ind<>")*vev/(2._dp*"<>SPhenoMass[SMParticles[[i]],i2]<>"))**2 \n" ];,
V,
	coup = getSPhenoCoupling[Cp[PseudoScalar,AntiField[SMParticles[[i]]],SMParticles[[i]]]][[1,1]];
	WriteString[file,SPhenoRatioPseudoHB[SMParticles[[i]],i1,i2]<>" = Abs(-0.5_dp*"<>SPhenoForm[coup]<>ind<>"*vev/"<>SPhenoMassSq[SMParticles[[i]],i2]<>")**2 \n" ];
];,
WriteString[file,SPhenoRatioPseudoHB[SMParticles[[i]],i1,i2]<>" = 0._dp \n" ];
];
If[getGenSPheno[SMParticles[[i]]]>1, WriteString[file, "End Do \n"]; ];
 ];
i++;];
];

LoopInducesCouplingRatiosScalar:=Block[{},
WriteString[sphenoBR,"\n! Loop induced Higgs to Photon/Gluon couplings \n"];

MakeCall["CoupHiggsToPhoton",Flatten[{NeededRatiosLoopCouplingsPhoton,NeededMassesLoopPhoton,NeededCouplingsToPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
If[getGenSPheno[HiggsBoson]>1,addgen="(i1)";,addgen="";];
WriteString[sphenoBR,"cplHiggsPP"<>addgen<>" = coup*oo4pi \n"]; 
MakeCall["CoupHiggsToPhotonSM",Flatten[{NeededMassesLoopPhoton,NeededCouplingsToPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"ratioPP"<>addgen<>" = Abs(cplHiggsPP"<>addgen<>"/(coup*oo4pi))**2 \n"];

MakeCall["CoupHiggsToGluon",Flatten[{NeededRatiosLoopCouplingsGluon,NeededMassesLoopGluon,NeededCouplingsToGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"cplHiggsGG"<>addgen<>" = coup*oo4pi\n"]; 
MakeCall["CoupHiggsToGluonSM",Flatten[{NeededMassesLoopGluon,NeededCouplingsToGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"ratioGG"<>addgen<>" = Abs(cplHiggsGG"<>addgen<>"/(coup*oo4pi))**2 \n"];

WriteString[sphenoBR, "\n"];

];

LoopInducesCouplingRatiosPseudoScalar:=Block[{},
WriteString[sphenoBR,"\n! Loop induced Higgs to Photon/Gluon couplings \n"];

If[getGenSPheno[PseudoScalar]>1,addgen="(i1)";,addgen="";];
MakeCall["CoupPseudoHiggsToPhoton",Flatten[{NeededRatiosLoopCouplingsPhotonPseudo,NeededMassesLoopPhoton,NeededCouplingsToPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"cplPseudoHiggsPP"<>addgen<>" = coup*oo4pi \n"]; 
MakeCall["CoupPseudoHiggsToPhotonSM",Flatten[{NeededMassesLoopPhoton,NeededCouplingsToPhoton}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"ratioPPP"<>addgen<>" = Abs(cplHiggsPP"<>addgen<>"/(coup*oo4pi))**2 \n"]; 

MakeCall["CoupPseudoHiggsToGluon",Flatten[{NeededRatiosLoopCouplingsGluonPseudo,NeededMassesLoopGluon,NeededCouplingsToGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"cplPseudoHiggsGG"<>addgen<>" = coup*oo4pi \n"]; 
MakeCall["CoupPseudoHiggsToGluonSM",Flatten[{NeededMassesLoopGluon,NeededCouplingsToGluon}],{SPhenoMass[HiggsBoson,i1]},{"coup"},sphenoBR];
WriteString[sphenoBR,"ratioPGG"<>addgen<>" = Abs(cplHiggsGG"<>addgen<>"/(coup*oo4pi))**2 \n"]; 
WriteString[sphenoBR, "\n"];
];


GenerateHiggsLoopCoupling[vname_,ratios_,masses_,coups_,list_]:=Block[{i, factor,coupL,stringTemp},

(* Print["Write Loop induced coupling Higgs to ",vname]; *)

(* MakeSubroutineTitle["CoupHiggsTo"<>vname,Flatten[{ratios,masses,coups}],{"mHiggs"},{"coup"},sphenoLoopCoup]; *)

MakeSubroutineTitle["CoupHiggsTo"<>vname,Flatten[{ratios,masses}],{"mHiggs","inG"},{"gNLO","coup"},sphenoLoopCoup];

WriteString[sphenoLoopCoup,"Implicit None \n"];
MakeVariableList[ratios,",Intent(in)",sphenoLoopCoup];
MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
WriteString[sphenoLoopCoup,"Integer, Intent(in) :: inG \n"];
(* MakeVariableList[coups,",Intent(in)",sphenoLoopCoup]; *)
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs, gNLO \n"];
WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];

WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs**2 \n"];
WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];

For[i=1,i<=Length[list],
If[getGenSPheno[list[[i,1]]]>1,
WriteString[sphenoLoopCoup,"Do i1 = "<>ToString[getGenSPhenoStart[list[[i,1]]]]<>" , "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
];

Switch[getType[list[[i,1]]],
S,
	spinname = "zero";
         If[SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]===1/2,qcdfactor="rsq";,qcdfactor="1._dp";];,
V,
	spinname ="one";
         qcdfactor = "1._dp";,
F,
	spinname ="onehalf";
          If[SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]===1/2,qcdfactor="rq";,qcdfactor="1._dp";];
];




stringTemp="HPPloop"<>SPhenoForm[list[[i,1]]];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,stringTemp=stringTemp<>"("];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1,stringTemp = stringTemp <>"i1";
If[getGen[HiggsBoson]>1, stringTemp= stringTemp<>","];
];
If[getGen[HiggsBoson]>1,stringTemp = stringTemp <>"inG"];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,stringTemp = stringTemp <>")"];


factor = list[[i,2]]^2;
If[vname=!="Gluon",
(* factor = factor*ChargeFactor[VectorP,list[[i,1]],AntiField[list[[i,1]]]]; *)
currentVB = VectorP;
mulfactor = ChargeFactor[HiggsBoson,list[[i,1]],AntiField[list[[i,1]]]];,
currentVB = VectorG;
mulfactor =2 SA`Dynkin[list[[i,1]],Position[Gauge,color][[1,1]]];
];

If[AntiField[list[[i,1]]]===list[[i,1]],
mulfactor=1/2mulfactor;
];
(*
If[getType[list[[i,1]]]===F && SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]\[Equal]1/2  && vname =!="Gluon", WriteString[sphenoLoopCoup,"If ("<>SPhenoMass[list[[i,1]],i1]<>".gt.mHiggs) Then \n"];
];
*)
If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*"<>SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
If[(getType[list[[i,1]]]===F || getType[list[[i,1]]]===S) && SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]===1/2,
WriteString[sphenoLoopCoup,"coup = coup + cNLO_"<>spinname<>"(mHiggs,"<>SPhenoMass[list[[i,1]],i1]<>",gNLO)"<>"*"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
WriteString[sphenoLoopCoup,stringTemp<>" = "<> stringTemp <>" + cNLO_"<>spinname<>"(mHiggs,"<>SPhenoMass[list[[i,1]],i1]<>",gNLO)"<>"*"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
WriteString[sphenoLoopCoup,stringTemp<>" = "<> stringTemp <>"+"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>SPhenoRatio[list[[i,1]],i1]<>"*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
];
];

If[getGenSPheno[list[[i,1]]]>1,
WriteString[sphenoLoopCoup,"End Do \n"];
];

i++;];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = 0.75_dp*coup \n"];
];

WriteString[sphenoLoopCoup,"End Subroutine CoupHiggsTo"<>vname <>"\n\n"];
];


GenerateHiggsLoopCouplingSM[vname_,ratios_,masses_,coups_,list_]:=Block[{i},

(* Print["Write Loop induced coupling Higgs to ",vname]; *)

(* MakeSubroutineTitle["CoupHiggsTo"<>vname<>"SM",Flatten[{masses,coups}],{"mHiggs"},{"coup"},sphenoLoopCoup]; *)

MakeSubroutineTitle["CoupHiggsTo"<>vname<>"SM",Flatten[{masses}],{"mHiggs"},{"gNLO","coup"},sphenoLoopCoup];

WriteString[sphenoLoopCoup,"Implicit None \n"];
MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
(* MakeVariableList[coups,",Intent(in)",sphenoLoopCoup]; *)
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs, gNLO \n"];
WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];

WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs**2 \n"];
WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];

For[i=1,i<=Length[list],
If[SMQ[list[[i,1]]],
If[getGenSPheno[list[[i,1]]]>1,
WriteString[sphenoLoopCoup,"Do i1 ="<>ToString[getGenSPhenoStart[list[[i,1]]]]<> ", 3 \n"];
];

Switch[getType[list[[i,1]]],
S,
	spinname = "zero";,
V,
	spinname ="one";
	qcdfactor = "1._dp";,
F,
	spinname ="onehalf";
	If[SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]===1/2,qcdfactor="rq";,qcdfactor="1._dp";];
];

factor = list[[i,2]]^2;
If[vname=!="Gluon",
(* factor = factor*ChargeFactor[VectorP,list[[i,1]],list[[i,1]]]; *)
currentVB = VectorP;
mulfactor = ChargeFactor[HiggsBoson,list[[i,1]],AntiField[list[[i,1]]]];,
currentVB = VectorG;
mulfactor =2 SA`Dynkin[list[[i,1]],Position[Gauge,color][[1,1]]];
];

If[AntiField[list[[i,1]]]===list[[i,1]],
mulfactor=1/2mulfactor;
];


If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
If[(getType[list[[i,1]]]===F || getType[list[[i,1]]]===S) && SA`Dynkin[list[[i,1]],Position[Gauge,strongCoupling][[1,1]]]===1/2,
WriteString[sphenoLoopCoup,"coup = coup + cNLO_"<>spinname<>"(mHiggs,"<>SPhenoMass[list[[i,1]],i1]<>",gNLO)"<>"*"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*A_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
];
];

If[getGenSPheno[list[[i,1]]]>1,
WriteString[sphenoLoopCoup,"End Do \n"];
];
];
i++;];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = 0.75_dp*coup \n"];
];

WriteString[sphenoLoopCoup,"End Subroutine CoupHiggsTo"<>vname <>"SM \n\n"];
];



GeneratePseudoHiggsLoopCoupling[vname_,ratios_,masses_,coups_,list_]:=Block[{i},

(* Print["Write Loop induced coupling Higgs to ",vname]; *)

(* MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname,Flatten[{ratios,masses,coups}],{"mHiggs"},{"coup"},sphenoLoopCoup]; *)
MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname,Flatten[{ratios,masses}],{"mHiggs","inG"},{"gNLO","coup"},sphenoLoopCoup];
WriteString[sphenoLoopCoup,"Implicit None \n"];
MakeVariableList[ratios,",Intent(in)",sphenoLoopCoup];
MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
(* MakeVariableList[coups,",Intent(in)",sphenoLoopCoup]; *)
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs, gNLO \n"];
WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
WriteString[sphenoLoopCoup,"Integer, Intent(in) :: inG \n"];
WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];

WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs**2 \n"];
WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];

For[i=1,i<=Length[list],
If[getGenSPheno[list[[i,1]]]>1  && getType[list[[i,1]]]===F,
WriteString[sphenoLoopCoup,"Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
];

Switch[getType[list[[i,1]]],
S,
	spinname = "zero";,
V,
	spinname ="one";,
F,
	spinname ="onehalf";

factor = list[[i,2]]^2;
If[vname=!="Gluon",
(* factor = factor*ChargeFactor[VectorP,list[[i,1]],list[[i,1]]]; *)
currentVB = VectorP;
mulfactor = ChargeFactor[PseudoScalar,list[[i,1]],bar[list[[i,1]]]];,
currentVB = VectorG;
mulfactor =2 SA`Dynkin[list[[i,1]],Position[Gauge,color][[1,1]]];
];
If[AntiField[list[[i,1]]]===list[[i,1]],
mulfactor=1/2mulfactor;
];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*"<>SPhenoRatio[list[[i,1]],i1]<>"*AP_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
WriteString[sphenoLoopCoup,"coup = coup + cANLO_"<>spinname<>"(mHiggs,"<>SPhenoMass[list[[i,1]],i1]<>",gNLO)*"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>SPhenoRatio[list[[i,1]],i1]<>"*AP_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
];
];


If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
WriteString[sphenoLoopCoup,"End Do \n"];
];

i++;];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = 0.75_dp*coup \n"];
];

WriteString[sphenoLoopCoup,"End Subroutine CoupPseudoHiggsTo"<>vname <>"\n\n"];
];


GeneratePseudoHiggsLoopCouplingSM[vname_,ratios_,masses_,coups_,list_]:=Block[{i},

(* Print["Write Loop induced coupling Higgs to ",vname]; *)

(* MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname<>"SM",Flatten[{masses,coups}],{"mHiggs"},{"coup"},sphenoLoopCoup]; *)
MakeSubroutineTitle["CoupPseudoHiggsTo"<>vname<>"SM",Flatten[{masses}],{"mHiggs"},{"gNLO","coup"},sphenoLoopCoup];
WriteString[sphenoLoopCoup,"Implicit None \n"];
MakeVariableList[masses,",Intent(in)",sphenoLoopCoup];
(* MakeVariableList[coups,",Intent(in)",sphenoLoopCoup]; *)
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: mHiggs,gNLO \n"];
WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coup \n"];
WriteString[sphenoLoopCoup,"Integer :: i1 \n"];
WriteString[sphenoLoopCoup,"Real(dp) :: Mh2p \n"];

WriteString[sphenoLoopCoup,"mH2p = 0.25_dp*mHiggs**2 \n"];
WriteString[sphenoLoopCoup,"coup = 0._dp \n \n"];

For[i=1,i<=Length[list],
If[SMQ[list[[i,1]]],
If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
WriteString[sphenoLoopCoup,"Do i1 =1, "<>ToString[getGenSPheno[list[[i,1]]]] <>"\n"];
];

Switch[getType[list[[i,1]]],
S,
	spinname = "zero";,
V,
	spinname ="one";,
F,
	spinname ="onehalf";

If[vname=!="Gluon",
currentVB = VectorP;
mulfactor = ChargeFactor[PseudoScalar,list[[i,1]],bar[list[[i,1]]]];,
currentVB = VectorG;
mulfactor =1;
];
If[AntiField[list[[i,1]]]===list[[i,1]],
mulfactor=1/2mulfactor;
];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = coup + "<>SPhenoForm[mulfactor]<> "*AP_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];,
WriteString[sphenoLoopCoup,"coup = coup + cANLO_"<>spinname<>"(mHiggs,"<>SPhenoMass[list[[i,1]],i1]<>",gNLO)*"<>SPhenoForm[mulfactor]<> "*("<>SPhenoForm[getElectricCharge[list[[i,1]]]]<>")**2*"<>"*AP_"<>spinname <>"(mH2p/"<>SPhenoMass[list[[i,1]],i1]<>"**2)\n"];
];

];
If[getGenSPheno[list[[i,1]]]>1 && getType[list[[i,1]]]===F,
WriteString[sphenoLoopCoup,"End Do \n"];
];

];
i++;];

If[vname==="Gluon",
WriteString[sphenoLoopCoup,"coup = 0.75_dp*coup \n"];
];

WriteString[sphenoLoopCoup,"End Subroutine CoupPseudoHiggsTo"<>vname <>"SM \n\n"];
];



GenerateHiggsFermionCouplings[scalar_,fermion_,yukawa_,mixL_,mixR_,vev_,mixHiggs_,compHiggs_]:=Block[{i,temp},

temp=InsFields[{{C[fermion,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[fermion],FieldToInsert[2],AntiField[FieldToInsert[1]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->fermion,External[2]->bar[fermion]}}];

AllInternalParticles={};
AllAddedCouplings ={};

WaveFunctionContribution={};
For[i=1,i<=Length[temp],
If[FreeQ[SMParticles,getBlank[Internal[1] /. temp[[i,2]]]] && FreeQ[SMParticles,getBlank[Internal[2] /. temp[[i,2]]]],
WaveFunctionContribution = Join[WaveFunctionContribution,{temp[[i]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2]}/. temp[[i,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[i,1]]];
];
i++;];

	PenguinContributions={};

temp=InsFields[{{C[fermion,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[fermion],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[scalar,FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->fermion,External[2]->bar[fermion],External[3]->scalar}}];
For[j=1,j<=Length[temp],
If[FreeQ[SMParticles,getBlank[Internal[1] /. temp[[j,2]]]] && FreeQ[SMParticles,getBlank[Internal[2] /. temp[[j,2]]]] && FreeQ[SMParticles,getBlank[Internal[3] /. temp[[j,2]]]],
PenguinContributions= Join[PenguinContributions,{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
];
j++;];

NeededMasses=Intersection[SPhenoMass/@AllInternalParticles];
NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Intersection[Flatten[NeededCouplings]];

ParametersEffCouplings=Join[ParametersEffCouplings,{{ToExpression["EffC"<>SPhenoForm[scalar]<>"To"<>SPhenoForm[fermion]],NeededMasses,NeededCouplings}}];

WriteEffCouplingsFermionHiggs["Coup"<>SPhenoForm[fermion]<>"To"<>SPhenoForm[scalar],NeededMasses,NeededCouplings,WaveFunctionContribution,PenguinContributions, yukawa,mixL,mixR,vev,mixHiggs,compHiggs];

];


WriteEffCouplingsFermionHiggs[name_,masses_,couplings_,wave_,penguin_,yukawa_,mixL_,mixR_,vev_,mixHiggs_,compHiggs_]:=Block[{i},

Print["  Write effective coupling ",name];

MakeSubroutineTitle[name,Flatten[{masses,couplings,yukawa,mixL,mixR,vev,mixHiggs}],{"gt1","gt2","gt3"},{"coupL","coupR"},sphenoLoopCoup];

WriteString[sphenoLoopCoup, "Implicit None \n"];
MakeVariableList[Flatten[{couplings,masses,yukawa,mixL,mixR,vev,mixHiggs}],",Intent(in)",sphenoLoopCoup];
MakeVariableList[MakeSquaredMass/@masses,"",sphenoLoopCoup];
WriteString[sphenoLoopCoup,"Integer, Intent(in) :: gt1, gt2, gt3 \n"];
WriteString[sphenoLoopCoup,"Complex(dp), Intent(out) :: coupL, coupR \n"];
WriteString[sphenoLoopCoup, "Integer :: i1, i2, i3 \n"];
WriteString[sphenoLoopCoup, "Complex(dp) :: sigLR, sigRL,dc_L,dc_R, coupL1, coupR1, coupL2, coupR2, coupL3, coupR3,coupC, B0m2 \n"];
WriteString[sphenoLoopCoup, "Complex(dp) :: C0m,C2m \n \n\n"];

For[i=1,i<=Length[masses],
WriteString[sphenoLoopCoup,ToString[MakeSquaredMass[masses[[i]]]]<>" = " <>ToString[masses[[i]]]<>"**2 \n"];
i++;];



WriteString[sphenoLoopCoup, "If (CompareMatrices(id3C,"<>SPhenoForm[mixL]<>",NearlyZero).And.& \n"];
WriteString[sphenoLoopCoup, "      & CompareMatrices(id3C,"<>SPhenoForm[mixR]<>",NearlyZero)) Then \n"];
WriteString[sphenoLoopCoup, "coupL="<>SPhenoForm[yukawa]<>"(gt2,gt1) \n"];
WriteString[sphenoLoopCoup, "coupR=Conjg("<>SPhenoForm[yukawa]<>"(gt1,gt2)) \n"];

WriteString[sphenoLoopCoup, "Else If (CompareMatrices(id3C,"<>SPhenoForm[mixL]<>",NearlyZero)) Then \n"];
WriteString[sphenoLoopCoup, "Do i2=1,3 \n"];
WriteString[sphenoLoopCoup, "coupL=coupL+"<>SPhenoForm[yukawa]<>"(gt2,i2)*Conjg("<>SPhenoForm[mixR]<>"(gt1,i2)) \n"];
WriteString[sphenoLoopCoup, "coupR=coupR+Conjg("<>SPhenoForm[yukawa]<>"(gt1,i2))*"<>SPhenoForm[mixR]<>"(gt2,i2) \n"];
WriteString[sphenoLoopCoup, "End Do \n"];
 
WriteString[sphenoLoopCoup, "Else If (CompareMatrices(id3C,"<>SPhenoForm[mixR]<>",NearlyZero)) Then \n"];
WriteString[sphenoLoopCoup, "Do i1=1,3 \n"];
WriteString[sphenoLoopCoup, "coupL=coupL+Conjg("<>SPhenoForm[mixL]<>"(gt2,i1))*"<>SPhenoForm[yukawa]<>"(i1,gt1) \n"];
WriteString[sphenoLoopCoup, "coupR=coupR+"<>SPhenoForm[mixL]<>"(gt1,i1)*Conjg("<>SPhenoForm[yukawa]<>"(i1,gt2)) \n"];
WriteString[sphenoLoopCoup, "End Do \n"];

WriteString[sphenoLoopCoup, "Else \n"];
WriteString[sphenoLoopCoup, "Do i1=1,3 \n"];
WriteString[sphenoLoopCoup, "Do i2=1,3 \n"];
WriteString[sphenoLoopCoup, "coupL=coupL+Conjg("<>SPhenoForm[mixL]<>"(gt2,i1))*"<>SPhenoForm[yukawa]<>"(i1,i2)*Conjg("<>SPhenoForm[mixR]<>"(gt1,i2)) \n"];
WriteString[sphenoLoopCoup, "coupR=coupR+"<>SPhenoForm[mixL]<>"(gt1,i1)*Conjg("<>SPhenoForm[yukawa]<>"(i1,i2))*"<>SPhenoForm[mixL]<>"(gt2,i2) \n"];
WriteString[sphenoLoopCoup, "End Do \n"];
WriteString[sphenoLoopCoup, "End Do \n"];
WriteString[sphenoLoopCoup, "End If \n"];

WriteString[sphenoLoopCoup, "coupR = - coupR*"<>SPhenoForm[mixHiggs]<>"(gt3,"<>SPhenoForm[compHiggs]<>") \n"];
WriteString[sphenoLoopCoup, "coupL = - coupL*"<>SPhenoForm[mixHiggs]<>"(gt3,"<>SPhenoForm[compHiggs]<>") \n \n\n"];	



WriteString[sphenoLoopCoup,"sigLR = 0._dp \n"];
WriteString[sphenoLoopCoup,"sigRL = 0._dp \n"];

For[i=1, i<=Length[wave],
p1=(Internal[1] /. wave[[i,2]]);
p2 =(Internal[2] /. wave[[i,2]]);

If[getType[p1]===F, pt1=p1; pt2=p2;,pt1=p2; pt2=p1;];
If[getGenSPheno[pt1]>1,WriteString[sphenoLoopCoup,"Do i1=1,"<> ToString[getGenSPheno[pt1]]<>"\n"];];
If[getGenSPheno[pt2]>1,WriteString[sphenoLoopCoup,"Do i2=1,"<> ToString[getGenSPheno[pt2]]<>"\n"];];
WriteString[sphenoLoopCoup,"B0m2 = "<> SPhenoMass[pt1,i1]<>"*B0(0._dp,"<>SPhenoMass[pt1,i1]<>"**2,"<>SPhenoMass[pt2,i2]<>"**2) \n"];

c1=getSPhenoCoupling[wave[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling[wave[[i,1,2]],SPhenoCouplingsAll];

ind1 = MakeIndicesCoupling[{External[1],gt1}/.wave[[i,2]],{Internal[1],i1}/.wave[[i,2]],{AntiField[Internal[2]],i2}/.wave[[i,2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{External[2],gt2}/.wave[[i,2]],{AntiField[Internal[1]],i1}/.wave[[i,2]],{Internal[2],i2}/.wave[[i,2]],c2[[2]]];

If[ind1[[2]]==False,
WriteString[sphenoLoopCoup,"coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];WriteString[sphenoLoopCoup,"coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
];

If[ind2[[2]]==False,
WriteString[sphenoLoopCoup,"coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
WriteString[sphenoLoopCoup,"coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
];

factor = SPhenoForm[CalculateColorFactor[External[1] /. wave[[i,2]],Internal[1] /. wave[[i,2]],Internal[1] /. wave[[i,2]]]];

WriteString[sphenoLoopCoup,"sigLR = sigLR + "<>factor<>"*coupR2*coupR1*B0m2 \n"];
WriteString[sphenoLoopCoup,"sigRL = sigRL + "<>factor<>"*coupL2*coupL1*B0m2 \n"];


If[getGenSPheno[pt1]>1,WriteString[sphenoLoopCoup,"End Do \n"];];
If[getGenSPheno[pt2]>1,WriteString[sphenoLoopCoup,"End Do \n"];];
WriteString[sphenoLoopCoup,"\n\n"];
i++;];

WriteString[sphenoLoopCoup,"\n\n\n"];
WriteString[sphenoLoopCoup,"sigRL = Cmplx(0._dp,oosqrt2,dp)*"<>SPhenoForm[yukawa]<>"(gt1,gt2)*oo16pi2*sigRL \n"];
WriteString[sphenoLoopCoup,"sigLR = Cmplx(0._dp,-oosqrt2,dp)*Conjg("<>SPhenoForm[yukawa]<>"(gt2,gt1))*oo16pi2*sigLR \n"];

WriteString[sphenoLoopCoup,"dc_L = 0._dp \n"];
WriteString[sphenoLoopCoup,"dc_R = 0._dp \n"];

For[i=1, i<=Length[penguin],

c1=getSPhenoCoupling[penguin[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling[penguin[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling[penguin[[i,1,3]],SPhenoCouplingsAll];

ind1 = MakeIndicesCoupling[{External[1],gt1}/.penguin[[i,2]],{Internal[1],i1}/.penguin[[i,2]],{AntiField[Internal[2]],i2}/.penguin[[i,2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{External[2],gt2}/.penguin[[i,2]],{AntiField[Internal[1]],i1}/.penguin[[i,2]],{Internal[3],i3}/.penguin[[i,2]],c2[[2]]]; 
ind3 = MakeIndicesCoupling[{External[3],gt3}/.penguin[[i,2]],{Internal[2],i2}/.penguin[[i,2]],{AntiField[Internal[3]],i3}/.penguin[[i,2]],c3[[2]]];

Switch[VType[getType[penguin[[i,1,3,1]]],getType[penguin[[i,1,3,2]]],getType[penguin[[i,1,3,3]]]],
FFS,
	pS1=(Internal[1] /.penguin[[i,2]]);
	pF1 =(Internal[2] /. penguin[[i,2]]);
		  pF2 =(Internal[3] /. penguin[[i,2]]);

If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"Do i1=1,"<> ToString[getGenSPheno[pS1]]<>"\n"];];
If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"Do i2=1,"<> ToString[getGenSPheno[pF1]]<>"\n"];];
If[getGenSPheno[pF2]>1,WriteString[sphenoLoopCoup,"Do i3=1,"<> ToString[getGenSPheno[pF2]]<>"\n"];];

WriteString[sphenoLoopCoup,"C0m = -"<>SPhenoMass[pF1,i2]<>"*"<>SPhenoMass[pF2,i3]  <>"* C0_3m("<>SPhenoMassSq[pS1,i1] <>","<>SPhenoMassSq[pF1,i2]<>","<>SPhenoMassSq[pF2,i3] <> ")\n"];
WriteString[sphenoLoopCoup,"C2m = C_2("<>SPhenoMassSq[pS1,i1] <>","<>SPhenoMassSq[pF1,i2]<>","<>SPhenoMassSq[pF2,i3] <> ")\n"];

If[ind1[[2]]==False,
WriteString[sphenoLoopCoup,"coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];WriteString[sphenoLoopCoup,"coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
];

If[ind2[[2]]==False,
WriteString[sphenoLoopCoup,"coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
WriteString[sphenoLoopCoup,"coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
];

If[ind3[[2]]==False,
WriteString[sphenoLoopCoup,"coupL3 = "<>ToString[c3[[1,1]]]<>ind3[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR3 = "<>ToString[c3[[1,2]]]<>ind3[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR3 = Conjg("<>ToString[c3[[1,1]]]<>ind3[[1]] <>")\n"];
WriteString[sphenoLoopCoup,"coupL3 = Conjg("<>ToString[c3[[1,2]]]<>ind3[[1]] <>"=\n"];
];

factor = SPhenoForm[CalculateColorFactor[External[1] /. penguin[[i,2]],Internal[1] /. penguin[[i,2]],Internal[1] /. penguin[[i,2]]]];



WriteString[sphenoLoopCoup,"dc_L = dc_L -"<>factor<>"* (coupR3*C2m+coupL3*C0m)*coupL2*coupL1 \n"];
WriteString[sphenoLoopCoup,"dc_R = dc_R -"<>factor<>"* (coupL3*C2m+coupR3*C0m)*coupR2*coupR1 \n"];


If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
If[getGenSPheno[pF2]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
WriteString[sphenoLoopCoup,"\n\n"];,	

SSS,
	pF1=(Internal[1] /.penguin[[i,2]]);
	pS1 =(Internal[2] /. penguin[[i,2]]);
		  pS2 =(Internal[3] /. penguin[[i,2]]);

If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"Do i1=1,"<> ToString[getGenSPheno[pF1]]<>"\n"];];
If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"Do i2=1,"<> ToString[getGenSPheno[pS1]]<>"\n"];];
If[getGenSPheno[pS2]>1,WriteString[sphenoLoopCoup,"Do i3=1,"<> ToString[getGenSPheno[pS2]]<>"\n"];];


WriteString[sphenoLoopCoup,"C0m = -"<>SPhenoMass[pF1,i1]  <>"* C0_3m("<>SPhenoMassSq[pF1,i1] <>","<>SPhenoMassSq[pS1,i2]<>","<>SPhenoMassSq[pS2,i3] <> ")\n"];

If[ind1[[2]]==False,
WriteString[sphenoLoopCoup,"coupL1 = "<>ToString[c1[[1,1]]]<>ind1[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR1 = "<>ToString[c1[[1,2]]]<>ind1[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR1 = Conjg("<>ToString[c1[[1,1]]]<>ind1[[1]] <>")\n"];WriteString[sphenoLoopCoup,"coupL1 = Conjg("<>ToString[c1[[1,2]]]<>ind1[[1]] <>")\n"];
];

If[ind2[[2]]==False,
WriteString[sphenoLoopCoup,"coupL2 = "<>ToString[c2[[1,1]]]<>ind2[[1]] <>"\n"];
WriteString[sphenoLoopCoup,"coupR2 = "<>ToString[c2[[1,2]]]<>ind2[[1]] <>"\n"];,
WriteString[sphenoLoopCoup,"coupR2 = Conjg("<>ToString[c2[[1,1]]]<>ind2[[1]] <>")\n"];
WriteString[sphenoLoopCoup,"coupL2 = Conjg("<>ToString[c2[[1,2]]]<>ind2[[1]] <>")\n"];
];

If[ind3[[2]]==False,
WriteString[sphenoLoopCoup,"coupC = "<>ToString[c3[[1,1]]]<>ind3[[1]] <>"\n"];,WriteString[sphenoLoopCoup,"coupC = Conjg("<>ToString[c3[[1,1]]]<>ind3[[1]] <>")\n"];
];

factor = SPhenoForm[CalculateColorFactor[External[1] /. penguin[[i,2]],Internal[1] /. penguin[[i,2]],Internal[1] /. penguin[[i,2]]]];

WriteString[sphenoLoopCoup,"dc_L = dc_L - "<>factor<>"*coupC*coupL2*coupL1*C0m \n"];
WriteString[sphenoLoopCoup,"dc_R = dc_R - "<>factor<>"*coupC*coupR2*coupR1*C0m \n"];


If[getGenSPheno[pS1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
If[getGenSPheno[pF1]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
If[getGenSPheno[pS2]>1,WriteString[sphenoLoopCoup,"End Do\n"];];
WriteString[sphenoLoopCoup,"\n\n"];

];

i++;];

WriteString[sphenoLoopCoup,"coupL = coupL - SigRL*"<>SPhenoForm[mixHiggs] <>"(gt3,"<>SPhenoForm[compHiggs]<>")/"<>SPhenoForm[vev]<>"\n"];
WriteString[sphenoLoopCoup,"coupL = coupL - SigLR*"<>SPhenoForm[mixHiggs] <>"(gt3,"<>SPhenoForm[compHiggs]<>")/"<>SPhenoForm[vev]<>"\n"];

WriteString[sphenoLoopCoup,"coupL = coupL + oo16pi2*dc_L \n"];
WriteString[sphenoLoopCoup,"coupR = coupR + oo16pi2*dc_R \n"];

WriteString[sphenoLoopCoup,"End Subroutine "<>name<>" \n\n \n"];

];



GenerateDeltaVB2:=Block[{i,j,temp,res,masses,couplings,couplinglist,i1,j1,jj1,k1,k2,k3,f1,f2,f3,f4},
Print["  Write 'DeltaVB'"];

temp=InsFields[{{C[Neutrino,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->Neutrino}}];
temp = DeleteContributions[temp,Flatten[{VectorP,VectorG,VectorW,VectorZ}]];

resWaveNeutrino=MakeMassesCouplingLists[temp,True];
temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->Electron}}];
temp = DeleteContributions[temp,Flatten[{VectorP,VectorG,VectorW,VectorZ}]];

resWaveElectron=MakeMassesCouplingLists[temp,True];
(*
resWave[[1]] = Join[resWave[[1]],resWaveTemp[[1]]];
resWave[[2]] = Join[resWave[[2]],resWaveTemp[[2]]];
resWave[[3]] = Join[resWave[[3]],resWaveTemp[[3]]];
resWave[[4]] = Join[resWave[[4]],resWaveTemp[[4]]];
*)

temp = GeneratePenguinDiagrams[Neutrino,bar[Electron],VectorW];

temp = InsFields[currentTop];
temp = DeleteContributions[temp,Flatten[{VectorG,VectorZ,VectorP}]];
resPenguin = MakeMassesCouplingLists[temp,True];

tempBox={};
f1=Neutrino;f2=bar[Neutrino];f3=Electron; f4=bar[Electron];
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4, InsertionOrder->1}};


temp = InsFields[currentTop];
temp = DeleteContributions[temp,Flatten[{VectorP,VectorW, VectorZ}]];
temp = MakeMassesCouplingLists[temp,True][[1]];

For[i=1,i<=Length[temp],
If[getType[Internal[1] /. temp[[i,2]]]===F,
tempBox = Join[tempBox,{temp[[i]]}];
];
i++;];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f4,External[4]->f3,Index[1]->gt1,Index[2]->gt2,Index[3]->gt4,Index[4]->gt3, InsertionOrder->2}};

temp = InsFields[currentTop];
temp = DeleteContributions[temp,Flatten[{VectorP,VectorW,VectorZ}]];

temp = MakeMassesCouplingLists[temp,True][[1]];
For[i=1,i<=Length[temp],
If[getType[Internal[1] /. temp[[i,2]]]===S,
tempBox = Join[tempBox,{temp[[i]]}];
];
i++;];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f4,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f4,External[3]->f2,External[4]->f3,Index[1]->gt1,Index[2]->gt4,Index[3]->gt2,Index[4]->gt3, InsertionOrder->4}};

temp = InsFields[currentTop];
temp = DeleteContributions[temp,Flatten[{VectorP,VectorW,VectorZ}]];

temp = MakeMassesCouplingLists[temp,True][[1]];
For[i=1,i<=Length[temp],
If[getType[Internal[1] /. temp[[i,2]]]===S,
tempBox = Join[tempBox,{temp[[i]]}];
];
i++;];

resBox =  MakeMassesCouplingLists[tempBox,True] /. Cp->C;

Clear[f1,f2,f3,f4];

couplings=Intersection[Flatten[{resWaveNeutrino[[4]],resWaveElectron[[4]],resPenguin[[4]],resBox[[4]]}]];

SPhenoCouplingsDeltaVB={};
parametersDeltaVB={};
namesDeltaVB={};


For[i=1,i<=Length[couplings],
pos=Position[SPhenoCouplingsAll,couplings[[i]]];
If[pos==={},
pos=Position[SPhenoCouplingsAll,AntiField/@couplings[[i]]];
];
SPhenoCouplingsDeltaVB=Join[SPhenoCouplingsDeltaVB,{Extract[SPhenoCouplingsAll,pos[[1,1]]]}];
parameterDeltaVB = Join[parametersDeltaVB,Extract[SPhenoCouplingsAll,pos[[1,1]]][[4]]];
namesDeltaVB = Join[namesDeltaVB,Delete[Extract[SPhenoCouplingsAll,pos[[1,1]]][[2]],1]];
i++;];

parametersDeltaVB=Intersection[parametersDeltaVB];

masses=Intersection[Flatten[{resWaveNeutrino[[2]],resWaveElectron[[2]],resPenguin[[2]],resBox[[2]]}]];
namesDeltaVB=Intersection[namesDeltaVB];

neededParameters=getNeededParametersForCouplings[Intersection[Flatten[{resWaveElectron[[4]],resWaveNeutrino[[4]],resPenguin[[4]],resBox[[4]]}]]];
NeededParametersForDeltaVB=Flatten[{masses,neededParameters}];


WriteString[sphenoLoopCoup,"\n\n\n"];


subUVin={};
If[FreeQ[ParameterDefinitions,"Neutrino-Mixing-Matrix"]==False,
UVinName = ToExpression[SPhenoForm[NeutrinoMM]<>"input"];
subUVin={NeutrinoMM -> UVinName};
newEntry=Extract[SPhenoParameters,Position[SPhenoParameters,NeutrinoMM][[1,1]]];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {NeutrinoMM ->UVinName}}];
];

MakeSubroutineTitle["DeltaVB",Flatten[{masses,neededParameters /. subUVin}],{"sinW2","sinW2_dr","rho"},{"res"},sphenoLoopCoup];

WriteString[sphenoLoopCoup,"Implicit None \n"];
MakeVariableList[Flatten[{masses,neededParameters /. subUVin}],",Intent(in)",sphenoLoopCoup];
MakeVariableList[MakeSquaredMass /@masses,"",sphenoLoopCoup];
MakeVariableList[namesDeltaVB,"",sphenoLoopCoup];

If[FreeQ[ParameterDefinitions,"Neutrino-Mixing-Matrix"]==False,
WriteString[sphenoLoopCoup,"Complex(dp) :: "<>SPhenoForm[NeutrinoMM]<>"("<>ToString[getDimSPheno[NeutrinoMM][[1]]]<>","<>ToString[getDimSPheno[NeutrinoMM][[1]]]<>") \n"];
];

WriteString[sphenoLoopCoup,"Integer :: i1,i2,i3,i4,gt1,gt2,gt3,gt4 \n"];
WriteString[sphenoLoopCoup,"Real(dp), Intent(in) :: sinW2,sinW2_Dr, rho \n"];
WriteString[sphenoLoopCoup,"Real(dp), Intent(out) :: res \n \n"];
WriteString[sphenoLoopCoup,"Complex(dp) :: sumI, coup1L,coup1R,coup2L,coup2R,coup3L,coup3R,coup3, coup4L,coup4R, teil \n"];
WriteString[sphenoLoopCoup,"Complex(dp) :: D27m2, D0m2, vertex, phase \n"];
WriteString[sphenoLoopCoup,"Real(dp) :: cosW2, cosW2_Dr, chargefactor \n"];
WriteString[sphenoLoopCoup,"Iname = Iname+1\n"];
WriteString[sphenoLoopCoup,"NameOfUnit(Iname) = \"DeltaVB\" \n"];

For[i=1,i<=Length[masses],
WriteString[sphenoLoopCoup,ToString[MakeSquaredMass[masses[[i]]]]<>" = " <>ToString[masses[[i]]]<>"**2 \n"];
i++;];

WriteString[sphenoLoopCoup,"\n \n ! Fix neutrino phases \n \n"];

If[FreeQ[ParameterDefinitions,"Neutrino-Mixing-Matrix"]==False,
WriteString[sphenoLoopCoup,"Do i1=1,"<>ToString[getDimSPheno[NeutrinoMM][[1]]]<>"\n"];
WriteString[sphenoLoopCoup,"  phase=(1._dp,0._dp) \n"];
WriteString[sphenoLoopCoup,"  If (Abs("<>SPhenoForm[UVinName]<>"(i1,i1)).Ne.0._dp) Then \n"];
WriteString[sphenoLoopCoup,"     phase=Conjg("<>SPhenoForm[UVinName]<>"(i1,i1))/Abs("<>SPhenoForm[UVinName]<>"(i1,i1)) \n"];
For[i=1,i<=getDimSPheno[NeutrinoMM][[1]],
WriteString[sphenoLoopCoup,"     Else If (Abs("<>SPhenoForm[UVinName]<>"(i1,"<>ToString[i]<>")).Ne.0._dp) Then \n"];
WriteString[sphenoLoopCoup,"     phase=Conjg("<>SPhenoForm[UVinName]<>"(i1,"<>ToString[i]<>"))/Abs("<>SPhenoForm[UVinName]<>"(i1,"<>ToString[i]<>")) \n"];
i++;];
WriteString[sphenoLoopCoup,"  End If \n"];

WriteString[sphenoLoopCoup," "<>SPhenoForm[NeutrinoMM]<>"(i1,:) = "<>SPhenoForm[UVinName]<>"(i1,:)*phase \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];

];

For[i=1,i<=Length[SPhenoCouplingsDeltaVB],
If[Length[SPhenoCouplingsDeltaVB[[i,2]]]==2,
WriteString[sphenoLoopCoup, ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];,
WriteString[sphenoLoopCoup, ToString[SPhenoCouplingsDeltaVB[[i,2,2]]] <> " = 0._dp \n"];
WriteString[sphenoLoopCoup, ToString[SPhenoCouplingsDeltaVB[[i,2,3]]] <> " = 0._dp \n"];
];

OpenDoes[{getIndexRangeSPheno[SPhenoCouplingsDeltaVB[[i,2,2]]]},sphenoLoopCoup];

cNames="";
For[jj1=2,jj1<=Length[SPhenoCouplingsDeltaVB[[i,2]]],
cNames = cNames <> ToString[SPhenoCouplingsDeltaVB[[i,2,jj1]]] <> AddDimNames2[SPhenoCouplingsDeltaVB[[i,2,jj1]]]<>","; 
jj1++;];

cNames = StringDrop[cNames,-1];
MakeCall[SPhenoCouplingsDeltaVB[[i,2,1]]<>"T",Join[SPhenoCouplingsDeltaVB[[i,3]],SPhenoCouplingsDeltaVB[[i,4]]],{},{cNames},sphenoLoopCoup];
CloseDoes[sphenoLoopCoup];
WriteString[sphenoLoopCoup,"\n\n"];
i++;];

WriteString[sphenoLoopCoup,"!-------------------------- \n"];
WriteString[sphenoLoopCoup,"!SM Contributions \n"];
WriteString[sphenoLoopCoup,"!-------------------------- \n"];
WriteString[sphenoLoopCoup,"cosW2 = 1._dp - sinW2 \n"];
WriteString[sphenoLoopCoup,"cosW2_DR = 1._dp - sinW2_DR \n"];

WriteString[sphenoLoopCoup,"sumI = 6._dp & \n"];
WriteString[sphenoLoopCoup,"  & + Log(cosW2)*(3.5_dp - 2.5_dp *sinW2   & \n"];
WriteString[sphenoLoopCoup,"  & - sinW2_DR*(5._dp - 1.5_dp*cosW2/cosW2_DR))/sinW2   \n"];
WriteString[sphenoLoopCoup,"res = sumI*"<>SPhenoForm[leftCoupling]<>"**2*rho \n \n \n"];

WriteString[sphenoLoopCoup,"If (IncludeBSMdeltaVB) Then \n"];
WriteString[sphenoLoopCoup,"!-------------------------- \n"];
WriteString[sphenoLoopCoup,"!BSM  Contributions \n"];
WriteString[sphenoLoopCoup,"!-------------------------- \n"];

WriteString[sphenoLoopCoup,"teil = 0._dp \n \n"];

WriteString[sphenoLoopCoup,"Do gt1=1,"<>ToString[getGen[Neutrino]]<>" \n"];
WriteString[sphenoLoopCoup," Do gt2=1,"<>ToString[getGen[Neutrino]]<>" \n"];
WriteString[sphenoLoopCoup,"sumI = 0._dp \n \n"];
If[FreeQ[massless,Neutrino],WriteString[sphenoLoopCoup, "If (mf_l2(2).gt. 0.5_dp*"<>SPhenoMassSq[Neutrino,gt2]<>") Then \n"]];
AddWaveContributions2[resWaveNeutrino[[1]],WaveDeltaVB,None,None,None,None,"mf_l2(2)",True,sphenoLoopCoup];
If[NeutrinoMM===Delta,
WriteString[sphenoLoopCoup, "res = res + sumI*(Kronecker(gt2,1)+Kronecker(gt2,2)) \n"];,
WriteString[sphenoLoopCoup, "res = res + sumI*("<>SPhenoForm[NeutrinoMM]<>"(gt2,1)+"<>SPhenoForm[NeutrinoMM]<>"(gt2,2)) \n"];
];
If[FreeQ[massless,Neutrino],WriteString[sphenoLoopCoup, "End if \n"]];
 WriteString[sphenoLoopCoup,"End Do \n \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];


WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
WriteString[sphenoLoopCoup,"Do  gt2=1,"<>ToString[getGen[Electron]]<>" \n"];
WriteString[sphenoLoopCoup,"sumI = 0._dp \n \n"];
(* WriteString[sphenoLoopCoup,"gt2 = gt1 \n"]; *)
AddWaveContributions2[resWaveElectron[[1]],WaveDeltaVB,None,None,None,None,"mf_l2(2)",True,sphenoLoopCoup];
WriteString[sphenoLoopCoup, "res = res + sumI \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];



WriteString[sphenoLoopCoup,"vertex = 0._dp \n \n"];
WriteString[sphenoLoopCoup,"Do gt1=1,"<>ToString[getGen[Neutrino]]<>" \n"];
WriteString[sphenoLoopCoup," Do gt2=1,2 \n"];
(* WriteString[sphenoLoopCoup,"Do gt1=1,2 \n"];
WriteString[sphenoLoopCoup,"gt2 = gt1 \n"]; *)
AddPenguinContributions2[resPenguin[[1]],PenguinDeltaVBFFVscalar,PenguinDeltaVBFFVvector,PenguinDeltaVBSSV,None,None,None,None,None,None,None,True,"mf_l2(2)",True,sphenoLoopCoup];
WriteString[sphenoLoopCoup," End Do \n \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];
WriteString[sphenoLoopCoup, "res = res + vertex/"<>SPhenoForm[leftCoupling]<>" \n"];


(* WriteString[sphenoLoopCoup,"gt1 = 1 \n"];
WriteString[sphenoLoopCoup,"gt2 = 2 \n"]; *)

WriteString[sphenoLoopCoup,"Do gt1=1,"<>ToString[getGen[Neutrino]]<>" \n"];
WriteString[sphenoLoopCoup," Do gt2=1,"<>ToString[getGen[Neutrino]]<>" \n"];
WriteString[sphenoLoopCoup,"gt3 = 2 \n"];
WriteString[sphenoLoopCoup,"gt4 = 1 \n"];
AddBoxContributions2[resBox[[1]],BoxDeltaVB,None,None, None,None,"mf_l2(2)",True,sphenoLoopCoup];
WriteString[sphenoLoopCoup," End Do \n \n"];
WriteString[sphenoLoopCoup,"End Do \n \n"];

WriteString[sphenoLoopCoup,"\n \n"];


WriteString[sphenoLoopCoup,"sumI = -2._dp*cosW2_DR*mz2*Real(teil,dp)/"<>SPhenoForm[leftCoupling]<>"**2 \n"];
WriteString[sphenoLoopCoup, "res = res + SumI \n"];
WriteString[sphenoLoopCoup,"End if ! BSM part \n"];
WriteString[sphenoLoopCoup, "res = res*oo16pi2 \n"];



WriteString[sphenoLoopCoup,"Iname = Iname-1\n"];
WriteString[sphenoLoopCoup,"End subroutine DeltaVB \n \n \n"];


];


WriteAlphaMS:=Block[{},
WriteString[sphenoLoopCoup,"Real(dp) Function Alpha_MSbar(Q,mW,mt) \n"];
WriteString[sphenoLoopCoup,"Implicit None \n"];
WriteString[sphenoLoopCoup,"Real(dp),Intent(in)::Q,mW \n"];
WriteString[sphenoLoopCoup,"Real(dp),Intent(in),Optional::mt \n"];

WriteString[sphenoLoopCoup,"Real(dp)::DeltaAlpha \n"];
 
WriteString[sphenoLoopCoup,"If (MZ_input) Then \n"];
WriteString[sphenoLoopCoup,"Alpha_MSbar=Alpha_mZ_MS \n"];
WriteString[sphenoLoopCoup,"If (Present(mt)) Then \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=-8._dp*Log(Q/mt)/(9._dp*Pi) \n"];
WriteString[sphenoLoopCoup,"Alpha_MSbar=Alpha_MSbar/(1._dp+DeltaAlpha*alpha) \n"];
WriteString[sphenoLoopCoup,"End If \n"];
WriteString[sphenoLoopCoup,"Else \n"];
WriteString[sphenoLoopCoup,"DeltaAlpha=3.5_dp*Log(Q/mW)/Pi+0.5_dp*oo3pi \n"];
WriteString[sphenoLoopCoup,"If (Present(mt)) DeltaAlpha=DeltaAlpha-8._dp*Log(Q/mt)/(9._dp*Pi) \n"];
WriteString[sphenoLoopCoup,"Alpha_MSbar=Alpha/(1._dp-Delta_Alpha_Lepton-Delta_Alpha_Hadron& \n"];
WriteString[sphenoLoopCoup,"&+DeltaAlpha*alpha) \n"];
WriteString[sphenoLoopCoup,"Alpha_MZ_MS=Alpha_MSbar \n"];
WriteString[sphenoLoopCoup,"End If \n"];

WriteString[sphenoLoopCoup,"End Function Alpha_MSbar\n \n \n"];


];


DeleteContributions[x_,list_]:=Block[{i,j,temp,add},
temp={};

For[i=1,i<=Length[x],
add = True;
For[j=1,j<=Length[list],
If[FreeQ[x[[i]],list[[j]]]==False,
add = False;
];
j++;];
If[add==True,
temp = Join[temp,{x[[i]]}];
];
i++;];
Return[temp];


];
