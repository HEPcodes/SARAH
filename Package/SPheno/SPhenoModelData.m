(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



MakeModelData:=Block[{i,k,i2,temp,dim},
If[Head[RegimeNr]===Integer,
AddParametersFromOtherRegimes;
];

AdditionalParametersLagrange=Select[AdditionalParametersLagrange,FreeQ[ListAllInputParameters,#]&];

(*
Print["-----------------------------------"];
Print["Write ModelData"];
Print["-----------------------------------"];
*)
Print[StyleForm["Write 'ModelData'","Section",FontSize->12]];

ModelData=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"Model_Data_"<>ModelName<>".f90"]];

WriteCopyRight[ModelData];

WriteString[ModelData,"Module Model_Data_"<>ModelName<>" \n \n"];
WriteString[ModelData, "Use Control \n"];
WriteString[ModelData, "Use LoopFunctions \n"];


WriteString[ModelData,"Logical, Save :: PrintPartialContributions = .False. \n"];
WriteString[ModelData,"Logical, Save :: Enable3BDecays = .True. \n"];
WriteString[ModelData,"Logical, Save :: Enable3BDecaysS = .True. \n"];
WriteString[ModelData,"Logical, Save :: Enable3BDecaysF = .True. \n"];
WriteString[ModelData,"Logical, Save :: FirstRun = .True. \n"];
WriteString[ModelData,"Logical, Save :: RunningCouplingsDecays = .True. \n"];
WriteString[ModelData,"Logical, Save :: WriteSLHA1 = .False. \n"];
WriteString[ModelData,"Logical, Save :: MakeQTEST = .False. \n"];
WriteString[ModelData,"Logical, Save :: CalculateOneLoopMasses = .True. \n"];
WriteString[ModelData,"Logical, Save :: CalculateOneLoopMassesSave = .True. \n"];
WriteString[ModelData,"Logical, Save :: CalculateTwoLoopHiggsMasses = .True. \n"];
WriteString[ModelData,"Logical, Save :: SUSYrunningFromMZ = .True. \n"];
WriteString[ModelData,"Logical, Save :: SquareFullAmplitudeDecays = .False. \n"];
WriteString[ModelData,"Logical :: CalculateTwoLoopHiggsMassesSave = .True. \n"];
WriteString[ModelData,"Logical, Save :: CalculateLowEnergy = .True. \n"];
WriteString[ModelData,"Logical, Save :: WriteParametersAtQ = .False. \n"];
WriteString[ModelData,"Logical, Save :: OutputForMO = .False. \n"];
WriteString[ModelData,"Logical, Save :: TwoLoopRGE=.True.\n"];
If[SA`AddOneLoopDecay===True,
WriteString[ModelData,"Logical, Save :: OneLoopDecays=.True.\n"];,
WriteString[ModelData,"Logical, Save :: OneLoopDecays=.False.\n"];
];
If[SupersymmetricModel===True,
WriteString[ModelData,"Logical, Save :: SMrunningLowScaleInput=.True.\n"];,
WriteString[ModelData,"Logical, Save :: SMrunningLowScaleInput=.False.\n"];
];

If[SupersymmetricModel=!=False,
WriteString[ModelData,"Real(dp), save :: rMS = 0._dp \n"];,
WriteString[ModelData,"Real(dp), save :: rMS = 1._dp \n"];
];
WriteString[ModelData,"Real(dp), save :: DerrMS = 0._dp \n"];

WriteString[ModelData,"Real(dp), save :: Mass_Regulator_PhotonGluon = 1.0E-10_dp \n"];

WriteString[ModelData,"Logical, Save :: RunningSUSYparametersLowEnergy=.True.\n"];
WriteString[ModelData,"Logical, Save :: RunningSMparametersLowEnergy=.True.\n"];
WriteString[ModelData,"Integer, Save :: MinimalNumberIterations = 5\n"];
WriteString[ModelData,"Logical :: NonSUSYrunningLowScale = .false.\n"];
WriteString[ModelData,"Logical :: SwitchToSCKM= .False. \n"];
WriteString[ModelData,"Logical :: CalculateMSSM2Loop= .False. \n"];
WriteString[ModelData,"Logical :: GaugelessLimit= .True. \n"];
WriteString[ModelData,"Logical :: FoundIterativeSolution = .True.\n"];
WriteString[ModelData,"Logical :: WriteOutputForNonConvergence=.True.\n"];
WriteString[ModelData,"Logical :: SPA_Convention \n"];
WriteString[ModelData,"Logical :: ForceRealMatrices = .False. \n"];
WriteString[ModelData,"Logical :: WriteGUTvalues \n"];
WriteString[ModelData,"Logical :: TwoLoopSafeMode \n"];
WriteString[ModelData,"Integer :: TwoLoopMethod = 3 \n"];
WriteString[ModelData,"Logical :: PoleMassesInLoops = .True. \n"];
WriteString[ModelData,"Logical :: WriteTreeLevelTadpoleParameters = .false. \n"];
WriteString[ModelData,"Logical :: IncludeDeltaVB = .True. \n"];
WriteString[ModelData,"Logical :: IncludeBSMdeltaVB = .True. \n"];
WriteString[ModelData,"Real(dp) :: WidthToBeInvisible = 0._dp \n"];
WriteString[ModelData,"Logical :: HigherOrderDiboson = .True. \n"];
WriteString[ModelData,"Real(dp) :: nLep = 3._dp, mf_u_mz_running \n"];
WriteString[ModelData,"Real(dp) :: nUp = 2._dp \n"];
WriteString[ModelData,"Real(dp) :: err2L = 0._dp \n"];
WriteString[ModelData,"Real(dp) :: nDown = 3._dp \n"];
WriteString[ModelData,"Real(dp) :: MaxMassLoop = 1.0E16_dp \n"];
WriteString[ModelData,"Real(dp) :: MinWidth = 1.0E-30_dp \n"];
(* WriteString[ModelData,"Real(dp) :: hstep_pn=0.1_dp, hstep_sa=0.001_dp \n"]; *)
WriteString[ModelData,"Real(dp) :: MaxMassNumericalZero = 1.0E-8_dp \n"];
WriteString[ModelData,"Logical :: runningTopMZ= .False. \n"];
WriteString[ModelData,"Logical :: PrintDebugInformation = .False. \n"];
WriteString[ModelData,"Logical ::IncludeThresholdsAtScale \n"];
WriteString[ModelData,"Logical :: PurelyNumericalEffPot \n"];
If[Include2LoopCorrections===False,
WriteString[ModelData,"Real(dp) :: hstep_pn, hstep_sa \n"];
];
If[IncludeFlavorKit=!=True||SkipFlavorKit===True,
WriteString[ModelData,"Real(dp) :: tau_pi0=26033._dp, tau_pip,tau_rho0,tau_rhop,tau_Dp= 1.040E-12_dp,tau_D0,tau_DSp,tau_DSsp, & \n & tau_eta,tau_etap,tau_omega,tau_phi, tau_KL0,tau_KS0,tau_K0,tau_Kp=1238.0E-11_dp,tau_B0s=1.472E-12_dp, tau_B0d=1.525E-12_dp, tau_B0p,tau_B0c,tau_Bpc,tau_Bs0c, tau_Bp=1.519E-12_dp, & \n & tau_Bcp,tau_Bcpc,tau_K0c,tau_Kpc,tau_etac,tau_JPsi,tau_Ups,tau_etab  \n"];
WriteString[ModelData,"Real(dp) :: mass_pi0=0.1396_dp, mass_pip,mass_rho0,mass_rhop,mass_Dp,mass_D0=1.8648_dp,mass_DSp,mass_DSsp, & \n & mass_eta,mass_etap,mass_omega,mass_phi, mass_KL0,mass_KS0,mass_K0=0.4937_dp,mass_Kp=0.493_dp,mass_B0s=5.3663_dp, mass_B0d=5.2795_dp,mass_B0p=5.279_dp,mass_B0c,mass_Bpc,mass_Bs0c, & \n & mass_Bcp,mass_Bcpc,mass_K0c=0.8959_dp,mass_Kpc,mass_etac,mass_JPsi,mass_Ups,mass_etab  \n"];
WriteString[ModelData,"Real(dp) :: f_k_CONST=0.1598_dp, h_k_CONST, f_eta_q_CONST, f_eta_s_CONST, h_eta_q_CONST, h_eta_s_CONST, & \n & f_rho_CONST, h_rho_CONST,  f_omega_q_CONST, f_omega_s_CONST, h_omega_q_CONST, h_omega_s_CONST, f_B0d_CONST=0.190_dp, f_B0s_CONST=0.227_dp, & \n & f_D_CONST= 0.248_dp, f_Bp_CONST =  0.234_dp, f_Kp_CONST = 0.156_dp \n"];,

Get[ToFileName[{$sarahDir,"FlavorKit"},"hadronic_parameters.m"]];
Get[ToFileName[{$sarahDir,"FlavorKit"},"FLHA_WilsonCoefficients.m"]];
For[i=1,i<=Length[FLHA`MASSandLIFETIME],
WriteString[ModelData,"Real(dp) :: "<>FLHA`MASSandLIFETIME[[i,2,1]]<>"="<>ToString[FortranForm[FLHA`MASSandLIFETIME[[i,2,2]]]]<>", "<>FLHA`MASSandLIFETIME[[i,3,1]]<>"="<>ToString[FortranForm[FLHA`MASSandLIFETIME[[i,3,2]]]]<>"\n"];
i++;];
For[i=1,i<=Length[FLHA`DECAYCONSTANTS],
WriteString[ModelData,"Real(dp) :: "<>FLHA`DECAYCONSTANTS[[i,2]]<>"="<>ToString[FortranForm[FLHA`DECAYCONSTANTS[[i,3]]]]<>"\n"];
i++;];

For[i=1,i<=Length[FLHA`WilsonCoefficients],
WriteString[ModelData,"Complex(dp) :: "<>ToString[FLHA`WilsonCoefficients[[i,5]]]<>" = 0._dp\n"];
i++;];
];


WriteString[ModelData,"Real(dp) :: MW_SM \n"];

WriteString[ModelData,"Real(dp) :: Alpha_160, AlphaS_160, SinW2_160, sinW2_MZ \n"];
WriteString[ModelData,"Real(dp) :: mf_d_160(3), mf_u_160(3), mf_l_160(3), mf_d2_160(3), mf_u2_160(3), mf_l2_160(3) \n"];
WriteString[ModelData,"Real(dp) :: mf_d2_MZ(3), mf_u2_MZ(3), mf_l2_MZ(3) \n"];
WriteString[ModelData,"Complex(dp) :: CKM_160(3,3), CKM_MZ(3,3) \n"];


If[Head[SuperPotential]===List && SuperPotential=!={}&& AddSMrunning===True && FreeQ[Superpotential,UpYukawa]===False,
If[SA`Casimir[Select[SuperPotential[[Position[SuperPotential,UpYukawa][[1,1]],2]],(SA`Casimir[#,Position[Gauge,color][[1,1]]]==4/3)&][[1]],Position[Gauge,left][[1,1]]]===3/4,
WriteString[ModelData,"Logical :: TransposedYukawa= .True. \n"];,
WriteString[ModelData,"Logical :: TransposedYukawa= .False. \n"];
];,
WriteString[ModelData,"Logical :: TransposedYukawa= .False. \n"];
];

WriteString[ModelData,"Logical :: KineticMixing = .True. \n"];
WriteString[ModelData,"Logical :: KineticMixingSave = .True. \n"];

WriteString[ModelData,"Logical :: WriteTreeLevelTadpoleSolutions = .False. \n"];
WriteString[ModelData,"Logical :: WriteHiggsDiphotonLoopContributions = .False. \n"];
WriteString[ModelData,"Logical :: WriteEffHiggsCouplingRatios = .True. \n"];

For[i=1,i<=Length[SA`ListParametersFromTadpoles],
dim="";
If[getDimParameters[SA`ListParametersFromTadpoles[[i]]]=!={} && getDimParameters[SA`ListParametersFromTadpoles[[i]]]=!={1},
dim=StringReplace[ToString[getDimParameters[SA`ListParametersFromTadpoles[[i]]]],{"{"->"(","}"->")"}];
];
If[FreeQ[realVar,SA`ListParametersFromTadpoles[[i]]],
WriteString[ModelData, "Complex(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"Tree"<>dim<>" \n"];
WriteString[ModelData, "Complex(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"1L"<>dim<>" \n"];
WriteString[ModelData, "Complex(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"2L"<>dim<>" \n"];,
WriteString[ModelData, "Real(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"Tree"<>dim<>" \n"];
WriteString[ModelData, "Real(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"1L"<>dim<>" \n"];
WriteString[ModelData, "Real(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"2L"<>dim<>" \n"];
];
i++;];



WriteString[ModelData,"Integer :: SolutionTadpoleNr = 1 \n"];

WriteString[ModelData,"Character(len=15)::HighScaleModel\n"];

WriteInitClebschGordan[ModelData];


MakeVariableList[Transpose[LowScaleList][[1]],"",ModelData];
If[Length[HighScaleList]>0 && HighScaleList=!={},
MakeVariableList[Transpose[HighScaleList][[1]],"",ModelData]; 
];
MakeVariableList[LowScaleNames,"",ModelData];
MakeVariableList[HighScaleNames,"",ModelData];
MakeVariableList[lowScaleIn,"",ModelData];
MakeVariableList[lowScaleMZ,"",ModelData];
MakeVariableList[lowScaleGUT,"",ModelData];
MakeVariableList[highScaleIn,"",ModelData];
MakeVariableList[highScaleMZ,"",ModelData];
MakeVariableList[highScaleGUT,"",ModelData];
MakeVariableList[NewMassParameters,"",ModelData];
MakeVariableList[listVEVs,"",ModelData];
MakeVariableList[listVEVsIN,"",ModelData];
MakeVariableList[listVEVsStable,"",ModelData];
MakeVariableList[SPhenoWidthBR,"",ModelData];
MakeVariableList[NeededRatiosLoopCouplingsSave,"",ModelData];
MakeVariableList[NeededRatiosLoopCouplingsSavePseudo,"",ModelData];

For[i=1,i<=Length[AuxiliaryParametersSPheno],
WriteString[ModelData,AuxiliaryParametersSPheno[[i]]<>"\n"];
i++;
];

For[i=1,i<=Length[AnglesInMatchingQ],
WriteString[ModelData,"Real(dp) :: "<>ToString[AnglesInMatchingQ[[i]]]<>"\n"];
i++;
];

WriteString[ModelData,"Real(dp) :: gForTadpoles("<>ToString[numberAllwithVEVs]<>")\n"];
WriteString[ModelData, "Complex(dp) :: tForTadpoles("<>ToString[Length[ParametersToSolveTadpoles]]<>")\n"];

For[i=1,i<=Length[listBrokenGaugeCouplings],
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<>"_saveEP \n"];
i++;];


For[i=1,i<=Length[ArrayParameters],
If[FreeQ[realVar,ArrayParameters[[i]]],
WriteString[ModelData,"Complex(dp) :: "<>SPhenoForm[ArrayParameters[[i]]]<>"_saveEP("<>ToString[getDimParameters[ArrayParameters[[i]]][[1]]]<>","<>ToString[getDimParameters[ArrayParameters[[i]]][[2]]]<>") \n"];,
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[ArrayParameters[[i]]]<>"_saveEP("<>ToString[getDimParameters[ArrayParameters[[i]]][[1]]]<>","<>ToString[getDimParameters[ArrayParameters[[i]]][[2]]]<>") \n"];
];
i++;];


If[Head[RegimeNr]===Integer && RegimeNr>1,
For[i=RegimeNr-1,i>=1,
WriteString[ModelData,"Real(dp) :: gForTadpolesR"<>ToString[i]<>"("<>ToString[NumberAllwithVEVsAllRegimes[[i]]]<>")\n"];
WriteString[ModelData, "Complex(dp) :: tForTadpolesR"<>ToString[i]<>"("<>ToString[NumberAllwithVEVsAllRegimes[[i]]-NumberHighAllRegimes[[i]]]<>")\n"];
i--;];
];

(*
If[subDependencesSPheno=!={},
MakeVariableList[Complement[Table[subDependencesSPheno[[i,1]],{i,1,Length[subDependencesSPheno]}],NewMassParameters],"",ModelData];
];
*)

WriteString[ModelData,"Logical :: RotateNegativeFermionMasses=.True. \n"];
(* WriteString[ModelData,"Logical :: MZ_input= .True. \n"]; *)
WriteString[ModelData,"Logical,save::IgnoreNegativeMasses= .False.\n"];
WriteString[ModelData,"Logical,save::IgnoreMuSignFlip= .False.\n"];
WriteString[ModelData,"Logical,save::IgnoreNegativeMassesMZ= .False.\n"];
WriteString[ModelData,"Logical,save::Write_WHIZARD= .False.\n"];
WriteString[ModelData,"Integer,save::BoundaryCondition=1 \n"];
WriteString[ModelData,"Logical,Save::MZ_input= .False. \n \n"];

If[(getGen[HiggsBoson])>0,WriteString[ModelData,"Real(dp) :: CS_Higgs_LHC(5,"<>ToString[getGen[HiggsBoson]]<>",5) \n \n"];];
If[(getGen[PseudoScalar]-getGenSPhenoStart[PseudoScalar]+1)>0,WriteString[ModelData,"Real(dp) :: CS_PHiggs_LHC(5,"<>ToString[getGen[PseudoScalar]]<>",5) \n \n"];];

If[getGen[HiggsBoson]>1,
WriteString[ModelData, "Real (dp) :: MhhL("<>ToString[getGen[HiggsBoson]]<>"), Mhh2L("<>ToString[getGen[HiggsBoson]]<>") \n"];
WriteString[ModelData, "Real (dp) :: Mhh_s("<>ToString[getGen[HiggsBoson]]<>"), Mhh2_s("<>ToString[getGen[HiggsBoson]]<>") \n"];,
WriteString[ModelData, "Real (dp) :: MhhL, Mhh2L \n"];
WriteString[ModelData, "Real (dp) :: Mhh_s, Mhh2_s\n"];

];

If[getGen[PseudoScalar]>1,
WriteString[ModelData, "Real (dp) :: MAhL("<>ToString[getGen[PseudoScalar]]<>"), MAh2L("<>ToString[getGen[PseudoScalar]]<>") \n"];
WriteString[ModelData, "Real (dp) :: MAh_s("<>ToString[getGen[PseudoScalar]]<>"), MAh2_s("<>ToString[getGen[PseudoScalar]]<>") \n"];,
WriteString[ModelData, "Real (dp) :: MAhL, MAh2L \n"];
WriteString[ModelData, "Real (dp) :: MAh_s, MAh2_s \n"];
];

WriteString[ModelData, "Real (dp) :: FineTuningResults("<>ToString[Length[FineTuningParameters]]<>") \n"];
WriteString[ModelData, "Real (dp) :: FineTuningResultsAllVEVs("<>ToString[Length[FineTuningParameters]]<>") \n"];
WriteString[ModelData, "Logical, Save :: OneLoopFT = .False. \n"];
WriteString[ModelData, "Logical, Save :: CalcFT = .True. \n"];

If[FlagLoopContributions===True,
For[i=1,i<=Length[PART[F]], WriteString[ModelData, "Logical :: "<>SPhenoIncludeLoop[PART[F][[i,1]]]<>" = .true. \n"];i++;];
For[i=1,i<=Length[PART[S]], WriteString[ModelData, "Logical :: "<>SPhenoIncludeLoop[PART[S][[i,1]]]<>" = .true. \n"];i++;];
For[i=1,i<=Length[PART[V]], WriteString[ModelData, "Logical :: "<>SPhenoIncludeLoop[PART[V][[i,1]]]<>" = .true. \n"];i++;];
For[i=1,i<=Length[PART[G]], WriteString[ModelData, "Logical :: "<>SPhenoIncludeLoop[PART[G][[i,1]]]<>" = .true. \n"];i++;];

WriteString[ModelData, "Logical :: IncludeBoxes = .true. \n"];
WriteString[ModelData, "Logical :: IncludePenguins = .true. \n"];
WriteString[ModelData, "Logical :: IncludeWave = .true. \n"];
WriteString[ModelData, "Logical :: IncludeTriangle = .true. \n"];
];

WriteString[ModelData, "Integer,save::YukawaScheme=1\n"];
WriteString[ModelData, "Logical, save :: CheckSugraDetails(10) =.False. & \n"];
WriteString[ModelData, "                        &, SugraErrors(10) =.False. &\n"];
WriteString[ModelData, "                        &, StrictUnification =.False. &\n"];
WriteString[ModelData, "                        &, UseFixedScale =.False. &\n"];
WriteString[ModelData, "                        &, UseFixedGUTScale =.False. \n"];
WriteString[ModelData, "Real(dp), save :: GUT_scale \n"];
WriteString[ModelData, "Real(dp) :: g3running \n"];

If[AuxiliaryHyperchargeCoupling,
WriteString[ModelData, "Real(dp) :: gYaux \n"];
WriteString[ModelData, "Real(dp) :: gYauxMZ \n"];
If[FreeQ[parameters,Weinberg],
WriteString[ModelData, "Real(dp) :: "<>SPhenoForm[Weinberg]<>" \n"];
];
];

For[i=1,i<=Length[ListAllInputParameters],
WriteString[ModelData, "Logical, save :: InputValuefor"<>SPhenoForm[ListAllInputParameters[[i,1]]]  <>" =.False. \n"];
i++;];

For[i=1,i<=Length[AdditionalParametersLagrange],
If[getDimSPheno[AdditionalParametersLagrange[[i]]]=!={} && getDimSPheno[AdditionalParametersLagrange[[i]]]=!={1} && FreeQ[ListAllInputParameters,AdditionalParametersLagrange[[i]]],
WriteString[ModelData, "Logical, save :: InputValuefor"<>SPhenoForm[AdditionalParametersLagrange[[i]]]  <>" =.False. \n"];
];
i++;];

If[Head[RegimeNr]===Integer,
WriteString[ModelData, "Logical, save :: ThresholdMassesCalculated = .False.\n"];
];

For[i=1,i<=Length[listParametersOtherRegimes],
WriteString[ModelData, "Logical, save :: InputValuefor"<>SPhenoForm[listParametersOtherRegimes[[i]]]  <>" =.False. \n"];
i++;];


(*
If[U1MixingParameters=!={},
MakeVariableList[U1MixingParameters,"",ModelData];
];
*)

WriteString[ModelData,"Complex(dp) :: CKMcomplex(3,3) \n"];

WriteString[ModelData,"Real(dp) :: Xi = 1._dp \n"];
WriteString[ModelData,"Real(dp) :: RXi = 1._dp \n"];
WriteString[ModelData,"Real(dp) :: RXiNew = 1._dp \n"];
For[i=1,i<=Length[SA`GaugeFixingRXi],
If[FreeQ[Particles[Current],SA`GaugeFixingRXi[[i,2]]]==False,
If[SPhenoOnlyForHM===True,
WriteString[ModelData,"Real(dp), save :: "<>SPhenoForm[SA`GaugeFixingRXi[[i,1]]]<>" = 0._dp \n"];,
WriteString[ModelData,"Real(dp), save :: "<>SPhenoForm[SA`GaugeFixingRXi[[i,1]]]<>" = 1._dp \n"];
];
];
i++;];

If[GFnamesAllRegimes=!={} && Head[GFnamesAllRegimes]===List,
GFnamesAllRegimesList = Intersection[Flatten[GFnamesAllRegimes]];

For[i=1,i<=Length[GFnamesAllRegimesList],
If[FreeQ[Particles[SA`GaugeFixingRXi],GFnamesAllRegimesList[[i]]],
If[SPhenoOnlyForHM===True,
WriteString[ModelData,"Real(dp), save :: "<>"RXi"<>ToString[GFnamesAllRegimesList[[i,1]]]<>" = 0._dp \n"];,
WriteString[ModelData,"Real(dp), save :: "<>"RXi"<>ToString[GFnamesAllRegimesList[[i,1]]]<>" = 1._dp \n"];
];
];
i++;];
];

If[SPhenoOnlyForHM===True,
WriteString[ModelData,"Complex(dp) :: deltaTi("<>ToString[Length[SA`VEVsHOMreal]+Length[SA`VEVsHOMcomplex]]<>") \n"];
];

If[FreeQ[massless,Neutrino] && SA`NeutrinoPresent==True,
WriteString[ModelData,"Real(dp) :: nuMasses("<>ToString[getGen[Neutrino]]<>") \n"];
WriteString[ModelData,"Complex(dp) :: nuMixing("<>ToString[getGen[Neutrino]]<>","<>ToString[getGen[Neutrino]]<>") \n"];
];
WriteString[ModelData,"Complex(dp) :: temporaryValue \n"];


If[Head[RegimeNr]===Integer,
MakeVariableList[listParametersOtherRegimes,"",ModelData];
MakeVariableList[listParametersOtherRegimesSave,"",ModelData];
MakeVariableList[Flatten[listsaveMasses],"",ModelData];
MakeVariableList[listParametersOtherRegimesGUT,"",ModelData];
];

LookForAdditionalParameter;

For[i=1,i<=Length[AdditionalVariablesSPheno],
If[FreeQ[realVar,AdditionalVariablesSPheno[[i]]] && FreeQ[realVar,Head[AdditionalVariablesSPheno[[i]]]], head="Complex";,head="Real"];
If[getDimSPheno[AdditionalVariablesSPheno[[i]]]==={} ||getDimSPheno[AdditionalVariablesSPheno[[i]]]==={1}||getDimSPheno[AdditionalVariablesSPheno[[i]]]==={0}  ,
dim="";,
dim=StringReplace[ToString[getDimSPheno[AdditionalVariablesSPheno[[i]]]],{"{"->"(","}"->")"}];
];
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[AdditionalVariablesSPheno[[i]]]<>dim<>"\n"];
If[Depth[AdditionalVariablesSPheno[[i]]]>1,
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[ToExpression[ToString[AdditionalVariablesSPheno[[i,0]]]<>"IN"]@@AdditionalVariablesSPheno[[i]]]<>dim<>"\n"];,
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[ToExpression[ToString[AdditionalVariablesSPheno[[i]]]<>"IN"]]<>dim<>"\n"];
];
i++;];

For[i=1,i<=Length[AdditionalParametersLagrange],
If[FreeQ[realVar,AdditionalParametersLagrange[[i]]] && FreeQ[realVar,Head[AdditionalParametersLagrange[[i]]]], head="Complex";,head="Real"];
If[getDimSPheno[AdditionalParametersLagrange[[i]]]==={} ||getDimSPheno[AdditionalParametersLagrange[[i]]]==={1} ||getDimSPheno[AdditionalParametersLagrange[[i]]]==={0} ,
dim="";,
dim=StringReplace[ToString[getDimSPheno[AdditionalParametersLagrange[[i]]]],{"{"->"(","}"->")"}];
];
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[AdditionalParametersLagrange[[i]]]<>dim<>"\n"];
If[Depth[AdditionalParametersLagrange[[i]]]>1,
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[ToExpression[ToString[AdditionalParametersLagrange[[i,0]]]<>"IN"]@@AdditionalParametersLagrange[[i]]]<>dim<>"\n"];,
WriteString[ModelData,head<>"(dp) :: " <> SPhenoForm[ToExpression[ToString[AdditionalParametersLagrange[[i]]]<>"IN"]]<>dim<>"\n"];
];
i++;];

If[Head[MINPAR[[1,1]]]=!=List,
For[i=1,i<=Length[MINPAR],
If[FreeQ[realVar,MINPAR[[i,2]]],
WriteString[ModelData,"Complex(dp) :: " <> SPhenoForm[MINPAR[[i,2]]]<>"\n"];,
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[MINPAR[[i,2]]]<>"\n"];
];
i++;];,
For[j=1,j<=Length[MINPAR],
For[i=1,i<=Length[MINPAR[[j]]],
If[FreeQ[Take[MINPAR,{1,j-1}],MINPAR[[j,i,2]]],
If[FreeQ[realVar,MINPAR[[j,i,2]]],
WriteString[ModelData,"Complex(dp) :: " <> SPhenoForm[MINPAR[[j,i,2]]]<>"\n"];,
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[MINPAR[[j,i,2]]]<>"\n"];
];
];
i++;];
j++;];
];

For[i=1,i<=Length[EXTPAR],
If[FreeQ[parameters,EXTPAR[[i,2]]] && FreeQ[MINPAR,EXTPAR[[i,2]]],
If[FreeQ[realVar,EXTPAR[[i,2]]],
WriteString[ModelData,"Complex(dp) :: " <> SPhenoForm[EXTPAR[[i,2]]]<>"\n"];,
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[EXTPAR[[i,2]]]<>"\n"];
];
 ];
i++;];


For[i=1,i<=Length[listVEVs],
If[getDimSPheno[listVEVs[[i]]]==={1},
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[listVEVs[[i]]]<>"MZ \n"];
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[listVEVs[[i]]]<>"SUSY \n"];,
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[listVEVs[[i]]]<>"MZ("<>ToString[getDimSPheno[listVEVs[[i]]][[1]]]<>") \n"];
WriteString[ModelData,"Real(dp) :: " <> SPhenoForm[listVEVs[[i]]]<>"SUSY("<>ToString[getDimSPheno[listVEVs[[i]]][[1]]]<>") \n"];
];
i++;
];


For[i=1,i<=Length[ThresholdParticles],
If[getGenSF[ThresholdParticles[[i]]]>1,
WriteString[ModelData,"Real(dp) :: MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>"("<>ToString[getGenSF[ThresholdParticles[[i]]]]<>") \n"];,
WriteString[ModelData,"Real(dp) :: MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>" \n"];
];
i++];


For[i=1,i<=Length[ThresholdCouplings],
If[FreeQ[realVar,ThresholdCouplings[[i]]]==True,
WriteString[ModelData,"Complex(dp) :: "<>SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>StringReplace[SPhenoForm[Join[{Length[Thresholds]},getDimSPheno[ThresholdCouplings[[i]]]]],{"List"->""}] <>"\n"];,
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>StringReplace[SPhenoForm[Join[{Length[Thresholds]},getDimSPheno[ThresholdCouplings[[i]]]]],{"List"->""}] <>"\n"];
];
i++;];


For[i=1,i<=Length[UnfixedCharges],
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[UnfixedCharges[[i]]]<> "\n"];
i++;];


If[SPhenoOnlyForHM===True,
For[i=1,i<=Length[SA`VEVsHOMreal],
WriteString[ModelData,"Real(dp) :: "<>ToString[SA`VEVsHOMreal[[i]]] <>", d"<>ToString[SA`VEVsHOMreal[[i]]] <>" \n"];
i++;];
For[i=1,i<=Length[SA`VEVsHOMcomplex],
WriteString[ModelData,"Real(dp) :: "<>ToString[SA`VEVsHOMcomplex[[i]]] <>", d"<>ToString[SA`VEVsHOMcomplex[[i]]] <>"\n"];
i++;];
];

WriteString[ModelData,"! For HiggsBounds \n"];
If[getGen[ChargedHiggs]>1,
WriteString[ModelData,"Real(dp) :: BR_tHb("<>ToString[getGen[ChargedHiggs]]<>")\n"];
WriteString[ModelData,"Real(dp) :: BR_Hcs("<>ToString[getGen[ChargedHiggs]]<>"), BR_Hcb("<>ToString[getGen[ChargedHiggs]]<>"), BR_Htaunu("<>ToString[getGen[ChargedHiggs]]<>"), BR_tWb\n"];,
WriteString[ModelData,"Real(dp) :: BR_tHb\n"];
WriteString[ModelData,"Real(dp) :: BR_Hcs, BR_Hcb, BR_Htaunu, BR_tWb\n"];
];


WriteString[ModelData, "Real(dp) :: BRHHH("<>ToString[getGenSPheno[HiggsBoson]] <>","<>ToString[getGenSPheno[HiggsBoson]] <>"), BRHAA("<>ToString[getGenSPheno[HiggsBoson]] <>","<>ToString[getGenSPheno[PseudoScalar]] <>") \n "];
WriteString[ModelData, "Real(dp) :: BRAHH("<>ToString[getGenSPheno[PseudoScalar]] <>","<>ToString[getGenSPheno[HiggsBoson]] <>"), BRAAA("<>ToString[getGenSPheno[PseudoScalar]] <>","<>ToString[getGenSPheno[PseudoScalar]] <>") \n "];
WriteString[ModelData, "Real(dp) :: BRinvH("<>ToString[getGenSPheno[HiggsBoson]]<>"), BRinvA("<>ToString[getGenSPheno[PseudoScalar]]<>") \n"];

For[i=1,i<=Length[SMParticles],
Switch[getType[SMParticles[[i]]],
F,
	WriteString[ModelData,"Real(dp) :: "<>SPhenoRatioPseudoHBP[SMParticles[[i]],getGenSPheno[PseudoScalar],getGenSPheno[SMParticles[[i]]]]<>","];
	WriteString[ModelData,SPhenoRatioPseudoHBS[SMParticles[[i]],getGenSPheno[PseudoScalar],getGenSPheno[SMParticles[[i]]]]<>","];
	WriteString[ModelData,SPhenoRatioHBS[SMParticles[[i]],getGenSPheno[HiggsBoson],getGenSPheno[SMParticles[[i]]]]<>","];
	WriteString[ModelData,SPhenoRatioHBP[SMParticles[[i]],getGenSPheno[HiggsBoson],getGenSPheno[SMParticles[[i]]]]<>"\n"];,
V,
	WriteString[ModelData,"Real(dp) :: "<>SPhenoRatioPseudoHB[SMParticles[[i]],getGenSPheno[PseudoScalar],getGenSPheno[SMParticles[[i]]]]<>","];
	WriteString[ModelData,SPhenoRatioHB[SMParticles[[i]],getGenSPheno[HiggsBoson],getGenSPheno[SMParticles[[i]]]]<>"\n"];

];
i++;];

If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False && FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
If[getGen[HiggsBoson]>1 && getGen[PseudoScalar]>1,
WriteString[ModelData, "Complex(dp) :: CPL_A_H_Z("<>ToString[getGenSPheno[PseudoScalar]] <>","<>ToString[getGenSPheno[HiggsBoson]] <>") \n "];,
If[getGen[HiggsBoson]>1,
WriteString[ModelData, "Complex(dp) :: CPL_A_H_Z("<>ToString[getGenSPheno[HiggsBoson]] <>") \n "];,
If[getGen[PseudoScalar]>1,
WriteString[ModelData, "Complex(dp) :: CPL_A_H_Z("<>ToString[getGenSPheno[PseudoScalar]] <>") \n "];,
WriteString[ModelData, "Complex(dp) :: CPL_A_H_Z \n "];
];
];
];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[ModelData, "Complex(dp) :: CPL_H_H_Z("<>ToString[getGenSPheno[HiggsBoson]] <>","<>ToString[getGenSPheno[HiggsBoson]] <>") \n "];
If[getGen[HiggsBoson]>1,
WriteString[ModelData, "Complex(dp) :: CoupHPP("<>ToString[getGen[HiggsBoson]]<>"), CoupHGG("<>ToString[getGen[HiggsBoson]]<>") \n"];,
WriteString[ModelData, "Complex(dp) :: CoupHPP, CoupHGG \n"];
];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[ModelData, "Complex(dp) :: CPL_A_A_Z("<>ToString[getGenSPheno[PseudoScalar]] <>","<>ToString[getGenSPheno[PseudoScalar]] <>") \n "];
If[getGen[PseudoScalar]>1,
WriteString[ModelData, "Complex(dp) :: CoupAPP("<>ToString[getGen[PseudoScalar]]<>"), CoupAGG("<>ToString[getGen[PseudoScalar]]<>") \n"];,
WriteString[ModelData, "Complex(dp) :: CoupAPP, CoupAGG \n"];
];
];

For[i=1,i<=Length[ParticlesToPhotonAndHiggs],
WriteString[ModelData,"Real(dp) :: HPPloop"<>SPhenoForm[ParticlesToPhotonAndHiggs[[i,1]]]];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,WriteString[ModelData,"("];];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1,WriteString[ModelData,ToString[getGen[ParticlesToPhotonAndHiggs[[i,1]]]]];
If[getGen[HiggsBoson]>1,WriteString[ModelData,","];];
];
If[getGen[HiggsBoson]>1,WriteString[ModelData,ToString[getGen[HiggsBoson]]];];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,WriteString[ModelData,")"];];
WriteString[ModelData,"\n"];
i++;];



WriteString[ModelData,"\n Real(dp) :: m32, tanbetaMZ \n"];

WriteString[ModelData,"Complex(dp),Dimension(3,3)::Y_l,Y_d,Y_u,Y_l_mZ,Y_d_mZ,Y_u_mZ&\n"];
WriteString[ModelData,"&,Y_l_0,Y_d_0,Y_u_0\n"];
WriteString[ModelData,"Real(dp),Dimension(3)::gauge,gauge_mZ,gauge_0 \n"];
WriteString[ModelData,"Real(dp)::tanb,vevSM(2),tanb_mZ \n"];

If[IncludeFineTuning===True,
For[k=1, k<= Length[Thresholds],
temp=Intersection[Table[BoundaryConditionsDown[[k,i,1]],{i,1,Length[BoundaryConditionsDown[[k]]]}] /. A_[b__Integer]->A /. A_[a___,index1,b___]->A /. A_[a___,index2,b___]->A];
For[i=1,i<=Length[temp],
dim=StringReplace[StringReplace[ToString[getDimSPheno[temp[[i]]]],{"{"->"(","}"->")"}],{"()"->"","(0)"->""}];
If[FreeQ[realVar,temp[[i]]],
WriteString[ModelData,"Complex(dp) :: "<>SPhenoForm[temp[[i]]]<>"_down_"<>ToString[k]<>dim<>"\n"];,
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[temp[[i]]]<>"_down_"<>ToString[k]<>dim<>"\n"];
];
i++;];
For[i=1,i<=Length[BetaGauge],
WriteString[ModelData,"Real(dp) :: "<>SPhenoForm[BetaGauge[[i,1]]]<>"_up_"<>ToString[k]<>" \n"];
i++;];
k++;];
];

WriteString[ModelData,"Contains \n \n"];




WriteThetaDelta[ModelData];


WriteGMSBFunctions;
WriteQuiverFunctions;

(* If[AddSMrunning=!=False, *)
AppendSourceCode["RGE10_SM.f90",ModelData];
 (* ];  *)



GenerateSetFunctions[ModelData];

For[i=1,i<=Length[SelfDefinedFunctions],
WriteString[ModelData,SelfDefinedFunctions[[i]]];
i++;];

WriteString[ModelData, "Subroutine Set_All_Parameters_0() \n"];
WriteString[ModelData, "Implicit None \n"];


WriteString[ModelData,"Y_l= 0._dp \n"];
WriteString[ModelData,"Y_d= 0._dp \n"];
WriteString[ModelData,"Y_u= 0._dp \n"];
WriteString[ModelData,"Y_l_mZ= 0._dp \n"];
WriteString[ModelData,"Y_d_mZ= 0._dp \n"];
WriteString[ModelData,"Y_u_mZ= 0._dp \n"];
WriteString[ModelData,"Y_l_0= 0._dp \n"];
WriteString[ModelData,"Y_d_0= 0._dp \n"];
WriteString[ModelData,"Y_u_0= 0._dp \n"];
WriteString[ModelData,"gauge= 0._dp \n"];
WriteString[ModelData,"gauge_mZ= 0._dp \n"];
WriteString[ModelData,"gauge_0 = 0._dp \n"];
WriteString[ModelData,"tanb= 0._dp \n"];
WriteString[ModelData,"vevSM= 0._dp \n"];
WriteString[ModelData,"tanb_mZ = 0._dp \n"];
WriteString[ModelData,"GUT_scale = 0._dp \n"];


For[i=1,i<=Length[ParticlesToPhotonAndHiggs],
WriteString[ModelData,"HPPloop"<>SPhenoForm[ParticlesToPhotonAndHiggs[[i,1]]] <>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[lowScaleIn],
WriteString[ModelData,ToString[lowScaleIn[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[lowScaleMZ],
WriteString[ModelData,SPhenoForm[lowScaleNames[[i]]]<>" = 0._dp \n"];
WriteString[ModelData,SPhenoForm[lowScaleMZ[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[highScaleIn],
WriteString[ModelData,ToString[highScaleIn[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[listVEVsIN],
WriteString[ModelData,ToString[listVEVsIN[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[highScaleMZ],
WriteString[ModelData,SPhenoForm[highScaleNames[[i]]]<>" = 0._dp \n"];
WriteString[ModelData,SPhenoForm[highScaleMZ[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[NewMassParameters],
WriteString[ModelData,SPhenoForm[NewMassParameters[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[listVEVs],
WriteString[ModelData,SPhenoForm[listVEVs[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[SPhenoWidthBR],
WriteString[ModelData,SPhenoForm[SPhenoWidthBR[[i]]]<>" = 0._dp \n"];
i++;];

(*
For[i=1,i\[LessEqual]Length[ListOfLowEnergyNames],
WriteString[ModelData,ToString[ListOfLowEnergyNames[[i]]]<>" = 0._dp \n"];
i++;];
*)

For[i=1,i<=Length[listsaveMasses],
For[i2=1,i2<=Length[listsaveMasses[[i]]],
WriteString[ModelData,SPhenoForm[listsaveMasses[[i,i2]]]<>" =  -1._dp  \n"];
i2++;];
i++;];

For[i=1,i<=Length[NeededRatiosLoopCouplingsSave],
WriteString[ModelData,SPhenoForm[NeededRatiosLoopCouplingsSave[[i]]]<>" =  0._dp  \n"];
i++;];


For[i=1,i<=Length[NeededRatiosLoopCouplingsSavePseudo],
WriteString[ModelData,SPhenoForm[NeededRatiosLoopCouplingsSavePseudo[[i]]]<>" =  0._dp  \n"];
i++;];


For[i=1,i<=Length[listParametersOtherRegimes],
WriteString[ModelData,SPhenoForm[listParametersOtherRegimes[[i]]]<>" = 0._dp \n"];
i++;];


For[i=1,i<=Length[listParametersOtherRegimesSave],
WriteString[ModelData,SPhenoForm[listParametersOtherRegimesSave[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[listParametersOtherRegimesGUT],
WriteString[ModelData,SPhenoForm[listParametersOtherRegimesGUT[[i]]]<>" = 0._dp \n"];
i++;];

For[i=1,i<=Length[ThresholdParticles],
WriteString[ModelData,"MassOf" <> SPhenoForm[ThresholdParticles[[i]]]<>"= 1E+18_dp \n"];
i++]; 

For[i=1,i<=Length[ThresholdCouplings],
WriteString[ModelData,SPhenoForm[ThresholdCouplings[[i]]]<>"_save = 0._dp \n"];
i++;];

If[Head[MINPAR[[1,1]]]=!=List,
For[i=1,i<=Length[MINPAR],
If[FreeQ[realVar,MINPAR[[i,2]]],
WriteString[ModelData,SPhenoForm[MINPAR[[i,2]]]<>"=(0._dp,0._dp) \n"];,
WriteString[ModelData,SPhenoForm[MINPAR[[i,2]]]<>"= 0._dp \n"];
];
i++;];,
For[j=1,j<=Length[MINPAR],
For[i=1,i<=Length[MINPAR[[j]]],
If[FreeQ[Take[MINPAR,{1,j-1}],MINPAR[[j,i,2]]],
If[FreeQ[realVar,MINPAR[[j,i,2]]],
WriteString[ModelData,SPhenoForm[MINPAR[[j,i,2]]]<>"=(0._dp,0._dp) \n"];,
WriteString[ModelData, SPhenoForm[MINPAR[[j,i,2]]]<>"= 0._dp\n"];
];
];
i++;];
j++;];
];

For[i=1,i<=Length[EXTPAR],
If[FreeQ[parameters,EXTPAR[[i,2]]] && FreeQ[MINPAR,EXTPAR[[i,2]]],
If[FreeQ[realVar,EXTPAR[[i,2]]],
WriteString[ModelData,SPhenoForm[EXTPAR[[i,2]]]<>"=(0._dp,0._dp)\n"];,
WriteString[ModelData, SPhenoForm[EXTPAR[[i,2]]]<>"= 0._dp \n"];
];
 ];
i++;];

If[IncludeFineTuning===True,
For[k=1, k<= Length[Thresholds],
temp=Intersection[Table[BoundaryConditionsDown[[k,i,1]],{i,1,Length[BoundaryConditionsDown[[k]]]}] /. A_[b__Integer]->A /. A_[a___,index1,b___]->A /. A_[a___,index2,b___]->A];
For[i=1,i<=Length[temp],
WriteString[ModelData,SPhenoForm[temp[[i]]]<>"_down_"<>ToString[k]<>" = 0._dp \n"];
i++;];
For[i=1,i<=Length[BetaGauge],
WriteString[ModelData,SPhenoForm[BetaGauge[[i,1]]]<>"_up_"<>ToString[k]<>" = 0._dp \n"];
i++;];
k++;];
];





WriteClebschGordan[ModelData];



WriteString[ModelData,"End Subroutine Set_All_Parameters_0 \n \n"];

(* AppendSourceCode["SwitchToSCKM.f90",ModelData]; *)

WriteString[ModelData,"\n\n"];
If[Head[DEFINITION[MatchingConditions]]===List &&DEFINITION[MatchingConditions]=!={},
WriteMatchingConditions[ModelData];
];

(*
If[WriteCKMBasis===True,
AppendSourceCode["SwitchFromSCKM.f90",ModelData];
];
*)

WriteString[ModelData,"End Module Model_Data_"<>ModelName<>""];

Close[ModelData];

];


LookForAdditionalParameter:=Block[{k,temp},
temp={};
If[Head[BoundaryHighScale]===List&&Flatten[BoundaryHighScale]=!={},
If[Head[BoundaryHighScale[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundaryHighScale[[k]]][[1]],{k,1,Length[BoundaryHighScale]}]];,
temp=Join[temp,Transpose[BoundaryHighScale][[1]]];
];
];
If[Head[BoundarySUSYScale]===List&&Flatten[BoundarySUSYScale]=!={},
If[Head[BoundarySUSYScale[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundarySUSYScale[[k]]][[1]],{k,1,Length[BoundarySUSYScale]}]];,
temp=Join[temp,Transpose[BoundarySUSYScale][[1]]];
];
];
If[Head[BoundaryEWSBScale]===List&&Flatten[BoundaryEWSBScale]=!={},
If[Head[BoundaryEWSBScale[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundaryEWSBScale[[k]]][[1]],{k,1,Length[BoundaryEWSBScale]}]];,
temp=Join[temp,Transpose[BoundaryEWSBScale][[1]]];
];
];
If[Head[BoundaryEWSBScaleRunningDown]===List&&Flatten[BoundaryEWSBScaleRunningDown]=!={},
If[Head[BoundaryEWSBScaleRunningDown[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundaryEWSBScaleRunningDown[[k]]][[1]],{k,1,Length[BoundaryEWSBScaleRunningDown]}]];,
temp=Join[temp,Transpose[BoundaryEWSBScaleRunningDown][[1]]];
];
];
If[Head[BoundaryConditionsUp]===List&&Flatten[BoundaryConditionsUp]=!={},
If[BoundaryConditionsUp[[1]]==={},
temp=Join[temp,Table[TransposeChecked[BoundaryConditionsUp[[k]]][[1]],{k,1,Length[BoundaryConditionsUp]}]];,
If[Head[BoundaryConditionsUp[[1,1]]]===List,
temp=Join[temp,Table[TransposeChecked[BoundaryConditionsUp[[k]]][[1]],{k,1,Length[BoundaryConditionsUp]}]];,
temp=Join[temp,Transpose[BoundaryConditionsUp][[1]]];
];
];
];
If[Head[BoundaryConditionsDown]===List&&Flatten[BoundaryConditionsDown]=!={},
If[Head[BoundaryConditionsDown[[1]]]==={},
temp=Join[temp,Table[Transpose[BoundaryConditionsDown[[k]]][[1]],{k,1,Length[BoundaryConditionsDown]}]];,
If[Head[BoundaryConditionsDown[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundaryConditionsDown[[k]]][[1]],{k,1,Length[BoundaryConditionsDown]}]];,temp=Join[temp,Transpose[BoundaryConditionsDown][[1]]];
];
];
];
If[Head[BoundaryLowScaleInput]===List&&Flatten[BoundaryLowScaleInput]=!={},
If[Head[BoundaryLowScaleInput[[1,1]]]===List,
temp=Join[temp,Table[Transpose[BoundaryLowScaleInput[[k]]][[1]],{k,1,Length[BoundaryLowScaleInput]}]];,temp=Join[temp,Transpose[BoundaryLowScaleInput][[1]]];
];
];
temp=Select[Flatten[temp],(FreeQ[HighScaleParametersAllwithVEVsRegimes,#] && FreeQ[UnfixedCharges,#]&&FreeQ[MINPAR,#]&&FreeQ[EXTPAR,#]&&FreeQ[ListAllInputParameters,#]&&FreeQ[listVEVs,#]&&FreeQ[Join[highScaleIn,lowScaleIn],#]&&FreeQ[Join[highScaleIn,lowScaleIn],Head[#]]&&FreeQ[HighScaleParametersAllwithVEVsRegimes,Head[#]]&&FreeQ[MINPAR,Head[#]]&&FreeQ[EXTPAR,Head[#]]&&FreeQ[ListAllInputParameters,Head[#]]&&FreeQ[listVEVs,Head[#]] && Head[#]=!=re  && Head[#]=!=im  )&];
temp=Intersection[temp];

temp=Select[temp,FreeQ[AdditionalParametersLagrange,#]&];

If[Head[AdditionalVariablesSPheno]===List,
temp=Select[temp,((FreeQ[AdditionalVariablesSPheno,#] && FreeQ[AdditionalVariablesSPheno,Head[#]])&)];,
AdditionalVariablesSPheno = {};
];

For[i=1,i<=Length[AdditionalVariablesSPheno],
If[Depth[AdditionalVariablesSPheno[[i]]]>1,
SPhenoParameters=Join[SPhenoParameters,{{Head[AdditionalVariablesSPheno[[i]]],List@@AdditionalVariablesSPheno[[i]] /. a_?NumberQ->generation,List@@AdditionalVariablesSPheno[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{{ToExpression[ToString[Head[AdditionalVariablesSPheno[[i]]]]<>"IN"],List@@AdditionalVariablesSPheno[[i]] /. a_?NumberQ->generation,List@@AdditionalVariablesSPheno[[i]]}}];,
SPhenoParameters=Join[SPhenoParameters,{{AdditionalVariablesSPheno[[i]],{generation},{1}}}];
SPhenoParameters=Join[SPhenoParameters,{{ToExpression[ToString[AdditionalVariablesSPheno[[i]]]<>"IN"],{generation},{1}}}];
];
i++;];




AdditionalVariablesSPheno = Join[AdditionalVariablesSPheno,temp];
AdditionalVariablesSPheno = DeleteCases[AdditionalVariablesSPheno,gYaux];
];


WriteGMSBFunctions:=Block[{},
WriteString[ModelData,"Real(dp) Function gGMSB(ratio) \n"];
WriteString[ModelData,"Implicit None \n"];
WriteString[ModelData," Real(dp),Intent(in)::ratio \n"];
WriteString[ModelData," gGMSB=(1._dp+ratio)/ratio**2*Log(1._dp+ratio)& \n"];
WriteString[ModelData,"   &+(1._dp-ratio)/ratio**2*Log(1._dp-ratio) \n"];
WriteString[ModelData,"End Function gGMSB \n \n"];


WriteString[ModelData,"Real(dp) Function fGMSB(ratio) \n"];
WriteString[ModelData,"Implicit None \n"];
WriteString[ModelData,"Real(dp),Intent(in)::ratio \n"];
WriteString[ModelData,"If (ratio.lt.0.0001) Then \n"];
WriteString[ModelData," fGMSB = 1._dp \n"];
WriteString[ModelData,"Else \n"];
WriteString[ModelData," fGMSB=(1._dp+ratio)/ratio**2*(Log(1._dp+ratio)&\n"];
WriteString[ModelData,"  & -2._dp*Li2(ratio/(1._dp+ratio))&\n"];
WriteString[ModelData,"  & +0.5_dp*Li2(2._dp*ratio/(1._dp+ratio)))&\n"];
WriteString[ModelData,"  & +(1._dp-ratio)/ratio**2*(Log(1._dp-ratio)&\n"];
WriteString[ModelData,"  & -2._dp*Li2(ratio/(ratio-1._dp))&\n"];
WriteString[ModelData,"  & +0.5_dp*Li2(2._dp*ratio/(ratio-1._dp)))\n"];
WriteString[ModelData,"End If \n"];
WriteString[ModelData,"End Function fGMSB \n \n"];

(*
WriteString[ModelData,"Real(dp) Function KilianC0D0(a,b,c,d)\n"];
WriteString[ModelData," ! This function is C0(a,b,c)+d*D0(a,b,c,d)\n"];
WriteString[ModelData," ! it catches the case a=b=0\n"];
WriteString[ModelData," ! cutoff for masses = sqrt(10^-10) GeV\n"];
WriteString[ModelData," Implicit None\n"];
WriteString[ModelData," Real(dp), Intent(in) :: a,b,c,d\n"];
WriteString[ModelData," Real(dp) :: D0user, C0user\n\n"];
WriteString[ModelData," If ((a.le.1.E-10_dp).and.(b.le.1.E-10_dp)) Then\n"];
WriteString[ModelData,"  KilianC0D0 = 1./(c-d)*Log(d/c)\n"];
WriteString[ModelData,"Else If ((a.le.1.E-10_dp).and.(c.le.1.E-10_dp)) Then\n"];
WriteString[ModelData," KilianC0D0 = 1./(b-d)*Log(d/b)\n"];
WriteString[ModelData,"Else If ((c.le.1.E-10_dp).and.(b.le.1.E-10_dp)) Then\n"];
WriteString[ModelData," KilianC0D0 = 1./(a-d)*Log(d/a)\n"];
WriteString[ModelData,"Else\n"];
WriteString[ModelData,"  C0user = C0_3m(a,b,c)\n"];
WriteString[ModelData,"  D0user = D0_Bagger(a,b,c,d)\n"];
WriteString[ModelData,"  KilianC0D0 = C0user+d*D0user\n"];
WriteString[ModelData,"  End If\n"];
WriteString[ModelData,"End Function \n\n"];

WriteString[ModelData,"Real(dp) Function KilianB0C0(a,b,c)\n"];
WriteString[ModelData," ! This function is B0(0,a,b)+c*C0_3m(a,b,c)\n"];
WriteString[ModelData," ! it catches the case a=b=0\n"];
WriteString[ModelData," ! cutoff for masses = sqrt(10^-10) GeV\n"];
WriteString[ModelData," Implicit None\n"];
WriteString[ModelData," Real(dp), Intent(in) :: a,b,c\n"];
WriteString[ModelData," Real(dp) :: B0user, C0user\n\n"];
WriteString[ModelData," If ((a.le.1.E-10_dp).and.(b.le.1.E-10_dp)) Then\n"];
WriteString[ModelData,"  KilianB0C0 = 1._dp - Log(c/getRenormalizationScale())\n"];
WriteString[ModelData," Else\n"];
WriteString[ModelData,"  KilianB0C0 = B0(0._dp,a,b)+c*C0_3m(a,b,c)\n"];
WriteString[ModelData," End If\n"];
WriteString[ModelData,"End Function \n"];
*)
];

(*
WriteClebschGordan[file_]:=Block[{i,j,temp},
For[i=1,i\[LessEqual]Length[SA`ClebschGordon],
WriteString[file,"Complex(dp), Parameter :: CG"<>ToString[i]<>"("<>StringReplace[ToString[Table[DimR[SusynoForm[SA`ClebschGordon[[i,1,1]]],SA`ClebschGordon[[i,1,2,j]]],{j,1,Length[SA`ClebschGordon[[i,1,2]]]}]],{"{"\[Rule]"","}"\[Rule]""}]<>") = Reshape(Source=(/ & \n "];
WriteString[file,"&"<>StringDrop[StringDrop[SPhenoForm[Flatten[Transpose/@N[SA`ClebschGordon[[i,2]]]]],5],-1]<>"& \n"];
WriteString[file,"&/),shape=(/"<>StringReplace[ToString[Table[DimR[SusynoForm[SA`ClebschGordon[[i,1,1]]],SA`ClebschGordon[[i,1,2,j]]],{j,1,Length[SA`ClebschGordon[[i,1,2]]]}]],{"{"\[Rule]"","}"\[Rule]""}]<>"/)) \n \n"];
i++;];
];
*)

WriteQuiverFunctions:=Block[{},
WriteString[ModelData,"Complex(dp) Recursive Function h(a,b) \n"];
WriteString[ModelData,"Implicit None \n"];
WriteString[ModelData,"Real(dp),Intent(in)::a,b \n"];
WriteString[ModelData,"h=1._dp-(Log(a)*Log(b))/2._dp-&\n"];
WriteString[ModelData,"& ((-(1._dp,-10D-12)+a+b)*(Pi2o6&\n"];
WriteString[ModelData,"& +CLi2(-(((1._dp,-10D-12)-a+b-Sqrt((1._dp,-10.D-12)+(a-b)**2-&\n"];
WriteString[ModelData,"& 2._dp*(a+b)))/&\n"];
WriteString[ModelData,"& ((1._dp,-10D-12)+a-b+Sqrt((1._dp,-10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b)))))&\n"];
WriteString[ModelData,"& +CLi2(-((1._dp+a-b-Sqrt((1._dp,-10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b)))/&\n"];
WriteString[ModelData,"& ((1._dp,-10D-12)-a+b+Sqrt((1._dp,-10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b)))))&\n"];
WriteString[ModelData,"& -Log(((1._dp,-10D-12)-a+b-&\n"];
WriteString[ModelData,"& Sqrt((1._dp,-10D-12)+(a-b)**2-2._dp*(a+b)))/&\n"];
WriteString[ModelData,"& ((1._dp,-10D-12)+a-b-Sqrt((1._dp,-10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b))))**2/4._dp&\n"];
WriteString[ModelData,"& +Log(((1._dp,-10D-12)-a+b-&\n"];
WriteString[ModelData,"& Sqrt((1._dp,-10D-12)+(a-b)**2-2._dp*(a+b)))/&\n"];
WriteString[ModelData,"& ((1._dp,-10D-12)+a-b+Sqrt((1._dp,-10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b))))**2/4._dp&\n"];
WriteString[ModelData,"& +Log(((1._dp,10D-12)+a-b-&\n"];
WriteString[ModelData,"& Sqrt((1._dp,10D-12)+(a-b)**2-2._dp*(a+b)))/&\n"];
WriteString[ModelData,"& ((1._dp,10D-12)-a+b+Sqrt((1._dp,10D-12)+&\n"];
WriteString[ModelData,"& (a-b)**2-2._dp*(a+b))))**2/4._dp&\n"];
WriteString[ModelData,"& +Log(((1._dp,10D-12)-a+b+&\n"];
WriteString[ModelData,"& Sqrt((1._dp,-10.D-12)+(a-b)**2-&\n"];
WriteString[ModelData,"& (2._dp,10.D-12)*(a+b)))/((1._dp,-10D-12)+a-b+&\n"];
WriteString[ModelData,"& Sqrt((1._dp,-10.D-12)+(a-b)**2-2._dp*(a+b))))**2/4._dp))/&\n"];
WriteString[ModelData,"& Sqrt((1._dp,-10.D-12)+(a-b)**2-2._dp*(a+b))\n"];
WriteString[ModelData,"End Function h \n \n"];
WriteString[ModelData,"Complex(dp) Function SQuiver(xQ,yQ) \n"];
WriteString[ModelData,"Implicit None \n"];
WriteString[ModelData,"Real(dp),Intent(in)::xQ,yQ \n"];
WriteString[ModelData,"SQuiver=(-8._dp*xQ**2+4._dp*xQ*yQ**2*atanh(xQ)&\n"];
WriteString[ModelData," & -4._dp*(4._dp+yQ**2)*h(1._dp,yQ**2)+(-1._dp+xQ)*(-8._dp+8._dp*xQ+&\n"];
WriteString[ModelData," & yQ**2)*h(1._dp,yQ**2/(1._dp-xQ))+8._dp*h(1._dp,yQ**2/(1._dp+xQ))+&\n"];
WriteString[ModelData," & 16._dp*xQ*h(1._dp,yQ**2/(1._dp+xQ))+&\n"];
WriteString[ModelData," & 8._dp*xQ**2*h(1._dp,yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & yQ**2*h(1._dp,yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & xQ*yQ**2*h(1._dp,yQ**2/(1._dp+xQ))&\n"];
WriteString[ModelData," & +4._dp*xQ*h(1._dp/(1._dp-xQ),yQ**2/(1._dp-xQ))-&\n"];
WriteString[ModelData," & 4._dp*xQ**2*h(1._dp/(1._dp-xQ),yQ**2/(1._dp-xQ))+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*h(1._dp/(1._dp-xQ),yQ**2/(1._dp-xQ))-&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h(1._dp/(1._dp-xQ),yQ**2/(1._dp-xQ))+&\n"];
WriteString[ModelData," & 4._dp*xQ*h(1._dp-xQ,yQ**2)+2._dp*yQ**2*h(1._dp-xQ,yQ**2)-&\n"];
WriteString[ModelData," & 4._dp*xQ*h(1._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & 4._dp*xQ**2*h(1._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*h(1._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))+&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h(1._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & 4._dp*xQ*h(1._dp+xQ,yQ**2)+2._dp*yQ**2*h(1._dp+xQ,yQ**2)-&\n"];
WriteString[ModelData," & yQ**2*h((1._dp+xQ)/(1._dp-xQ),yQ**2/(1._dp-xQ))+&\n"];
WriteString[ModelData," & xQ*yQ**2*h((1._dp+xQ)/(1._dp-xQ),yQ**2/(1._dp-xQ))-&\n"];
WriteString[ModelData," & yQ**2*h(-1._dp+2._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & xQ*yQ**2*h(-1._dp+2._dp/(1._dp+xQ),yQ**2/(1._dp+xQ))-&\n"];
WriteString[ModelData," & 4._dp*yQ**2*h(yQ**(-2),yQ**(-2))+&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h((1._dp-xQ)/yQ**2,yQ**(-2))+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*h((1._dp-xQ)/yQ**2,(1._dp-xQ)/yQ**2)-&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h((1._dp-xQ)/yQ**2,(1._dp-xQ)/yQ**2)-&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h((1._dp+xQ)/yQ**2,yQ**(-2))+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*h((1._dp+xQ)/yQ**2,(1._dp+xQ)/yQ**2)+&\n"];
WriteString[ModelData," & 2._dp*xQ*yQ**2*h((1._dp+xQ)/yQ**2,(1._dp+xQ)/yQ**2)-&\n"];
WriteString[ModelData," & 8._dp*xQ*CLi2((1._dp,10D-12)*xQ)+&\n"];
WriteString[ModelData," & 4._dp*(-1._dp+xQ)*(xQ+yQ**2)*CLi2(xQ/(-(1._dp,10D-12)+xQ))-&\n"];
WriteString[ModelData," & (-1._dp+xQ)*yQ**2*CLi2((2._dp*xQ)/(-(1._dp,10D-12)+xQ))+&\n"];
WriteString[ModelData," & 2._dp*xQ*CLi2((1._dp,10D-12)*xQ**2)+&\n"];
WriteString[ModelData," & 4._dp*(1._dp+xQ)*(xQ-yQ**2)*CLi2(xQ/((1._dp,10D-12)+xQ))+&\n"];
WriteString[ModelData," & (1._dp+xQ)*yQ**2*CLi2(((2._dp,10D-12)*xQ)/(1._dp+xQ))+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*Log(1._dp-xQ)+&\n"];
WriteString[ModelData," & 2._dp*yQ**2*Log(1._dp+xQ))/(2._dp*xQ**2*yQ**2)\n"];
WriteString[ModelData,"End Function SQuiver \n \n"];
];

WriteMatchingConditions[file_]:=Block[{i,j,k,suffix},
MakeSubroutineTitle["SetMatchingConditions",Join[listVEVs,listAllParameters],{"g1SM","g2SM","g3SM","YuSM","YdSM","YeSM","vSM"},{"MZsuffix"},file];
MakeVariableList[listAllParameters,",Intent(inout)",file];
MakeVariableList[listVEVs,",Intent(inout)",file];
WriteString[file,"Logical,Intent(in)::MZsuffix \n"];
WriteString[file,"Real(dp), Intent(in) :: g1SM, g2SM, g3SM, vSM \n"];
WriteString[file,"Complex(dp),Intent(in) :: YuSM(3,3),YdSM(3,3),YeSM(3,3) \n"];
For[k=1,k<=2,
If[k===1,
WriteString[file,"If (MZsuffix) Then \n"];
suffix="MZ";,
WriteString[file,"Else \n"];
suffix="";
];
For[i=1,i<=Length[DEFINITION[MatchingConditions]],
WriteString[file,"  "<>AddSuffix[DEFINITION[MatchingConditions][[i,1]],suffix]<>" = " <>SPhenoForm[DEFINITION[MatchingConditions][[i,2]]] <>" \n"];
i++;];
k++;];
WriteString[file,"End if \n"];
WriteString[file,"End Subroutine SetMatchingConditions \n"];
];
AddSuffix[name_,suffix_]:=Block[{},
Switch[Head[name],
Symbol|T|B|Q,
Return[SPhenoForm[name]<>suffix];,
_,
Return[SPhenoForm[name[[0]]]<>suffix<>StringDrop[SPhenoForm[name],{1,StringLength[SPhenoForm[name[[0]]]]}]];
];
];

WriteInitClebschGordan[file_]:=Block[{i,j,temp},
For[i=1,i<=Length[SA`ClebschGordon],
WriteString[file,"Complex(dp) :: CG"<>ToString[i]<>"("<>StringReplace[ToString[Table[DimR[SusynoForm[SA`ClebschGordon[[i,1,1]]],Abs[SA`ClebschGordon[[i,1,2,j]]]],{j,1,Length[SA`ClebschGordon[[i,1,2]]]}]],{"{"->"","}"->""}]<>") \n "];
i++;];
];

WriteClebschGordan[file_]:=Block[{i,j,temp,i1,i2,i3,i4},
For[i=1,i<=Length[SA`ClebschGordon],
Switch[Length[SA`ClebschGordon[[i,1,2]]],
2,
	For[i1=1,i1<=Length[SA`ClebschGordon[[i,2]]],
	For[i2=1,i2<=Length[SA`ClebschGordon[[i,2,i1]]],
	WriteString[file,"CG"<>ToString[i]<>"("<>ToString[i1]<>","<>ToString[i2]<>") = "<>SPhenoForm[N[SA`ClebschGordon[[i,2,i1,i2]]]]<>"\n "];
	i2++;];
	i1++;];,
3,
	For[i1=1,i1<=Length[SA`ClebschGordon[[i,2]]],
	For[i2=1,i2<=Length[SA`ClebschGordon[[i,2,i1]]],
	For[i3=1,i3<=Length[SA`ClebschGordon[[i,2,i1,i2]]],
	WriteString[file,"CG"<>ToString[i]<>"("<>ToString[i1]<>","<>ToString[i2]<>","<>ToString[i3]<>") = "<>SPhenoForm[N[SA`ClebschGordon[[i,2,i1,i2,i3]]]]<>"\n "];
	i3++;];
	i2++;];
	i1++;];,
4,
	For[i1=1,i1<=Length[SA`ClebschGordon[[i,2]]],
	For[i2=1,i2<=Length[SA`ClebschGordon[[i,2,i1]]],
	For[i3=1,i3<=Length[SA`ClebschGordon[[i,2,i1,i2]]],
	For[i4=1,i4<=Length[SA`ClebschGordon[[i,2,i1,i2,i3]]],
	WriteString[file,"CG"<>ToString[i]<>"("<>ToString[i1]<>","<>ToString[i2]<>","<>ToString[i3]<>","<>ToString[i4]<>") = "<>SPhenoForm[N[SA`ClebschGordon[[i,2,i1,i2,i3,i4]]]]<>"\n "];
i4++;];
i3++;];	
i2++;];
i1++;];
];

i++;];
];
