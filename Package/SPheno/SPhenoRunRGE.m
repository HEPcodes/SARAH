(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateRunRGE:=Block[{i,j,k,l,j2,temp},

Print["  Write 'RunRGE'"];

WriteString[sphenoSugra,"Subroutine RunRGE(kont, delta0, g1A, g1C, mGUT)\n"];

WriteString[sphenoSugra,"Implicit None\n"];
WriteString[sphenoSugra,"Integer,Intent(inout)::kont\n"];
WriteString[sphenoSugra,"Real(dp),Intent(in)::delta0\n"];

If[Head[RegimeNr]===Integer,
NumberLowAllRegimes[[RegimeNr]]=numberLow;
NumberHighAllRegimes[[RegimeNr]] = numberAll;
NumberAllwithVEVsAllRegimes[[RegimeNr]] = numberAllwithVEVs;
ListVEVsAllRegimes[[RegimeNr]] = listVEVs;
LowScaleParametersAllRegimes[[RegimeNr]] = lowScaleNames;
HighScaleParametersAllRegimes[[RegimeNr]] = listAllParameters;
HighScaleParametersAllwithVEVsRegimes[[RegimeNr]] = listAllParametersAndVEVs;

VEVsRunning=Table[False,{RegimeNr}];

For[i=1,i<=RegimeNr,
WriteString[sphenoSugra,"Real(dp) :: gAReg"<>ToString[i]<>"("<>ToString[NumberLowAllRegimes[[i]]]<>") \n" ];
WriteString[sphenoSugra,"Real(dp) :: gBReg"<>ToString[i]<>"("<>ToString[NumberLowAllRegimes[[i]]]<>") \n" ];
WriteString[sphenoSugra,"Real(dp) :: gCaReg"<>ToString[i]<>"("<>ToString[NumberHighAllRegimes[[i]]]<>") \n" ];
WriteString[sphenoSugra,"Real(dp) :: gCbReg"<>ToString[i]<>"("<>ToString[NumberAllwithVEVsAllRegimes[[i]]]<>") \n" ];
If[i<RegimeNr,
If[Intersection[ListVEVsAllRegimes[[i]],ListVEVsAllRegimes[[i+1]]]=!={},
VEVsRunning[[i]]=True;
];
];
i++;];

MakeVariableList[Union[Flatten[Delete[ListVEVsAllRegimes,RegimeNr]]],"",sphenoSugra];
WriteString[sphenoSugra,"Real(dp) :: test \n"];



];

WriteString[sphenoSugra,"Integer :: i1, i2, i3, i4 \n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Real(dp),Intent(inout)::g1A("<>ToString[numberLow]<>")\n"];,
WriteString[sphenoSugra,"Real(dp),Intent(inout)::g1A("<>ToString[numberAllwithVEVs]<>")\n"];
];
WriteString[sphenoSugra,"Real(dp),Intent(out)::g1C("<>ToString[numberAll]<>"),mGUT\n"];
WriteString[sphenoSugra,"Real(dp)::tz,dt,t_out \n"];
WriteString[sphenoSugra,"Real(dp)::mudim,gGUT,gA_h("<>ToString[numberLow]<>"),g1b("<>ToString[numberLow]<>"),m_hi,m_lo\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Real(dp)::g1S("<>ToString[numberLow]<>")\n"];,
WriteString[sphenoSugra,"Real(dp)::g1S("<>ToString[numberAllwithVEVs]<>")\n"];
]; 
If[ImplementThresholds==True,
(* temp=Intersection[getGenSF/@ThresholdParticles];
For[i=1,i<=Length[temp],
WriteString[sphenoSugra,"Real(dp) :: EW"<> ToString[temp[[i]]]<>"("<> ToString[temp[[i]]]<>") \n"];
WriteString[sphenoSugra,"Complex(dp) :: dummy"<> ToString[temp[[i]]]<>"("<> ToString[temp[[i]]]<>","<> ToString[temp[[i]]]<>") \n"];
i++;];
*)
For[i=1,i<=Length[ThresholdParticles],
WriteString[sphenoSugra,"Real(dp) :: EW"<> ToString[ThresholdParticles[[i]]]<>"("<> ToString[getGenSF[ThresholdParticles[[i]]]]<>") \n"];
WriteString[sphenoSugra,"Complex(dp) :: dummy"<> ToString[ThresholdParticles[[i]]]<>"("<>ToString[getGenSF[ThresholdParticles[[i]]]]<>","<> ToString[getGenSF[ThresholdParticles[[i]]]]<>") \n"];
i++;];

WriteString[sphenoSugra, "Real(dp) ::  test(2) \n\n"];
WriteString[sphenoSugra, "Integer ::  ierr \n\n"];

];



WriteString[sphenoSugra,"Logical :: FoundUnification, unified, greater \n\n"];


WriteString[sphenoSugra,"Iname=Iname+1\n"];
WriteString[sphenoSugra,"NameOfUnit(Iname)='runRGE'\n\n"];

If[Head[RegimeNr]===Integer,
RGErunningRegime;,

If[ImplementThresholds==False,
WriteString[sphenoSugra,"If (.Not.UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"m_lo=5.e12_dp\n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra,"m_lo=Min(5.e12_dp,GUT_Scale)\n"];
WriteString[sphenoSugra,"End If \n"];,
WriteString[sphenoSugra,"m_lo="<> SPhenoForm[Thresholds[[1,1]]] <>"\n"]; 
];

WriteString[sphenoSugra,"mudim=GetRenormalizationScale()\n"];
WriteString[sphenoSugra,"mudim=Max(mudim,mZ2)\n"];
WriteString[sphenoSugra,"tz=0.5_dp*Log(mZ2/mudim)\n"];
WriteString[sphenoSugra,"dt=tz/100._dp\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1A,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1A,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"  Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"  Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"Call BoundarySUSY(g1a,g1B)\n\n"];

WriteString[sphenoSugra,"FoundUnification= .False. \n"];
WriteString[sphenoSugra,"tz=Log(sqrt(mudim)/m_lo)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

If[ImplementThresholds==False,

WriteString[sphenoSugra,"If (.Not.UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e20_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeintB2(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",checkGUT"<>ToString[numberLow]<>",t_out,kont)\n\n"];,
WriteString[sphenoSugra,"Call odeintB2(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",checkGUT"<>ToString[numberAllwithVEVs]<>",t_out,kont)\n\n"];
];



WriteString[sphenoSugra,"If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True. \n"];
WriteString[sphenoSugra,"mGUT=1.e20_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT=Sqrt(0.5_dp*(g1b(1)**2+g1b(2)**2))\n"];
WriteString[sphenoSugra,"If (StrictUnification) g1b(3)=gGUT\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"Write(ErrCan,*) \"kont\",kont,delta0,tz,dt\n"];
WriteString[sphenoSugra,"Write (ErrCan,*) \"t_out\",t_out,1.e20_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"Write(ErrCan,*) \" \"\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"  tz=Log(m_lo/GUT_scale)\n"];
WriteString[sphenoSugra,"  mGUT=GUT_scale\n"];
WriteString[sphenoSugra,"  dt=-tz/50._dp\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];
WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];
WriteString[sphenoSugra,"End If\n\n"];

WriteString[sphenoSugra,"mGUT_Save=mGUT\n"];

WriteString[sphenoSugra,"Call BoundaryHS(g1B,g1c)\n\n"];


WriteString[sphenoSugra,"mudim=GetRenormalizationScale()\n"];
WriteString[sphenoSugra,"mudim=Max(mudim,mZ2)\n"];

WriteString[sphenoSugra,"tz=0.5_dp*Log(mudim/mGUT_save**2)\n"];
WriteString[sphenoSugra,"dt=tz/100._dp\n"];
WriteString[sphenoSugra,"Call odeint(g1c,"<>ToString[numberAll]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[numberAll]<>",kont)\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];,

For[k=1,k<=Length[Thresholds],

WriteString[sphenoSugra,"Call checkGUT"<>ToString[numberLow]<>"(g1B,delta0,unified,greater) \n"];

(* WriteString[sphenoSugra,"If (g1B(1).Gt.g1B(2)) Then\n"]; *)
WriteString[sphenoSugra,"If (greater) Then\n"];
WriteString[sphenoSugra,"If (UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/GUT_scale)\n"];
WriteString[sphenoSugra,"mGUT=GUT_scale\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];

WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"Else!.not.UseFixedGUTScale\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e15_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeintC2(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",checkGUT"<>ToString[numberLow]<>",t_out,kont)\n\n"];,
WriteString[sphenoSugra,"Call odeintC2(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",checkGUT"<>ToString[numberAllwithVEVs]<>",t_out,kont)\n\n"];
];
WriteString[sphenoSugra,"If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True.\n"];
WriteString[sphenoSugra,"mGUT=1.e15_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT=Sqrt(0.5_dp*(g1B(1)**2+g1B(2)**2))\n"];
WriteString[sphenoSugra,"If (StrictUnification) g1B(3)=gGUT\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"End If ! UseFixedScale \n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"g1B"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"g1B"},{},sphenoSugra];
];

SetBoundaryThresholdUp[k,False]; 

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"g1B"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"g1B"},sphenoSugra];
];

WriteString[sphenoSugra,"Else\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"g1B"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"g1B"},{},sphenoSugra];
];

SetBoundaryThresholdUp[k,True];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"g1B"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"g1B"},sphenoSugra];
];


If[k<Length[Thresholds],
WriteString[sphenoSugra,"m_lo="<>SPhenoForm[Thresholds[[k,1]]]<>"\n"];
WriteString[sphenoSugra,"If ("<>SPhenoForm[Thresholds[[k,1]]]<>".Ne."<>SPhenoForm[Thresholds[[k+1,1]]]<>") Then\n"];
WriteString[sphenoSugra,"m_hi="<>SPhenoForm[Thresholds[[k+1,1]]]<>"\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/m_hi)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"g1B"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"g1B"},{},sphenoSugra];
];

WriteString[sphenoSugra,"m_lo=m_hi\n"];
WriteString[sphenoSugra,"End If\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"g1B"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"g1B"},sphenoSugra];
];,



WriteString[sphenoSugra,"If (UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/GUT_scale)\n"];
WriteString[sphenoSugra,"mGUT=GUT_scale\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];,
WriteString[sphenoSugra,"Call odeint(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
];
WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"Else\n"];

WriteString[sphenoSugra,"Call checkGUT"<>ToString[numberLow]<>"(g1B,delta0,unified,greater) \n"];

(* WriteString[sphenoSugra,"If (g1B(1).Lt.g1B(2)) Then! I am still below GUT scale\n"]; *)
WriteString[sphenoSugra,"If (.not.greater) Then! I am still below GUT scale\n"];

WriteString[sphenoSugra,"tz=Log(m_lo/1.e20_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeintB2(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",checkGUT"<>ToString[numberLow]<>",t_out,kont)\n\n"];,
WriteString[sphenoSugra,"Call odeintB2(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",checkGUT"<>ToString[numberAllwithVEVs]<>",t_out,kont)\n\n"];
];
WriteString[sphenoSugra,"If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True.\n"];
WriteString[sphenoSugra,"mGUT=1.e20_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT=Sqrt(0.5_dp*(g1B(1)**2+g1B(2)**2))\n"];
(* WriteString[sphenoSugra,"g1B(1)=gGUT\n"];
WriteString[sphenoSugra,"g1B(2)=gGUT\n"]; *)
WriteString[sphenoSugra,"If (StrictUnification) g1B(3)=gGUT\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

(* WriteString[sphenoSugra,"Else If (g1B(1).Eq.g1B(2)) Then\n"]; *)
WriteString[sphenoSugra,"Else If (unified) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True. \n"];
WriteString[sphenoSugra,"mGUT=1.e15_dp*Exp(t_out)\n"];
(* WriteString[sphenoSugra,"gGUT=g1B(1)\n"]; *)
WriteString[sphenoSugra,"If (StrictUnification) g1B(3)=gGUT\n"];

WriteString[sphenoSugra,"Else! I have already crossed the GUT scale\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e15_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Call odeintC2(g1B,"<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",checkGUT"<>ToString[numberLow]<>",t_out,kont)\n\n"];,
WriteString[sphenoSugra,"Call odeintC2(g1B,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",checkGUT"<>ToString[numberAllwithVEVs]<>",t_out,kont)\n\n"];
];
WriteString[sphenoSugra," If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"  FoundUnification= .True. \n"];
WriteString[sphenoSugra,"  mGUT=1.e15_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"  gGUT=Sqrt(0.5_dp*(g1B(1)**2+g1B(2)**2))\n"];
(* WriteString[sphenoSugra,"  g1B(1:2)=gGUT\n"]; *)
WriteString[sphenoSugra,"  If (StrictUnification) g1B(3)=gGUT\n"];
WriteString[sphenoSugra," Else\n"];
WriteString[sphenoSugra,"  Iname=Iname-1\n"];
WriteString[sphenoSugra,"  Return\n"];
WriteString[sphenoSugra," End If\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"End If\n"];

];
k++;];

For[k=1,k<= Length[Thresholds],
WriteString[sphenoSugra,"End If\n"];
k++;];

WriteString[sphenoSugra,"Call BoundaryHS(g1B,g1C)\n\n"];

For[i=1,i<=Length[ThresholdParticles],
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[ThresholdParticles[[i]]]  <>" = " <>ToString[getGenSF[ThresholdParticles[[i]]]]<> "\n"];
i++;];

WriteString[sphenoSugra,"m_hi=mGUT \n"];

For[k=Length[Thresholds],k>=1,
WriteString[sphenoSugra,"If ("<>SPhenoForm[Thresholds[[k,1]]]<>".Lt.Abs(m_hi)) Then\n"];
WriteString[sphenoSugra,"IncludeThresholdsAtScale = .True. \n"];
WriteString[sphenoSugra,"m_lo="<>SPhenoForm[Thresholds[[k,1]]]<>"\n"];
WriteString[sphenoSugra,"tz=Log(Abs(m_lo/m_hi))\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

WriteString[sphenoSugra,"Call odeint(g1c,"<>ToString[numberAll]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[numberAll]<>",kont)\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"m_hi=m_lo\n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra," IncludeThresholdsAtScale = .False. \n"];
WriteString[sphenoSugra,"Endif \n"];


MakeCall["GToParameters"<>ToString[numberAll],listAllParameters,{"g1C"},{},sphenoSugra];

SetBoundaryThresholdDown[k];
MakeCall["ParametersToG"<>ToString[numberAll],listAllParameters,{},{"g1C"},sphenoSugra];
k--;];


WriteString[sphenoSugra,"mudim=GetRenormalizationScale()\n"];
WriteString[sphenoSugra,"mudim=Max(mudim,mZ2)\n"];

WriteString[sphenoSugra,"tz=0.5_dp*Log(mudim/m_hi**2)\n"];
WriteString[sphenoSugra,"dt=tz/100._dp\n"];
WriteString[sphenoSugra,"Call odeint(g1c,"<>ToString[numberAll]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[numberAll]<>",kont)\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
];
WriteString[sphenoSugra,"Contains \n\n"];
];





WriteString[sphenoSugra,"Function InverseMatrix(M) Result(Inv) \n"];
WriteString[sphenoSugra,"Implicit None\n"];
WriteString[sphenoSugra,"Complex(dp), Intent(in) :: M(:,:) \n"];
WriteString[sphenoSugra,"Complex(dp) :: Inv(Size(M,1),Size(M,2)) \n\n"];
WriteString[sphenoSugra,"inv = M \n"];
WriteString[sphenoSugra,"Call gaussj(kont,inv,Size(M,1),Size(M,2)) \n"];
WriteString[sphenoSugra,"End Function InverseMatrix \n\n"];


WriteString[sphenoSugra,"End Subroutine RunRGE\n\n"];

];


SetBoundaryThresholdDown[nr_]:=Block[{i,j,dim,k,name,name1,name2,pos,ind},
For[i=1,i<=Length[ThresholdMasses[[nr]]],
If[getGenSF[ThresholdMasses[[nr,i,1]]]>1,
dim=ToString[getGenSF[ThresholdMasses[[nr,i,1]]]];
name = ToString[ThresholdMasses[[nr,i,1]]];
pos = Position[BilinearSuperpotential,ThresholdMasses[[nr,i,1]]][[1,1]];
name1=name;
name2=DeleteCases[BilinearSuperpotential[[pos]][[2]],ThresholdMasses[[nr,i,1]]];
If[name2==={},name2=name1;,name2=ToString[name2[[1]]];];
WriteString[sphenoSugra,"dummy"<>name1<>" = 0._dp \n"];
WriteString[sphenoSugra,"dummy"<>name2<>" = 0._dp \n"];
WriteString[sphenoSugra,"EW"<>name<>" = 0._dp \n"];
If[getGenSF[ThresholdMasses[[nr,i,1]]]-(Length[Thresholds]-nr)>1,
ind ="1:"<>ToString[getGenSF[ThresholdMasses[[nr,i,1]]]-(Length[Thresholds]-nr)];
WriteString[sphenoSugra,"Call EigenSystem(MatMul(Transpose(Conjg("<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>"("<>ind<>","<>ind<>"))),"<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>"("<>ind<>","<>ind<>")),EW"<>name<>"("<>ind<>"),dummy"<>name1<>"("<>ind<>","<>ind<>"),kont,test) \n"];
WriteString[sphenoSugra,"Call EigenSystem(MatMul("<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>"("<>ind<>","<>ind<>"),Transpose(Conjg("<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>"("<>ind<>","<>ind<>")))),EW"<>name<>"("<>ind<>"),dummy"<>name2<>"("<>ind<>","<>ind<>"),kont,test) \n"];,
WriteString[sphenoSugra,"EW"<>name<>"(1) = Abs("<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>"(1,1))**2 \n"];
WriteString[sphenoSugra,"dummy"<>name1<>"(1,1) = 1._dp \n"];
WriteString[sphenoSugra,"dummy"<>name2<>"(1,1) = 1._dp \n"];
];

(* For[j=ThresholdMasses[[nr,i,3]],j>= ThresholdMasses[[nr,i,3]],
WriteString[sphenoSugra,"MassOf"<>SPhenoForm[ThresholdMasses[[nr,i,1]]] <>"("<>ToString[j]<>") = EW"<>name<>"("<>ToString[getGenSF[ThresholdMasses[[nr,i,1]]]+j-ThresholdMasses[[nr,i,3]]] <>") \n"]; 
j--;]; *)
For[j=ThresholdMasses[[nr,i,3]],j>= ThresholdMasses[[nr,i,3]],
WriteString[sphenoSugra,"MassOf"<>SPhenoForm[ThresholdMasses[[nr,i,1]]] <>"("<>ToString[j]<>") = sqrt(Abs(EW"<>name<>"("<>ToString[j] <>"))) \n"]; 
j--;];
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[ThresholdMasses[[nr,i,1]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]-1 ]<> "\n"];
If[FreeQ[NeededOtherFields,ThresholdMasses[[nr,i,1]]]==False,
pos=Position[NeededOtherFields,ThresholdMasses[[nr,i,1]]][[1,1]];
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[NeededOtherFields[[pos,2]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]-1 ]<> "\n"];
];,

WriteString[sphenoSugra,"MassOf"<>SPhenoForm[ThresholdMasses[[nr,i,1]]] <>" = "<>SPhenoForm[ThresholdMasses[[nr,i,4]]] <>" \n"]; 
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[ThresholdMasses[[nr,i,1]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]-1 ]<> "\n"];
If[FreeQ[NeededOtherFields,ThresholdMasses[[nr,i,1]]]==False,
pos=Position[NeededOtherFields,ThresholdMasses[[nr,i,1]]][[1,1]];
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[NeededOtherFields[[pos,2]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]-1 ]<> "\n"];
];
];
i++;];

For[i=1,i<=Length[ThresholdInvolvedCouplings[[nr]]],
If[ThresholdInvolvedCouplings[[nr,i,2]]==1,
WriteString[sphenoSugra,SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>" = MatMul(Conjg(dummy"<>ToString[RE[ThresholdInvolvedCouplings[[nr,i,5]]]]<>"),"<>SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]] <>") \n"];,
WriteString[sphenoSugra,SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>" = MatMul("<>SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]] <>",Transpose(dummy"<>ToString[RE[ThresholdInvolvedCouplings[[nr,i,5]]]]<>")) \n"];
];
i++;];

For[i=1,i<=Length[ThresholdCouplings],
Switch[Length[getDimSPheno[ThresholdCouplings[[i]]]],
3, ind = "("<>ToString[nr]<>",:,:,:)";,
2, ind = "("<>ToString[nr]<>",:,:)";,
1, ind = "("<>ToString[nr]<>",:)";,
0, ind ="("<>ToString[nr]<>")";
];
WriteString[sphenoSugra,SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>ind <> "="<> SPhenoForm[ThresholdCouplings[[i]]] <>"\n"];
i++];

k=nr;

WriteString[sphenoSugra,"If ((TwoLoopRGE).And.IncludeThresholdsAtScale) Then\n"];
For[i=1,i<=Length[Gauge],
For[j=1,j<=Length[ThresholdMasses[[k]]],
If[getGenSF[ThresholdMasses[[k,j,1]]]>1,
For[j2=ThresholdMasses[[k,j,2]],j2<= ThresholdMasses[[k,j,3]],
tempDynkin=SA`Dynkin[ThresholdMasses[[k,j,1]],i]*MulFactor[ThresholdMasses[[k,j,1]],i];
If[NumericQ[tempDynkin] && tempDynkin =!=0,
WriteString[sphenoSugra,SPhenoForm[BetaGauge[[i,1]] ]<>" = "<> SPhenoForm[BetaGauge[[i,1]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"("<>ToString[j2]<>")/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];

WriteString[sphenoSugra,SPhenoForm[BetaMi[[i,1]] ]<>" = "<> SPhenoForm[BetaMi[[i,1]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"("<>ToString[j2]<>")/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];
];
j2++;];,
tempDynkin=SA`Dynkin[ThresholdMasses[[k,j,1]],i]*MulFactor[ThresholdMasses[[k,j,1]],i];
If[NumericQ[tempDynkin] && tempDynkin =!=0,
WriteString[sphenoSugra,SPhenoForm[BetaGauge[[i,1]] ]<>" = "<> SPhenoForm[BetaGauge[[i,1]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];

WriteString[sphenoSugra,SPhenoForm[BetaMi[[i,1]] ]<>" = "<> SPhenoForm[BetaMi[[i,1]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];
];

];

j++;];
i++;];
WriteString[sphenoSugra,"End If \n \n"];

For[i=1,i<=Length[BoundaryConditionsDown[[nr]]],
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index1],
WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsDown[[nr,i,1]]] <> " = " <> SPhenoForm[BoundaryConditionsDown[[nr,i,2]]] <>"\n "];,
dims = getDimSPheno[BoundaryConditionsDown[[nr,i,1]]/. a_[b__]->a];
pos = Position[BoundaryConditionsDown[[nr,i,1]],index1][[1,1]];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[dims[[pos]]] <>"\n"];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index2]==False,
pos = Position[BoundaryConditionsDown[[nr,i,1]],index2][[1,1]];
WriteString[sphenoSugra,"Do i2=1,"<>ToString[dims[[pos]]] <>"\n"];
];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index3]==False,
pos = Position[BoundaryConditionsDown[[nr,i,1]],index3][[1,1]];
WriteString[sphenoSugra,"Do i3=1,"<>ToString[dims[[pos]]] <>"\n"];
];

WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsDown[[nr,i,1]] /.{index1->i1,index2->i2,index3->i3}] <> " = " <> SPhenoForm[BoundaryConditionsDown[[nr,i,2]]/.{index1->i1,index2->i2,index3->i3}] <>"\n "];

WriteString[sphenoSugra,"End Do \n"];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index2]==False,
WriteString[sphenoSugra,"End Do \n"];
];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index3]==False,
WriteString[sphenoSugra,"End Do \n"];
];
];
i++;];


For[i=1,i<=Length[ThresholdInvolvedCouplings[[nr]]],
If[ThresholdInvolvedCouplings[[nr,i,2]]===ALL,
ind="";,
Switch[ThresholdInvolvedCouplings[[nr,i,3]],
3, 
  Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1,ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:,:)";,
2,ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]]<>",:)";,
3,ind = "(:,:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
2, 
Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:)";,
2, ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];
];
WriteString[sphenoSugra,SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>ind<>" = 0._dp \n"];
i++;];

WriteString[sphenoSugra,"ThresholdCrossed = "<>ToString[nr-1]<>"\n\n"];

];







SetBoundaryThresholdUp[nr_, thresh_]:=Block[{i,j,k,j2},

k=nr;

If[thresh==True,
WriteString[sphenoSugra,"If (TwoLoopRGE) Then\n"];
For[i=1,i<=Length[Gauge],
For[j=1,j<=Length[ThresholdMasses[[k]]],
If[getGenSF[ThresholdMasses[[k,j,1]]]>1,
For[j2=ThresholdMasses[[k,j,2]],j2<= ThresholdMasses[[k,j,3]],
tempDynkin=SA`Dynkin[ThresholdMasses[[k,j,1]],i]*MulFactor[ThresholdMasses[[k,j,1]],i];
If[NumericQ[tempDynkin] && tempDynkin =!=0,
WriteString[sphenoSugra,SPhenoForm[BetaGauge[[i,1]] ]<>" = "<> SPhenoForm[BetaGauge[[i,1]]]<>"*(1._dp - oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"("<>ToString[j2]<>")/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];
];
j2++;];,
tempDynkin=SA`Dynkin[ThresholdMasses[[k,j,1]],i]*MulFactor[ThresholdMasses[[k,j,1]],i];
If[NumericQ[tempDynkin] && tempDynkin =!=0,
WriteString[sphenoSugra,SPhenoForm[BetaGauge[[i,1]] ]<>" = "<> SPhenoForm[BetaGauge[[i,1]]]<>"*(1._dp - oo16pi2*"<>SPhenoForm[BetaGauge[[i,1]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[tempDynkin]<>"*Log(MassOf"<>SPhenoForm[ThresholdMasses[[k,j,1]]]<>"/"<>SPhenoForm[Thresholds[[k,1]]] <>")) \n"];
];
];
j++;];
i++;];
WriteString[sphenoSugra,"End If\n"];
];



For[i=1,i<=Length[ThresholdCouplings],
Switch[Length[getDimSPheno[ThresholdCouplings[[i]]]],
3, ind = "("<>ToString[nr]<>",:,:,:)";,
2, ind = "("<>ToString[nr]<>",:,:)";,
1, ind = "("<>ToString[nr]<>",:)";,
0, ind ="("<>ToString[nr]<>")";
];
WriteString[sphenoSugra, SPhenoForm[ThresholdCouplings[[i]]] <>" = "<>SPhenoForm[ThresholdCouplings[[i]]]<>"_save"<>ind <>"\n"];
i++];

For[i=1,i<=Length[ThresholdMasses[[nr]]],
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[ThresholdMasses[[nr,i,1]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]]<> "\n"];
If[FreeQ[NeededOtherFields,ThresholdMasses[[nr,i,1]]]==False,
pos=Position[NeededOtherFields,ThresholdMasses[[nr,i,1]]][[1,1]];
WriteString[sphenoSugra,"NumberGenerations"<>SPhenoForm[NeededOtherFields[[pos,2]]]  <>" = " <>ToString[ThresholdMasses[[nr,i,2]]]<> "\n"];
];
i++;];

For[i=1,i<=Length[BoundaryConditionsUp[[nr]]],
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index1],
WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsUp[[nr,i,1]]] <> " = " <> SPhenoForm[BoundaryConditionsUp[[nr,i,2]]] <>"\n "];,
dims = getDimSPheno[BoundaryConditionsUp[[nr,i,1]]/. a_[b__]->a];
pos = Position[BoundaryConditionsUp[[nr,i,1]],index1][[1,1]];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[dims[[pos]]] <>"\n"];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index2]==False,
pos = Position[BoundaryConditionsUp[[nr,i,1]],index2][[1,1]];
WriteString[sphenoSugra,"Do i2=1,"<>ToString[dims[[pos]]] <>"\n"];
];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index3]==False,
pos = Position[BoundaryConditionsUp[[nr,i,1]],index3][[1,1]];
WriteString[sphenoSugra,"Do i3=1,"<>ToString[dims[[pos]]] <>"\n"];
];

WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsUp[[nr,i,1]] /.{index1->i1,index2->i2,index3->i3}] <> " = " <> SPhenoForm[BoundaryConditionsUp[[nr,i,2]]/.{index1->i1,index2->i2,index3->i3}] <>"\n "];

WriteString[sphenoSugra,"End Do \n"];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index2]==False,
WriteString[sphenoSugra,"End Do \n"];
];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index3]==False,
WriteString[sphenoSugra,"End Do \n"];
];
];
i++;];

WriteString[sphenoSugra,"ThresholdCrossed = "<>ToString[nr]<>"\n\n"];

];




RGErunningRegime :=Block[{i,k},

WriteString[sphenoSugra,"gAReg"<> ToString[RegimeNr] <>" = g1A \n"]; 

WriteString[sphenoSugra,"m_lo="<> SPhenoForm[Last[ThresholdScales]] <>"\n"]; 

WriteString[sphenoSugra,"mudim=GetRenormalizationScale()\n"];
WriteString[sphenoSugra,"mudim=Max(mudim,mZ2)\n"];
WriteString[sphenoSugra,"tz=0.5_dp*Log(mZ2/mudim)\n"];
WriteString[sphenoSugra,"dt=tz/100._dp\n"];

WriteString[sphenoSugra,"Call odeint(gAReg"<>ToString[RegimeNr]<>","<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"Call BoundarySUSY(gAReg"<>ToString[RegimeNr]<>",gBReg"<>ToString[RegimeNr]<>")\n\n"];

WriteString[sphenoSugra,"FoundUnification= .False. \n"];
WriteString[sphenoSugra,"tz=Log(sqrt(mudim)/m_lo)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n\n"];

WriteString[sphenoSugra,"Call odeint(gBReg"<>ToString[RegimeNr]<>","<>ToString[numberLow]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[numberLow]<>",kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

For[k=RegimeNr,k> 1,
If[k===RegimeNr,
SubNr="";,
SubNr = "R"<>ToString[k];
];
SubNr1="R"<>ToString[k-1];

WriteIfGutScaleCrossed["gBReg"<>ToString[k], NumberLowAllRegimes[[k]],SubNr];

For[i=k,i>1,
If[i===RegimeNr,cSubNr="";,cSubNr = "R"<>ToString[i];];
cSubNr1="R"<>ToString[i-1];

MakeCall["GToParameters"<>ToString[ NumberLowAllRegimes[[i]]]<>cSubNr,LowScaleParametersAllRegimes[[i]],{"gBReg"<>ToString[i]},{},sphenoSugra];

MakeCall["BoundaryConditionsUp"<>ToString[i-1],Intersection[Flatten[{LowScaleParametersAllRegimes[[i]],LowScaleParametersAllRegimes[[i-1]]}]],{},{},sphenoSugra];

MakeCall["ParametersToG"<>ToString[NumberLowAllRegimes[[i-1]]]<>cSubNr1,LowScaleParametersAllRegimes[[i-1]],{},{"gBReg"<>ToString[i-1]},sphenoSugra];
i--;];

(* GUT Scale Not Crossed  *)

WriteString[sphenoSugra,"Else\n"];

MakeCall["GToParameters"<>ToString[NumberLowAllRegimes[[k]]]<>SubNr,LowScaleParametersAllRegimes[[k]],{"gBReg"<>ToString[k]},{},sphenoSugra];

MakeCall["BoundaryConditionsUp"<>ToString[k-1],Intersection[Flatten[{LowScaleParametersAllRegimes[[k]],LowScaleParametersAllRegimes[[k-1]]}]],{},{},sphenoSugra];

MakeCall["ParametersToG"<>ToString[NumberLowAllRegimes[[k-1]]]<>SubNr1,LowScaleParametersAllRegimes[[k-1]],{},{"gBReg"<>ToString[k-1]},sphenoSugra];

If[k>2,
WriteString[sphenoSugra,"m_lo="<>SPhenoForm[ThresholdScales[[k-1]]]<>"\n"];
WriteString[sphenoSugra,"If ("<>SPhenoForm[ThresholdScales[[k-2]]]<>".Ne."<>SPhenoForm[ThresholdScales[[k-1]]]<>") Then\n"];
WriteString[sphenoSugra,"m_hi="<>SPhenoForm[ThresholdScales[[k-2]]]<>"\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/m_hi)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
WriteString[sphenoSugra,"Call odeint(gBReg"<>ToString[k-1]<>","<>ToString[ NumberLowAllRegimes[[k-1]]]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[ NumberLowAllRegimes[[k-1]]]<>SubNr1<>",kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

MakeCall["GToParameters"<>ToString[ NumberLowAllRegimes[[k-1]]]<>SubNr1,LowScaleParametersAllRegimes[[k-1]],{"gBReg"<>ToString[k-1]},{},sphenoSugra];
WriteString[sphenoSugra,"m_lo=m_hi\n"];
WriteString[sphenoSugra,"End If\n"];
MakeCall["ParametersToG"<>ToString[ NumberLowAllRegimes[[k-1]]]<>SubNr1,LowScaleParametersAllRegimes[[k-1]],{},{"gBReg"<>ToString[k-1]},sphenoSugra];,
WriteSearchingforGUTScale["gBReg"<>ToString[k-1], NumberLowAllRegimes[[k-1]]];
];
k--;];

For[k=1,k<RegimeNr,
WriteString[sphenoSugra,"End If\n"];
k++;];

If[VEVsRunning[[1]]===True,
WriteString[sphenoSugra,"Call BoundaryHS(gBReg1,gCbReg1)\n\n"];,
WriteString[sphenoSugra,"Call BoundaryHS(gBReg1,gCaReg1)\n\n"];
];

WriteString[sphenoSugra,"m_hi=mGUT \n"];


For[k=1,k< RegimeNr,
SubNr = "R"<>ToString[k];
If[k+1===RegimeNr,
SubNr1="";,
SubNr1 = "R"<>ToString[k+1];
];


WriteString[sphenoSugra,"If ("<>SPhenoForm[ThresholdScales[[k]]]<>".Lt.Abs(m_hi)) Then\n"];
WriteString[sphenoSugra,"m_lo="<>SPhenoForm[ThresholdScales[[k]]]<>"\n"];
WriteString[sphenoSugra,"tz=Log(Abs(m_lo/m_hi))\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

If[VEVsRunning[[k]]===True,
WriteString[sphenoSugra,"Call odeint(gCbReg"<>ToString[k]<>","<>ToString[NumberAllwithVEVsAllRegimes[[k]]]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[NumberAllwithVEVsAllRegimes[[k]]]<>SubNr<>",kont)\n"];,
WriteString[sphenoSugra,"Call odeint(gCaReg"<>ToString[k]<>","<>ToString[NumberHighAllRegimes[[k]]]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[NumberHighAllRegimes[[k]]]<>SubNr<>",kont)\n"];
];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"m_hi=m_lo\n"];
WriteString[sphenoSugra,"Endif\n"];

If[VEVsRunning[[k]]===True,
MakeCall["GToParameters"<>ToString[NumberAllwithVEVsAllRegimes[[k]]]<>SubNr,HighScaleParametersAllwithVEVsRegimes[[k]],{"gCbReg"<>ToString[k]},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[NumberHighAllRegimes[[k]]]<>SubNr,HighScaleParametersAllRegimes[[k]],{"gCaReg"<>ToString[k]},{},sphenoSugra];
];
 SetVEVs[k]; 
WriteString[sphenoSugra,"If (TwoLoopRGE) Then\n"];
MakeCall["CalcShiftDownMassesRegime"<>ToString[k],HighScaleParametersAllwithVEVsRegimes[[k]],{SPhenoForm[ThresholdScales[[k]]]},{"kont"},sphenoSugra];
WriteString[sphenoSugra,"ThresholdMassesCalculated = .True. \n"];
WriteString[sphenoSugra,"End If \n \n"];


MakeCall["BoundaryConditionsDown"<>ToString[k],Intersection[Flatten[{HighScaleParametersAllRegimes[[k]],HighScaleParametersAllRegimes[[k+1]]}]],{},{},sphenoSugra];

(* SetBoundaryConditionsDown[k]; *)
If[VEVsRunning[[k+1]]===True,
MakeCall["ParametersToG"<>ToString[NumberAllwithVEVsAllRegimes[[k+1]]]<>SubNr1,HighScaleParametersAllwithVEVsRegimes[[k+1]],{},{"gCbReg"<>ToString[k+1]},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[NumberHighAllRegimes[[k+1]]]<>SubNr1,HighScaleParametersAllRegimes[[k+1]],{},{"gCaReg"<>ToString[k+1]},sphenoSugra];
];


k++;];

WriteString[sphenoSugra,"mudim=GetRenormalizationScale()\n"];
WriteString[sphenoSugra,"mudim=Max(mudim,mZ2)\n"];

WriteString[sphenoSugra,"tz=0.5_dp*Log(mudim/m_hi**2)\n"];
WriteString[sphenoSugra,"dt=tz/100._dp\n"];
WriteString[sphenoSugra,"Call odeint(gCaReg"<>ToString[RegimeNr]<>","<>ToString[numberAll]<>",0._dp,tz,delta0,dt,0._dp,rge"<>ToString[numberAll]<>",kont)\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"  Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"Call TerminateProgram \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"g1C = gCaReg"<> ToString[RegimeNr] <>"  \n"];

WriteString[sphenoSugra,"Iname=Iname-1\n"];


WriteString[sphenoSugra,"Contains \n"];

For[i=2,i<= RegimeNr,
MakeSubroutineTitle["BoundaryConditionsUp"<>ToString[i-1],Intersection[Flatten[{LowScaleParametersAllRegimes[[i]],LowScaleParametersAllRegimes[[i-1]]}]],{},{},sphenoSugra];
WriteString[sphenoSugra,"Implicit None \n"];
MakeVariableList[Intersection[Flatten[{LowScaleParametersAllRegimes[[i]],LowScaleParametersAllRegimes[[i-1]]}]],",Intent(inout)", sphenoSugra];
WriteString[sphenoSugra,"Integer :: i1,i2,i3,i4 \n"];
SetBoundaryConditionsUp[i-1];
WriteString[sphenoSugra,"End Subroutine BoundaryConditionsUp"<>ToString[i-1]<>"\n\n"];
i++;];

For[i=1,i< RegimeNr,
MakeSubroutineTitle["BoundaryConditionsDown"<>ToString[i],Intersection[Flatten[{HighScaleParametersAllRegimes[[i]],HighScaleParametersAllRegimes[[i+1]]}]],{},{},sphenoSugra];
WriteString[sphenoSugra,"Implicit None \n"];
MakeVariableList[Intersection[Flatten[{HighScaleParametersAllRegimes[[i]],HighScaleParametersAllRegimes[[i+1]]}]],",Intent(inout)", sphenoSugra];
WriteString[sphenoSugra,"Integer :: i1,i2,i3,i4 \n"];
(* WriteString[sphenoSugra, "Complex(dp) :: T1L(:)\n\n"]; *)
SetBoundaryConditionsDown[i];
WriteString[sphenoSugra,"End Subroutine BoundaryConditionsDown"<>ToString[i]<>"\n\n"];
i++;];



];


SetBoundaryConditionsUp[nr_]:=Block[{i,pos,dims},
WriteString[sphenoSugra,"! Boundary from ",nr," to ",nr-1," \n"];

WriteString[sphenoSugra,"If (TwoLoopRGE.And.ThresholdMassesCalculated) Then \n"];
For[i=1,i<=Length[GaugeCouplingsAllRegimes[[nr+1]]],
For[j=1,j<=Length[GenerationsOfHeavyFieldsAllRegimes[[nr]]],
If[GroupFactorHeavyFields[[nr]][[j,i]]=!=0,
If[GenerationsOfHeavyFieldsAllRegimes [[nr,j,3]]===1,
WriteString[sphenoSugra,SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"*(1._dp - oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];,
For[j2=GenerationsOfHeavyFieldsAllRegimes [[nr,j,2]],j2<= GenerationsOfHeavyFieldsAllRegimes [[nr,j,3]],
WriteString[sphenoSugra,SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"*(1._dp - oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save("<>ToString[j2]<>" )/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];
j2++;];
];
];
j++;];
i++;];
WriteString[sphenoSugra,"End If  \n"];

For[i=1,i<=Length[BoundaryConditionsUp[[nr]]],
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index1],
WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsUp[[nr,i,1]]] <> " = " <> SPhenoForm[BoundaryConditionsUp[[nr,i,2]]] <>"\n "];,
dims = getDimSPheno[BoundaryConditionsUp[[nr,i,1]]/. a_[b__]->a];
pos = Position[BoundaryConditionsUp[[nr,i,1]],index1][[1,1]];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[dims[[pos]]] <>"\n"];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index2]==False,
pos = Position[BoundaryConditionsUp[[nr,i,1]],index2][[1,1]];
WriteString[sphenoSugra,"Do i2=1,"<>ToString[dims[[pos]]] <>"\n"];
];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index3]==False,
pos = Position[BoundaryConditionsUp[[nr,i,1]],index3][[1,1]];
WriteString[sphenoSugra,"Do i3=1,"<>ToString[dims[[pos]]] <>"\n"];
];

WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsUp[[nr,i,1]] /.{index1->i1,index2->i2,index3->i3}] <> " = " <> SPhenoForm[BoundaryConditionsUp[[nr,i,2]]/.{index1->i1,index2->i2,index3->i3}] <>"\n "];

WriteString[sphenoSugra,"End Do \n"];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index2]==False,
WriteString[sphenoSugra,"End Do \n"];
];
If[FreeQ[BoundaryConditionsUp[[nr,i,1]],index3]==False,
WriteString[sphenoSugra,"End Do \n"];
];
];
i++;];
];

SetVEVs[nr_]:=Block[{i},
For[i=1,i<=Length[BoundaryConditionsDown[[nr]]],
If[FreeQ[ListVEVsAllRegimes[[nr]],BoundaryConditionsDown[[nr,i,1]]]==False,
WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsDown[[nr,i,1]]] <> " = " <> SPhenoForm[BoundaryConditionsDown[[nr,i,2]]] <>"\n "];
];
i++;];
];


SetBoundaryConditionsDown[nr_]:=Block[{i,dims,pos},
WriteString[sphenoSugra,"! Boundary from ",nr," to ",nr-1 ,"\n"];

(*
WriteString[sphenoSugra, "T1L(:) = 0._dp \n"];
MakeCall["SolveTadpoleEquations"<>SuffixRegime,HighScaleParametersAllwithVEVsRegimes[[nr]],{},{"T1L"},sphenoSugra];
*)



For[i=1,i<=Length[BoundaryConditionsDown[[nr]]],
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index1],
WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsDown[[nr,i,1]]] <> " = " <> SPhenoForm[BoundaryConditionsDown[[nr,i,2]]] <>"\n "];,

dims = getDimSPheno[BoundaryConditionsDown[[nr,i,1]] /. a_[b__]->a];
pos = Position[BoundaryConditionsDown[[nr,i,1]],index1][[1,1]];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[dims[[pos]]] <>"\n"];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index2]==False,
pos = Position[BoundaryConditionsDown[[nr,i,1]],index2][[1,1]];
WriteString[sphenoSugra,"Do i2=1,"<>ToString[dims[[pos]]] <>"\n"];
];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index3]==False,
pos = Position[BoundaryConditionsDown[[nr,i,1]],index3][[1,1]];
WriteString[sphenoSugra,"Do i3=1,"<>ToString[dims[[pos]]] <>"\n"];
];

WriteString[sphenoSugra,SPhenoForm[BoundaryConditionsDown[[nr,i,1]] /.{index1->i1,index2->i2,index3->i3}] <> " = " <> SPhenoForm[BoundaryConditionsDown[[nr,i,2]]/.{index1->i1,index2->i2,index3->i3}] <>"\n "];

WriteString[sphenoSugra,"End Do \n"];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index2]==False,
WriteString[sphenoSugra,"End Do \n"];
];
If[FreeQ[BoundaryConditionsDown[[nr,i,1]],index3]==False,
WriteString[sphenoSugra,"End Do \n"];
];



];
i++;];

WriteString[sphenoSugra,"If (TwoLoopRGE) Then \n"];
For[i=1,i<=Length[GaugeCouplingsAllRegimes[[nr+1]]],
For[j=1,j<=Length[GenerationsOfHeavyFieldsAllRegimes[[nr]]],
If[GroupFactorHeavyFields[[nr]][[j,i]]=!=0,
If[GenerationsOfHeavyFieldsAllRegimes [[nr,j,3]]===1,
WriteString[sphenoSugra,SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];
WriteString[sphenoSugra,SPhenoForm[GauginosAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GauginosAllRegimes[[nr+1]][[i]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];,
For[j2=GenerationsOfHeavyFieldsAllRegimes [[nr,j,2]],j2<= GenerationsOfHeavyFieldsAllRegimes [[nr,j,3]],
WriteString[sphenoSugra,SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save("<>ToString[j2]<>" )/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];
WriteString[sphenoSugra,SPhenoForm[GauginosAllRegimes[[nr+1]][[i]] ]<>" = "<> SPhenoForm[GauginosAllRegimes[[nr+1]][[i]]]<>"*(1._dp + oo16pi2*"<>SPhenoForm[GaugeCouplingsAllRegimes[[nr+1]][[i]]]<>"**2* & \n"];
WriteString[sphenoSugra,"  & "<>SPhenoForm[GroupFactorHeavyFields[[nr]][[j,i]]]<>"*Log(Abs(M"<>SPhenoForm[GenerationsOfHeavyFieldsAllRegimes[[nr,j,1]]]<>"save("<>ToString[j2]<>" )/"<>SPhenoForm[ThresholdScales[[nr]]]<>"))) \n"];
j2++;];
];
];
j++;];
i++;];
WriteString[sphenoSugra,"End If \n"];

];




WriteIfGutScaleCrossed[name_,len_,app_]:=Block[{},

WriteString[sphenoSugra,"Call checkGUT"<>ToString[len]<>app<>"("<>name<>",delta0,unified,greater) \n"];

(* WriteString[sphenoSugra,"If ("<>name<>"(1).Gt."<>name<>"(2)) Then\n"]; *)
WriteString[sphenoSugra,"If (greater) Then\n"];
WriteString[sphenoSugra,"If (UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/GUT_scale)\n"];
WriteString[sphenoSugra,"mGUT=GUT_scale\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

WriteString[sphenoSugra,"Call odeint("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>app<>",kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"Else!.not.UseFixedGUTScale\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e12_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
WriteString[sphenoSugra,"Call odeintC2("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>app<>",checkGUT"<>ToString[len]<>app<>",t_out,kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True.\n"];
WriteString[sphenoSugra,"mGUT=1.e12_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT=Sqrt(0.5_dp*("<>name<>"(1)**2+"<>name<>"(2)**2))\n"];
(* WriteString[sphenoSugra,name<>"(1)=gGUT\n"];
WriteString[sphenoSugra,name<>"(2)=gGUT\n"]; *)
WriteString[sphenoSugra,"If (StrictUnification) "<>name<>"(3)=gGUT\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"End If ! UseFixedScale \n"];
];



WriteSearchingforGUTScale[name_,len_]:=Block[{},

WriteString[sphenoSugra,"If (UseFixedGUTScale) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/GUT_scale)\n"];
WriteString[sphenoSugra,"mGUT=GUT_scale\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

WriteString[sphenoSugra,"Call odeint("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>"R1"<>",kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"Else\n"];

WriteString[sphenoSugra,"Call checkGUT"<>ToString[len]<>"R1"<>"("<>name<>",delta0,unified,greater) \n"];

(* WriteString[sphenoSugra,"If ("<>name<>"(1).Lt."<>name<>"(2)) Then! I am still below GUT scale\n"]; *)
WriteString[sphenoSugra,"If (.not.greater) Then! I am still below GUT scale\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e20_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

WriteString[sphenoSugra,"Call odeintB2("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>"R1"<>",checkGUT"<>ToString[len]<>"R1"<>",t_out,kont)\n\n"];

WriteString[sphenoSugra,"If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"FoundUnification= .True.\n"];
WriteString[sphenoSugra,"mGUT=1.e20_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT=Sqrt(0.5_dp*("<>name<>"(1)**2+"<>name<>"(2)**2))\n"];
(* WriteString[sphenoSugra,name<>"(1)=gGUT\n"];
WriteString[sphenoSugra,name<>"(2)=gGUT\n"]; *)
WriteString[sphenoSugra,"If (StrictUnification) "<>name<>"(3)=gGUT\n"];
WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"Return\n"];
WriteString[sphenoSugra,"End If\n"];

(* WriteString[sphenoSugra,"Else If ("<>name<>"(1).Eq."<>name<>"(2)) Then\n"]; *)
WriteString[sphenoSugra,"Else If (unified) Then\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e15_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
WriteString[sphenoSugra,"Call odeintC2("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>"R1"<>",checkGUT"<>ToString[len]<>"R1"<>",t_out,kont)\n\n"];
WriteString[sphenoSugra,"FoundUnification= .True. \n"];
WriteString[sphenoSugra,"mGUT=1.e15_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"gGUT="<>name<>"(1)\n"]; 
WriteString[sphenoSugra,"If (StrictUnification) "<>name<>"(3)=gGUT\n"];

WriteString[sphenoSugra,"Else! I have already crossed the GUT scale\n"];
WriteString[sphenoSugra,"tz=Log(m_lo/1.e15_dp)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];

WriteString[sphenoSugra,"Call odeintC2("<>name<>","<>ToString[len]<>",tz,0._dp,delta0,dt,0._dp,rge"<>ToString[len]<>"R1"<>",checkGUT"<>ToString[len]<>"R1"<>",t_out,kont)\n\n"];

WriteString[sphenoSugra," If (kont.Eq.0) Then\n"];
WriteString[sphenoSugra,"  FoundUnification= .True. \n"];
WriteString[sphenoSugra,"  mGUT=1.e15_dp*Exp(t_out)\n"];
WriteString[sphenoSugra,"  gGUT=Sqrt(0.5_dp*("<>name<>"(1)**2+"<>name<>"(2)**2))\n"];
(* WriteString[sphenoSugra," "<> name<>"  (1:2)=gGUT\n"]; *)
WriteString[sphenoSugra,"  If (StrictUnification) g1B(3)=gGUT\n"];
WriteString[sphenoSugra," Else\n"];
WriteString[sphenoSugra,"  Iname=Iname-1\n"];
WriteString[sphenoSugra,"  Return\n"];
WriteString[sphenoSugra," End If\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"End If\n"];


];



WriteGUTchecks:=Block[{i},
If[Head[RegimeNr]===Integer && RegimeNr>1,
For[i=1,i<=RegimeNr,
If[i===RegimeNr,
SubNr="";,
SubNr = "R"<>ToString[i];
];
WriteChecksForUnification[i,NumberLowAllRegimes[[i]],LowScaleParametersAllRegimes[[i]], ConditionGUTscale[[i]],SubNr];
i++;];,
WriteChecksForUnification[1,numberLow,lowScaleNames,ConditionGUTscale,""];
];
];

WriteChecksForUnification[nr_,len_,par_,check_,app_]:=Block[{i,j,k},
WriteString[sphenoSugra,"Subroutine checkGUT"<>ToString[len]<>app<>"(y,eps,unified,greater)  \n"];
WriteString[sphenoSugra,"Implicit None \n"];
WriteString[sphenoSugra,"Real(dp), Intent(in) :: y("<>ToString[len]<>"), eps \n"];
WriteString[sphenoSugra, "Logical, Intent(out) :: unified, greater \n"];
MakeVariableList[par, sphenoSugra];
MakeCall["GToParameters"<>ToString[len]<>app,par,{"y"},{},sphenoSugra];

WriteString[sphenoSugra, "If (((("<>SPhenoForm[check[[1]]]<>")-("<> SPhenoForm[check[[2]]] <>")).Gt.0._dp).And.((("<> SPhenoForm[check[[1]]] <>")-("<> SPhenoForm[check[[2]]]<>")).Lt.eps)) Then \n"];
WriteString[sphenoSugra, "  unified = .True. \n"];
WriteString[sphenoSugra, "Else \n"];
WriteString[sphenoSugra, "   unified = .False. \n"];
WriteString[sphenoSugra, "End If \n"];


WriteString[sphenoSugra, "If (("<>SPhenoForm[check[[1]]]<>").Gt.("<> SPhenoForm[check[[2]]] <>")) Then \n"];
WriteString[sphenoSugra, "  greater = .True. \n"];
WriteString[sphenoSugra, "Else \n"];
WriteString[sphenoSugra, "  greater = .False. \n"];
WriteString[sphenoSugra, "End If \n"];



WriteString[sphenoSugra,"End Subroutine checkGUT"<>ToString[len]<>app<>"\n \n"];
];


