(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSugraRuns:=Block[{currentRegime,readRegime},
sphenoSugra=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"SugraRuns_"<>ModelName<>".f90"]];

WriteHeadSugraRuns;
GenerateBoundarySUSY;
GenerateBoundaryHS;

If[SupersymmetricModel=!=False,

If[getGen[Electron]==3 && getGen[TopQuark]==3 && getGen[BottomQuark]==3,
GenerateBoundaryEW;,
(* GenerateBoundaryEW2; *)
GenerateBoundaryEW;
];,
GenerateBoundaryEWnonSUSY;
]; 


GenerateSugra;
GenerateRunRGE;

WriteGUTchecks;

GenerateFirstGuess;

(* GenerateSetFunctions ; *)

WriteString[sphenoSugra, "End Module SugraRuns_"<>ModelName<>" \n"];


Close[sphenoSugra];
];


WriteHeadSugraRuns:=Block[{i},


(*
Print["-----------------------------------"];
Print["Write SugraRuns"];
Print["-----------------------------------"];
*)

Print[StyleForm["Write 'SugraRuns'","Section",FontSize->12]];

WriteCopyRight[sphenoSugra];

WriteString[sphenoSugra,"Module SugraRuns_"<>ModelName<>" \n \n"];
WriteString[sphenoSugra, "Use Control \n"];
WriteString[sphenoSugra, "Use LoopCouplings_"<>ModelName<>" \n"];
WriteString[sphenoSugra, "Use LoopMasses_"<>ModelName<>" \n"];
WriteString[sphenoSugra, "Use LoopFunctions \n"];
WriteString[sphenoSugra, "Use Mathematics \n"];
WriteString[sphenoSugra, "Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoSugra, "Use RGEs_"<>ModelName<>" \n"];
WriteString[sphenoSugra,"Use Tadpoles_"<>ModelName<>" \n "];
If[Head[RegimeNr]===Integer,
WriteString[sphenoSugra, "Use ShiftParameters_"<>ModelName<>" \n"];
];
If[SupersymmetricModel=!=True,
WriteString[sphenoSugra, "Use CouplingsForDecays_"<>ModelName<>" \n"];
];
WriteString[sphenoSugra, "Use StandardModel \n \n"];

WriteString[sphenoSugra, "Integer, save :: YukScen \n"];
WriteString[sphenoSugra, "Real(dp), save :: Lambda, MlambdaS,F_GMSB \n"];
WriteString[sphenoSugra, "Real(dp),save::mGUT_save,sinW2_DR_mZ&\n"];
WriteString[sphenoSugra, "&,mf_l_DR_SM(3),mf_d_DR_SM(3),mf_u_DR_SM(3)\n"];
WriteString[sphenoSugra, "Complex(dp),save::Yl_mZ(3,3),Yu_mZ(3,3),Yd_mZ(3,3)\n"];
WriteString[sphenoSugra, "Real(dp),Save::vevs_DR_save(2)\n"];



WriteString[sphenoSugra, "Contains \n \n"];
];





GenerateSugra:=Block[{i,j,NumberNewMasses},

Print["  Write 'Sugra'"];

MakeSubroutine[];

MakeSubroutineTitle["Sugra",Join[NewMassParameters,listAllParameters], {"delta0"},{"mGut","kont","WriteComment","niter"},sphenoSugra];

WriteString[sphenoSugra,"Implicit None\n"];

WriteString[sphenoSugra,"Logical,Intent(in) :: WriteComment\n"];
WriteString[sphenoSugra,"Integer,Intent(inout) :: kont\n"];
WriteString[sphenoSugra,"Integer,Intent(in) :: niter\n"];
If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Real(dp) :: delta0,deltaG0, gA("<>ToString[numberAll]<>"), gB("<>ToString[numberLow] <>")\n"];,
WriteString[sphenoSugra,"Real(dp) :: delta0,deltaG0, gA("<>ToString[numberAllwithVEVs]<>"), gB("<>ToString[numberAllwithVEVs]<>")\n"];
];
WriteString[sphenoSugra,"Real(dp) :: gC("<>ToString[numberAllwithVEVs]<>"),  gD("<>ToString[numberAllwithVEVs]<>") \n"];
WriteString[sphenoSugra,"Real(dp),Intent(out) :: mGUT\n"];
(* MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra]; *)
WriteString[sphenoSugra, "Complex(dp) :: Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoSugra];
];
WriteString[sphenoSugra, "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>"), tanbQ, vev2 \n"];
MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
MakeVariableList[namesTadpoles,"",sphenoSugra];

MakeVariableList[NewMassParameters,",Intent(inout)",sphenoSugra];
MakeVariableList[listAllParameters,",Intent(inout)",sphenoSugra];
NumberNewMasses = ToString[Plus@@Transpose[NewMasses][[2]]];
WriteString[sphenoSugra,"Real(dp) ::mass_new("<>NumberNewMasses<>"),mass_old("<>NumberNewMasses<>"),diff_m("<>NumberNewMasses<>")\n"];
WriteString[sphenoSugra, "Real(dp) :: tz,dt,q,q2,mudim,mudimNew, vev, sinW2 \n"];
WriteString[sphenoSugra,"Logical::FoundResult, SignMassChangedSave \n"];
WriteString[sphenoSugra,"Integer::j,n_tot, i_count, i1, i2 \n"];
WriteString[sphenoSugra,"Iname=Iname+1\n"];
WriteString[sphenoSugra,"NameOfUnit(Iname)='Sugra'\n"];

WriteString[sphenoSugra,"kont=0\n"];
WriteString[sphenoSugra,"FoundResult= .False.\n"];

WriteString[sphenoSugra,"n_tot =1\n"];
For[i=1,i<=Length[NewMasses],
WriteString[sphenoSugra,"mass_old(n_tot:n_tot+"<>ToString[NewMasses[[i,2]]-1]<>") = " <>ToString[NewMasses[[i,1]]]<> "\n"];
If[i<Length[NewMasses],WriteString[sphenoSugra,"n_tot = n_tot + " <>ToString[NewMasses[[i,2]]] <>" \n"];];
i++;
];

WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
(*
WriteString[sphenoSugra,"mudim=Max(mZ**2,"<> SPhenoMass[TopSquark,1]<>"*"<> SPhenoMass[TopSquark,2]<>") \n"];
*)
WriteString[sphenoSugra,"mudim=Max(mZ**2,Abs("<> SPhenoForm[RenormalizationScale]<>")) \n"];
WriteString[sphenoSugra,"Call SetRGEScale(mudim) \n"];
WriteString[sphenoSugra,"UseFixedScale= .False. \n"];
WriteString[sphenoSugra,"End If \n"];


WriteString[sphenoSugra,"Write(*,*) \"Calculating mass spectrum\" \n"];

WriteString[sphenoSugra,"CalculateOneLoopMassesSave = CalculateOneLoopMasses \n"];
WriteString[sphenoSugra,"CalculateOneLoopMasses = .false. \n"];


WriteString[sphenoSugra,"Do j=1,niter \n"];

WriteString[sphenoSugra,"Write(*,*) \"  \", j,\".-iteration\" \n"];
WriteString[sphenoSugra,"Write(ErrCan,*) \"sugra \", j,\".-iteration\" \n"];

MakeCall["BoundaryEW",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{"j"},{"delta0","gB","kont"},sphenoSugra];


WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"    Write(*,*) \" Problem with boundary conditions at EW scale\" \n"];
WriteString[sphenoSugra,"    Call TerminateProgram\n"];
WriteString[sphenoSugra,"End If\n \n"];

WriteString[sphenoSugra,"Call RunRGE(kont,0.1_dp*delta0,gB,gA,mGUT)\n \n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberAll],listAllParameters,{"gA"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
];
WriteRemoveGUTnormalization[sphenoSugra];

WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"    Write(*,*) \" RGE running not possible. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"    Call TerminateProgram\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"mudim=GetRenormalizationScale() \n"];
WriteString[sphenoSugra,"Q=Sqrt(mudim) \n"];
WriteString[sphenoSugra,"Q2=mudim \n"];
WriteString[sphenoSugra,"tz=Log(Q/mZ)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[sphenoSugra,SPhenoForm[VEVSM1]<>"=1._dp\n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM2]<>"=tanbeta \n"];
];
];

WriteBoundaryConditionsSUSY[sphenoSugra];
WriteTadpoleSolutionOnlyHigh[sphenoSugra];


WriteGUTnormalization[sphenoSugra];
MakeCall["ParametersToG"<>ToString[ numberAllwithVEVs],listAllParametersAndVEVs,{},{"gC"},sphenoSugra];

WriteString[sphenoSugra,"Call odeint(gC,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,0.1_dp*delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n"];

MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gC"},{},sphenoSugra];
WriteRemoveGUTnormalization[sphenoSugra];

If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[sphenoSugra,"If(SPA_Convention) Then \n"];
WriteString[sphenoSugra,"  tanbetaMZ = "<>SPhenoForm[VEVSM2]<>"/"<>SPhenoForm[VEVSM1] <>" \n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra,"  tanbetaMZ = tanbeta \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,SPhenoForm[VEVSM1]<>" = "<>SPhenoForm[VEVSM1]<>"MZ\n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM2]<>" = "<>SPhenoForm[VEVSM2]<>"MZ\n"];
];
];

WriteBoundaryConditionsEWSB[sphenoSugra];

WriteTadpoleSolutionOnlyHigh[sphenoSugra];

For[i=1,i<=Length[listVEVs],
If[listVEVs[[i]]=!=VEVSM1 && listVEVs[[i]]=!=VEVSM2,
WriteString[sphenoSugra,SPhenoForm[listVEVs[[i]]]<>"MZ = "<>SPhenoForm[listVEVs[[i]]]<>" \n"];
];
i++;
];

WriteGUTnormalization[sphenoSugra];
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"gD"},sphenoSugra];

WriteString[sphenoSugra,"tz=Log(mZ/Q)\n"];
WriteString[sphenoSugra,"dt=-tz/50._dp\n"];
WriteString[sphenoSugra,"Call odeint(gD,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,0.1_dp*delta0,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n"];
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gD"},{},sphenoSugra];

WriteRemoveGUTnormalization[sphenoSugra];


WriteString[sphenoSugra,"\n\n"];

If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
If[AddOHDM=!=True,
WriteString[sphenoSugra,"If(SPA_Convention) Then \n"];
WriteString[sphenoSugra,"  tanbQ = tanbeta \n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra,"  tanbQ = "<>SPhenoForm[VEVSM2]<>"/"<>SPhenoForm[VEVSM1] <>" \n"];
WriteString[sphenoSugra,"End If \n"];
];
];

If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[sphenoSugra,"vev2=4._dp*Real(mZ2,dp)/("<>SPhenoForm[hyperchargeCoupling] <>"**2+"<>SPhenoForm[leftCoupling] <>"**2) -"<>SA`OffSetVEV<>"\n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM1]<> "=Sqrt(vev2/(1._dp+tanbQ**2))\n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM2]<> "=tanbQ*"<>SPhenoForm[VEVSM1]<> "\n"];
];,
WriteString[sphenoSugra,"vev2=4._dp*Real(mZ2,dp)/("<>SPhenoForm[hyperchargeCoupling] <>"**2+"<>SPhenoForm[leftCoupling] <>"**2) -"<>SA`OffSetVEV<>"\n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM]<> "=Sqrt(vev2)\n"];
];

For[i=1,i<=Length[listVEVs],
WriteString[sphenoSugra,SPhenoForm[listVEVs[[i]]]<>"SUSY = "<>SPhenoForm[listVEVs[[i]]]<>" \n"];
i++;];

WriteBoundaryConditionsSUSY[sphenoSugra];


WriteTadpoleSolutionOnlyHigh[sphenoSugra];

MakeCall["OneLoopMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},sphenoSugra];

WriteString[sphenoSugra," FirstRun = .False. \n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then\n"];
WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"    Write(*,*) \" Problem in SugraRuns. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"    If (kont.eq.-12) Then \n"];
WriteString[sphenoSugra,"      Write(*,*) \"Stepsize underflow in rkqs (most likely due to a Landau pole) \" \n"];
WriteString[sphenoSugra,"    Else If ((kont.eq.-1).or.(kont.eq.-5).or.(kont.eq.-9)) Then \n"];
WriteString[sphenoSugra,"      Write(*,*) \"Stepsize smaller than minimum.\" \n"];
WriteString[sphenoSugra,"    Else If ((kont.eq.-2).or.(kont.eq.-6).or.(kont.eq.-10)) Then \n"];
WriteString[sphenoSugra,"      Write(*,*) \"Running values larger 10^36.\" \n"];
WriteString[sphenoSugra,"    Else If ((kont.eq.-3).or.(kont.eq.-7).or.(kont.eq.-11)) Then \n"];
WriteString[sphenoSugra,"      Write(*,*) \"Too many steps: Running has not converged.\" \n"];
WriteString[sphenoSugra,"    Else If ((kont.eq.-4).or.(kont.eq.-8)) Then \n"];
WriteString[sphenoSugra,"      Write(*,*) \"No GUT scale found.\" \n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"    Call TerminateProgram\n"];
WriteString[sphenoSugra,"End If\n"];



WriteString[sphenoSugra,"n_tot =1\n"];

For[i=1,i<=Length[NewMasses],
WriteString[sphenoSugra,"mass_new(n_tot:n_tot+"<>ToString[NewMasses[[i,2]]-1]<>") = " <>ToString[NewMasses[[i,1]]]<> "\n"];
If[i<Length[NewMasses],
WriteString[sphenoSugra,"n_tot = n_tot + " <>ToString[NewMasses[[i,2]]] <>" \n"];
];
i++;
];

WriteString[sphenoSugra,"Where (mass_new.lt.1E-10_dp) mass_new=0._dp \n"];
WriteString[sphenoSugra,"diff_m=Abs(mass_new-mass_old)\n"];
WriteString[sphenoSugra,"Where (Abs(mass_old).Gt.0._dp) diff_m=diff_m/Abs(mass_old)\n"];
WriteString[sphenoSugra,"deltag0=Maxval(diff_m)\n"];
WriteString[sphenoSugra,"Write(*,*) \"  ... reached precision:\", deltag0 \n"];
WriteString[sphenoSugra,"If (WriteComment) Write(*,*) \"Sugra,Comparing\",deltag0\n"];

WriteString[sphenoSugra,"If ((deltag0.Lt.delta0).And.(j.Gt.1)) Then! require at least two iterations\n"];
WriteString[sphenoSugra,"   FoundResult= .True.\n"];
WriteString[sphenoSugra,"If (SignOfMassChanged) Then\n"];
WriteString[sphenoSugra,"  If (.Not.IgnoreNegativeMasses) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Mass spectrum converged, but negative mass squared present.\" \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMassChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"If (SignOfMuChanged) Then\n"];
WriteString[sphenoSugra,"  If (.Not.IgnoreMuSignFlip) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Mass spectrum converged, but negative |mu|^2 from tadpoles.\" \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMuChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"Exit\n"];
WriteString[sphenoSugra,"Else\n"];

WriteString[sphenoSugra,"If (SignOfMassChanged) Then\n"];
WriteString[sphenoSugra,"  If ((j.ge.MinimalNumberIterations).And.(.Not.IgnoreNegativeMasses)) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Still a negative mass squared after \",MinimalNumberIterations,\" iterations. Stop calculation. \"  \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMassChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"If (SignOfMuChanged) Then\n"];
WriteString[sphenoSugra,"  If ((j.ge.MinimalNumberIterations).And.(.Not.IgnoreMuSignFlip)) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Still a negative |mu|^2 after \",MinimalNumberIterations,\" iterations. Stop calculation. \"  \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMuChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];

WriteString[sphenoSugra,"mass_old=mass_new \n"];

WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
WriteString[sphenoSugra,"mudimNew=Max(mZ**2,Abs("<> SPhenoForm[RenormalizationScale]<>")) \n"];
WriteString[sphenoSugra,"If (HighScaleModel.eq.\"LOW\") GUT_Scale = sqrt(mudimNew) \n "];
(* WriteString[sphenoSugra,"Call SetRGEScale(mudim) \n"]; *)
WriteString[sphenoSugra,"UseFixedScale= .False. \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra, "If (j.lt.niter) Then \n"];
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gC"},{},sphenoSugra];
If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[sphenoSugra,SPhenoForm[VEVSM1]<>" = "<>SPhenoForm[VEVSM1]<>"MZ \n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM2]<>" = "<>SPhenoForm[VEVSM2]<>"MZ \n"];
];,
WriteString[sphenoSugra,SPhenoForm[VEVSM]<>" = "<>SPhenoForm[VEVSM]<>"MZ \n"];
];
WriteRemoveGUTnormalization[sphenoSugra];

WriteBoundaryConditionsEWSBrunningDown[sphenoSugra];

If[UseBoundarySUSYatEWSB===True,WriteBoundaryConditionsSUSY[sphenoSugra];];
WriteBoundaryConditionsEWSB[sphenoSugra];



(*
WriteString[sphenoSugra,"sinW2=1._dp-mW2/mZ2 \n"];
WriteString[sphenoSugra,"vev=Sqrt(mZ2*(1._dp-sinW2)*SinW2/(pi*alpha_mZ))\n"];
If[AddOHDM=!=True,
WriteString[sphenoSugra,"vd=vev/Sqrt(1._dp+tanbetaMZ**2)\n"];
WriteString[sphenoSugra,"vu=tanbetaMZ*vd \n"];,
WriteString[sphenoSugra,SPhenoForm[VEVSM]<>" = vev \n"];
];
*)

WriteTadpoleSolutionOnlyHigh[sphenoSugra];

WriteBoundaryConditionsEWSB[sphenoSugra];

WriteString[sphenoSugra,"If (IgnoreNegativeMassesMZ) Then \n"];
WriteString[sphenoSugra,"  SignMassChangedSave = SignOfMassChanged \n"];
WriteString[sphenoSugra,"End if \n"];

MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},sphenoSugra];

WriteString[sphenoSugra,"If (IgnoreNegativeMassesMZ) Then \n"];
WriteString[sphenoSugra,"  SignOfMassChanged = SignMassChangedSave  \n"];
WriteString[sphenoSugra,"End if \n"];

WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
WriteString[sphenoSugra,"Call SetRGEScale(mudimNew) \n"];
WriteString[sphenoSugra,"UseFixedScale= .False. \n"];
WriteString[sphenoSugra,"End If \n"];


WriteString[sphenoSugra,"Else\n"];
WriteString[sphenoSugra,"  FoundIterativeSolution = .False. \n"];
WriteString[sphenoSugra,"End if\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"End Do\n"];


WriteString[sphenoSugra,"If (CalculateOneLoopMassesSave) Then \n"];
WriteString[sphenoSugra,"CalculateOneLoopMasses =  CalculateOneLoopMassesSave \n"];
WriteString[sphenoSugra,"Write(*,*) \"Calculate loop corrected masses \" \n"];
MakeCall["OneLoopMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},sphenoSugra];

WriteString[sphenoSugra,"If (SignOfMassChanged) Then\n"];
WriteString[sphenoSugra,"  If (.Not.IgnoreNegativeMasses) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Mass spectrum converged, but negative mass squared present.\" \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMassChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];
WriteString[sphenoSugra,"If (SignOfMuChanged) Then\n"];
WriteString[sphenoSugra,"  If (.Not.IgnoreMuSignFlip) Then\n"];
WriteString[sphenoSugra,"  Write(*,*) \" Mass spectrum converged, but negative |mu|^2 from tadpoles.\" \n"];
WriteString[sphenoSugra,"   Call TerminateProgram \n"];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"   SignOfMuChanged = .False. \n"];
WriteString[sphenoSugra,"   kont = 0 \n"];
WriteString[sphenoSugra,"  End If\n"];
WriteString[sphenoSugra,"End If\n"];


WriteString[sphenoSugra,"End if \n"];

WriteString[sphenoSugra,"Iname=Iname-1\n \n"];

WriteString[sphenoSugra,"End Subroutine Sugra\n \n"];

];


GenerateBoundaryHS:=Block[{i,j},

Print["  Write 'BoundaryHS'"];

WriteString[sphenoSugra,"Subroutine BoundaryHS(gA,gB) \n"];

WriteString[sphenoSugra,"Implicit None \n"];
WriteString[sphenoSugra,"Real(dp),Intent(in)::gA(:)\n"];
WriteString[sphenoSugra,"Real(dp),Intent(out)::gB(:)\n"];
WriteString[sphenoSugra,"Integer::i1,i2\n"];
MakeVariableList[Transpose[LowScaleList][[1]],"",sphenoSugra];
If[Length[HighScaleList]>1,
MakeVariableList[Transpose[HighScaleList][[1]],"",sphenoSugra];
];
If[FreeQ[BoundarySUSYScale,TADPOLES]==False,
MakeVariableList[listVEVs,"",sphenoSugra];
];
CheckSCKM;
If[WriteCKMBasis===True,
WriteString[sphenoSugra,"Complex(dp) :: Yd_ckm(3,3), Yu_ckm(3,3), Tu_ckm(3,3), Td_ckm(3,3), mq2_ckm(3,3), mu2_ckm(3,3), md2_ckm(3,3) \n"];
WriteString[sphenoSugra,"Complex(dp) :: Yd_out(3,3), Yu_out(3,3), Tu_out(3,3), Td_out(3,3), mq2_out(3,3), mu2_out(3,3), md2_out(3,3) \n"];
];

WriteString[sphenoSugra,"Iname=Iname+1\n"];
WriteString[sphenoSugra,"NameOfUnit(Iname)='BoundaryHS'\n"];

If[SA`KineticMixingParameters=!={},
WriteString[sphenoSugra,"KineticMixing = KineticMixingSave \n"];
];

If[Head[RegimeNr]===Integer,
MakeCall["GToParameters"<>ToString[NumberLowAllRegimes[[1]]]<>"R1",LowScaleParametersAllRegimes[[1]],{"gA"},{},sphenoSugra];,
If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"gA"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
];
];

WriteString[sphenoSugra,"If (HighScaleModel.ne.\"LOW\") Then \n "];
If[SeveralBoundaryConditions===False,
For[i=1,i<=Length[BoundaryHighScale],
If[FreeQ[Transpose[ListAllInputParameters][[1]],BoundaryHighScale[[i,1]]]==False || FreeQ[listParametersOtherRegimes,BoundaryHighScale[[i,1]]]==False,
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[BoundaryHighScale[[i,1]]] <>") Then \n"];
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1]]]<>" = " <> SPhenoForm[BoundaryHighScale[[i,1]]]<>"IN \n"];
WriteString[sphenoSugra,"Else \n"];
];
If[BoundaryHighScale[[i,2]]=!= RUNNING,
If[FreeQ[BoundaryHighScale[[i,2]],DIAGONAL]==True,
Switch[Head[BoundaryHighScale[[i,1]]],
re,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryHighScale[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryHighScale[[i,1,1]]]<> "))\n"];,
im,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryHighScale[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryHighScale[[i,2]]]  <> ",dp))\n"];,
_,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1]]]<>" = " <> SPhenoForm[BoundaryHighScale[[i,2]]]<>"\n"];
];,
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1]]]<>" = 0._dp \n"];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[getDimSPheno[BoundaryHighScale[[i,1]]][[1]]]<>"\n"];
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[i,1]]]<>"(i1,i1) = " <> SPhenoForm[BoundaryHighScale[[i,2]] /. DIAGONAL->1]<>"\n"];
WriteString[sphenoSugra,"End Do\n"];
];
];
If[FreeQ[Transpose[ListAllInputParameters][[1]],BoundaryHighScale[[i,1]]]==False || FreeQ[listParametersOtherRegimes,BoundaryHighScale[[i,1]]]==False,
WriteString[sphenoSugra,"End If \n"]
];
i++;];,


WriteString[sphenoSugra,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[BoundaryHighScale],
WriteString[sphenoSugra,"Case ("<>ToString[j]<>") \n"];
For[i=1,i<=Length[BoundaryHighScale[[j]]],
If[FreeQ[Transpose[ListAllInputParameters][[1]],BoundaryHighScale[[j,i,1]]]==False || FreeQ[listParametersOtherRegimes,BoundaryHighScale[[j,i,1]]]==False,
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[BoundaryHighScale[[j,i,1]]] <>") Then \n"];
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = " <> SPhenoForm[BoundaryHighScale[[j,i,1]]]<>"IN \n"];
WriteString[sphenoSugra,"Else \n"]
];
If[BoundaryHighScale[[j,i,2]]=!= RUNNING,
If[FreeQ[BoundaryHighScale[[j,i,2]],DIAGONAL]==True,
Switch[Head[BoundaryHighScale[[j,i,1]]],
re,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryHighScale[[j,i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryHighScale[[j,i,1,1]]]<> "))\n"];,
im,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryHighScale[[j,i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryHighScale[[j,i,2]]]  <> ",dp))\n"];,
_,WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = " <> SPhenoForm[BoundaryHighScale[[j,i,2]]]<>"\n"];
];,
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1]]]<>" = 0._dp \n"];
WriteString[sphenoSugra,"Do i1=1,"<>ToString[getDimSPheno[BoundaryHighScale[[j,i,1]]][[1]]]<>"\n"];
WriteString[sphenoSugra,SPhenoForm[BoundaryHighScale[[j,i,1]]]<>"(i1,i1) = " <> SPhenoForm[BoundaryHighScale[[j,i,2]] /. DIAGONAL->1]<>"\n"];
WriteString[sphenoSugra,"End Do\n"];
];
];
If[FreeQ[Transpose[ListAllInputParameters][[1]],BoundaryHighScale[[j,i,1]]]==False || FreeQ[listParametersOtherRegimes,BoundaryHighScale[[j,i,1]]]==False,
WriteString[sphenoSugra,"End If \n"]
];
i++;];
j++;];
WriteString[sphenoSugra,"End Select \n"];
];

WriteString[sphenoSugra,"else If (HighScaleModel.Eq.\"LOW\") Then \n "];
WriteString[sphenoSugra,"! Setting values \n "];
For[i=1,i<=Length[listVEVsIN],
If[MemberQ[ParametersToSolveTadpoles,listVEVs[[i]]]==False && FreeQ[{VEVSM1,VEVSM2,VEVSM},listVEVs[[i]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>" = " <>SPhenoForm[listVEVsIN[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[HighScaleList],
If[MemberQ[ParametersToSolveTadpoles,HighScaleList[[i,2]]]==False,
WriteString[sphenoSugra,StringDrop[SPhenoForm[highScaleIn[[i]]],-2] <>" = " <>SPhenoForm[highScaleIn[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[LowScaleList],
If[MemberQ[ParametersToSolveTadpoles,LowScaleList[[i,2]]]==False&& FreeQ[{leftCoupling,hyperchargeCoupling,strongCoupling,UpYukawa,DownYukawa,ElectronYukawa},LowScaleList[[i,1]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[lowScaleIn[[i]]],-2] <>" = " <>SPhenoForm[lowScaleIn[[i]]]<>" \n "];
];
i++;];

For[i=1,i<=Length[BoundaryLowScaleInput],
Switch[Head[BoundaryLowScaleInput[[i,1]]],
re,WriteString[sphenoSugra,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<> "))\n"];,
im,WriteString[sphenoSugra,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <> ",dp))\n"];,
_,WriteString[sphenoSugra,SPhenoForm[BoundaryLowScaleInput[[i,1]]]<>" = " <>SPhenoForm[BoundaryLowScaleInput[[i,2]]]<>"\n"];
];
i++;];
WriteString[sphenoSugra,"End if\n \n "];

If[Head[RegimeNr]=!=Integer,
For[i=1,i<=Length[highScaleNames],
WriteString[sphenoSugra, SPhenoForm[highScaleNames[[i]]]<>"GUT =" <> SPhenoForm[highScaleNames[[i]]]<>"\n"];
i++;];

For[i=1,i<=Length[lowScaleNames],
WriteString[sphenoSugra, SPhenoForm[lowScaleNames[[i]]]<>"GUT =" <> SPhenoForm[lowScaleNames[[i]]]<>"\n"];
i++;];,

For[i=1,i<=Length[DimensionsOtherRegimes[[1]]],
WriteString[sphenoSugra,SPhenoForm[DimensionsOtherRegimes[[1,i,1]]]<>"GUT = "<>SPhenoForm[DimensionsOtherRegimes[[1,i,1]]]<>"\n"];
i++;
];
];

If[Head[RegimeNr]===Integer,
For[j=1,j<2(*RegimeNr*),
For[i=1,i<=Length[YukawaCouplingsAllRegimes],
If[Length[getDimSPheno[YukawaCouplingsAllRegimes[[j,i]]]]>0 &&getDimSPheno[YukawaCouplingsAllRegimes[[j,i]]]=!={1},
WriteString[sphenoSugra,"If (Maxval(Abs("<>SPhenoForm[YukawaCouplingsAllRegimes[[j,i]] /. a_[i1,b___]->a]<>")).gt.3._dp) Then \n"];,
WriteString[sphenoSugra,"If (Abs("<>SPhenoForm[YukawaCouplingsAllRegimes[[j,i]] /. a_[i1,b___]->a]<>").gt.3._dp) Then \n"];
];
WriteString[sphenoSugra,"Write(*,*) \"Non pertubative coupling at GUT scale "<>SPhenoForm[YukawaCouplingsAllRegimes[[j,i]]/. a_[i1,b___]->a] <>"\" \n"];
WriteString[sphenoSugra,"If (ErrorLevel.gt.0) Call TerminateProgram \n"];
WriteString[sphenoSugra,"End if \n"];
i++;];
For[i=1,i<=Length[GaugeCouplingsAllRegimes],
If[Length[getDimSPheno[GaugeCouplingsAllRegimes[[j,i]]]]>0 &&getDimSPheno[GaugeCouplingsAllRegimes[[j,i]]]=!={1},
WriteString[sphenoSugra,"If (Maxval(Abs("<>SPhenoForm[GaugeCouplingsAllRegimes[[j,i]] /. a_[i1,b___]->a]<>")).gt.3._dp) Then \n"];,
WriteString[sphenoSugra,"If (Abs("<>SPhenoForm[GaugeCouplingsAllRegimes[[j,i]] /. a_[i1,b___]->a]<>").gt.3._dp) Then \n"];
];
WriteString[sphenoSugra,"Write(*,*) \"Non pertubative coupling at GUT scale "<>SPhenoForm[GaugeCouplingsAllRegimes[[j,i]]/. a_[i1,b___]->a] <>"\" \n"];
WriteString[sphenoSugra,"If (ErrorLevel.gt.0) Call TerminateProgram \n"];
WriteString[sphenoSugra,"End if \n"];
i++;];
j++;];
];

If[Head[RegimeNr]=!=Integer,
For[i=1,i<=Length[BetaYijk],
If[Length[getDimSPheno[BetaYijk[[i,1]]]]>0 &&getDimSPheno[BetaYijk[[i,1]]]=!={1},
WriteString[sphenoSugra,"If (Maxval(Abs("<>SPhenoForm[BetaYijk[[i,1]] /. a_[i1,b___]->a]<>")).gt.3._dp) Then \n"];,
WriteString[sphenoSugra,"If (Abs("<>SPhenoForm[BetaYijk[[i,1]] /. a_[i1,b___]->a]<>").gt.3._dp) Then \n"];
];
WriteString[sphenoSugra,"Write(*,*) \"Non pertubative coupling at GUT scale "<>SPhenoForm[BetaYijk[[i,1]]/. a_[i1,b___]->a] <>"\" \n"];
WriteString[sphenoSugra,"If (ErrorLevel.gt.0) Call TerminateProgram \n"];
WriteString[sphenoSugra,"End if \n"];
i++;];

For[i=1,i<=Length[BetaGauge],
If[Length[getDimSPheno[BetaGauge[[i,1]]]]>0 &&getDimSPheno[BetaGauge[[i,1]]]=!={1},
WriteString[sphenoSugra,"If (Maxval(Abs("<>SPhenoForm[BetaGauge[[i,1]]]<>")).gt.3._dp) Then \n"];,
WriteString[sphenoSugra,"If (Abs("<>SPhenoForm[BetaGauge[[i,1]]]<>").gt.3._dp) Then \n"];
];
WriteString[sphenoSugra,"Write(*,*) \"Non pertubative coupling at GUT scale appearing for: "<>SPhenoForm[BetaGauge[[i,1]]] <>"\" \n"];
WriteString[sphenoSugra,"If (ErrorLevel.gt.0) Call TerminateProgram \n"];
WriteString[sphenoSugra,"End if \n"];
i++;];
];

If[WriteCKMBasis===True,
WriteString[sphenoSugra,"\n\n\n"];
WriteString[sphenoSugra,"! Translate input form SCKM to electroweak basis \n"];
WriteString[sphenoSugra,"If (SwitchToSCKM) Then\n"];
WriteString[sphenoSugra,"Yd_ckm = "<>SPhenoForm[DownYukawa]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"Yu_ckm = "<>SPhenoForm[UpYukawa]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"Td_ckm = "<>SPhenoForm[TrilinearDown]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"Tu_ckm = "<>SPhenoForm[TrilinearUp]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"mq2_ckm = "<>SPhenoForm[SoftSquark]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"md2_ckm = "<>SPhenoForm[SoftDown]<>"(1:3,1:3) \n"];
WriteString[sphenoSugra,"mu2_ckm = "<>SPhenoForm[SoftUp]<>"(1:3,1:3) \n"];

WriteString[sphenoSugra,"Call Switch_from_superCKM(Yd_ckm, Yu_ckm, Td_ckm, Tu_ckm, md2_ckm, mq2_ckm, mu2_ckm& \n"];
WriteString[sphenoSugra,"&, Td_out, Tu_out, md2_out, mq2_out, mu2_out,.True.) \n"];

WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[TrilinearDown] <>") "<>SPhenoForm[TrilinearDown] <>" = Td_out \n"];
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[TrilinearUp] <>") "<>SPhenoForm[TrilinearUp] <>" = Tu_out \n"];
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[SoftSquark] <>") "<>SPhenoForm[SoftSquark] <>" = mq2_out \n"];
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[SoftDown] <>") "<>SPhenoForm[SoftDown] <>" = md2_out \n"];
WriteString[sphenoSugra,"If (InputValuefor"<>SPhenoForm[SoftUp] <>") "<>SPhenoForm[SoftUp] <>" = mu2_out \n"];
WriteString[sphenoSugra,"End If \n"];
WriteString[sphenoSugra,"\n\n\n"];
];

If[Head[RegimeNr]===Integer,
MakeCall["ParametersToG"<>ToString[NumberHighAllRegimes[[1]]]<>"R1",HighScaleParametersAllRegimes[[1]],{},{"gB"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAll],listAllParameters,{},{"gB"},sphenoSugra];
];
WriteString[sphenoSugra,"Iname=Iname-1\n"];

If[WriteCKMBasis===True,
WriteString[sphenoSugra,"Contains \n\n"];
AppendSourceCode["SwitchFromSCKM.f90",sphenoSugra];
];

WriteString[sphenoSugra,"End Subroutine BoundaryHS \n \n"];
];





GenerateBoundarySUSY:=Block[{i,j},
Print["  Write 'BoundarySUSY'"];

WriteString[sphenoSugra,"Subroutine BoundarySUSY(gA,gB) \n"];

WriteString[sphenoSugra,"Implicit None \n"];
WriteString[sphenoSugra,"Real(dp),Intent(in)::gA(:)\n"];
WriteString[sphenoSugra,"Real(dp),Intent(out)::gB(:)\n"];
WriteString[sphenoSugra,"Integer::i1,i2,i_count,kont\n"];
(* MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra]; *)
WriteString[sphenoSugra, "Complex(dp) :: Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoSugra];
];
WriteString[sphenoSugra, "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>") \n"];
MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
MakeVariableList[namesTadpoles,"",sphenoSugra];
MakeVariableList[Transpose[LowScaleList][[1]],"",sphenoSugra];
If[Length[HighScaleList]>1,
MakeVariableList[Transpose[HighScaleList][[1]],"",sphenoSugra];
];
If[FreeQ[BoundarySUSYScale,TADPOLES]==False || AllRGEsRunning === True,
MakeVariableList[listVEVs,"",sphenoSugra];
];


WriteString[sphenoSugra,"Iname=Iname+1\n"];
WriteString[sphenoSugra,"NameOfUnit(Iname)='BoundarySUSY'\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["GToParameters"<>ToString[numberLow],lowScaleNames,{"gA"},{},sphenoSugra];,
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"gA"},{},sphenoSugra];
];

WriteRemoveGUTnormalization[sphenoSugra];

For[i=1,i<=Length[NewNumericalDependences],
WriteString[sphenoSugra, SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
i++;];
For[i=1,i<=Length[HiggsSoftBreakingMasses],
WriteString[sphenoSugra,SPhenoForm[HiggsSoftBreakingMasses[[i]]] <>"temp = "<>SPhenoForm[HiggsSoftBreakingMasses[[i]]] <> "\n"]; 
i++;];

WriteBoundaryConditionsSUSY[sphenoSugra];

WriteString[sphenoSugra,"If (.Not.FirstRun) Then \n"];
For[i=1,i<=Length[listVEVs],
WriteString[sphenoSugra,SPhenoForm[listVEVs[[i]]]<>" = "<>SPhenoForm[listVEVs[[i]]]<>"SUSY \n"];
i++;];
WriteBoundaryConditionsSUSY[sphenoSugra];
If[FreeQ[BoundarySUSYScale,TADPOLES]==False || AllRGEsRunning===True,
WriteTadpoleSolutionOnlyHigh[sphenoSugra];
];
WriteString[sphenoSugra,"End if \n"];


WriteGUTnormalization[sphenoSugra];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"gB"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"gB"},sphenoSugra];
];

WriteString[sphenoSugra,"Iname=Iname-1\n"];
WriteString[sphenoSugra,"End Subroutine BoundarySUSY \n \n"];


];





GenerateFirstGuess:=Block[{i,j,k}, 

Print["  Write 'FirstGuess'"];

MakeSubroutineTitle["FirstGuess",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},sphenoSugra];

WriteString[sphenoSugra,"Implicit None \n"];
MakeVariableList[listAllParameters,",Intent(out)",sphenoSugra];
MakeVariableList[NewMassParameters,",Intent(out)",sphenoSugra];
WriteString[sphenoSugra,"Integer,Intent(inout)::kont\n"];
WriteString[sphenoSugra,"Integer :: i1, i2\n"];
MakeVariableList[listVEVs,",Intent(inout)",sphenoSugra];
WriteString[sphenoSugra,"Real(dp):: gauge(3),vev,vevs(2),vev2,mgut,mudim,mudimNew,sigma(2),mt,mb,cosW,cosW2,sinW2 \n"];
MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoSugra];
WriteString[sphenoSugra,"Complex(dp):: Y_l(3,3), Y_d(3,3), Y_u(3,3) \n"];
WriteString[sphenoSugra,"Real(dp) :: k_fac \n"];
WriteString[sphenoSugra,"Real(dp), Parameter :: oo2pi=1._dp/(2._dp*pi),oo6pi=oo2pi/3._dp \n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
WriteString[sphenoSugra,"Real(dp):: gA("<>ToString[numberLow]<>"), gB("<>ToString[numberAll]<>"), Scale_Save \n"];,
WriteString[sphenoSugra,"Real(dp):: gA("<>ToString[numberAllwithVEVs]<>"), gB("<>ToString[numberAll]<>"), Scale_Save \n"];
];
WriteString[sphenoSugra,"Logical::TwoLoopRGE_save, UseFixedScale_save \n"];
(* MakeVariableList[NewParametersFromTadpoles,"",sphenoSugra]; *)

If[FreeQ[parameters,VEVSM1] && FreeQ[parameters,VEVSM2],
WriteString[sphenoSugra,"Real(dp) :: "<>SPhenoForm[VEVSM1]<>","<>SPhenoForm[VEVSM2]<>","<>SPhenoForm[VEVSM1]<>"MZ,"<>SPhenoForm[VEVSM2]<>"MZ \n"];
];

WriteString[sphenoSugra,"Iname=Iname+1 \n"];
WriteString[sphenoSugra,"NameOfUnit(Iname)=\"FirstGuess\" \n"];

WriteString[sphenoSugra,"If (HighScaleModel.eq.\"LOW\") UseFixedGUTScale = .true. \n\n"];

For[i=1,i<=Length[InitializationValues],
WriteString[sphenoSugra,SPhenoForm[InitializationValues[[i,1]]] <>" = "<> SPhenoForm[InitializationValues[[i,2]]]<>" \n"];
i++;];

If[SA`KineticMixingParameters=!={},
WriteString[sphenoSugra,"KineticMixingSave = KineticMixing \n"];
WriteString[sphenoSugra,"KineticMixing = .False. \n"];


WriteString[sphenoSugra, "If (.not.KineticMixing) Then \n"];
For[i=1,i<=Length[SA`KineticMixingParameters],
WriteString[sphenoSugra, SPhenoForm[SA`KineticMixingParameters[[i]]]<>" = 0._dp \n"];
i++;];
WriteString[sphenoSugra, "End if \n"];
];

If[AddOHDM=!=True,
WriteString[sphenoSugra,"If (tanbeta.gt.3._dp) Then \n"];
WriteString[sphenoSugra," tanb = tanbeta \n"];
WriteString[sphenoSugra," tanbetaMZ = tanbeta \n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra," tanb = 5._dp \n"];
WriteString[sphenoSugra," tanbetaMZ = 5._dp \n"];
WriteString[sphenoSugra,"End if \n"];
];

WriteString[sphenoSugra,"mW2=mZ2*(0.5_dp+Sqrt(0.25_dp-Alpha_Mz*pi/(sqrt2*G_F*mZ2)))\n"];

WriteString[sphenoSugra,"mW=Sqrt(mW2) \n"];
WriteString[sphenoSugra,"cosW2=mw2/mZ2 \n"];
WriteString[sphenoSugra,"sinW2=1._dp-cosW2 \n"];
WriteString[sphenoSugra,"cosW=Sqrt(cosW2) \n \n"];


If[AddOHDM=!=True,
WriteString[sphenoSugra,"If (tanbeta.gt.5._dp) Then \n"];
];
WriteString[sphenoSugra," k_fac=1._dp-alpha*(oo6pi & \n"];
WriteString[sphenoSugra,"  &-oo2pi*(57._dp*Log(10._dp)+16._dp*Log(mf_u(3)/mZ))/9._dp) \n"];
If[AddOHDM=!=True,
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra," k_fac=1._dp \n"];
WriteString[sphenoSugra,"End if \n"];
];
WriteString[sphenoSugra,"gauge(1)=Sqrt(20._dp*pi*alpha_mZ/(k_fac*3._dp*(1._dp-sinW2))) \n"];
WriteString[sphenoSugra,"gauge(2)=Sqrt(4._dp*pi*alpha_mZ/(k_fac*sinW2)) \n"];
If[AddOHDM=!=True,
WriteString[sphenoSugra,"If (tanbeta.gt.5._dp) Then \n"];
];
WriteString[sphenoSugra," k_fac=1-AlphaS_mZ*oo2pi*(0.5_dp-4._dp*Log(10._dp) &\n"];
WriteString[sphenoSugra,"  &-2._dp*Log(mf_u(3)/mZ)/3._dp) \n"];
If[AddOHDM=!=True,
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra," k_fac=1._dp \n"];
WriteString[sphenoSugra,"End if \n"];
];
WriteString[sphenoSugra,"gauge(3)=Sqrt(4._dp*pi*alphas_mZ) \n"];
WriteString[sphenoSugra,"gauge(3)=Sqrt(4._dp*pi*alphas_mZ/k_fac) \n \n"];



WriteString[sphenoSugra,"vev=2._dp*mW/gauge(2) \n"];
If[AddOHDM=!=True,
WriteString[sphenoSugra,"vevs(1)=vev/Sqrt(1._dp+tanb**2) \n"];
WriteString[sphenoSugra,"vevs(2)=tanb*vevs(1) \n"];
WriteString[sphenoSugra,"vevSM=vev \n"];
WriteString[sphenoSugra,"vev2=vev**2 \n"];

WriteString[sphenoSugra, SPhenoForm[VEVSM1] <> " = vevs(1) \n"];
WriteString[sphenoSugra, SPhenoForm[VEVSM2] <> " = vevs(2) \n"];,
WriteString[sphenoSugra, SPhenoForm[VEVSM] <> " = vev \n"];
];

If[SupersymmetricModel===True,
WriteString[sphenoSugra,"Y_l=0._dp \n"];
WriteString[sphenoSugra,"Y_d=0._dp \n"];
WriteString[sphenoSugra,"Y_u=0._dp \n"];
WriteString[sphenoSugra,"Do i1=1,3 \n"];
WriteString[sphenoSugra,"  y_l(i1,i1)=sqrt2*mf_L_mZ(i1)/vevS(1) \n"];
WriteString[sphenoSugra,"  If (i1.Eq.3) Then! top and bottom are special: \n"];
WriteString[sphenoSugra,"  ! TanBeta Aufsummierung fehlt bei Yd!! \n"];
WriteString[sphenoSugra,"  y_u(i1,i1)=sqrt2*mf_U(i1)/vevS(2)& \n"];
WriteString[sphenoSugra,"    &*(1._dp-oo3pi*alphas_mZ*(5._dp+3._dp*Log(mZ2/mf_u2(3)))) \n"];
(* WriteString[sphenoSugra,"  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/(vevS(1) * (1._dp + 0.015*tanb*"<>SPhenoForm[PhaseMuForYb] <>")) \n"]; *)
WriteString[sphenoSugra,"  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/(vevS(1) * (1._dp + 0.015*tanb)) \n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra,"  y_u(i1,i1)=sqrt2*mf_U_mZ(i1)/vevS(2) \n"];
WriteString[sphenoSugra,"  y_d(i1,i1)=sqrt2*mf_D_mZ(i1)/vevS(1) \n"];
WriteString[sphenoSugra,"End If  \n"];
WriteString[sphenoSugra,"End Do \n"];

WriteString[sphenoSugra,"If (GenerationMixing) Then \n"];
WriteString[sphenoSugra,"  If (YukawaScheme.Eq.1) Then \n"];
WriteString[sphenoSugra,"    Y_u=Matmul(Transpose(CKM),Y_u) \n"];
If[TransposedYukawaScheme=!=True,WriteString[sphenoSugra,"    Y_u=Transpose(Y_u) \n"];];
WriteString[sphenoSugra,"  Else \n"];
WriteString[sphenoSugra,"    Y_d=Matmul(Conjg(CKM),Y_d) \n"];
If[TransposedYukawaScheme=!=True,WriteString[sphenoSugra,"    Y_d=Transpose(Y_d) \n"];];
WriteString[sphenoSugra,"  End If \n"];
WriteString[sphenoSugra,"End If \n"];,

If[AddOHDM=!=True,
WriteString[sphenoSugra,"Call RunSM(MZ,0.001_dp,tanbeta,gauge(1),gauge(2),gauge(3),Y_u,Y_d,Y_l,"<>SPhenoForm[VEVSM1]<>","<>SPhenoForm[VEVSM2]<>") \n"];,
WriteString[sphenoSugra,"Call RunSMohdm(MZ,0.001_dp,gauge(1),gauge(2),gauge(3),Y_u,Y_d,Y_l,"<>SPhenoForm[VEVSM]<>") \n"];
];


];


WriteString[sphenoSugra,"TwoLoopRGE_save=TwoLoopRGE \n"];


WriteString[sphenoSugra,"UseFixedScale_save = UseFixedScale \n"];
WriteString[sphenoSugra,"Scale_save=GetRenormalizationScale() \n"];
WriteString[sphenoSugra,"UseFixedScale = .True. \n"];
WriteString[sphenoSugra,"Call SetRGEScale(mZ2) \n"];


Clear[j,i,k];

For[j=1,j<=3,

If[AddOHDM=!=True,
WriteString[sphenoSugra, SPhenoForm[hyperchargeCoupling] <> " = gauge(1)*Sqrt(3._dp/5._dp) \n"];,
WriteString[sphenoSugra, SPhenoForm[hyperchargeCoupling] <> " = gauge(1) \n"];
];
WriteString[sphenoSugra, SPhenoForm[leftCoupling] <> " = gauge(2) \n"];
WriteString[sphenoSugra, SPhenoForm[strongCoupling] <> " = gauge(3) \n"];

AddExtraEWvevDefinition[sphenoSugra];
SetSMYukawas[sphenoSugra];
(*
WriteString[sphenoSugra, SPhenoForm[UpYukawa] <>" = Y_u \n"];
WriteString[sphenoSugra, SPhenoForm[DownYukawa] <>" = Y_d \n"];
WriteString[sphenoSugra, SPhenoForm[ElectronYukawa] <>" = Y_l \n"]; 
*)
WriteString[sphenoSugra, " \n ! "<>ToString[j]<>". Run \n \n"];


WriteBoundaryConditionsEWSB[sphenoSugra];
WriteBoundaryConditionsSUSY[sphenoSugra];


If[(Length[Flatten[{BoundarySUSYScale}]]>1 )||  (Length[Flatten[{BoundaryEWSBScale}]]>1 ),
If[j>1,
WriteTadpoleSolutionOnlyHigh[sphenoSugra];,
WriteTadpoleSolutionZeroOnlyHigh[sphenoSugra];
];
];

WriteGUTnormalization[sphenoSugra];

WriteString[sphenoSugra,"\n\n"];

If[FreeQ[BoundarySUSYScale,TADPOLES],
MakeCall["ParametersToG"<>ToString[numberLow],lowScaleNames,{},{"gA"},sphenoSugra];,
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"gA"},sphenoSugra];
];



If[j===3,
WriteString[sphenoSugra,"Call SetRGEScale(Scale_save) \n"];
WriteString[sphenoSugra,"UseFixedScale = UseFixedScale_save \n"];
];


WriteString[sphenoSugra,"If (.Not.UseFixedScale) Then \n"];
WriteString[sphenoSugra,"  If (HighScaleModel.eq.\"LOW\") Then \n "];
WriteString[sphenoSugra,"    mudim=1000._dp**2 \n"]; 
WriteString[sphenoSugra,"   Else \n"]; 
WriteString[sphenoSugra,"    mudim= Real("<>SPhenoForm[RenormalizationScaleFirstGuess]<> ", dp) \n"]; 
WriteString[sphenoSugra,"    mudim=Max(mf_u2(3),mudim) \n"];
WriteString[sphenoSugra,"  End if  \n"]; 
WriteString[sphenoSugra,"   Call SetRGEScale(mudim) \n"];
WriteString[sphenoSugra,"   UseFixedScale= .False. \n"];
WriteString[sphenoSugra,"Else \n"];
WriteString[sphenoSugra,"  mudim=GetRenormalizationScale() \n"];
WriteString[sphenoSugra,"End If \n"];

WriteString[sphenoSugra,"If (HighScaleModel.eq.\"LOW\") GUT_Scale = sqrt(mudim) \n "];

WriteString[sphenoSugra,"TwoLoopRGE= .False. \n"];
WriteString[sphenoSugra,"kont=0 \n"];
WriteString[sphenoSugra,"Call RunRGE(kont,0.001_dp,gA,gB,mGUT) \n"];

WriteString[sphenoSugra,"If (kont.Ne.0) Then \n"];
WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"    Write(*,*) \" Problem with RGE running. Errorcode:\", kont \n"];
WriteString[sphenoSugra,"    Call TerminateProgram\n"];
WriteString[sphenoSugra,"End if \n"];

MakeCall["GToParameters"<>ToString[numberAll],listAllParameters,{"gB"},{},sphenoSugra];
WriteRemoveGUTnormalization[sphenoSugra];

WriteString[sphenoSugra,"\n\n"];

WriteBoundaryConditionsEWSBrunningDown[sphenoSugra];

j++;];

WriteString[sphenoSugra,"TwoLoopRGE = TwoLoopRGE_save \n"];

For[i=1,i<=Length[highScaleNames],
WriteString[sphenoSugra,SPhenoForm[highScaleNames[[i]]] <> "MZ = " <> SPhenoForm[highScaleNames[[i]]] <>" \n"];
i++;];

If[AddOHDM=!=True,
WriteString[sphenoSugra,SPhenoForm[VEVSM1]<>" = vevs(1) \n"];
WriteString[sphenoSugra,SPhenoForm[VEVSM2]<>" = vevs(2) \n"];,
WriteString[sphenoSugra,SPhenoForm[VEVSM]<>" = sqrt(vev) \n"];
];


WriteBoundaryConditionsEWSB[sphenoSugra];


WriteTadpoleSolutionOnlyHigh[sphenoSugra];

MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},sphenoSugra];

If[AddOHDM=!=True,
WriteString[sphenoSugra,"tanb = tanbeta \n"];
WriteString[sphenoSugra,"tanbetaMZ = tanbeta \n"];
];

SetPoleMasses[sphenoSugra];

WriteString[sphenoSugra,"Iname=Iname-1 \n"];
WriteString[sphenoSugra,"End subroutine FirstGuess \n"]; 

];

GenerateSetFunctions[file_] :=Block[{},


WriteString[file,"Subroutine SetGUTScale(scale)\n"];
WriteString[file,"Implicit None\n"];
WriteString[file,"Real(dp),Intent(in)::scale\n"];
WriteString[file,"If (scale.Lt.0._dp) Then\n"];
WriteString[file,"UseFixedGUTScale= .False.\n"];
WriteString[file,"Else\n"];
WriteString[file,"UseFixedGUTScale= .True.\n"];
WriteString[file,"GUT_scale=scale\n"];
WriteString[file,"End If\n"];
WriteString[file,"End Subroutine SetGUTScale\n \n\n"];

WriteString[file,"Subroutine SetRGEScale(scale)\n"];
WriteString[file,"Implicit None\n"];
WriteString[file,"Real(dp),Intent(in)::scale\n"];
WriteString[file,"Real(dp)::old_scale\n"];
WriteString[file,"If (scale.Lt.0._dp) Then\n"];
WriteString[file,"UseFixedScale= .False.\n"];
WriteString[file,"Else\n"];
WriteString[file,"UseFixedScale= .True.\n"];
WriteString[file,"old_scale=SetRenormalizationScale(scale)\n"];
WriteString[file,"End If\n"];
WriteString[file,"End Subroutine SetRGEScale\n\n\n"];

WriteString[file,"Logical Function SetStrictUnification(V1)\n"];
WriteString[file,"Implicit None\n"];
WriteString[file,"Logical,Intent(in)::V1\n"];
WriteString[file,"SetStrictUnification= .False.\n"];
WriteString[file,"StrictUnification=V1\n"];
WriteString[file,"SetStrictUnification= .True.\n"];
WriteString[file,"End Function SetStrictUnification\n\n\n"];


WriteString[file,"Integer Function SetYukawaScheme(V1)\n"];
WriteString[file,"Implicit None\n"];
WriteString[file,"Integer,Intent(in)::V1\n"];
WriteString[file,"SetYukawaScheme=YukawaScheme\n"];
WriteString[file,"YukawaScheme=V1\n"];
WriteString[file,"End Function SetYukawaScheme\n\n\n"];


];

WriteRemoveGUTnormalization[file_]:=Block[{i},
WriteString[file,"\n \n ! --- Remove GUT-normalization of gauge couplings --- \n"];
For[i=1,i<=Length[Gauge],
If[Gauge[[i,2,1]]==1,
WriteString[file,SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[GUTren[i]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>" \n"]; 
];
i++;];

For[i=1,i<=Length[SA`ListGaugeMixed2],
WriteString[file,SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<> " = "<>SPhenoForm[GUTren[SA`ListGaugeMixed2[[i,1,1]],SA`ListGaugeMixed2[[i,1,2]]]]<>"*" <> SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<>" \n"];
i++;];
WriteString[file,"! ----------------------- \n \n"];
];

WriteGUTnormalization[file_]:=Block[{i},
WriteString[file,"\n \n ! --- GUT normalize gauge couplings --- \n"];
For[i=1,i<=Length[Gauge],
If[Gauge[[i,2,1]]==1,
WriteString[file,SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[Simplify[1/GUTren[i]]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>" \n"]; 
];
i++;];

For[i=1,i<=Length[SA`ListGaugeMixed2],
WriteString[file,SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<> " = "<>SPhenoForm[1/GUTren[SA`ListGaugeMixed2[[i,1,1]],SA`ListGaugeMixed2[[i,1,2]]]]<>"*" <> SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<>" \n"];
i++;];
WriteString[file,"! ----------------------- \n \n"];
];


WriteBoundaryConditionsEWSB[file_]:=Block[{i,j},
WriteString[file,"\n \n ! --- Boundary conditions at EW-scale --- \n"];
If[SeveralBoundaryConditions===False,
For[i=1,i<=Length[BoundaryEWSBScale],
Switch[Head[BoundaryEWSBScale[[i,1]]],
re,WriteString[file,SPhenoForm[BoundaryEWSBScale[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryEWSBScale[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryEWSBScale[[i,1,1]]]<> "))\n"];,
im,WriteString[file,SPhenoForm[BoundaryEWSBScale[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryEWSBScale[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> ",dp))\n"];,
_,WriteString[file,SPhenoForm[BoundaryEWSBScale[[i,1]]]<>" = " <> SPhenoForm[BoundaryEWSBScale[[i,2]]]  <> "\n"];
];
i++;];,
WriteString[file,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[BoundaryEWSBScale],
WriteString[file,"Case ("<>ToString[j]<>") \n"];
For[i=1,i<=Length[BoundaryEWSBScale[[j]]],
Switch[Head[BoundaryEWSBScale[[j,i,1]]],
re,WriteString[file,SPhenoForm[BoundaryEWSBScale[[j,i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryEWSBScale[[j,i,1,1]]]<> "))\n"];,
im,WriteString[file,SPhenoForm[BoundaryEWSBScale[[j,i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryEWSBScale[[j,i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <> ",dp))\n"];,
_,WriteString[file,SPhenoForm[BoundaryEWSBScale[[j,i,1]]]<>" = " <> SPhenoForm[BoundaryEWSBScale[[j,i,2]]]  <> "\n"];
];
i++;];
j++;];
WriteString[file,"End Select \n\n"];
];
WriteString[file,"! ----------------------- \n \n"];
];

WriteBoundaryConditionsSUSY[file_]:=Block[{i,j},
WriteString[file,"\n \n ! --- Boundary conditions at SUSY-scale --- \n"];
WriteString[sphenoSugra,"If (HighScaleModel.ne.\"LOW\") Then \n "];
If[SeveralBoundaryConditions==False,
For[i=1,i<=Length[BoundarySUSYScale],
If[(BoundarySUSYScale[[i,2]]=!= RUNNING) &&  (BoundarySUSYScale[[i,2]]=!= TADPOLES),
If[FreeQ[BoundarySUSYScale[[i,2]],DIAGONAL]==True,
Switch[Head[BoundarySUSYScale[[i,1]]],
re,WriteString[file,SPhenoForm[BoundarySUSYScale[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundarySUSYScale[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundarySUSYScale[[i,1,1]]]<> "))\n"];,
im,WriteString[file,SPhenoForm[BoundarySUSYScale[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundarySUSYScale[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundarySUSYScale[[i,2]]]  <> ",dp))\n"];,
_,WriteString[file,SPhenoForm[BoundarySUSYScale[[i,1]]]<>" = " <> SPhenoForm[BoundarySUSYScale[[i,2]]]<>"\n"];
];,
WriteString[file,"Do i1=1,"<>ToString[getDimSPheno[BoundarySUSYScale[[i,1]]][[1]]]<>"\n"];
WriteString[file,SPhenoForm[BoundarySUSYScale[[i,1]]]<>"(i1,i1) = " <> SPhenoForm[BoundarySUSYScale[[i,2]] /. DIAGONAL->1]<>"\n"];
WriteString[file,"End Do\n"];
];
];
i++;];,

WriteString[file,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[BoundarySUSYScale],
WriteString[file,"Case ("<>ToString[j]<>") \n"];
For[i=1,i<=Length[BoundarySUSYScale[[j]]],
If[(BoundarySUSYScale[[j,i,2]]=!= RUNNING) &&  (BoundarySUSYScale[[j,i,2]]=!= TADPOLES),
If[FreeQ[BoundarySUSYScale[[j,i,2]],DIAGONAL]==True,
Switch[Head[BoundarySUSYScale[[j,i,1]]],
re,WriteString[file,SPhenoForm[BoundarySUSYScale[[j,i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundarySUSYScale[[j,i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundarySUSYScale[[j,i,1,1]]]<> "))\n"];,
im,WriteString[file,SPhenoForm[BoundarySUSYScale[[j,i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundarySUSYScale[[j,i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundarySUSYScale[[j,i,2]]]  <> ",dp))\n"];,
_,WriteString[file,SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>" = " <> SPhenoForm[BoundarySUSYScale[[j,i,2]]]<>"\n"];
];,
WriteString[file,"Do i1=1,"<>ToString[getDimSPheno[BoundarySUSYScale[[j,i,1]]][[1]]]<>"\n"];
WriteString[file,SPhenoForm[BoundarySUSYScale[[j,i,1]]]<>"(i1,i1) = " <> SPhenoForm[BoundarySUSYScale[[j,i,2]] /. DIAGONAL->1]<>"\n"];
WriteString[file,"End Do\n"];
];
];
i++;];
j++;];
WriteString[file,"End Select \n\n"];
];


WriteString[sphenoSugra,"else If (HighScaleModel.Eq.\"LOW\") Then \n "];
WriteString[sphenoSugra,"! Setting values \n "];
For[i=1,i<=Length[listVEVsIN],
If[MemberQ[ParametersToSolveTadpoles,listVEVs[[i]]]==False && FreeQ[{VEVSM1,VEVSM2,VEVSM},listVEVs[[i]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>" = " <>SPhenoForm[listVEVsIN[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[HighScaleList],
If[MemberQ[ParametersToSolveTadpoles,HighScaleList[[i,2]]]==False,
WriteString[sphenoSugra,StringDrop[SPhenoForm[highScaleIn[[i]]],-2] <>" = " <>SPhenoForm[highScaleIn[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[LowScaleList],
If[MemberQ[ParametersToSolveTadpoles,LowScaleList[[i,2]]]==False&& FreeQ[{leftCoupling,hyperchargeCoupling,strongCoupling,UpYukawa,DownYukawa,ElectronYukawa},LowScaleList[[i,1]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[lowScaleIn[[i]]],-2] <>" = " <>SPhenoForm[lowScaleIn[[i]]]<>" \n "];
];
i++;];

For[i=1,i<=Length[BoundaryLowScaleInput],
Switch[Head[BoundaryLowScaleInput[[i,1]]],
re,WriteString[file,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<> "))\n"];,
im,WriteString[file,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <> ",dp))\n"];,
_,WriteString[sphenoSugra,SPhenoForm[BoundaryLowScaleInput[[i,1]]]<>" = " <>SPhenoForm[BoundaryLowScaleInput[[i,2]]]<>"\n"];
];
i++;];
WriteString[sphenoSugra,"End if\n \n "];

WriteString[file,"! ----------------------- \n \n"];
];

WriteBoundaryConditionsEWSBrunningDown[file_]:=Block[{},
WriteString[file,"\n \n ! --- Boundary conditions at EW-scale when running down --- \n"];

If[SeveralBoundaryConditions===False,
For[i=1,i<=Length[BoundaryEWSBScaleRunningDown],
WriteString[file,SPhenoForm[BoundaryEWSBScaleRunningDown[[i,1]]]<>" = " <> SPhenoForm[BoundaryEWSBScaleRunningDown[[i,2]]]  <> "\n"];
i++;];
];

(*
WriteString[sphenoSugra,"If (HighScaleModel.Eq.\"LOW\") Then \n "];
WriteString[sphenoSugra,"! Setting values \n "];
For[i=1,i\[LessEqual]Length[listVEVsIN],
If[MemberQ[ParametersToSolveTadpoles,listVEVs[[i]]]\[Equal]False && FreeQ[{VEVSM1,VEVSM2,VEVSM},listVEVs[[i]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>" = " <>SPhenoForm[listVEVsIN[[i]]]<>" \n "];
];
i++;];
For[i=1,i\[LessEqual]Length[HighScaleList],
If[MemberQ[ParametersToSolveTadpoles,HighScaleList[[i,2]]]\[Equal]False,
WriteString[sphenoSugra,StringDrop[SPhenoForm[highScaleIn[[i]]],-2] <>" = " <>SPhenoForm[highScaleIn[[i]]]<>" \n "];
];
i++;];
For[i=1,i\[LessEqual]Length[LowScaleList],
If[MemberQ[ParametersToSolveTadpoles,LowScaleList[[i,2]]]\[Equal]False&& FreeQ[{leftCoupling,hyperchargeCoupling,strongCoupling,UpYukawa,DownYukawa,ElectronYukawa},LowScaleList[[i,1]]],
WriteString[sphenoSugra,StringDrop[SPhenoForm[lowScaleIn[[i]]],-2] <>" = " <>SPhenoForm[lowScaleIn[[i]]]<>" \n "];
];
i++;];

For[i=1,i\[LessEqual]Length[BoundaryLowScaleInput],
WriteString[sphenoSugra,SPhenoForm[BoundaryLowScaleInput[[i,1]]]<>" = " <>SPhenoForm[BoundaryLowScaleInput[[i,2]]]<>"\n"];
i++;];
WriteString[sphenoSugra,"End if\n \n "];
*)
WriteString[file,"! ----------------------- \n \n"];
];




