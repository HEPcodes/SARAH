(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
GenerateSPhenoOneLoopDecays[Eigenstates_]:=Block[{i,files,matrices,inputname,Zinputname},
Get[ToFileName[$sarahSPhenoPackageDir,"SPhenoLoopDecaysReal.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"DecayFFV.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"DecayFFS.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"DecaySFF.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"DecaySSS.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"DecaySSV.m"]];


Print[StyleForm["Writing Routines for 1-Loop Decays","Section",FontSize->12]];

SA`Zfactors={};
SA`massesOnlyInput={};
subDRtoOS={};
For[i=1,i<=Length[AllMassesSPheno],
pos=Position[SPhenoParameters,AllMassesSPheno[[i]]][[1,1]];
inputname=ToExpression[ToString[AllMassesSPheno[[i]]]<>"OS"];
subDRtoOS=Join[subDRtoOS,{AllMassesSPheno[[i]]->inputname}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]/.AllMassesSPheno[[i]]->inputname }];
SA`massesOnlyInput=Join[SA`massesOnlyInput,{inputname}];
realVar=Join[realVar,{inputname}];
i++;];

matrices=Transpose[ListMixingMat][[1]];
SA`matrices=matrices;
For[i=1,i<=Length[matrices],
pos=Position[SPhenoParameters,matrices[[i]]][[1,1]];
inputname=ToExpression[SPhenoForm[matrices[[i]]]<>"OS"];
Zinputname=SPhenoZFac[matrices[[i]]];
SA`Zfactors=Join[SA`Zfactors,{Zinputname}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]/.matrices[[i]]->inputname }];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]/.matrices[[i]]->Zinputname }];
SA`massesOnlyInput=Join[SA`massesOnlyInput,{inputname}];
If[FreeQ[realVar,matrices[[i]]]===False,realVar=Join[realVar,{inputname}];];
i++;];

(* needs Gluon and Photon mass variables for Bremsstrahlung! *)
masslessSave=massless;
massless=DeleteCases[DeleteCases[massless,VectorP],VectorG];
masslessNoPhoton=massless;

(* Goldstone-W-Photon couplings *)
cHPWlist={};
pos=Position[SPhenoCouplingsAll,C[VectorW,VectorP,conj[Select[GoldstoneBosons[EWSB],FreeQ[#,VectorW]==False&][[1,2]]] /. A_[{b__}]->A]];
If[pos=!={},cHPWlist=Join[cHPWlist,{SPhenoCouplingsAll[[pos[[1,1]],2,2]]}]];
pos=Position[SPhenoCouplingsAll,C[VectorW,VectorP,Select[GoldstoneBosons[EWSB],FreeQ[#,VectorW]==False&][[1,2]] /. A_[{b__}]->A]];
If[pos=!={},cHPWlist=Join[cHPWlist,{SPhenoCouplingsAll[[pos[[1,1]],2,2]]}]];
pos=Position[SPhenoCouplingsAll,C[conj[VectorW],VectorP,Select[GoldstoneBosons[EWSB],FreeQ[#,VectorW]==False&][[1,2]] /. A_[{b__}]->A]];
If[pos=!={},cHPWlist=Join[cHPWlist,{SPhenoCouplingsAll[[pos[[1,1]],2,2]]}]];

SPhenoParameters=Join[SPhenoParameters,{{SPhenoMass[VectorP],{generation},{1}}}];
SPhenoParameters=Join[SPhenoParameters,{{SPhenoMass[VectorG],{generation},{1}}}];
SPhenoParameters=Join[SPhenoParameters,{{SPhenoMassSq[VectorP],{generation},{1}}}];
SPhenoParameters=Join[SPhenoParameters,{{SPhenoMassSq[VectorG],{generation},{1}}}];

realVar=Join[realVar,{SPhenoMass[VectorP],SPhenoMass[VectorG],SPhenoMassSq[VectorP],SPhenoMassSq[VectorG]}];

$sarahSPhenoLoopDecayDir=ToFileName[{$sarahCurrentSPhenoDir,"LoopDecays"}];
If[FileExistsQ[$sarahSPhenoLoopDecayDir]=!=True,
CreateDirectory[$sarahSPhenoLoopDecayDir];
];


files={"Bremsstrahlung.f90","DecayFFS.f90","DecayFFV.f90","DecaySSS.f90","DecaySSV.f90","DecaySFF.f90","DecaySVV.f90"};
For[i=1,i<=Length[files],
If[FileExistsQ[ToFileName[$sarahSPhenoLoopDecayDir,files[[i]]]],DeleteFile[ToFileName[$sarahSPhenoLoopDecayDir,files[[i]]]]];
CopyFile[ToFileName[ToFileName[{$sarahSPhenoPackageDir,"IncludeSPheno"}],files[[i]]],ToFileName[$sarahSPhenoLoopDecayDir,files[[i]]]];
i++;];
SA`SavedInformationOneLoopDecaysVertex={};
SA`SavedInformationOneLoopDecaysWave={};
SA`SavedInformationOneLoopDecaysReal={};
SA`SavedInformationTreeDecay={};

SA`SavedInformationNeededMassesCouplingsParticle={};


InitCounterTerms;
InitSelfEnergies[Eigenstates];

(* GenerateCounterTerms; *)
(* InitSelfEnergies[Eigenstates]; *)



GenerateOneLoopDecayRoutines[Eigenstates];

sphenoLD=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"OneLoopDecays_"<>ModelName<>".f90"]];
WriteCopyRight[sphenoLD];

WriteString[sphenoLD, "Module OneLoopDecays_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use Couplings_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use CouplingsCT_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use LoopCouplings_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use LoopMasses_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use RGEs_"<>ModelName<>" \n"];
WriteString[sphenoLD,"Use Tadpoles_"<>ModelName<>" \n"];
WriteString[sphenoLD,"Use Kinematics \n"];
WriteString[sphenoLD, "Use CouplingsForDecays_"<>ModelName<>" \n \n"];
(*
For[i=1,i\[LessEqual]Length[SA`ParticlesDecays1Loop],
WriteString[sphenoLD, "Use OneLoopDecay_"<>SPhenoForm[SA`ParticlesDecays1Loop[[i]]]<>"_"<>ModelName<>" \n"];
i++;]; *)
For[i=1,i<=Length[SA`ParticlesDecays1Loop],
WriteString[sphenoLD, "Use Wrapper_OneLoopDecay_"<>SPhenoForm[SA`ParticlesDecays1Loop[[i]]]<>"_"<>ModelName<>" \n"];
i++;];

WriteString[sphenoLD,"\n \n"];

(*
WriteString[sphenoLD,"Logical,save::OnlyTreeLevelContributions= .false. \n"];
 WriteString[sphenoLD,"Logical,save::DebugLoopDecays= .true. \n \n"]; *)

WriteString[sphenoLD, "Contains \n \n"];

GenerateZCouplings;

massless=masslessSave;
GenerateGCouplings;
massless=masslessNoPhoton;

GenerateCounterTerms[Eigenstates];



GenerateCalculateOneLoopWidths[Eigenstates];
WriteSPhenoLoopDecys[Eigenstates];
(* GenerateCalcLoopDiagrams; *)
(* GenerateCalculationRunningParameters; *)



WriteString[sphenoLD, "End Module OneLoopDecays_"<>ModelName<>" \n "];
Close[sphenoLD];
massless=masslessSave;
];


(* ::Input::Initialization:: *)
(*
SPheno`CounterTermDefintions = {
{g1, PiVZ/SPhenoMassSq[VZ]},
{g2,  PiVZ/SPhenoMassSq[VZ]},
{Ye, SigmaSFeyt
};
*)



CounterTerm[x_]:=ToExpression["d"<>SPhenoForm[x]];
InitCounterTerms:=Block[{i,j,k,dim,ct,ctc,ctt,cts},
SA`ListCounterTerms={};
subListCounter={};
subListCounterNames={};
subListCounterNamesSingle={};


For[i=1,i<=Length[parameters],
If[FreeQ[VertexListNonCC,parameters[[i,1]]]==False || FreeQ[listAllParametersAndVEVs,parameters[[i,1]]]==False || FreeQ[ListMixingMat,parameters[[i,1]]]==False,
If[FreeQ[Flatten[AssociatedMixingAngles/@SA`RotationMatricesGaugeSector],parameters[[i,1]]] && FreeQ[UnfixedCharges,parameters[[i,1]]],
dim=parameters[[i,3]] /. {1}->{};
ct=CounterTerm[parameters[[i,1]]];
SA`ListCounterTerms = Join[SA`ListCounterTerms,{ct}];
subListCounterNamesSingle=Join[subListCounterNamesSingle,{parameters[[i,1]]->ct}];
Switch[Length[dim],
0,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{},{}}}];
	subListCounter=Join[subListCounter,{parameters[[i,1]]->parameters[[i,1]]+dd[parameters[[i,1]]]}];
	subListCounterNames=Join[subListCounterNames,{dd[parameters[[i,1]]]->ct}];,
1,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen},dim}}];
	subListCounter=Join[subListCounter,{parameters[[i,1]][a__]->parameters[[i,1]][a]+dd[parameters[[i,1]][a]]}];
	subListCounterNames=Join[subListCounterNames,{dd[parameters[[i,1]][a__]]->ct[a]}];,
2,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen},dim}}];
	subListCounter=Join[subListCounter,{parameters[[i,1]][a__]->parameters[[i,1]][a]+dd[parameters[[i,1]][a]]}];
	subListCounterNames=Join[subListCounterNames,{dd[parameters[[i,1]][a__]]->ct[a]}];,
3,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen,gen},dim}}];
	subListCounter=Join[subListCounter,{parameters[[i,1]][a__]->parameters[[i,1]][a]+dd[parameters[[i,1]][a]]}];
	subListCounterNames=Join[subListCounterNames,{dd[parameters[[i,1]][a__]]->ct[a]}];
];
If[FreeQ[realVar,parameters[[i,1]]]==False,realVar=Join[realVar,{ct}];];,
cts=CounterTerm[Sin[parameters[[i,1]]]];
ctc=CounterTerm[Cos[parameters[[i,1]]]];
ctt=CounterTerm[Tan[parameters[[i,1]]]];
SA`ListCounterTerms = Join[SA`ListCounterTerms,{cts,ctc,ctt}];
realVar=Join[realVar,{cts,ctc,ctt}];
subListCounterNamesSingle=Join[subListCounterNamesSingle,{parameters[[i,1]]->{cts,ctc,ctt}}];
SPhenoParameters=Join[SPhenoParameters,{{cts,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{ctc,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{ctt,{},{}}}];
subListCounter=Join[subListCounter,{Sin[parameters[[i,1]]]->Sin[parameters[[i,1]]]+dd[Sin[parameters[[i,1]]]]}];
subListCounterNames=Join[subListCounterNames,{dd[Sin[parameters[[i,1]]]]->cts}];
subListCounter=Join[subListCounter,{Cos[parameters[[i,1]]]->Cos[parameters[[i,1]]]+dd[Cos[parameters[[i,1]]]]}];
subListCounterNames=Join[subListCounterNames,{dd[Cos[parameters[[i,1]]]]->ctc}];
subListCounter=Join[subListCounter,{Tan[parameters[[i,1]]]->Tan[parameters[[i,1]]]+dd[Tan[parameters[[i,1]]]]}];
subListCounterNames=Join[subListCounterNames,{dd[Tan[parameters[[i,1]]]]->ctt}];
];
];
i++;];


SA`RotationMatrices=Select[NewMassParameters,FreeQ[DEFINITION[EWSB][MatterSector],#]==False&];
GenerateSPhenoCTcouplings;

];

GenerateCounterTerms[Eigenstates_]:=Block[{i,j,fields,mass,massSq,LR,RL,dirac,diracPos,Sindex,list,subTemp={}},


MakeSubroutineTitle["WaveFunctionRenormalisation",Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters,listVEVs,namesAllreallyAll,SA`GBcouplings,SA`ListCounterTerms,SA`WaveFunctionNames,namesAllCT}],{},{"MLambda","deltaM","kont"},sphenoLD];
WriteString[sphenoLD,"Implicit None \n"];
MakeVariableList[listAllParameters,",Intent(inout)",sphenoLD];
MakeVariableList[listVEVs,",Intent(inout)",sphenoLD];
MakeVariableList[namesAllreallyAll,",Intent(in)",sphenoLD];
(* MakeVariableList[namesColoredQuartics,",Intent(in)",sphenoLD]; *)
MakeVariableList[NewMassParameters,",Intent(in)",sphenoLD];
MakeVariableList[SA`massesOnlyInput,",Intent(in)",sphenoLD];
MakeVariableList[SA`SelfEnergieNames,"",sphenoLD];
MakeVariableList[SA`SelfEnergieNamesDR,"",sphenoLD];
MakeVariableList[SA`SelfEnergieNamesOS,"",sphenoLD];
WriteString[sphenoLD,"Real(dp), Intent(in) :: MLambda, deltaM \n\n"];
WriteString[sphenoLD,"Integer, Intent(out) :: kont \n"];
MakeVariableList[SA`ListCounterTerms,",Intent(out)",sphenoLD];
MakeVariableList[SA`WaveFunctionNames,",Intent(out)",sphenoLD];
MakeVariableList[namesAllCT,",Intent(out)",sphenoLD];
MakeVariableList[SA`GBcouplings,",Intent(in)",sphenoLD];

WriteString[sphenoLD,"Real(dp) ::  g1D("<>ToString[numberAllwithVEVs]<>") \n"];
WriteString[sphenoLD,"Real(dp) :: p2 \n"];
WriteString[sphenoLD,"Logical :: TwoLoopRGEsave \n"];
WriteString[sphenoLD,"Real(dp) ::"<>ToString[SPhenoMass[VectorG]]<>","<>ToString[SPhenoMass[VectorP]]<>","<>ToString[SPhenoMassSq[VectorG]]<>","<>ToString[SPhenoMassSq[VectorP]]<>"\n"];
WriteString[sphenoLD, "Complex(dp) ::  Tad1Loop("<>ToString[SA`NrTadpoleEquations]<>")\n"];

For[i=1,i<=Length[loopContributionTad],
If[loopContributionTad[[i]]=!={} && Intersection[listVEVseparated[[i]]]=!={0},
WriteString[sphenoLD, "Complex(dp) :: MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>"("<>ToString[getGen[ScalarsForTadpoles[[i]]]]<>","<>ToString[getGen[ScalarsForTadpoles[[i]]]]<>")=0._dp \n"];
];
i++;];

WriteString[sphenoLD,"Integer :: i1,i2,i3 \n\n"];

WriteString[sphenoLD,ToString[SPhenoMass[VectorG]]<>" = MLambda \n"];
WriteString[sphenoLD,ToString[SPhenoMass[VectorP]]<>" = MLambda \n"];
WriteString[sphenoLD,ToString[SPhenoMassSq[VectorG]]<>" = MLambda**2 \n"];
WriteString[sphenoLD,ToString[SPhenoMassSq[VectorP]]<>" = MLambda**2 \n\n"];

For[i=1,i<=Length[SA`subUnrotedFieldsRotatedFields],
subTemp=Join[subTemp,{ToString[SA`subUnrotedFieldsRotatedFields[[i,1]]]->ToString[SA`subUnrotedFieldsRotatedFields[[i,2]]]}];
i++;];

off=1;
For[i=1,i<=Length[loopContributionTad],
If[loopContributionTad[[i]]=!={} && Intersection[listVEVseparated[[i]]]=!={0},
MakeCall["OneLoopTadpoles"<>ToString[ScalarsForTadpoles[[i]]],Flatten[{Intersection[listVEVseparated[[i]]],NeededMassesLoopTad[[i]], ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoopTad[[i]]}],{},{"Tad1Loop("<>ToString[off]<>":"<>ToString[off-1+getGen[ScalarsForTadpoles[[i]]]]<>")"},sphenoLD];
If[getGen[ScalarsForTadpoles[[i]]]>1,
WriteString[sphenoLD,"Tad1Loop("<>ToString[off]<>":"<>ToString[off-1+getGen[ScalarsForTadpoles[[i]]]]<>") = MatMul("<>SPhenoForm[getMixingMatrix[ScalarsForTadpoles[[i]]]]<>",Tad1Loop("<>ToString[off]<>":"<>ToString[off-1+getGen[ScalarsForTadpoles[[i]]]]<>")) \n"];
off2=1;
For[j=1,j<=Length[listVEVseparated[[i]]],
If[getDimSPheno[listVEVseparated[[i,j]]][[1]]<2,
WriteString[sphenoLD,"Tad1Loop("<>ToString[off2]<>") = Tad1Loop("<>ToString[off2]<>")/"<>SPhenoForm[listVEVseparated[[i,j]]]<>" \n"];
off2++;,
WriteString[sphenoLD,"Do i1=1,"<>ToString[getDimSPheno[listVEVseparated[[i,j]]][[1]]]<>"\n"];
WriteString[sphenoLD,"Tad1Loop("<>ToString[off2-1]<>"+i1) = Tad1Loop("<>ToString[off2-1]<>"+i1)/"<>SPhenoForm[listVEVseparated[[i,j]]]<>"(i1) \n"];
WriteString[sphenoLD,"End Do \n"];
off2=off2+getDimSPheno[listVEVseparated[[i,j]]][[1]];
];
j++;];

WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[ScalarsForTadpoles[[i]]]]<>"\n"];
WriteString[sphenoLD, "MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>"(i1,i1) = Tad1Loop("<>ToString[off-1]<>"+ i1) \n"];
WriteString[sphenoLD,"End Do \n"];
WriteString[sphenoLD, "MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>" = MatMul(MatMul("<>SPhenoForm[getMixingMatrix[ScalarsForTadpoles[[i]]]]<>",MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>"),Transpose("<>SPhenoForm[getMixingMatrix[ScalarsForTadpoles[[i]]]]<>")) \n"];,
WriteString[sphenoLD, "MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>"(1,1) = Tad1Loop(1) \n"];
];
WriteString[sphenoLD, "! Not working!! \n"];
WriteString[sphenoLD, "MatTad_"<>SPhenoForm[ScalarsForTadpoles[[i]]]<>"= 0._dp\n"];
];
i++;];


WriteCalculateAllSelfEnergies;

fields=Select[Select[Particles[Eigenstates],(#[[4]]===V || #[[4]]===S ||#[[4]]===F)&],(FreeQ[masslessSave,#[[1]]/.diracSubBack[EWSB]] || getType[#[[1]]]===V|| getType[#[[1]]]===F)&];

WriteString[sphenoLD,"! -----------------------------------------------------------\n"];
WriteString[sphenoLD,"! Calculate now all wave-function renormalisation constants \n"];
WriteString[sphenoLD,"! -----------------------------------------------------------\n"];

For[i=1,i<=Length[fields],
WriteString[sphenoLD,"\n\n!  ######    "<>ToString[fields[[i,1]]]<>"    ###### \n"];
Switch[fields[[i,4]],
F,
mass=ToString[SPhenoMass[fields[[i,1]] /. diracSubBack[Eigenstates]]];
massSq=ToString[SPhenoMassSq[fields[[i,1]] /. diracSubBack[Eigenstates]]];
massOS=ToString[SPhenoMassOS[fields[[i,1]] /. diracSubBack[Eigenstates]]];
massSqOS=ToString[SPhenoMassSqOS[fields[[i,1]] /. diracSubBack[Eigenstates]]];
dirac=getBlank[fields[[i,1]]/.diracSubBack[Eigenstates]];
If[FreeQ[massless,dirac]===FALSE (* never! *),
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = 0._dp \n"];,
dirac=ToString[dirac];
diracPos=Position[fields[[i,1]] /. diracSubBack[Eigenstates] /. diracSub[Eigenstates],fields[[i,1]]][[1,1]];
If[diracPos===2,LR="L"; RL="R";,LR="R"; RL="L"];
sigL="Sigma"<>LR<>dirac; 
sigR="Sigma"<>RL<>dirac;
sigSL="SigmaS"<>LR<>dirac; 
sigSR="SigmaS"<>RL<>dirac;
DsigL="DerSigma"<>LR<>dirac; 
DsigR="DerSigma"<>RL<>dirac;
DsigSL="DerSigmaS"<>LR<>dirac; 
DsigSR="DerSigmaS"<>RL<>dirac;
DsigLir="DerSigma"<>LR<>"ir"<>dirac; 
DsigRir="DerSigma"<>RL<>"ir"<>dirac;
DsigSLir="DerSigmaS"<>LR<>"ir"<>dirac; 
DsigSRir="DerSigmaS"<>RL<>"ir"<>dirac;
(*
If[LR==="L",
DsigSL="DerSigmaS"<>dirac; 
DsigSR="DerSigmaS"<>dirac;,
DsigSR="DerSigmaS"<>dirac; 
DsigSL="DerSigmaS"<>dirac;
];
*)
If[fields[[i,3]]===1,
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = -"<>sigL<>" + &\n"];
(* WriteString[sphenoLD,"& 1._dp/"<>mass<>"*("<>sigSL<>" - "<>sigSR<>")&\n"]; *)
WriteString[sphenoLD,"& -"<>mass<>"*("<>mass<>"*"<>DsigL<>"+"<>mass<>"*"<>DsigR<>"+"<>DsigSL<>"+"<>DsigSR<>")\n"];
WriteString[sphenoLD,"If (OSkinematics) Then \n"];
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = Zf"<>ToString[fields[[i,1]]]<>" &\n"];
WriteString[sphenoLD,"& + -"<>massOS<>"*("<>massOS<>"*"<>DsigLir<>"+"<>massOS<>"*"<>DsigRir<>"+("<>DsigSLir<>"+"<>DsigSRir<>"))\n"];
WriteString[sphenoLD,"Else \n"];
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = Zf"<>ToString[fields[[i,1]]]<>" &\n"];
WriteString[sphenoLD,"& + -"<>mass<>"*("<>mass<>"*"<>DsigLir<>"+"<>mass<>"*"<>DsigRir<>"+("<>DsigSLir<>"+"<>DsigSRir<>"))\n"];
WriteString[sphenoLD,"End if \n"];
,
massi=mass<>"(i1)"; massj=mass<>"(i2)";
massSqi=massSq<>"(i1)"; massSqj=massSq<>"(i2)";

massiOS=mass<>"OS(i1)"; massjOS=mass<>"OS(i2)";
massSqiOS=massSq<>"OS(i1)"; massSqjOS=massSq<>"OS(i2)";

sigL=sigL<>"(i2,i1,i2)"; sigR=sigR<>"(i2,i1,i2)";
DsigL=DsigL<>"(i2,i1,i2)"; DsigR=DsigR<>"(i2,i1,i2)";
DsigLir=DsigLir<>"(i2,i1,i2)"; DsigRir=DsigRir<>"(i2,i1,i2)";
If[LR==="L",
sigSL="SigmaSL"<>dirac<>"(i2,i1,i2)";
sigSR="SigmaSR"<>dirac<>"(i2,i1,i2)";
DsigSL="DerSigmaSL"<>dirac<>"(i2,i1,i2)";
DsigSR="DerSigmaSR"<>dirac<>"(i2,i1,i2)";
DsigSLir="DerSigmaSLir"<>dirac<>"(i2,i1,i2)";
DsigSRir="DerSigmaSRir"<>dirac<>"(i2,i1,i2)";,
sigSR="SigmaSL"<>dirac<>"(i2,i1,i2)";
sigSL="SigmaSR"<>dirac<>"(i2,i1,i2)";
DsigSR="DerSigmaSL"<>dirac<>"(i2,i1,i2)";
DsigSL="DerSigmaSR"<>dirac<>"(i2,i1,i2)";
DsigSRir="DerSigmaSLir"<>dirac<>"(i2,i1,i2)";
DsigSLir="DerSigmaSRir"<>dirac<>"(i2,i1,i2)";
];

If[FreeQ[masslessSave,fields[[i,1]]/.diracSubBack[EWSB]],
(* Expressions from Stefan *)
WriteString[sphenoLD,"Do i1=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"  Do i2=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"   If ((i1.eq.i2).or.("<>massi<>".eq."<>massj<>")) Then \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = -"<>sigL<>" &\n"];
WriteString[sphenoLD,"      & -"<>massSqi<>"*("<>DsigL<>" + "<>DsigR<>")&\n"];
WriteString[sphenoLD,"      & -"<>massi<>"*("<>DsigSL<>"+"<>DsigSR<>")\n"];
WriteString[sphenoLD,"     If (OSkinematics) Then \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) &\n"];
WriteString[sphenoLD,"      & -"<>massSqiOS<>"*("<>DsigLir<>" + "<>DsigRir<>")&\n"];
WriteString[sphenoLD,"      & -"<>massiOS<>"*("<>DsigSLir<>"+"<>DsigSRir<>")\n"];
WriteString[sphenoLD,"     Else \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) &\n"];
WriteString[sphenoLD,"      & -"<>massSqi<>"*("<>DsigLir<>" + "<>DsigRir<>")&\n"];
WriteString[sphenoLD,"      & -"<>massi<>"*("<>DsigSLir<>"+"<>DsigSRir<>")\n"];
WriteString[sphenoLD,"     End if \n"];
WriteString[sphenoLD,"   Else \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = 2._dp/("<>massSqi<>" - "<>massSqj<>")* &\n"];
WriteString[sphenoLD,"      & ("<>massSqj<>"*"<>sigL <>" + "<>massi<>"*"<>massj<>"*"<>sigR <>" + "<>massi<>"*"<>sigSL<>" + "<>massj<>"*"<>sigSR<>")\n"];
WriteString[sphenoLD,"   End if \n"];
WriteString[sphenoLD,"  End Do \n"];
WriteString[sphenoLD,"End Do \n"]; ,
WriteString[sphenoLD,"Do i1=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"  Do i2=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"   If (i1.eq.i2) Then \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = -"<>sigL<>" \n"];
WriteString[sphenoLD,"   Else \n"];
WriteString[sphenoLD,"     Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = 0._dp \n"];
WriteString[sphenoLD,"   End if \n"];
WriteString[sphenoLD,"  End Do \n"];
WriteString[sphenoLD,"End Do \n"]; 
];
];
];,

S,
If[fields[[i,3]]===1,
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = -DerPi"<>ToString[fields[[i,1]]] <>"\n"];,
WriteString[sphenoLD,"Do i1=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"  Do i2=1,"<>ToString[fields[[i,3]]]<>"\n"];
WriteString[sphenoLD,"   If ((i1.eq.i2).or.("<>SPhenoMass[fields[[i,1]],i1]<>".eq."<>SPhenoMass[fields[[i,1]],i2]<>")) Then \n"];
WriteString[sphenoLD,"       Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = -DerPi"<>ToString[fields[[i,1]]] <>"(i1,i1,i2)\n"];
WriteString[sphenoLD,"   Else \n"];
WriteString[sphenoLD,"       Zf"<>ToString[fields[[i,1]]] <>"(i1,i2) = 2._dp/("<>SPhenoMassSq[fields[[i,1]],i1]<>"-"<>SPhenoMassSq[fields[[i,1]],i2]<>")*Pi"<>ToString[fields[[i,1]]] <>"(i2,i1,i2)\n"];
WriteString[sphenoLD,"   End if \n"];
WriteString[sphenoLD,"  End Do \n"];
WriteString[sphenoLD,"End Do \n"];
];,
V,
WriteString[sphenoLD,"Zf"<>ToString[fields[[i,1]]] <>" = -DerPi"<>ToString[fields[[i,1]]] <>"\n"];

];
i++;];

list=CorrectionListVectorVector[SA`CurrentStates];
For[i=1,i<=Length[list],
WriteString[sphenoLD,"\n\n!  ######    "<>ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]]<>"    ###### \n"];
WriteString[sphenoLD,getZfactor[list[[i,1,1]],list[[i,1,2]],""] <>" = 2._dp*Pi"<>ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]]<>"/("<>ToString[SPhenoMassSq[list[[i,1,1]]]]<>"-"<>ToString[SPhenoMassSq[list[[i,1,2]]]]<>" )\n"];
WriteString[sphenoLD,getZfactor[list[[i,1,2]],list[[i,1,1]],""] <>" = 2._dp*Pi"<>ToString[list[[i,1,2]]]<>ToString[list[[i,1,1]]]<>"/("<>ToString[SPhenoMassSq[list[[i,1,2]]]]<>"-"<>ToString[SPhenoMassSq[list[[i,1,1]]]]<>" )\n"];
i++;];

WriteString[sphenoLD,"! -----------------------------------------------------------\n"];
WriteString[sphenoLD,"! Setting the Counter-Terms \n"];
WriteString[sphenoLD,"! -----------------------------------------------------------\n"];

WriteString[sphenoLD,"! ----------- getting the divergent pieces ---------\n"];
WriteGUTnormalization[sphenoLD];
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"g1D"},sphenoLD];
WriteString[sphenoLD,"TwoLoopRGEsave=TwoLoopRGE \n"];
WriteString[sphenoLD,"TwoLoopRGE=.False. \n"];
WriteString[sphenoLD,"Call rge"<>ToString[numberAllwithVEVs]<>"("<>ToString[numberAllwithVEVs]<>",0._dp,g1D,g1D) \n"];
WriteString[sphenoLD,"TwoLoopRGE=TwoLoopRGEsave \n"];
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],ToExpression["d"<>SPhenoForm[#]]&/@listAllParametersAndVEVs,{"g1D"},{},sphenoLD];
WriteRemoveGUTnormalization["d",sphenoLD];
WriteRemoveGUTnormalization[sphenoLD];

For[i=1,i<=Length[SA`ListCounterTerms],
If[FreeQ[SA`RotationMatrices,SA`ListCounterTerms[[i]]],
If[FreeQ[ToExpression["d"<>SPhenoForm[#]]&/@listAllParametersAndVEVs,SA`ListCounterTerms[[i]]]==False,
WriteString[sphenoLD,ToString[SA`ListCounterTerms[[i]]]<>" = 0.5_dp*divergence*"<>ToString[SA`ListCounterTerms[[i]]]<>" \n"];,
WriteString[sphenoLD,ToString[SA`ListCounterTerms[[i]]]<>" = 0._dp \n"];
];
];
i++;];

WriteString[sphenoLD,"If (CTinLoopDecays) Then \n"];
For[i=1,i<=Length[RenConditionsDecays],
WriteString[sphenoLD,ToString[RenConditionsDecays[[i,1]]]<>" = "<>SPhenoForm[RenConditionsDecays[[i,2]]]<>" \n"];
i++;];
WriteString[sphenoLD,"End if \n \n"];

For[i=1,i<=Length[SA`RotationMatrices],
WriteString[sphenoLD,"d"<>SPhenoForm[SA`RotationMatrices[[i]]]<>" = 0.25_dp*MatMul("<>getZfactorMatrix[SA`RotationMatrices[[i]]]<>"- Conjg(Transpose("<>getZfactorMatrix[SA`RotationMatrices[[i]]]<>")),"<>SPhenoForm[SA`RotationMatrices[[i]]]<>")\n"];
i++;];



WriteString[sphenoLD,"\n\n! -----------------------------------------------------------\n"];
WriteString[sphenoLD,"! Calculating the CT vertices \n"];
WriteString[sphenoLD,"! -----------------------------------------------------------\n"];

MakeCall["CalculateCouplingCT" , Join[parametersAllCT,namesAllCT],{},{},sphenoLD];


WriteString[sphenoLD,"End Subroutine WaveFunctionRenormalisation \n"];
];

getZfactorMatrix[mat_]:="Zf"<>ToString[Extract[DEFINITION[EWSB][MatterSector],Drop[Position[DEFINITION[EWSB][MatterSector],mat][[1]],{-1}]][[1]]];

getGBCoup[name_]:=Block[{pos,sub,coup,pos2},
SA`GBS=Select[Transpose[GoldstoneBosons[EWSB]][[2]] /. A_[{b_Integer}]->A,getElectricCharge[#]=!=0&];
sub={VectorW->SA`GBS[[1]]};
pos=Position[SPhenoCouplingsAll,name][[1,1]];
pos2=Position[SPhenoCouplingsAll,name][[1,-1]];
pos=Position[SPhenoCouplingsAll,SPhenoCouplingsAll[[pos]][[1]] /. sub];
If[pos=!={},
Return[SPhenoCouplingsAll[[pos[[1,1]],2,pos2]]];,
Print["getGBCoup ",name];
Return[False];
];
];

getGBCoup1[name_]:=Block[{pos,sub,coup,pos2},
SA`GBS=Select[Transpose[GoldstoneBosons[EWSB]][[2]] /. A_[{b_Integer}]->A,getElectricCharge[#]=!=0&];
sub={VectorW->SA`GBS[[1]]};
pos=Position[SPhenoCouplingsAll,name][[1,1]];
pos2=Position[SPhenoCouplingsAll,name][[1,-1]];
pos=Position[SPhenoCouplingsAll,Replace[SPhenoCouplingsAll[[pos]][[1]] , sub,{2}]];
If[pos=!={},
Return[SPhenoCouplingsAll[[pos[[1,1]],2,pos2]]];,
Print["getGBCoup1 ",name];
Return[False];
];
];

getGBCoup2[name_]:=Block[{pos,sub,coup,pos2},
SA`GBS=Select[Transpose[GoldstoneBosons[EWSB]][[2]] /. A_[{b_Integer}]->A,getElectricCharge[#]=!=0&];
sub={VectorW->SA`GBS[[1]]};
pos=Position[SPhenoCouplingsAll,name][[1,1]];
pos2=Position[SPhenoCouplingsAll,name][[1,-1]];
pos=Position[SPhenoCouplingsAll,Replace[SPhenoCouplingsAll[[pos]][[1]] , sub,{3}]];
If[pos=!={},
Return[SPhenoCouplingsAll[[pos[[1,1]],2,pos2]]];,
Print["getGBCoup2 ",name];
Return[False];
];
];

GenerateCalculateOneLoopWidths:=
    Block[{i,j,k,pD,p1,p2,pos,jj,ii,coups,ctcoups,masses,name,dim,decays,dimAmp,dimIn,Zconst,factor,st,partinv,fin,subZ,subG,subGZ,subGZOS,coupsWithGB,outfile,symfactor},
	  Print["  Writing wrapper code for ",Dynamic[DynamicWrapperParticle],"(",Dynamic[DynamicWrapperParticleNr],"/",Length[SA`ParticlesDecays1Loop],")"];


	  For[i=1,i<=Length[SA`ParticlesDecays1Loop],

	      DynamicWrapperParticle=SA`ParticlesDecays1Loop[[i]];
	      DynamicWrapperParticleNr=i;
	      pD=SA`ParticlesDecays1Loop[[i]];

	      outfile=OpenWrite[ToFileName[$sarahSPhenoLoopDecayDir,"Wrapper_LoopDecay_"<>SPhenoForm[pD]<>"_"<>ModelName<>".f90"]];
	      WriteCopyRight[outfile];
	      WriteString[outfile,"Module Wrapper_OneLoopDecay_"<>SPhenoForm[pD]<>"_"<>ModelName<>"\n"];


	      WriteString[outfile, "Use Model_Data_"<>ModelName<>" \n"];
	      WriteString[outfile,"Use Kinematics \n"];
	      WriteString[outfile, "Use OneLoopDecay_"<>SPhenoForm[pD]<>"_"<>ModelName<>" \n"];
	      WriteString[outfile,"Use Control \n"];
	      WriteString[outfile,"Use Settings \n"];
	      WriteString[outfile,"\n \n"];
	      WriteString[outfile,"Contains\n"];
	      WriteString[outfile,"\n \n"];


	      (*
		 MakeSubroutineTitle["OneLoopDecay_"<>SPhenoForm[pD],Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters,listVEVs,SA`ListCounterTerms,SA`WaveFunctionNames,namesAllreallyAll,namesColoredQuartics,namesAllCT,SA`Zfactors ,SA`ZCouplings}],{},{"MLambda","deltaM","kont","gP1L"<>SPhenoForm[pD]},sphenoLD];
		 *)

	      MakeSubroutineTitle["OneLoopDecay_"<>SPhenoForm[pD],Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters,listVEVs,SA`ListCounterTerms,SA`WaveFunctionNames,Intersection[SA`SavedInformationNeededMassesCouplingsParticle[[i,2]]] ,SA`Zfactors  }],{},{"MLambda","em","gs","deltaM","kont","gP1L"<>SPhenoForm[pD]},outfile];


	      WriteString[outfile,"Implicit None \n"];
	      MakeVariableList[listAllParameters,",Intent(in)",outfile];
	      MakeVariableList[listVEVs,",Intent(in)",outfile];
	      MakeVariableList[NewMassParameters,",Intent(in)",outfile];
	      MakeVariableList[SA`ListCounterTerms,",Intent(in)",outfile];
	      MakeVariableList[Intersection[SA`SavedInformationNeededMassesCouplingsParticle[[i,2]]],",Intent(in)",outfile];
	      WriteString[outfile,"Real(dp), Intent(in) :: em, gs \n"];
	      (*
		 MakeVariableList[namesAllreallyAll,",Intent(in)",sphenoLD];
		 MakeVariableList[namesColoredQuartics,",Intent(in)",sphenoLD];
		 MakeVariableList[namesAllCT,",Intent(in)",sphenoLD];
		 MakeVariableList[SA`ZCouplings,",Intent(in)",sphenoLD];
		 *)

	      MakeVariableList[SA`WaveFunctionNames,",Intent(in)",outfile];
	      MakeVariableList[SA`massesOnlyInput,",Intent(in)",outfile];
	      MakeVariableList[SA`Zfactors,",Intent(in)",outfile]; 
	      massless=masslessNoPhoton;

	      (* MakeVariableList[SA`SelfEnergieNames,",Intent(in)",sphenoLD]; *)
	      WriteString[outfile,"Real(dp), Intent(in) :: MLambda, deltaM \n"];
	      (* WriteString[sphenoLD,"Real(dp), Intent(out) :: gP1L"<>SPhenoForm[pD]<>"("<>ToString[getGen[pD]]<>","<>ToString[BR2and3[[Position[BR2and3,pD][[1,1]]]][[2]]]<>") \n"]; *)
	      WriteString[outfile,"Real(dp), Intent(out) :: gP1L"<>SPhenoForm[pD]<>"("<>ToString[getGen[pD]]<>","<>ToString[BR2[[Position[BR2,pD][[1,1]]]][[2]]]<>") \n"];
	      WriteString[outfile,"Integer, Intent(out) :: kont \n"];
	      WriteString[outfile,"Real(dp) :: "<>ToString[SPhenoMass[VectorG]]<>","<>ToString[SPhenoMass[VectorP]]<>","<>ToString[SPhenoMassSq[VectorG]]<>","<>ToString[SPhenoMassSq[VectorP]]<>", helfactor, phasespacefactor \n"];
	      WriteString[outfile,"Integer :: i1,i2,i3,i4, isave, gt1, gt2, gt3 \n\n"];


	      For[ii=1,ii<=Length[SA`Zfactors],
		  WriteString[outfile,"Complex(dp) :: "<>ToString[SA`Zfactors[[ii]]]<>"c("<>StringReplace[ToString[getDimSPheno[SA`Zfactors[[ii]]]],{"{"->"","}"->""}]<>") \n"];
		  ii++;];

	      massless=masslessSave;
	      (* decays=TwoBodyDecay[pD]; *)
	      decays=TwoBodyDecayAllAllowed[pD];
	      decays=Select[decays,FreeSkipFields[#,SkipFields]&];

	      massless=masslessNoPhoton;
	      For[j=1,j<=Length[decays],
		  DynamicLoopDecayNr=j;
		  p1=decays[[j,1]];
		  p2=decays[[j,2]];
		  pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p1,p2},a___}];
		  If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p2,p1},a___}];
		     dim="("<>ToString[getGen[pD]]<>","<>ToString[getGen[p2]]<>","<>ToString[getGen[p1]]<>")";,
		     dim="("<>ToString[getGen[pD]]<>","<>ToString[getGen[p1]]<>","<>ToString[getGen[p2]]<>")";
		    ];

		  If[pos==={},Print["Strange decay vertex: ",pD,p1,p2],
		     
		     
		  dim=Nest[StringReplace[#,{"(1,"->"(",",1,"->",",",1)"->")","(1)"->""}]&,dim,3];
		  Switch[getVertexType[{pD,p1,p2}],
			 FFV,dimAmp=StringReplace["(4)"<>dim,")("->","];,
			 FFS,dimAmp=StringReplace["(2)"<>dim,")("->","];,
			 SSS,dimAmp=StringReplace[""<>dim,")("->","];,
			 SFF,dimAmp=StringReplace["(2)"<>dim,")("->","];,
			 SSV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
			 SVV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
			 _,Print["Not yet done",{pD,p1,p2}];
			];

		  name=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],3]];
		  WriteString[outfile,"Real(dp) :: MRP"<>name<>dim<>",MRG"<>name<>dim<>", MRPZ"<>name<>dim<>",MRGZ"<>name<>dim<>" \n"];
		  WriteString[outfile,"Real(dp) :: MVP"<>name<>dim<>" \n"];
		  WriteString[outfile,"Real(dp) :: RMsqTree"<>name<>dim<>",RMsqWave"<>name<>dim<>",RMsqVertex"<>name<>dim<>" \n"];
		  WriteString[outfile,"Complex(dp) :: AmpTree"<>name<>dimAmp<>",AmpWave"<>name<>dimAmp<>"=(0._dp,0._dp),AmpVertex"<>name<>dimAmp<>"& \n & ,AmpVertexIRos"<>name<>dimAmp<>",AmpVertexIRdr"<>name<>dimAmp<>", AmpSum"<>name<>dimAmp<>", AmpSum2"<>name<>dimAmp<>" \n"];
		  WriteString[outfile,"Complex(dp) :: AmpTreeZ"<>name<>dimAmp<>",AmpWaveZ"<>name<>dimAmp<>",AmpVertexZ"<>name<>dimAmp<>" \n"];

		  WriteString[outfile,"Real(dp) :: AmpSq"<>name<>dim<>",  AmpSqTree"<>name<>dim<>" \n"];
		  

		 ]; (* If pos==={} *)
	      j++;
	     ];




	  WriteString[outfile,"Write(*,*) \"Calculating one-loop decays of "<>SPhenoForm[pD]<>" \" \n"];

	  WriteString[outfile,"kont = 0 \n"];
	  WriteString[outfile,ToString[SPhenoMass[VectorG]]<>" = MLambda \n"];
	  WriteString[outfile,ToString[SPhenoMass[VectorP]]<>" = MLambda \n"];
	  WriteString[outfile,ToString[SPhenoMassSq[VectorG]]<>" = MLambda**2 \n"];
	  WriteString[outfile,ToString[SPhenoMassSq[VectorP]]<>" = MLambda**2 \n\n"];

	  For[ii=1,ii<=Length[SA`Zfactors],
	      WriteString[outfile,ToString[SA`Zfactors[[ii]]]<>"c = Conjg("<>ToString[SA`Zfactors[[ii]]]<>")\n"];
	      ii++;];



	  WriteString[outfile,"\n ! Counter \n"];
	  If[pD===HiggsBoson || pD===PseudoScalar,
	     WriteString[outfile,"isave = "<>ToString[Position[Select[savedDecayInfos,#[[1]]===pD&][[1,2]],getSPhenoCoupling[decays[[1,3]]][[1,1]]][[1,1]]]<>"\n\n"];,
	     WriteString[outfile,"isave = 1 \n\n"];
	    ];

	  For[j=1,j<=Length[decays],
	      p1=decays[[j,1]];
	      p2=decays[[j,2]];

	      If[decays[[j,3]]=!=LOOP,WriteString[outfile,"If (.not.CalcLoopDecay_LoopInducedOnly) Then \n"];];
	      WriteString[outfile,"!---------------- \n"];
	      WriteString[outfile,"! "<>SPhenoForm[p1]<>" "<>SPhenoForm[p2]<>"\n"];
	      WriteString[outfile,"!---------------- \n\n"];

	      subZ={};
	      If[decays[[j,3]]=!=LOOP,
		 WriteString[outfile,"!Tree Level \n"];
		 pos=Position[SA`SavedInformationTreeDecay,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationTreeDecay,{pD,{p2,p1},a___}];];
		 If[pos=!={},
		    coups=SA`SavedInformationTreeDecay[[pos[[1,1]],4,2]];
		    masses=DeleteCases[SA`SavedInformationTreeDecay[[pos[[1,1]],4,1]],0.];
		    name=SA`SavedInformationTreeDecay[[pos[[1,1]],3]];
		   ];
		 (* MakeCall["Msquared_TreeSquared_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{},{"RMsqtree"<>name},sphenoLD]; *)
		 subZ=Table[coups[[i]]->ToExpression["Z"<>ToString[coups[[i]]]],{i,1,Length[coups]}];
		 If[FreeQ[{getBlank[p1],getBlank[p2]},VectorW],
		    subGZOS={};
		    subGZ={};
		    subG={};,
		    subGZOS=Table[getGBCoup[coups[[i]]]->ToExpression["GosZ"<>ToString[getGBCoup[coups[[i]]]]],{i,1,Length[coups]}];
		    subGZOS=Join[subGZOS,Table[cHPWlist[[i]]->ToExpression["GosZ"<>ToString[cHPWlist[[i]]]],{i,1,Length[cHPWlist]}]];
		    subGZ=Table[getGBCoup[coups[[i]]]->ToExpression["GZ"<>ToString[getGBCoup[coups[[i]]]]],{i,1,Length[coups]}];
		    subGZ=Join[subGZ,Table[cHPWlist[[i]]->ToExpression["GZ"<>ToString[cHPWlist[[i]]]],{i,1,Length[cHPWlist]}]];
		    subG=Table[getGBCoup[coups[[i]]]->ToExpression["G"<>ToString[getGBCoup[coups[[i]]]]],{i,1,Length[coups]}];
		    subG=Join[subG,Table[cHPWlist[[i]]->ToExpression["G"<>ToString[cHPWlist[[i]]]],{i,1,Length[cHPWlist]}]];

		    If[{getBlank[p1],getBlank[p2]}==={VectorW,VectorW},
		       subGZOS=Join[subGZOS,Table[getGBCoup1[coups[[i]]]->ToExpression["GosZ"<>ToString[getGBCoup1[coups[[i]]]]],{i,1,Length[coups]}]];
		       subGZ=Join[subGZ,Table[getGBCoup1[coups[[i]]]->ToExpression["GZ"<>ToString[getGBCoup1[coups[[i]]]]],{i,1,Length[coups]}]];
		       subG=Join[Table[getGBCoup1[coups[[i]]]->ToExpression["G"<>ToString[getGBCoup1[coups[[i]]]]],{i,1,Length[coups]}]];
		       subGZOS=Join[subGZOS,Table[getGBCoup2[coups[[i]]]->ToExpression["GosZ"<>ToString[getGBCoup2[coups[[i]]]]],{i,1,Length[coups]}]];
		       subGZ=Join[subGZ,Table[getGBCoup2[coups[[i]]]->ToExpression["GZ"<>ToString[getGBCoup2[coups[[i]]]]],{i,1,Length[coups]}]];
		       subG=Join[Table[getGBCoup2[coups[[i]]]->ToExpression["G"<>ToString[getGBCoup2[coups[[i]]]]],{i,1,Length[coups]}]];
		      ];
		   ];
		 WriteString[outfile,"  If (.not.ExternalZfactors) Then \n"];
		 MakeCall["Amplitude_Tree_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{},{"AmpTree"<>name},outfile];
		 WriteString[outfile,"  Else \n"];
		 MakeCall["Amplitude_Tree_"<>ModelName<>"_"<>name,Flatten[{ToExpression["Z"<>ToString[#]]&/@coups,masses}],{},{"AmpTree"<>name},outfile];
		 WriteString[outfile,"  End if \n"];

		 WriteString[outfile,"\n\n!Real Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysReal,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysReal,{pD,{p2,p1},a___}];];
		 If[pos=!={},
		    coups=getSPhenoCoupling[SA`SavedInformationOneLoopDecaysReal[[pos[[1,1]],4,3]]][[1]];
		    WriteString[outfile,"If (OSkinematics) Then \n"];
		    masses=DeleteCases[Intersection[SPhenoMassOS/@List@@SA`SavedInformationOneLoopDecaysReal[[pos[[1,1]],4,3]]],0.];
		    WriteString[outfile,"  If (.not.ExternalZfactors) Then \n"];
		    WriteString[outfile," ! OS and no Z-factors \n"];
		    name=SA`SavedInformationOneLoopDecaysReal[[pos[[1,1]],3]];
		    MakeCall["Gamma_Real_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{"MLambda","em","gs"},{"MRP"<>name,"MRG"<>name},outfile];
		    WriteString[outfile,"  Else \n"];
		    coups=ToExpression["Z"<>ToString[#]]&/@coups;
		    WriteString[outfile," ! OS and Z-factors \n"];
		    MakeCall["Gamma_Real_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{"MLambda","em","gs"},{"MRP"<>name,"MRG"<>name},outfile];
		    WriteString[outfile,"  End if \n"];

		    WriteString[outfile,"Else \n"];
		    coups=getSPhenoCoupling[SA`SavedInformationOneLoopDecaysReal[[pos[[1,1]],4,3]]][[1]];
		    masses=DeleteCases[Intersection[SPhenoMass/@List@@SA`SavedInformationOneLoopDecaysReal[[pos[[1,1]],4,3]]],0.];
		    WriteString[outfile," ! DR and no Z-factors \n"];
		    WriteString[outfile,"  If (.not.ExternalZfactors) Then \n"];
		    MakeCall["Gamma_Real_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{"MLambda","em","gs"},{"MRP"<>name,"MRG"<>name},outfile];
		    WriteString[outfile,"  Else \n"];
		    coups=ToExpression["Z"<>ToString[#]]&/@coups;
		    WriteString[outfile," ! DR and Z-factors \n"];
		    MakeCall["Gamma_Real_"<>ModelName<>"_"<>name,Flatten[{coups,masses}],{"MLambda","em","gs"},{"MRP"<>name,"MRG"<>name},outfile];
		    WriteString[outfile,"  End if \n"];
		    WriteString[outfile,"End if \n"]; 
		    ,
		    WriteString[outfile,"! Still missing\n"];
		   ];



		 WriteString[outfile,"\n\n!Self-energy Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p2,p1},a___}];];
		 If[pos=!={},(* Added by mark: if we don't generate the wavefunction factors ... *)
		    
		    masses=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,1]];
		    coups=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,2]];
		    ctcoups=ToExpression["ct"<>ToString[#]]&/@coups;
		    Zconst=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,3]];
		    name=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],3]];
		    (* MakeCall["Msquared_TREExWAVE_"<>ModelName<>"_"<>name,Flatten[{coups,ctcoups,masses,Zconst}],{},{"RMsqWave"<>name},sphenoLD]; *)
		    MakeCall["Amplitude_WAVE_"<>ModelName<>"_"<>name,Flatten[{coups,ctcoups,masses,Zconst}],{},{"AmpWave"<>name},outfile];
		   ];
		 
		 WriteString[outfile,"\n\n!Vertex Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p2,p1},a___}];];
		 masses=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,1]];
		 coups=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,2]];
		 name=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],3]];
		 (* MakeCall["Msquared_TREExVERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups}],{},{"RMsqVertex"<>name},sphenoLD]; *)
		 MakeCall["Amplitude_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups}],{},{"AmpVertex"<>name},outfile];

		 WriteString[outfile,"If (ShiftIRdiv) Then \n"];
		 MakeCall["Amplitude_IR_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups}],{},{"AmpVertexIRdr"<>name},outfile];

		 WriteString[outfile," If (ExternalZfactors) Then \n"];
		 WriteString[outfile, "  If (OSkinematics) Then \n"];
		 WriteString[outfile," ! OS and Z-factors \n"];
		 MakeCall["Amplitude_IR_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses/.subDRtoOS,coups/. subZ/. subGZOS}],{},{"AmpVertexIRos"<>name},outfile];
		 WriteString[outfile,"   Else \n"];
		 WriteString[outfile," ! DR and Z-factors \n"];
		 MakeCall["Amplitude_IR_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups /. subZ/. subGZ}],{},{"AmpVertexIRos"<>name},outfile];
		 WriteString[outfile," End if \n"];
		 WriteString[outfile," Else \n"];
		 WriteString[outfile, "  If (OSkinematics) Then \n"];
		 WriteString[outfile," ! OS and no Z-factors \n"];
		 MakeCall["Amplitude_IR_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses/.subDRtoOS,coups /. subG}],{},{"AmpVertexIRos"<>name},outfile];
		 WriteString[outfile,"   Else \n"];
		 WriteString[outfile," ! DR and no Z-factors \n"];
		 MakeCall["Amplitude_IR_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups}],{},{"AmpVertexIRos"<>name},outfile];
		 WriteString[outfile," End if \n"];
		 WriteString[outfile," End if \n"];

		 WriteString[outfile,"AmpVertex"<>name <>" = AmpVertex"<>name <>" -  AmpVertexIRdr"<>name<>"! +  AmpVertexIRos"<>name <>" ! Shift added later\n"];
		 WriteString[outfile,"End if \n"];,


		 (* Loop induced decays *)
		 WriteString[outfile,"If (LoopInducedDecaysOS) Then \n"];
		 WriteString[outfile,"\n\n!Self-energy Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p1,p2},a___}];
		 If[pos==={},      pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p2,p1},a___}];];
		 If[pos=!={},
		    masses=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,1]];
		    coups=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,2]];
		    ctcoups=ToExpression["ct"<>ToString[#]]&/@coups;
		    Zconst=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,3]];
		    name=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],3]];
		    WriteString[outfile," If (ExternalZfactors) Then \n"];
		    If[getType[pD]===F,
		       MakeCall["Amplitude_WAVE_"<>ModelName<>"_"<>name,Flatten[{ToExpression["Z"<>ToString[#]]&/@coups,ctcoups,masses/.subDRtoOS,Zconst}],{},{"AmpWave"<>name},outfile];,
		       MakeCall["Amplitude_WAVE_"<>ModelName<>"_"<>name,Flatten[{coups,ctcoups,masses/.subDRtoOS,Zconst}],{},{"AmpWave"<>name},outfile];
		      ];
		    WriteString[outfile," Else \n"];
		    MakeCall["Amplitude_WAVE_"<>ModelName<>"_"<>name,Flatten[{coups,ctcoups,masses/.subDRtoOS,Zconst}],{},{"AmpWave"<>name},outfile];
		    WriteString[outfile," End if \n"];
		   ];(* end If[pos=!={},*)

		 WriteString[outfile,"\n\n!Vertex Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p2,p1},a___}];];
		 masses=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,1]];
		 coups=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,2]];
		 name=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],3]];
		 WriteString[outfile," If (ExternalZfactors) Then \n"];
		 If[getType[pD]===F,
		    MakeCall["Amplitude_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses/.subDRtoOS,ToExpression["Z"<>ToString[#]]&/@coups}],{},{"AmpVertex"<>name},outfile];,
		    MakeCall["Amplitude_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses/.subDRtoOS,coups}],{},{"AmpVertex"<>name},outfile];
		   ];

		 WriteString[outfile," Else \n"];
		 MakeCall["Amplitude_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses/.subDRtoOS,coups}],{},{"AmpVertex"<>name},outfile];
		 WriteString[outfile," End if \n"];


		 WriteString[outfile,"Else \n"];
		 WriteString[outfile,"\n\n!Self-energy Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysWave,{pD,{p2,p1},a___}];];
		 If[pos=!={},(* Added by mark *)
		    
		    masses=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,1]];
		    coups=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,2]];
		    ctcoups=ToExpression["ct"<>ToString[#]]&/@coups;
		    Zconst=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],4,3]];
		    name=SA`SavedInformationOneLoopDecaysWave[[pos[[1,1]],3]];
		    MakeCall["Amplitude_WAVE_"<>ModelName<>"_"<>name,Flatten[{coups,ctcoups,masses,Zconst}],{},{"AmpWave"<>name},outfile];
		   ]; (* end If[pos=!={} *)
		 
		 WriteString[outfile,"\n\n!Vertex Corrections \n"];
		 pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p1,p2},a___}];
		 If[pos==={},pos=Position[SA`SavedInformationOneLoopDecaysVertex,{pD,{p2,p1},a___}];];
		 masses=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,1]];
		 coups=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],4,2]];
		 name=SA`SavedInformationOneLoopDecaysVertex[[pos[[1,1]],3]];
		 MakeCall["Amplitude_VERTEX_"<>ModelName<>"_"<>name,Flatten[{masses,coups}],{},{"AmpVertex"<>name},outfile];

		 WriteString[outfile,"End if \n"];
		 
		];

		 If[decays[[j,3]]=!=LOOP, 
		    WriteString[outfile,"\n\n ! Add Z-factors to have external fields on-shell \n"];
		    partinv=getPartInv[{AntiField[pD],p1,p2}];
		    WriteString[outfile," If (ExternalZfactors) Then \n"];
		    Switch[getType/@{pD,p1,p2},
			   {S,S,S}|{S,S,V}|{S,V,V},
			   If[getGen[pD]>1,
			      WriteString[outfile,"! Decaying particle \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      ind1r="(gt1";
			      ind2r="(gt2";
			      Switch[getVertexType[{pD,p1,p2}],
				     SSS,
				     ind1="(gt1";
				     ind2="(gt2";,
				     _,
				     ind1="(:,gt1";
				     ind2="(:,gt2";
				    ];
			      If[getGen[p1]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
			      If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
			      ind1=ind1<>")";ind2=ind2<>")";
			      If[getGen[p1]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
			      If[getGen[p2]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
			      ind1r=ind1r<>")";ind2r=ind2r<>")";

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[pD]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[pD]]<>"\n"]; 
			      WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];
			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];
			     ];

			   If[getGen[p1]>1,
			      WriteString[outfile,"! Final State 1 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      ind1r="(";
			      ind2r="(";
			      Switch[getVertexType[{pD,p1,p2}],
				     SSS,
				     ind1="(";
				     ind2="(";,
				     _,
				     ind1="(:,";
				     ind2="(:,";
				    ];
			      If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
			      ind1=ind1<>"gt1";ind2=ind2<>"gt2";
			      If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
			      ind1=ind1<>")";ind2=ind2<>")";
			      If[getGen[pD]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
			      ind1r=ind1r<>"gt1";ind2r=ind2r<>"gt2";
			      If[getGen[p2]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
			      ind1r=ind1r<>")";ind2r=ind2r<>")";

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p1]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p1]]<>"\n"]; 
			      WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,2]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,2]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];
			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];
			     ];

			   If[getGen[p2]>1,
			      WriteString[outfile,"! Final State 2 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      ind1r="(";
			      ind2r="(";
			      Switch[getVertexType[{pD,p1,p2}],
				     SSS,
				     ind1="(";
				     ind2="(";,
				     _,
				     ind1="(:,";
				     ind2="(:,";
				    ];
			      If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
			      If[getGen[p1]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
			      ind1=ind1<>"gt1";ind2=ind2<>"gt2";
			      ind1=ind1<>")";ind2=ind2<>")";
			      If[getGen[pD]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
			      If[getGen[p1]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
			      ind1r=ind1r<>"gt1";ind2r=ind2r<>"gt2";
			      ind1r=ind1r<>")";ind2r=ind2r<>")";

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p2]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p2]]<>"\n"]; 
			      WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,3]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,3]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];
			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];
			     ];,
			   {F,F,S} | {F,F,V},

			   If[getType/@{pD,p1,p2}==={F,F,S},
			      fin=2;,
			      fin=4;
			     ];

			   If[getGen[pD]>1 && getMixingMatrix[pD]=!={NoMatrix},
			      WriteString[outfile,"! Decaying particle \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[pD]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[pD]]<>"\n"]; 

			      For[jj=1,jj<=fin,
				  ind1="("<>ToString[jj]<>",gt1";
				  ind2="("<>ToString[jj]<>",gt2";
				  If[getGen[p1]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
				  If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
				  ind1=ind1<>")";ind2=ind2<>")";

				  WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[Mod[jj,2,1],1]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
				  WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[Mod[jj,2,1],1]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];
				  jj++;];
			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];

			     ];

			   If[getGen[p1]>1 && getMixingMatrix[p1]=!={NoMatrix},
			      WriteString[outfile,"! Final State 1 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p1]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p1]]<>"\n"]; 

			      For[jj=1,jj<=fin,
				  ind1="("<>ToString[jj]<>",";
				  ind2="("<>ToString[jj]<>",";

				  If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
				  ind1=ind1<>"gt1";ind2=ind2<>"gt2";
				  If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
				  ind1=ind1<>")";ind2=ind2<>")";

				  WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[Mod[jj,2,1],2]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
				  WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[Mod[jj,2,1],2]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];

				  jj++;];

			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];

			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];


			     ];

			   If[getGen[p2]>1 && getMixingMatrix[p2]=!={NoMatrix},
			      WriteString[outfile,"! Final State 2 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      ind1="(:,";
			      ind2="(:,";

			      If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
			      If[getGen[p1]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
			      ind1=ind1<>"gt1";ind2=ind2<>"gt2";
			      ind1=ind1<>")";ind2=ind2<>")";

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p2]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p2]]<>"\n"]; 
			      WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,3]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,3]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];

			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];
			     ];,



			   {S,F,F},
			   If[getGen[pD]>1 && getMixingMatrix[pD]=!={NoMatrix},
			      WriteString[outfile,"! Decaying particle \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      ind1="(:,gt1";
			      ind2="(:,gt2";
			      If[getGen[p1]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
			      If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
			      ind1=ind1<>")";ind2=ind2<>")";

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[pD]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[pD]]<>"\n"]; 
			      WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];

			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];

			     ];

			   If[getGen[p1]>1 && getMixingMatrix[p1]=!={NoMatrix},
			      WriteString[outfile,"! Final State 1 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p1]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p1]]<>"\n"]; 

			      For[jj=1,jj<=2,
				  ind1="("<>ToString[jj]<>",";
				  ind2="("<>ToString[jj]<>",";

				  If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
				  ind1=ind1<>"gt1";ind2=ind2<>"gt2";
				  If[getGen[p2]>1,ind1=ind1<>",:";ind2=ind2<>",:";];
				  ind1=ind1<>")";ind2=ind2<>")";

				  WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[jj,2]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
				  WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[jj,2]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];
				  jj++;];

			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];

			     ];

			   If[getGen[p2]>1 && getMixingMatrix[p2]=!={NoMatrix},
			      WriteString[outfile,"! Final State 2 \n"];
			      WriteString[outfile,"AmpWaveZ"<>name<>"=0._dp \n"];
			      WriteString[outfile,"AmpVertexZ"<>name<>"=0._dp \n"];

			      WriteString[outfile,"Do gt1=1,"<>ToString[getGen[p2]]<>"\n"];
			      WriteString[outfile,"  Do gt2=1,"<>ToString[getGen[p2]]<>"\n"]; 

			      For[jj=1,jj<=2,
				  ind1="("<>ToString[jj]<>",";
				  ind2="("<>ToString[jj]<>",";

				  If[getGen[pD]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
				  If[getGen[p1]>1,ind1=ind1<>":,";ind2=ind2<>":,";];
				  ind1=ind1<>"gt1";ind2=ind2<>"gt2";
				  ind1=ind1<>")";ind2=ind2<>")";
				  WriteString[outfile,"AmpWaveZ"<>name<>ind2<>" = AmpWaveZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFac[getMixingMatrix[partinv[[jj,3]]]]]<>"(gt2,gt1)*AmpWave"<>name<>ind1<>" \n"];
				  WriteString[outfile,"AmpVertexZ"<>name<>ind2<>"= AmpVertexZ"<>name<>ind2<>"+"<>SPhenoForm[SPhenoZFac[getMixingMatrix[partinv[[jj,3]]]]]<>"(gt2,gt1)*AmpVertex"<>name<>ind1<>" \n"];


				  jj++;];


			      WriteString[outfile," End Do \n"];
			      WriteString[outfile,"End Do \n"];
			      WriteString[outfile,"AmpWave"<>name<>"=AmpWaveZ"<>name<>" \n"];
			      WriteString[outfile,"AmpVertex"<>name<>"= AmpVertexZ"<>name<>"\n"];
			     ];,

			   _,
			   WriteString[outfile,"! not yet done \n"];

			  ];
		    WriteString[outfile,"End if\n"];


		    WriteString[outfile,"If (ShiftIRdiv) Then \n"];
		    WriteString[outfile,"AmpVertex"<>name <>" = AmpVertex"<>name <>"  +  AmpVertexIRos"<>name <>"\n"];
		    WriteString[outfile,"End if\n \n"];
		   ];

		 
		 (* -------------------------- SUM THE AMPLITUDE --------------------------------------------*)
		 
		 WriteString[outfile,"\n\n !Square the amplitude \n"];

		 WriteString[outfile,"If (DebugLoopDecays) Then \n"];
		 WriteString[outfile,"Write(*,*) \"------------------ "<>ToString[pD]<>"->"<>ToString[p1]<>" "<>ToString[p2]<>" -----------------------\" \n"];
		 WriteString[outfile,"End if \n"];

		 If[decays[[j,3]]=!=LOOP,
		    WriteString[outfile,"If (.not.SquareFullAmplitudeDecays) Then \n"];
		    WriteString[outfile," AmpSum"<>name <>" = AmpTree"<>name <>" \n"];
		    WriteString[outfile," AmpSum2"<>name <>" = AmpTree"<>name <>" + 2._dp*AmpWave"<>name<>" + 2._dp*AmpVertex"<>name <>"  \n"];
		    WriteString[outfile,"Else \n"];
		    WriteString[outfile," AmpSum"<>name <>" = AmpTree"<>name <>" + AmpWave"<>name<>" + AmpVertex"<>name <>"\n"];
		    WriteString[outfile," AmpSum2"<>name <>" = AmpTree"<>name <>" + AmpWave"<>name<>" + AmpVertex"<>name <>" \n"];
		    WriteString[outfile,"End If \n"];

		    WriteString[outfile,"If (OnlyTreeLevelContributions) Then \n"];
		    WriteString[outfile," AmpSum"<>name <>" = AmpTree"<>name <>"\n"];
		    WriteString[outfile," AmpSum2"<>name <>" = AmpTree"<>name  <>" \n"];
		    WriteString[outfile,"End if \n"];

		    ,

		    (* Loop induced decays *)
		    WriteString[outfile,"If (OnlyTreeLevelContributions) Then \n"];
		    WriteString[outfile," AmpSum"<>name <>" = 0._dp \n"];
		    WriteString[outfile," AmpSum2"<>name <>" = 0._dp  \n"];
		    WriteString[outfile,"Else \n"];
		    
		    WriteString[outfile," AmpSum"<>name <>" = AmpVertex"<>name <>" + AmpWave"<>name<>"\n"];
		    WriteString[outfile," AmpSum2"<>name <>" = AmpVertex"<>name <>" + AmpWave"<>name<>" \n"];
		    (* MARK : removed wavefn. contributions for loop induced, but now reverted
		    WriteString[outfile," AmpSum"<>name <>" = AmpVertex"<>name"\n"];
		    WriteString[outfile," AmpSum2"<>name <>" = AmpVertex"<>name"\n"];
		       *)
		    WriteString[outfile,"End If \n"];
		   ];


		 (* -------------------------- SQUARE THE AMPLITUDE AND CALCULATE WIDTHS --------------------------------------------*)

		 
		 dimIn={};
		 If[getGen[pD]>1,
		    WriteString[outfile,"Do gt1=1,"<>ToString[getGen[pD]]<>"\n"];dimIn=Join[dimIn,{gt1}];,
		    WriteString[outfile,"gt1=1 \n"];
		   ];

		 If[getVertexType[{pD,p1,p2}]===SSS,
		    st="";,st="(:)"
		   ];

		 WriteString[outfile,"i4 = isave \n"];
		 If[getGen[p1]>1 || getGenSPhenoStart[p1]>1,WriteString[outfile,"  Do gt2="<>ToString[getGenSPhenoStart[p1]]<>","<>ToString[getGen[p1]]<>"\n"];];If[getGen[p1]>1 ,dimIn=Join[dimIn,{gt2}];];
		 If[getGen[p2]>1 || getGenSPhenoStart[p2]>1,WriteString[outfile,"    Do gt3="<>If[p1===p2,"gt2",ToString[getGenSPhenoStart[p2]]]<>","<>ToString[getGen[p2]]<>"\n"];];If[getGen[p2]>1 ,dimIn=Join[dimIn,{gt3}];];
		 dimIn=StringReplace[StringReplace[ToString[dimIn],{"{}"->""}],{"{"->"(","}"->")"}];
		 WriteString[outfile,"If (((OSkinematics).and.("<>SPhenoMassOS[pD,gt1]<>".gt.("<>SPhenoMassOS[p1,gt2]<>"+"<>SPhenoMassOS[p2,gt3]<>"))).or.((.not.OSkinematics).and.("<>SPhenoMass[pD,gt1]<>".gt.("<>SPhenoMass[p1,gt2]<>"+"<>SPhenoMass[p2,gt3]<>")))) Then \n"];

		 (*
		    If[getVertexType[{pD,p1,p2}]===SVV,
		    WriteString[sphenoLD,"  AmpSq"<>name<>dimIn<>" = 0._dp \n"];,
		    *)
		 (* ------------------------- DEBUG CODE: OUTPUT INDIVIDUAL PIECES ----------------------------*)
		 
		 If[decays[[j,3]]=!=LOOP,
		    WriteString[outfile," If (DebugLoopDecays) Then \n"];
		    WriteString[outfile,"  Write(*,*) "<>StringReplace[dimIn,{"("->"",")"->""}]<>" \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = AmpTree"<>name <>"\n"];
		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "End if  \n"];

		    WriteString[outfile,"  Write(*,*) \"TREE x TREE: \",AmpSq"<>name<>dimIn<>" \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = 2._dp*AmpWave"<>name<>"\n"];
		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "End if  \n"];

		    WriteString[outfile,"  Write(*,*) \"TREE x WAVE: \",AmpSq"<>name<>dimIn<>" \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = 2._dp*AmpVertex"<>name <>"\n"];
		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "End if  \n"];

		    WriteString[outfile,"  Write(*,*) \"TREE x VERTEX: \",AmpSq"<>name<>dimIn<>" \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = AmpTree"<>name <>" + 2._dp*AmpWave"<>name<>" + 2._dp*AmpVertex"<>name <>"\n"];
		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "End if  \n"];
		    WriteString[outfile,"  Write(*,*) \"TREE x (TREE+WAVE+VERTEX): \",AmpSq"<>name<>dimIn<>" \n"];
		    WriteString[outfile," End if \n"];
		   ];


		 (* ------------------------------- ACTUALLY SQUARE THE AMPLITUDE HERE ------------------------*)
		 

		 If[decays[[j,3]]=!=LOOP,
		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = AmpTree"<>name <>"\n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    (*WriteString[outfile, "  AmpSqTree"<>name<>dimIn<>" = ("<>SPhenoForm[CalculateColorFactorDecay[AntiField[pD],p1,p2]]<>")*AmpSq"<>name<>dimIn<>"  \n"];*)
		    WriteString[outfile, "  AmpSqTree"<>name<>dimIn<>" = AmpSq"<>name<>dimIn<>"  \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = + 2._dp*AmpWave"<>name<>" + 2._dp*AmpVertex"<>name <>"\n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "  AmpSq"<>name<>dimIn<>" = AmpSq"<>name<>dimIn<>" + AmpSqTree"<>name<>dimIn<>"  \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = AmpTree"<>name <>"\n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    (*WriteString[outfile, "  AmpSqTree"<>name<>dimIn<>" = ("<>SPhenoForm[CalculateColorFactorDecay[AntiField[pD],p1,p2]]<>")*AmpSq"<>name<>dimIn<>"  \n"];*)
		    WriteString[outfile, "  AmpSqTree"<>name<>dimIn<>" = AmpSq"<>name<>dimIn<>"  \n"];
		    WriteString[outfile,"  AmpSum2"<>name <>" = + 2._dp*AmpWave"<>name<>" + 2._dp*AmpVertex"<>name <>"\n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "  AmpSq"<>name<>dimIn<>" = AmpSq"<>name<>dimIn<>" + AmpSqTree"<>name<>dimIn<>"  \n"];
		    WriteString[outfile, "End if  \n"];

		    ,

		    WriteString[outfile, "If (OSkinematics) Then \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "Else  \n"];
		    WriteString[outfile,"  Call SquareAmp_"<>ToString[getType[pD]]<>"to"<>ToString[getType[p1]]<>ToString[getType[p2]]<>StringReplace["("<>SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"AmpSum"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSum2"<>name<>StringReplace[st<>dimIn,")("->","]<>",AmpSq"<>name<>dimIn<>") \n"];
		    WriteString[outfile, "End if  \n"];
		   ];

		 (* ]; *)
		 WriteString[outfile,"Else  \n"];
		 WriteString[outfile,"  AmpSq"<>name<>dimIn<>" = 0._dp \n"];
		 WriteString[outfile,"End if  \n"];
		 WriteString[outfile,"\n! Calculate Partial widths \n"];
		 (* Helicity factor *)

		 Switch[getVertexType[{pD,p1,p2}],
			FFS, If[getType[pD]===F,WriteString[outfile,"helfactor = 2._dp \n"];,WriteString[outfile,"helfactor = 4._dp \n"];];,
			FFV, WriteString[outfile,"helfactor = 2._dp \n"];,
			_, WriteString[outfile,"helfactor = 1._dp \n"];
		       ];
		 If[p1===p2 && getGen[p1]>1,
		    WriteString[outfile,"If (gt2.ne.gt3) helfactor = 2._dp*helfactor \n"];
		   ];


		 (*
		    (* Colour factor *)
		 If[decays[[j,3]]=!=LOOP,
		    factor=CalculateColorFactorDecay[AntiField[pD],p1,p2]*SymmFactor2BodyDecay[pD,p1,p2];,
		    (* Check colour factor! *)
		    factor=SymmFactor2BodyDecay[pD,p1,p2];
		   ];
		 *)
		 (*factor=SymmFactor2BodyDecay[pD,p1,p2];*)
		 
		 
		 (* MARK 170502 : *)
		 (*
		 factor=decays[[j,4]]*decays[[j,5]];
		 *)
		 (*
		 Print["Factor for: ",{pD,p1,p2},": ",factor];
		 *)


		 (*
		 If[decays[[j,3]]=!=LOOP,
		    factor=decays[[j,5]],
		    (* Check colour factor! *)
		    factor=decays[[j,4]]*decays[[j,5]]; (* since the loop amps don't have the colour factor already calculated in a tree amplitude*)
		   ];
		 *)
		 
		(*Print["Factor for: ",{pD,p1,p2},": ",factor];*)


		 
		 (* symmetry factor *)
		 symfactor=decays[[j,5]];
		 
		 Switch[getType[pD],
			S | V,
			If[AntiField[pD]===pD,
			   If[(AntiField[p1]=!=p1 || AntiField[p2]=!=p2) && AntiField[p1]=!=p2,
			      symfactor = 2*symfactor;
			     ];
			  ];,
			F,
			If[AntiField[pD]===pD,symfactor = 2*symfactor;];
		       ];

		 Switch[getVertexType[{pD,p1,p2}],
			SVV,symfactor=2 symfactor;,
			_,symfactor=symfactor;
		       ];
		 factor=decays[[j,4]]*symfactor;
		 If[Head[factor]===Integer,factor=factor*1.0];
		 If[Head[symfactor]===Integer,symfactor=symfactor*1.0];
		 
		 WriteString[outfile,"If (AmpSq"<>name<>dimIn<>".le.0._dp) Then \n"];
		 WriteString[outfile,"  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) = 0._dp \n"];
		 WriteString[outfile,"Else \n"];

		 WriteString[outfile, "If (OSkinematics) Then \n"];
		 WriteString[outfile,"  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) = "<>SPhenoForm[factor]<>"*GammaTPS("<>StringReplace[SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"->"._dp,"}]<>"helfactor*AmpSq"<>name<>dimIn<>")\n"];
		 WriteString[outfile, "Else \n"];
		 WriteString[outfile,"  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) = "<>SPhenoForm[factor]<>"*GammaTPS("<>StringReplace[SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"->"._dp,"}]<>"helfactor*AmpSq"<>name<>dimIn<>")\n"];
		 WriteString[outfile, "End if \n"];

		 WriteString[outfile, "If ((Abs(MRP"<>name<>dimIn<>").gt.1.0E-20_dp).or.(Abs(MRG"<>name<>dimIn<>").gt.1.0E-20_dp)) Then \n"];
		 (*
		    WriteString[sphenoLD, " If (.not.SimplisticLoopDecays) Then \n"];
		    WriteString[sphenoLD, "  phasespacefactor = GammaTPS("<>StringReplace[SPhenoMassOS[pD,gt1]<>","<>SPhenoMassOS[p1,gt2]<>","<>SPhenoMassOS[p2,gt3]<>",",{".,"\[Rule]"._dp,"}]<>"1._dp)/GammaTPS("<>StringReplace[SPhenoMass[pD,gt1]<>","<>SPhenoMass[p1,gt2]<>","<>SPhenoMass[p2,gt3]<>",",{".,"\[Rule]"._dp,"}]<>"1._dp) \n"];
		    WriteString[sphenoLD, " Else  \n"];
		    WriteString[sphenoLD, "  phasespacefactor = 1._dp \n"];
		    WriteString[sphenoLD, " End if \n"];
		    *)
	      WriteString[outfile, "  phasespacefactor = 1._dp \n"];
	      WriteString[outfile, "End if \n"];




	      WriteString[outfile," If (DebugLoopDecays) Write(*,*) \"virtual\", gP1L"<>SPhenoForm[pD]<>"(gt1,i4) \n"];
	      If[decays[[j,3]]=!=LOOP,
		 WriteString[outfile," ! Adding real corrections \n"];
		 WriteString[outfile, "If ((Abs(MRP"<>name<>dimIn<>").gt.1.0E-20_dp).or.(Abs(MRG"<>name<>dimIn<>").gt.1.0E-20_dp)) Then \n"];
		 WriteString[outfile," If (.not.OnlyTreeLevelContributions) Then \n"];
		 Switch[getVertexType[{pD,p1,p2}],
			SSV | SVV,
			WriteString[outfile,"   If (DebugLoopDecays) Write(*,*) \"real\", phasespacefactor*"<>SPhenoForm[symfactor]<>"*helfactor*(MRP"<>name<>dimIn<>" + MRG"<>name<>dimIn <>") \n"];
			WriteString[outfile,"  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) = gP1L"<>SPhenoForm[pD]<>"(gt1,i4) + phasespacefactor*"<>SPhenoForm[symfactor]<>"*helfactor*(MRP"<>name<>dimIn<>" + MRG"<>name<>dimIn <>")\n"];,
			_,
			WriteString[outfile,"   If (DebugLoopDecays) Write(*,*) \"real\", phasespacefactor*"<>SPhenoForm[symfactor/2]<>"*helfactor*(MRP"<>name<>dimIn<>" + MRG"<>name<>dimIn <>") \n"];
			WriteString[outfile,"  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) = gP1L"<>SPhenoForm[pD]<>"(gt1,i4) + phasespacefactor*"<>SPhenoForm[symfactor/2]<>"*helfactor*(MRP"<>name<>dimIn<>" + MRG"<>name<>dimIn <>")\n"];
		       ];

		 WriteString[outfile,"   If (DebugLoopDecays) Write(*,*) \"sum\",  gP1L"<>SPhenoForm[pD]<>"(gt1,i4) \n"];
		 WriteString[outfile,"  End if \n"];
		 WriteString[outfile,"End if \n"];
		];
	      WriteString[outfile,"End if \n"];
	      WriteString[outfile,"i4=i4+1"];
	      WriteString[outfile,"\n\n"];


	      If[getGen[p2]>1 || getGenSPhenoStart[p2]>1,WriteString[outfile,"    End do\n"];];
	      If[getGen[p1]>1 || getGenSPhenoStart[p1]>1,WriteString[outfile,"  End do\n"];];
	      If[getGen[pD]>1,
		 WriteString[outfile,"If (gt1.eq."<>ToString[getGen[pD]]<>") isave = i4 \n"];
		 WriteString[outfile,"End do\n"];,
		 WriteString[outfile,"isave = i4 \n"];
		];

	      If[decays[[j,3]]=!=LOOP,WriteString[outfile,"End If \n"];];
	      j++;
	     ];

	  WriteString[outfile,"End Subroutine OneLoopDecay_"<>SPhenoForm[pD]<>"\n\n"];
	  WriteString[outfile,"End Module Wrapper_OneLoopDecay_"<>SPhenoForm[pD]<>"_"<>ModelName<>"\n"];
	  Close[outfile];
	  i++;
	 ];   (* For[i=1,... on line 536 *)
]; (*generatecalculateoneloopwidths *)

FreeSkipFields[process_,fields_]:=
    Block[{i,res},
	  res=True;
	  For[i=1,i<=Length[fields],
	      If[FreeQ[process,fields[[i]]]==False,
		 res=False;
		];
	      i++;];
	  Return[res];
	 ];


(* ::Input::Initialization:: *)
(*
InitCounterTerms:=Block[{i,j,k,dim,ct},
SA`ListCounterTerms={};
For[i=1,i\[LessEqual]Length[listAllParametersAndVEVs],
dim=getDimSPheno[listAllParametersAndVEVs[[i]]];
ct=CounterTerm[listAllParametersAndVEVs[[i]]];
SA`ListCounterTerms = Join[SA`ListCounterTerms,{ct}];
Switch[Length[dim],
0,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{},{}}}];,
1,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen},dim}}];,
2,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen},dim}}];,
3,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen,gen},dim}}];
];
If[FreeQ[realVar,listAllParametersAndVEVs[[i]]]\[Equal]False,realVar=Join[realVar,{ct}];];
i++;];
];
*)
CounterTerm[x_]:=Switch[Head[x],
Sin,Return[ToExpression["dSin"<>SPhenoForm[x[[1]]]]];,
Cos,Return[ToExpression["dCos"<>SPhenoForm[x[[1]]]]];,
Tan,Return[ToExpression["dTan"<>SPhenoForm[x[[1]]]]];,
_,Return[ToExpression["d"<>SPhenoForm[x]]];];

 InitSelfEnergies[Eigenstates_]:=Block[{i,j,k,dim,dimS,par,fields,ind,pos,nameDR,nameOS},
SA`SelfEnergieNames={};
SA`WaveFunctionNames={};

fields=Select[Select[Particles[Eigenstates],(#[[4]]===V || #[[4]]===S ||#[[4]]===F)&],(FreeQ[massless,#[[1]]/.diracSubBack[EWSB]] || getType[#[[1]]]===V || getType[#[[1]]]===F)&];

For[i=1,i<=Length[fields],
dim=fields[[i,3]];
par=ToExpression["Zf"<>ToString[fields[[i,1]]]];
If[dim===1,
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];,
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
];
SA`WaveFunctionNames=Join[SA`WaveFunctionNames,{par}];
i++;];

For[i=1,i<=Length[CorrectionListVectorVector[EWSB]],
par=ToExpression["Zf"<>ToString[CorrectionListVectorVector[EWSB][[i,1,1]]]<>ToString[CorrectionListVectorVector[EWSB][[i,1,2]]]];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
SA`WaveFunctionNames=Join[SA`WaveFunctionNames,{par}];

par=ToExpression["Zf"<>ToString[CorrectionListVectorVector[EWSB][[i,1,2]]]<>ToString[CorrectionListVectorVector[EWSB][[i,1,1]]]];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
SA`WaveFunctionNames=Join[SA`WaveFunctionNames,{par}];
i++;];


For[k=1,k<=Length[SA`LoopMassesParticle], 
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
dim=getGen[SA`LoopMassesParticle[[k]]];
dimS = ToString[getGen[SA`LoopMassesParticle[[k]]]];
dimS = "("<>dimS<>","<>dimS<>","<>dimS<>")";
Switch[ListTree[[i,4]],
ScalarMass,
par = ToExpression["Pi"<>ToString[ListMassES[[i,1]]]];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
par = ToExpression["DerPi"<>ToString[ListMassES[[i,1]]]];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];,

FermionMassSymm,
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];

par = ToExpression["DerSigmaLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];,



FermionMassNonSymm,
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];

par = ToExpression["DerSigmaLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaSRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
par = ToExpression["DerSigmaRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation,generation},{dim,dim,dim}}}];
];
k++;];

 For[i=1,i<=Length[listNotMixedMasses],
nameCurrent=ToString[listNotMixedMasses[[i,1]]];
nameMass=listNotMixedMasses[[i,2]];
particleCurrent=listNotMixedMasses[[i,1]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";
dim=getGen[particleCurrent];
dimS = "("<>ToString[getGen[particleCurrent]]<>","<>ToString[getGen[particleCurrent]]<>")";
If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2,
Switch[listNotMixedMasses[[i,6]],
ScalarMass,
NothingToDo;
(* WriteString[sphenoLD,"Complex(dp) :: Pi"<>nameCurrent<>dimS<>"\n"]; *),

FermionMassSymm,
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];

par = ToExpression["DerSigmaLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];,

FermionMassNonSymm,
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];

par = ToExpression["DerSigmaLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSLir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaSRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["DerSigmaRir"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
 ];,

If[getType[particleCurrent]===F,
dim=getGen[particleCurrent];
If[dim===1,
gInd={};
dInd={};,
gInd={generation,generation,generation};
dInd={dim,dim,dim};
];
(*
If[AntiField[particleCurrent]===particleCurrent,
par = ToExpression["Sigma"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par = ToExpression["DerSigma"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];,
*)
par = ToExpression["SigmaL"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["SigmaSL"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["SigmaSR"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["SigmaR"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaL"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaSL"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaSR"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaR"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];

par = ToExpression["DerSigmaLir"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaSLir"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaSRir"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
par = ToExpression["DerSigmaRir"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,gInd,dInd}}];
(*]; *),
par = ToExpression["Pi"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par = ToExpression["DerPi"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
];
];
i++;]; 

(* Extra self-energies for photons *)
If[FreeQ[listNotMixedMasses,VectorP]===False,
par=ToExpression["Pi"<>SPhenoForm[VectorP]<>"light0"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par=ToExpression["DerPi"<>SPhenoForm[VectorP]<>"light0"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["Pi"<>SPhenoForm[VectorP]<>"heavy0"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par=ToExpression["DerPi"<>SPhenoForm[VectorP]<>"heavy0"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["Pi"<>SPhenoForm[VectorP]<>"lightMZ"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par=ToExpression["DerPi"<>SPhenoForm[VectorP]<>"lightMZ"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["Pi"<>SPhenoForm[VectorP]<>"heavyMZ"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par=ToExpression["DerPi"<>SPhenoForm[VectorP]<>"heavyMZ"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

];

For[i=1,i<=Length[CorrectionListVectorVector[Eigenstates]], 
par=ToExpression["Pi"<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,1]]]<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,2]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["DerPi"<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,1]]]<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,2]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["Pi"<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,2]]]<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];

par=ToExpression["DerPi"<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,2]]]<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
i++;];

For[i=1,i<=Length[CorrectionListVectorScalar[Eigenstates]],
If[getGen[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]>1,
ind={generation,generation,generation};
dim={getGen[CorrectionListVectorScalar[Eigenstates][[i,1,2]]],getGen[CorrectionListVectorScalar[Eigenstates][[i,1,2]]],getGen[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]};,
ind={};
dim={};
];
par=ToExpression["Pi"<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,1]]]<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,ind,dim}}];

par=ToExpression["DerPi"<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,1]]]<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,ind,dim}}];

par=ToExpression["Pi"<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,ind,dim}}];

par=ToExpression["DerPi"<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,2]]]<>SPhenoForm[CorrectionListVectorScalar[Eigenstates][[i,1,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,ind,dim}}];
i++;];

SA`SelfEnergieNamesDR={};
SA`SelfEnergieNamesOS={};

For[i=1,i<=Length[SA`SelfEnergieNames],
pos=Position[SPhenoParameters,SA`SelfEnergieNames[[i]]][[1,1]];
nameDR=ToExpression[ToString[SA`SelfEnergieNames[[i]]]<>"DR"];
nameOS=ToExpression[ToString[SA`SelfEnergieNames[[i]]]<>"OS"];

SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.SA`SelfEnergieNames[[i]]->nameDR]; 
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.SA`SelfEnergieNames[[i]]->nameOS];

SA`SelfEnergieNamesDR=Join[SA`SelfEnergieNamesDR,{nameDR}];
SA`SelfEnergieNamesOS=Join[SA`SelfEnergieNamesOS,{nameOS}];

i++;];

]; 

WriteSPhenoLoopDecys[Eigenstates_]:=Block[{i,k,dim,par,pD,length,pos,inputname,matrices,Zinputname}, 




Print["  Writing main function"];
MakeSubroutineTitle["CalculateOneLoopDecays",Flatten[{SA`massesOnlyInput,listVEVs,listAllParameters}],StringJoin["gP1L",#]&/@SPhenoForm/@SA`ParticlesDecays1Loop,{"epsI","deltaM","kont"},sphenoLD];
WriteString[sphenoLD,"Implicit None \n"];
WriteString[sphenoLD,"Real(dp), Intent(in) :: epsI, deltaM \n"];
WriteString[sphenoLD,"Integer, Intent(inout) :: kont \n"];
WriteString[sphenoLD,"Real(dp) :: MLambda, em, gs, vSM, sinW2, g1SM, g2SM \n"];
WriteString[sphenoLD,"Integer :: divset, i1 \n"];
WriteString[sphenoLD,"Complex(dp) :: divvalue, YuSM(3,3), YdSM(3,3), YeSM(3,3) \n"];

MakeVariableList[listAllParameters,",Intent(inout)",sphenoLD];
MakeVariableList[listVEVs,",Intent(inout)",sphenoLD];
MakeVariableList[SA`ListCounterTerms,"",sphenoLD];
MakeVariableList[SA`WaveFunctionNames,"",sphenoLD];
MakeVariableList[SA`massesOnlyInput,",Intent(in)",sphenoLD];


WriteString[sphenoLD,"Real(dp) :: p2, q2, q2_save \n"];
MakeVariableList[NewMassParameters,"",sphenoLD];
MakeVariableList[namesColoredQuartics,"",sphenoLD];
MakeVariableList[namesAllreallyAll,"",sphenoLD];
MakeVariableList[namesAllCT,"",sphenoLD];
MakeVariableList[SA`Zfactors,"",sphenoLD];
MakeVariableList[SA`ZCouplings,"",sphenoLD];
MakeVariableList[SA`GBcouplings,"",sphenoLD];
MakeVariableList[SA`GBZcouplings,"",sphenoLD];
MakeVariableList[SA`GBosZcouplings,"",sphenoLD];



(* MakeVariableList[DnamesAllreallyAll,"",sphenoLD]; *)

 

For[i=1,i<=Length[SA`ParticlesDecays1Loop],
pos=Position[BR2,SA`ParticlesDecays1Loop[[i]]][[1,1]];
WriteString[sphenoLD,"Real(dp), Intent(out) :: gP1L"<>SPhenoForm[SA`ParticlesDecays1Loop[[i]]]<>"("<>ToString[getGen[SA`ParticlesDecays1Loop[[i]]]]<>","<>ToString[BR2[[pos]][[2]]]<>") \n"];
i++;];


If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoLD];
];


WriteString[sphenoLD, "Iname = Iname + 1 \n"];
WriteString[sphenoLD, "NameOfUnit(Iname) = 'CalculateOneLoopDecays'\n \n"];
WriteString[sphenoLD,"Write(*,*) \"Calculating one loop decays\" \n"];

WriteString[sphenoLD,"! Regulator mass for gluon/photon \n"];
WriteString[sphenoLD,"MLambda = Mass_Regulator_PhotonGluon \n"];

WriteString[sphenoLD,"divset=SetDivonlyAdd(INT(divonly_save)) \n"];
WriteString[sphenoLD,"divvalue=SetDivergenceAdd(divergence_save) \n"];

WriteString[sphenoLD,"If (.not.CalculateOneLoopMasses) Then \n"];
WriteString[sphenoLD," If (OSkinematics) Then \n"];
WriteString[sphenoLD,"  Write(*,*) \"Loop masses not calculated: tree-level masses used for kinematics\" \n"];
WriteString[sphenoLD,"  OSkinematics = .false. \n"];
WriteString[sphenoLD," End if\n"];
WriteString[sphenoLD," If (ExternalZfactors) Then \n"];
WriteString[sphenoLD,"  Write(*,*) \"Loop masses not calculated: no U-factors are applied\" \n"];
WriteString[sphenoLD,"  ExternalZfactors = .false. \n"];
WriteString[sphenoLD," End if\n"];
WriteString[sphenoLD,"End if\n\n"];


WriteString[sphenoLD,"If (Extra_scale_loopDecays) Then \n"];
WriteString[sphenoLD,"q2_save = GetRenormalizationScale() \n"];
WriteString[sphenoLD,"q2 = SetRenormalizationScale(scale_loopdecays **2) \n"];
WriteString[sphenoLD,"End if \n"];

WriteString[sphenoLD,"If ((OSkinematics).or.(ExternalZfactors)) ShiftIRdiv = .true. \n"];

WriteString[sphenoLD,"If (ewOSinDecays) Then \n"];

WriteString[sphenoLD,"sinW2=1._dp-mW2/mZ2 \n"];
(* WriteString[sphenoLD,"vSM=1/Sqrt((G_F*Sqrt(2._dp))) \n"]; *)
WriteString[sphenoLD,"g1SM=sqrt(4*Pi*Alpha_MZ/(1-sinW2)) \n"];
WriteString[sphenoLD,"g2SM=sqrt(4*Pi*Alpha_MZ/Sinw2) \n"];
WriteString[sphenoLD,"vSM=sqrt(mz2*4._dp/(g1SM**2+g2SM**2)) \n"];

For[i=1,i<=Length[DEFINITION[MatchingConditions]],
If[FreeQ[{hyperchargeCoupling,leftCoupling,VEVSM,VEVSM1,VEVSM2},DEFINITION[MatchingConditions][[i,1]]]==False ,
WriteString[sphenoLD,SPhenoForm[DEFINITION[MatchingConditions][[i,1]]]<>"="<>SPhenoForm[DEFINITION[MatchingConditions][[i,2]]]<>" \n"];
];
i++;];

WriteString[sphenoLD," If (yukOSinDecays) Then !! Allow OS Yukawas only together with vSM \n"];

WriteString[sphenoLD,"    YuSM = 0._dp \n"];
WriteString[sphenoLD,"    YdSM = 0._dp \n"];
WriteString[sphenoLD,"    YuSM = 0._dp \n"];

WriteString[sphenoLD,"   Do i1=1,3 \n"];
WriteString[sphenoLD,"      YuSM(i1,i1)=sqrt(2._dp)*mf_u(i1)/vSM \n"];
WriteString[sphenoLD,"      YeSM(i1,i1)=sqrt(2._dp)*mf_l(i1)/vSM \n"];
WriteString[sphenoLD,"      YdSM(i1,i1)=sqrt(2._dp)*mf_d(i1)/vSM \n"];
WriteString[sphenoLD,"    End Do \n"];

WriteString[sphenoLD,"   If(GenerationMixing) Then \n"];
WriteString[sphenoLD,"    YuSM = Transpose(Matmul(Transpose(CKM),Transpose(YuSM))) \n"];
WriteString[sphenoLD,"   End if \n"];

For[i=1,i<=Length[DEFINITION[MatchingConditions]],
If[FreeQ[{UpYukawa,DownYukawa,ElectronYukawa},DEFINITION[MatchingConditions][[i,1]]]==False ,
WriteString[sphenoLD,SPhenoForm[DEFINITION[MatchingConditions][[i,1]]]<>"="<>SPhenoForm[DEFINITION[MatchingConditions][[i,2]]]<>" \n"];
];
i++;];

WriteString[sphenoLD," End if \n"];
WriteString[sphenoLD,"End if \n"];




WriteString[sphenoLD,"! -------------------------------------------- \n"];
WriteString[sphenoLD,"! General information needed in the following \n"];
WriteString[sphenoLD,"! -------------------------------------------- \n\n"];
WriteString[sphenoLD,"! DR parameters \n"];
WriteTadpoleSolution[sphenoLD];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},sphenoLD];

WriteString[sphenoLD,"! Stabilize numerics \n"];
For[i=1,i<=Length[PART[S]],
If[FreeQ[massless,PART[S][[i,1]]],
If[getGen[PART[S][[i,1]]]>1,
WriteString[sphenoLD,"Where (Abs("<>SPhenoForm[SPhenoMass[PART[S][[i,1]]]]<>").lt.1.0E-15_dp) "<>SPhenoForm[SPhenoMass[PART[S][[i,1]]]]<>"=0._dp\n"];
WriteString[sphenoLD,"Where (Abs("<>SPhenoForm[SPhenoMassSq[PART[S][[i,1]]]]<>").lt.1.0E-30_dp) "<>SPhenoForm[SPhenoMassSq[PART[S][[i,1]]]]<>"=0._dp\n"];,
WriteString[sphenoLD,"If (Abs("<>SPhenoForm[SPhenoMass[PART[S][[i,1]]]]<>").lt.1.0E-15_dp) "<>SPhenoForm[SPhenoMass[PART[S][[i,1]]]]<>"=0._dp\n"];
WriteString[sphenoLD,"If (Abs("<>SPhenoForm[SPhenoMassSq[PART[S][[i,1]]]]<>").lt.1.0E-30_dp) "<>SPhenoForm[SPhenoMassSq[PART[S][[i,1]]]]<>"=0._dp\n"];
];
];
i++;];

For[i=1,i<=Length[PART[F]],
If[FreeQ[massless,PART[F][[i,1]]],
If[getGen[PART[F][[i,1]]]>1,
WriteString[sphenoLD,"Where (Abs("<>SPhenoForm[SPhenoMass[PART[F][[i,1]]]]<>").lt.1.0E-15_dp) "<>SPhenoForm[SPhenoMass[PART[F][[i,1]]]]<>"=0._dp\n"];
WriteString[sphenoLD,"Where (Abs("<>SPhenoForm[SPhenoMassSq[PART[F][[i,1]]]]<>").lt.1.0E-30_dp) "<>SPhenoForm[SPhenoMassSq[PART[F][[i,1]]]]<>"=0._dp\n"];,
WriteString[sphenoLD,"If (Abs("<>SPhenoForm[SPhenoMass[PART[F][[i,1]]]]<>").lt.1.0E-15_dp) "<>SPhenoForm[SPhenoMass[PART[F][[i,1]]]]<>"=0._dp\n"];
WriteString[sphenoLD,"If (Abs("<>SPhenoForm[SPhenoMassSq[PART[F][[i,1]]]]<>").lt.1.0E-30_dp) "<>SPhenoForm[SPhenoMassSq[PART[F][[i,1]]]]<>"=0._dp\n"];
];
];
i++;];

(*
WriteString[sphenoLD,"If (ewOSinDecays) Then \n"];

For[i=1,i\[LessEqual]Length[GoldstoneBosons[Eigenstates]],
WriteString[sphenoLD,SPhenoForm[SPhenoMassOS[GoldstoneBosons[Eigenstates][[i,1]]]]<>"="<>SPhenoForm[SPhenoMass[GoldstoneBosons[Eigenstates][[i,1]]]] <>"\n"];
WriteString[sphenoLD,SPhenoForm[SPhenoMassSqOS[GoldstoneBosons[Eigenstates][[i,1]]]]<>"="<>SPhenoForm[SPhenoMassSq[GoldstoneBosons[Eigenstates][[i,1]]] ]<>"\n"];
If[getGen[GoldstoneBosons[Eigenstates][[i,2]] /. A_[{a__}]\[Rule]A]>1,
WriteString[sphenoLD,SPhenoMassOS[GoldstoneBosons[Eigenstates][[i,2]],GoldstoneBosons[Eigenstates][[i,2]]/. A_[{a_}]\[Rule]a]<>"="<>SPhenoMass[GoldstoneBosons[Eigenstates][[i,2]],GoldstoneBosons[Eigenstates][[i,2]]/. A_[{a_}]\[Rule]a] <>"\n"];
WriteString[sphenoLD,SPhenoMassSqOS[GoldstoneBosons[Eigenstates][[i,2]],GoldstoneBosons[Eigenstates][[i,2]]/. A_[{a_}]\[Rule]a]<>"="<>SPhenoMassSq[GoldstoneBosons[Eigenstates][[i,2]] ,GoldstoneBosons[Eigenstates][[i,2]]/. A_[{a_}]\[Rule]a]<>"\n"];,
WriteString[sphenoLD,SPhenoForm[SPhenoMassOS[GoldstoneBosons[Eigenstates][[i,2]]]]<>"="<>SPhenoForm[SPhenoMass[GoldstoneBosons[Eigenstates][[i,2]]]] <>"\n"];
WriteString[sphenoLD,SPhenoForm[SPhenoMassSqOS[GoldstoneBosons[Eigenstates][[i,2]]]]<>"="<>SPhenoForm[SPhenoMassSq[GoldstoneBosons[Eigenstates][[i,2]]] ]<>"\n"];
];
i++;];
WriteString[sphenoLD,"End if \n"];
*)



WriteString[sphenoLD,"If (UseZeroRotationMatrices) Then  ! Rotation matrices calculated for p2=0\n"];
For[i=1,i<=Length[SA`matrices],
If[FreeQ[realVar,SA`matrices[[i]]]==False,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS_0, Transpose("<>SPhenoForm[SA`matrices[[i]]]<>"))\n"];,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS_0, Conjg(Transpose("<>SPhenoForm[SA`matrices[[i]]]<>")))\n"];
];
i++;];
WriteString[sphenoLD,"Else If (UseP2Matrices) Then   ! p2 dependent matrix \n"];
For[i=1,i<=Length[SA`matrices],
If[FreeQ[realVar,SA`matrices[[i]]]==False,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS_p2, Transpose("<>SPhenoForm[SA`matrices[[i]]]<>"))\n"];,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS_p2, Conjg(Transpose("<>SPhenoForm[SA`matrices[[i]]]<>")))\n"];
];
i++;];
WriteString[sphenoLD,"Else  ! Rotation matrix for lightest state\n"];
For[i=1,i<=Length[SA`matrices],
If[FreeQ[realVar,SA`matrices[[i]]]==False,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS, Transpose("<>SPhenoForm[SA`matrices[[i]]]<>"))\n"];,
WriteString[sphenoLD,SPhenoForm[SPhenoZFac[SA`matrices[[i]]]]<>" = MatMul("<>SPhenoForm[SA`matrices[[i]]]<>"OS, Conjg(Transpose("<>SPhenoForm[SA`matrices[[i]]]<>")))\n"];
];
i++;];
WriteString[sphenoLD,"End if \n"];

(*
WriteString[sphenoLD,"! Shifting to OS masses \n"];
WriteString[sphenoLD,"If (PoleMassesForLoopDecays) Then \n"];
For[i=1,i\[LessEqual]Length[SA`massesOnlyInput],
WriteString[sphenoLD,SPhenoForm[AllMassesSPheno[[i]]] <>" = "<>SPhenoForm[SA`massesOnlyInput[[i]]]<>"\n"];
i++;];
WriteString[sphenoLD,"End if \n\n"];
*)
WriteString[sphenoLD,"! Couplings \n"];
MakeCall["AllCouplingsReallyAll",Flatten[{parametersAllreallyAll,namesAllreallyAll}],{},{},sphenoLD];

WriteString[sphenoLD,"em = "<>ToString[getSPhenoCoupling[Cp[conj[VectorW],VectorW,VectorP]][[1,1]]]<>" \n"];
WriteString[sphenoLD,"gs = "<>ToString[getSPhenoCoupling[Cp[bar[BottomQuark],BottomQuark,VectorG]][[1,1]]]<>"(1,1) \n"];


MakeCall["CouplingsColoredQuartics",Flatten[{parametersColoredQuartics,namesColoredQuartics}],{},{},sphenoLD];


WriteString[sphenoLD,"If (externalZfactors) Then \n"];
MakeCall["getZCouplings",Flatten[{parametersAllreallyAll,namesAllreallyAll,SA`Zfactors,SA`ZCouplings}],{},{},sphenoLD];
WriteString[sphenoLD,"End if \n"];

MakeCall["getGBCouplings",Flatten[{SA`massesOnlyInput,NewMassParameters,VnamesForGB,SA`GBcouplings,SA`GBZcouplings,SA`GBosZcouplings}],{},{},sphenoLD];



WriteString[sphenoLD, "! Write intilization of all counter terms \n"];
MakeCall["WaveFunctionRenormalisation",Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters, listVEVs,namesAllreallyAll,SA`GBcouplings,SA`ListCounterTerms,SA`WaveFunctionNames,namesAllCT}],{},{"MLambda","deltaM","kont"},sphenoLD];
(* MakeCall["AllCouplingsReallyAll",Flatten[{parametersAllreallyAll,DnamesAllreallyAll}],{},{},sphenoLD]; *)

(* WriteCalculateAllSelfEnergies; *)

WriteString[sphenoLD,"! -------------------------------------------- \n"];
WriteString[sphenoLD,"! The decays at one-loop \n"];
WriteString[sphenoLD,"! -------------------------------------------- \n\n"];

For[i=1,i<=Length[SA`ParticlesDecays1Loop],
pD=SA`ParticlesDecays1Loop[[i]];
WriteString[sphenoLD,"! "<>ToString[pD]<>"\n"];
WriteString[sphenoLD,"If (CalcLoopDecay_"<>SPhenoForm[pD]<>") Then \n"];

(*
MakeCall["OneLoopDecay_"<>SPhenoForm[pD],Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters,listVEVs,SA`ListCounterTerms,SA`WaveFunctionNames,namesAllreallyAll,namesColoredQuartics, namesAllCT,SA`Zfactors(*,SA`SelfEnergieName*),SA`ZCouplings}],{},{"MLambda","deltaM","kont","gP1L"<>SPhenoForm[SA`ParticlesDecays1Loop[[i]]]},sphenoLD];
*)

MakeCall["OneLoopDecay_"<>SPhenoForm[pD],Flatten[{SA`massesOnlyInput,NewMassParameters,listAllParameters,listVEVs,SA`ListCounterTerms,SA`WaveFunctionNames,Intersection[SA`SavedInformationNeededMassesCouplingsParticle[[i,2]]],SA`Zfactors}],{},{"MLambda","em", "gs", "deltaM","kont","gP1L"<>SPhenoForm[SA`ParticlesDecays1Loop[[i]]]},sphenoLD];


WriteString[sphenoLD,"End if \n"];

i++;];


WriteString[sphenoLD,"If (Extra_scale_loopDecays) Then \n"];
WriteString[sphenoLD,"q2 = SetRenormalizationScale(q2_save) \n"];
WriteString[sphenoLD,"End if \n"];

WriteString[sphenoLD,"Iname = Iname - 1 \n \n"];
WriteString[sphenoLD,"End Subroutine CalculateOneLoopDecays  \n \n \n"];

];



(* ::Input::Initialization:: *)
 WriteCalculateAllSelfEnergies:=Block[{i,k,subTemp={},list,mixing1,mixing2,nameMass,nameCurrent,particleCurrent,parametersCurrent,treeMassCurrent,pos},

For[i=1,i<=Length[SA`subUnrotedFieldsRotatedFields],
subTemp=Join[subTemp,{ToString[SA`subUnrotedFieldsRotatedFields[[i,1]]]->ToString[SA`subUnrotedFieldsRotatedFields[[i,2]]]}];
i++;];

For[k=1,k<=Length[SA`LoopMassesParticle], 
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"!"<>ToString[SA`LoopMassesParticle[[k]]]<>"\n"];
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[SA`LoopMassesParticle[[k]]]]<>"\n"];
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
Switch[ListTree[[i,4]],
ScalarMass,
AddTadpoles=False;
WriteSelfEnergyScalar[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]], AddTadpoles,True,True];,
FermionMassSymm,
WriteSelfEnergyFermionSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2]]],True,True];,
FermionMassNonSymm,
WriteSelfEnergyFermionNonSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2,1]]],ToString[ListTree[[i,2,2]]],True,True];
];
WriteString[sphenoLD,"End do\n\n\n"];
k++;];

 For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0 || getType[listNotMixedMasses[[i,1]]]===V  || getType[listNotMixedMasses[[i,1]]]===F, 
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"!"<>ToString[listNotMixedMasses[[i,1]]]<>"\n"];
WriteString[sphenoLD,"!--------------------------\n"];
nameCurrent=ToString[listNotMixedMasses[[i,1]]];
nameMass=listNotMixedMasses[[i,2]];
particleCurrent=listNotMixedMasses[[i,1]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";

If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2 || getGen[listNotMixedMasses[[i,1]]]>1,
WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[listNotMixedMasses[[i,1]]]]<>"\n"];
Switch[listNotMixedMasses[[i,6]],
ScalarMass,
WriteSelfEnergyScalar[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False,False,False];,

FermionMassSymm,
WriteSelfEnergyFermionSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,False,False];,

FermionMassNonSymm,
WriteSelfEnergyFermionNonSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,mixing2,False,False];
 ];
WriteString[sphenoLD,"End do\n\n\n"];,

WriteSelfEnergySingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@(StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]]),Unmixed1Loop[[i]],treeMassCurrent,False];

];
];
i++;]; 

If[FreeQ[listNotMixedMasses,VectorP]===False,
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"! Additional Self-Energies for Photon\n"];
WriteString[sphenoLD,"!--------------------------\n"];
pos=Position[listNotMixedMasses,VectorP][[1,1]];
nameCurrent=ToString[listNotMixedMasses[[pos,1]]];
nameMass=listNotMixedMasses[[pos,2]];
particleCurrent=listNotMixedMasses[[pos,1]];
parametersCurrent=listNotMixedMasses[[pos,3]];
treeMassCurrent=listNotMixedMasses[[pos,5]]/. subSolution;
mixing1="None1";
mixing2="None2";

WriteSelfEnergySingleExtra[nameCurrent,particleCurrent,"0._dp",True,False,"light0",parametersCurrent,NeededMassesUnmixed[[pos]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[pos]],Unmixed1Loop[[pos]],treeMassCurrent,False];
WriteSelfEnergySingleExtra[nameCurrent,particleCurrent,"0._dp",False,True,"heavy0",parametersCurrent,NeededMassesUnmixed[[pos]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[pos]],Unmixed1Loop[[pos]],treeMassCurrent,False];
WriteSelfEnergySingleExtra[nameCurrent,particleCurrent,SPhenoForm[SPhenoMassSq[VectorZ]],True,False,"lightMZ",parametersCurrent,NeededMassesUnmixed[[pos]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[pos]],Unmixed1Loop[[pos]],treeMassCurrent,False];
WriteSelfEnergySingleExtra[nameCurrent,particleCurrent,SPhenoForm[SPhenoMassSq[VectorZ]],False,True,"heavyMZ",parametersCurrent,NeededMassesUnmixed[[pos]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[pos]],Unmixed1Loop[[pos]],treeMassCurrent,False];


];

list=CorrectionListVectorVector[SA`CurrentStates];
For[i=1,i<=Length[list],
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"!"<>ToString[list[[i,1,1]]]<>"\n"];
WriteString[sphenoLD,"!--------------------------\n"];
WriteSelfEnergyVectorVector[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],list[[i,1,1]],list[[i,1,2]],NeededMassesVV[[i]],NeededCouplingsVV[[i]],list[[i,2]]];
WriteSelfEnergyVectorVector[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],ToString[list[[i,1,2]]]<>ToString[list[[i,1,1]]],list[[i,1,2]],list[[i,1,1]],NeededMassesVV[[i]],NeededCouplingsVV[[i]],list[[i,2]]];
i++;];


list=CorrectionListVectorScalar[SA`CurrentStates];
For[i=1,i<=Length[list],
WriteString[sphenoLD,"!--------------------------\n"];
WriteString[sphenoLD,"!"<>ToString[list[[i,1,1]]]<>"\n"];
WriteString[sphenoLD,"!--------------------------\n"];
WriteSelfEnergyVectorVector[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],list[[i,1,1]],list[[i,1,2]],NeededMassesSV[[i]],NeededCouplingsSV[[i]],list[[i,2]]];
WriteSelfEnergyVectorVector[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],ToString[list[[i,1,2]]]<>ToString[list[[i,1,1]]],list[[i,1,2]],list[[i,1,1]],NeededMassesSV[[i]],NeededCouplingsSV[[i]],list[[i,2]]];
i++;];

]; 



(* ::Input::Initialization:: *)
 WriteSelfEnergyScalar[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_,mixed_,rotate_]:=Block[{i1,i2,i3,suffix,matname,pos},
WriteString[sphenoLD, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
If[getGen[particle]>1,suffix="(i1,:,:)";,suffix="";];
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name<>suffix},sphenoLD];

If[FreeQ[ScalarsForTadpoles,particle]==False,
pos=Position[ScalarsForTadpoles,particle][[1,1]];
If[Intersection[listVEVseparated[[pos]]]=!={0},
WriteString[sphenoLD,"Pi"<>Name<>suffix<>" = Pi"<>Name<>suffix<>" + MatTad_"<>ToString[particle]<>"\n"];
];
];

MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name<>suffix},sphenoLD];

WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name<>"DR"<>suffix},sphenoLD];
WriteString[sphenoLD, "p2 ="<>SPhenoMassSqOS[particle,i1]<>"\n"];
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings} /. subDRtoOS /. SA`subGBcouplings],{"p2"},{"kont","DerPi"<>Name<>"OS"<>suffix},sphenoLD];
WriteString[sphenoLD,"DerPi"<>Name<>suffix<>" = DerPi"<>Name<>suffix <>"- DerPi"<>Name<>"DR"<>suffix<>" + DerPi"<>Name<>"OS"<>suffix <>"\n"];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
WriteString[sphenoLD,"End if\n"];

(*
If[rotate,
matname=ToString[getMixingMatrix[particle]];
WriteString[sphenoLD,"Pi"<>Name<>suffix = "MatMul(MatMul(Conjg(Transpose("<>matname<>")),Pi"<>Name<>suffix"),"<>matname<>") \n"];
WriteString[sphenoLD,"DerPi"<>Name<>suffix = "MatMul(MatMul(Conjg(Transpose("<>matname<>")),DerPi"<>Name<>suffix"),"<>matname<>") \n"];
];
*)
];

WriteSelfEnergyVectorVector[NameFun_,NamePi_,particle1_,particle2_,masses_,couplings_,contributions_]:=Block[{i1,i2,i3},
If[getGen[particle2]>1,suffix="(i1,:,:)";,suffix="";];
If[getGen[particle2]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[particle2]]<>"\n"];];
If[particle2===VectorP || particle2===VectorG,
WriteString[sphenoLD, "p2 = 0._dp \n"];,
WriteString[sphenoLD, "p2 = "<>SPhenoMassSq[particle2,i1]<> "\n"];
];
MakeCall["Pi1Loop"<>NameFun,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>NamePi<>suffix},sphenoLD];
MakeCall["DerPi1Loop"<>NameFun,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>NamePi<>suffix},sphenoLD];

WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
MakeCall["DerPi1Loop"<>NameFun,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>NameFun<>"DR"<>suffix},sphenoLD];
If[particle2===VectorP || particle2===VectorG,
WriteString[sphenoLD, "p2 = 0._dp \n"];,
WriteString[sphenoLD, "p2 ="<>SPhenoMassSqOS[particle2,i1]<>"\n"];
];
MakeCall["DerPi1Loop"<>NameFun,Flatten[{masses,couplings} /. subDRtoOS/. SA`subGBcouplings],{"p2"},{"kont","DerPi"<>NameFun<>"OS"<>suffix},sphenoLD];
WriteString[sphenoLD,"DerPi"<>NameFun<>suffix<>" = DerPi"<>NameFun<>suffix <>"- DerPi"<>NameFun<>"DR"<>suffix<>" + DerPi"<>NameFun<>"OS"<>suffix <>"\n"];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
WriteString[sphenoLD,"End if\n"];


If[getGen[particle2]>1,WriteString[sphenoLD,"End do\n"];];
];


WriteSelfEnergyFermionSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName_,mixed_,rotate_]:=Block[{i1,i2,i3,suffix,matname1,matname2},
WriteString[sphenoLD, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
If[getGen[particle]>1,suffix="(i1,:,:)";,suffix="";];
MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>NameP<>suffix,"SigmaR"<>NameP<>suffix,"SigmaSL"<>NameP<>suffix,"SigmaSR"<>NameP<>suffix},sphenoLD];

(*
WriteString[sphenoLD, "SigmaL"<>NameP<>suffix<>" = 0.5_dp*(SigmaL"<>NameP<>suffix<>" + "<>"SigmaR"<>NameP<>suffix<>") \n"];
WriteString[sphenoLD, "SigmaR"<>NameP<>suffix<>" = Conjg(SigmaL"<>NameP<>suffix<>") \n"];

If[getGen[particle]>1,
WriteString[sphenoLD, "SigmaS"<>NameP<>suffix<>" = 0.5_dp*(SigmaS"<>NameP<>suffix<>" + Transpose("<>"SigmaS"<>NameP<>suffix<>")) \n\n"];
];
*)
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>NameP<>suffix,"DerSigmaR"<>NameP<>suffix,"DerSigmaSL"<>NameP<>suffix,"DerSigmaSR"<>NameP<>suffix},sphenoLD];

WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>NameP<>"DR"<>suffix,"DerSigmaR"<>NameP<>"DR"<>suffix,"DerSigmaSL"<>NameP<>"DR"<>suffix,"DerSigmaSR"<>NameP<>"DR"<>suffix},sphenoLD];
WriteString[sphenoLD, "p2 ="<>SPhenoMassSqOS[particle,i1]<>"\n"];
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings} /. subDRtoOS/. SA`subGBcouplings],{"p2"},{"DerSigmaL"<>NameP<>"OS"<>suffix,"DerSigmaR"<>NameP<>"OS"<>suffix,"DerSigmaSL"<>NameP<>"OS"<>suffix,"DerSigmaSR"<>NameP<>"OS"<>suffix},sphenoLD];
WriteString[sphenoLD,"DerSigmaL"<>NameP<>suffix<>" = DerSigmaL"<>NameP<>suffix<>" - DerSigmaL"<>NameP<>"DR"<>suffix<>"! + DerSigmaL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaR"<>NameP<>suffix<>" = DerSigmaR"<>NameP<>suffix<>" - DerSigmaR"<>NameP<>"DR"<>suffix<>"! + DerSigmaR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSL"<>NameP<>suffix<>" = DerSigmaSL"<>NameP<>suffix<>" - DerSigmaSL"<>NameP<>"DR"<>suffix<>"! + DerSigmaSL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSR"<>NameP<>suffix<>" = DerSigmaSR"<>NameP<>suffix<>" - DerSigmaSR"<>NameP<>"DR"<>suffix<>"! + DerSigmaSR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaLir"<>NameP<>suffix<>" =  + DerSigmaL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaRir"<>NameP<>suffix<>" =  + DerSigmaR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>NameP<>suffix<>" = + DerSigmaSL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>NameP<>suffix<>" = + DerSigmaSR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
WriteString[sphenoLD,"Else\n"];
WriteString[sphenoLD,"DerSigmaLir"<>NameP<>suffix<>" =  0._dp\n"];
WriteString[sphenoLD,"DerSigmaRir"<>NameP<>suffix<>" =  0._dp\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"End if\n"];

(*
WriteString[sphenoLD, "DerSigmaL"<>NameP<>suffix<>" = 0.5_dp*(DerSigmaL"<>NameP<>suffix<>" + "<>"DerSigmaR"<>NameP<>suffix<>") \n"];
WriteString[sphenoLD, "DerSigmaR"<>NameP<>suffix<>" = Conjg(DerSigmaL"<>NameP<>suffix<>") \n"];

If[getGen[particle]>1,
WriteString[sphenoLD, "DerSigmaS"<>NameP<>suffix<>" = 0.5_dp*(DerSigmaS"<>NameP<>suffix<>" + Transpose("<>"DerSigmaS"<>NameP<>suffix<>")) \n"];
];
*)

(*
If[rotate,
matname1=ToString[getMixingMatrix[particle][[1]]];
matname2=ToString[getMixingMatrix[particle][[2]]];
WriteString[sphenoLD,"SigmaL"<>NameP<>suffix<>" = MatMul(MatMul(Transpose("<>matname2<>"),SigmaL"<>NameP<>suffix<>"),Conjg("<>matname2<>")) \n"];
WriteString[sphenoLD,"SigmaR"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),SigmaR"<>NameP<>suffix<>"),("<>matname1<>"))\n"];
WriteString[sphenoLD,"SigmaS"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),SigmaS"<>NameP<>suffix<>"),(Conjg("<>matname2<>"))\n"];

WriteString[sphenoLD,"DerSigmaL"<>NameP<>suffix<>" = MatMul(MatMul(Transpose("<>matname2<>"),DerSigmaL"<>NameP<>suffix<>"),Conjg("<>matname2<>")) \n"];
WriteString[sphenoLD,"DerSigmaR"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),DerSigmaR"<>NameP<>suffix<>"),("<>matname1<>"))\n"];
WriteString[sphenoLD,"DerSigmaS"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),DerSigmaS"<>NameP<>suffix<>"),(Conjg("<>matname2<>"))\n"];
];
*)
];

WriteSelfEnergyFermionNonSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName1_,MixingName2_, mixed_,rotate_]:=Block[{suffix,matname1,matname2},
WriteString[sphenoLD, "p2 ="<>SPhenoMassSq[particle,i1]<>"\n"];
If[getGen[particle]>1,suffix="(i1,:,:)";,suffix="";];
MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>NameP<>suffix,"SigmaR"<>NameP<>suffix,"SigmaSL"<>NameP<>suffix,"SigmaSR"<>NameP<>suffix},sphenoLD];
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>NameP<>suffix,"DerSigmaR"<>NameP<>suffix,"DerSigmaSL"<>NameP<>suffix,"DerSigmaSR"<>NameP<>suffix},sphenoLD];

WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>NameP<>"DR"<>suffix,"DerSigmaR"<>NameP<>"DR"<>suffix,"DerSigmaSL"<>NameP<>"DR"<>suffix,"DerSigmaSR"<>NameP<>"DR"<>suffix},sphenoLD];
WriteString[sphenoLD, "p2 ="<>SPhenoMassSqOS[particle,i1]<>"\n"];
MakeCall["DerSigma1Loop"<>NameP,Flatten[{masses,couplings} /. subDRtoOS/. SA`subGBcouplings],{"p2"},{"DerSigmaL"<>NameP<>"OS"<>suffix,"DerSigmaR"<>NameP<>"OS"<>suffix,"DerSigmaSL"<>NameP<>"OS"<>suffix,"DerSigmaSR"<>NameP<>"OS"<>suffix},sphenoLD];
WriteString[sphenoLD,"DerSigmaL"<>NameP<>suffix<>" = DerSigmaL"<>NameP<>suffix<>" - DerSigmaL"<>NameP<>"DR"<>suffix<>"! + DerSigmaL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaR"<>NameP<>suffix<>" = DerSigmaR"<>NameP<>suffix<>" - DerSigmaR"<>NameP<>"DR"<>suffix<>"! + DerSigmaR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSL"<>NameP<>suffix<>" = DerSigmaSL"<>NameP<>suffix<>" - DerSigmaSL"<>NameP<>"DR"<>suffix<>"! + DerSigmaSL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSR"<>NameP<>suffix<>" = DerSigmaSR"<>NameP<>suffix<>" - DerSigmaSR"<>NameP<>"DR"<>suffix<>"! + DerSigmaSR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaLir"<>NameP<>suffix<>" = + DerSigmaL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaRir"<>NameP<>suffix<>" = + DerSigmaR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>NameP<>suffix<>" = + DerSigmaSL"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>NameP<>suffix<>" = + DerSigmaSR"<>NameP<>"OS"<>suffix<>"\n"];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
WriteString[sphenoLD,"Else\n"];
WriteString[sphenoLD,"DerSigmaLir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaRir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>NameP<>suffix<>" = 0._dp\n"];
WriteString[sphenoLD,"End if\n"];

(*
If[rotate,
matname1=ToString[getMixingMatrix[particle][[1]]];
matname2=ToString[getMixingMatrix[particle][[2]]];
WriteString[sphenoLD,"SigmaL"<>NameP<>suffix<>" = MatMul(MatMul(Transpose("<>matname2<>"),SigmaL"<>NameP<>suffix<>"),Conjg("<>matname2<>")) \n"];
WriteString[sphenoLD,"SigmaR"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),SigmaR"<>NameP<>suffix<>"),("<>matname1<>"))\n"];
WriteString[sphenoLD,"SigmaS"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),SigmaS"<>NameP<>suffix<>"),(Conjg("<>matname2<>"))\n"];

WriteString[sphenoLD,"DerSigmaL"<>NameP<>suffix<>" = MatMul(MatMul(Transpose("<>matname2<>"),DerSigmaL"<>NameP<>suffix<>"),Conjg("<>matname2<>")) \n"];
WriteString[sphenoLD,"DerSigmaR"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),DerSigmaR"<>NameP<>suffix<>"),("<>matname1<>"))\n"];
WriteString[sphenoLD,"DerSigmaS"<>NameP<>suffix<>" = MatMul(MatMul(Conjg(Transpose("<>matname1<>")),DerSigmaS"<>NameP<>suffix<>"),(Conjg("<>matname2<>"))\n"];
];
*)
];

WriteSelfEnergySingle[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_]:=Block[{i1,i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
WriteString[sphenoLD, "p2 = "<>ToString[SPhenoMassSq[particle]]<> "\n"];
If[getType[particle]===F,
MakeCall["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>Name,"SigmaR"<>Name,"SigmaSL"<>Name,"SigmaSR"<>Name},sphenoLD];
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>Name,"DerSigmaR"<>Name,"DerSigmaSL"<>Name,"DerSigmaSR"<>Name},sphenoLD];,
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name},sphenoLD];
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name},sphenoLD];
];

WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
If[getType[particle]===F,
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>Name<>"DR","DerSigmaR"<>Name<>"DR","DerSigmaSL"<>Name<>"DR","DerSigmaSR"<>Name<>"DR"},sphenoLD];,
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name<>"DR"},sphenoLD];
];
WriteString[sphenoLD, "p2 = "<>ToString[SPhenoMassSqOS[particle]]<> "\n"];
If[getType[particle]===F,
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}/.subDRtoOS /. SA`subGBcouplings],{"p2"},{"DerSigmaL"<>Name<>"OS","DerSigmaR"<>Name<>"OS","DerSigmaSL"<>Name<>"OS","DerSigmaSR"<>Name<>"OS"},sphenoLD];
WriteString[sphenoLD,"DerSigmaL"<>Name<>" = DerSigmaL"<>Name<>" - DerSigmaL"<>Name<>"DR"<>" !+ DerSigmaL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaR"<>Name<>" = DerSigmaR"<>Name<>" - DerSigmaR"<>Name<>"DR"<>" !+ DerSigmaR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSL"<>Name<>" = DerSigmaSL"<>Name<>" - DerSigmaSL"<>Name<>"DR"<>" !+ DerSigmaSL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSR"<>Name<>" = DerSigmaSR"<>Name<>" - DerSigmaSR"<>Name<>"DR"<>" !+ DerSigmaSR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaLir"<>Name<>" = + DerSigmaL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaRir"<>Name<>" = + DerSigmaR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>Name<>" = + DerSigmaSL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>Name<>" = + DerSigmaSR"<>Name<>"OS"<>"\n"];,
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}/. subDRtoOS /. SA`subGBcouplings],{"p2"},{"kont","DerPi"<>Name<>"OS"},sphenoLD];
WriteString[sphenoLD,"DerPi"<>Name<>" = DerPi"<>Name<>"-DerPi"<>Name<>"DR"<>" + DerPi"<>Name<>"OS"<>"\n"];
];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
If[getType[particle]===F,
WriteString[sphenoLD,"Else \n"];
WriteString[sphenoLD,"DerSigmaLir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaRir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>Name<>" = 0._dp \n"]
];
WriteString[sphenoLD,"End if \n"];
]; 



GenerateOneLoopDecayRoutines[eigenstates_]:=Block[{i,j,DecayingParticle,decays},
(*
 SA`ParticlesDecays1Loop=Select[DeleteCases[DeleteCases[DeleteCases[DeleteCases[DeleteCases[Join[Transpose[PART[F]][[1]],Select[Transpose[PART[S]][[1]],SMQ[#]\[Equal]False&]],hh],Hpm],Ah],Hm],Hp],FreeQ[massless,#]&]; 
*)
(* SA`ParticlesDecays1Loop=Transpose[ListDecayParticles3B][[1]]; *)
SA`ParticlesDecays1Loop=Select[ListDecayParticles,getType[#]=!=V&];
(* SA`ParticlesDecays1Loop=Select[Transpose[PART[F]][[1]],FreeQ[massless,#]&]; *)
DynamicLoopDecayParticleNr=1;
DynamicLoopDecayTotal=1;
DynamicLoopDecayNr=1;

Print["  Writing loop decays for ",Dynamic[DynamicLoopDecayParticle],"(",Dynamic[DynamicLoopDecayParticleNr],"/",Length[SA`ParticlesDecays1Loop],"): ",Dynamic[DynamicLoopDecayNr],"/",Dynamic[DynamicLoopDecayTotal],"(",Dynamic[DynamicLoopDecay],")"];
For[i=1,i<=Length[SA`ParticlesDecays1Loop],
DynamicLoopDecayParticle=SA`ParticlesDecays1Loop[[i]];
DynamicLoopDecayParticleNr=i;
DecayingParticle=SA`ParticlesDecays1Loop[[i]];
massless=masslessSave;
(* decays=TwoBodyDecay[DecayingParticle]; *)
decays=TwoBodyDecayAllAllowed[DecayingParticle];
DynamicLoopDecayTotal=Length[decays];
massless=masslessNoPhoton;
(* MakeVertexCorrections[DecayingParticle,decays]; *)
MakeLoopDecay[DecayingParticle,decays];
i++;];

];

MakeLoopDecay[DecayingParticle_,twobodydecays_]:=Block[{i,j,OneLins,OneLtempout,OneLtbds,NRoutine,NModule,type},
(*Define the processes,which are treatable*)
NModule=ToString[If[ToString[Head[DecayingParticle]]==ToString[conj],c,""]]<>ToString[RE[DecayingParticle]];
WriteModuleStart[NModule];

SA`SavedInformationNeededMassesCouplingsParticle=Join[SA`SavedInformationNeededMassesCouplingsParticle,{{DecayingParticle,{},{}}}];

For[j=1,j<=Length[twobodydecays],
DynamicLoopDecayNr=j;
    DynamicLoopDecay={twobodydecays[[j,1]],twobodydecays[[j,2]]};

    (* DEBUG *)
    (* Print[DecayingParticle,{twobodydecays[[j,1]],twobodydecays[[j,2]]}];*)
(* OneLtbds=DefineManageableProcesses[DecayingParticle,twobodydecays[[j]]]; *)
type=getVertexType[twobodydecays[[j,3]]];
(* If[type===FFV || type===FFS, *)
tbdsave=twobodydecays;
(*
If[getType[twobodydecays[[j]][[1]]]===F,{na1=tbdsave[[j]][[2]];tbdsave[[j]][[2]]=tbdsave[[j]][[1]];tbdsave[[j]][[1]]=na1;
na1=tbdsave[[j]][[3]][[3]];tbdsave[[j]][[3]][[3]]=tbdsave[[j]][[3]][[2]];
tbdsave[[j]][[3]][[2]]=na1;}];
*)
OneLtbds=tbdsave[[j]];

(*Clear parameter definitions from process before*)
If[twobodydecays[[j,3]]=!=LOOP,
MakeTreeLevelDecay[NModule,DecayingParticle,twobodydecays[[j]],OneLtbds,type];
   If[getType[DecayingParticle]===F||getType[DecayingParticle]===S,
      MakeRealCorrections[NModule,DecayingParticle,twobodydecays[[j]],OneLtbds,type];
      (* MARK: moved wave corrections here so not called for loop amps *)
      (*MakeWaveCorrectionsAndCT[NModule,DecayingParticle,twobodydecays[[j]],OneLtbds,type]; *)
     ];
];

MakeWaveCorrectionsAndCT[NModule,DecayingParticle,twobodydecays[[j]],OneLtbds,type];    
MakeVertexCorrections[NModule,DecayingParticle,twobodydecays[[j]],OneLtbds, type];
j++;];
WriteString[outputfortran,"\n"<>"End Module OneLoopDecay_"<>NModule<>"_"<>ToString[ModelName]<>"\n"];
Close[outputfortran];
];



WriteSelfEnergySingle[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_]:=Block[{i1,i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
WriteString[sphenoLD, "p2 = "<>ToString[SPhenoMassSq[particle]]<> "\n"];

If[getType[particle]===F,
MakeCall["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>Name,"SigmaR"<>Name,"SigmaSL"<>Name,"SigmaSR"<>Name},sphenoLD];
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>Name,"DerSigmaR"<>Name,"DerSigmaSL"<>Name,"DerSigmaSR"<>Name},sphenoLD];,
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name},sphenoLD];
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name},sphenoLD];
];


WriteString[sphenoLD,"If ((ShiftIRdiv).and.(OSkinematics)) Then \n"];
WriteString[sphenoLD,"IRdivonly=.True. \n"];
If[getType[particle]===F,
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"DerSigmaL"<>Name<>"DR","DerSigmaR"<>Name<>"DR","DerSigmaSL"<>Name<>"DR","DerSigmaSR"<>Name<>"DR"},sphenoLD];,
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name<>"DR"},sphenoLD];
];
WriteString[sphenoLD, "p2 = "<>ToString[SPhenoMassSqOS[particle]]<> "\n"];
If[getType[particle]===F,
MakeCall["DerSigma1Loop"<>Name,Flatten[{masses,couplings}/.subDRtoOS/. SA`subGBcouplings],{"p2"},{"DerSigmaL"<>Name<>"OS","DerSigmaR"<>Name<>"OS","DerSigmaSL"<>Name<>"OS","DerSigmaSR"<>Name<>"OS"},sphenoLD];
WriteString[sphenoLD,"DerSigmaL"<>Name<>" = DerSigmaL"<>Name<>" - DerSigmaL"<>Name<>"DR"<>" !+ DerSigmaL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaR"<>Name<>" = DerSigmaR"<>Name<>" - DerSigmaR"<>Name<>"DR"<>" !+ DerSigmaR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSL"<>Name<>" = DerSigmaSL"<>Name<>" - DerSigmaSL"<>Name<>"DR"<>" !+ DerSigmaSL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSR"<>Name<>" = DerSigmaSR"<>Name<>" - DerSigmaSR"<>Name<>"DR"<>" !+ DerSigmaSR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaLir"<>Name<>" = + DerSigmaL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaRir"<>Name<>" = + DerSigmaR"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>Name<>" = + DerSigmaSL"<>Name<>"OS"<>"\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>Name<>" = + DerSigmaSR"<>Name<>"OS"<>"\n"];,

MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}/.subDRtoOS/. SA`subGBcouplings],{"p2"},{"kont","DerPi"<>Name<>"OS"},sphenoLD];
WriteString[sphenoLD,"DerPi"<>Name<>" = DerPi"<>Name<>"-DerPi"<>Name<>"DR"<>" + DerPi"<>Name<>"OS"<>"\n"];
];
WriteString[sphenoLD,"IRdivonly=.False. \n"];
If[getType[particle]===F,
WriteString[sphenoLD,"Else \n"];
WriteString[sphenoLD,"DerSigmaLir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaRir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSLir"<>Name<>" = 0._dp\n"];
WriteString[sphenoLD,"DerSigmaSRir"<>Name<>" = 0._dp \n"]
];
WriteString[sphenoLD,"End if \n"];

];

WriteSelfEnergySingleExtra[Name_,particle_,p2_,light_,heavy_,suffix_,parameters_,masses_,couplings_,contributions_, tree_,addTad_]:=Block[{i1,i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
WriteString[sphenoLD, "p2 = "<>p2<> "\n"];
If[heavy==True,
WriteString[sphenoLD,"OnlyHeavyStates = .True. \n"];
];
If[light==True,
WriteString[sphenoLD,"OnlyLightStates = .True. \n"];
];

MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name<>suffix},sphenoLD];
MakeCall["DerPi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","DerPi"<>Name<>suffix},sphenoLD];

If[heavy==True,
WriteString[sphenoLD,"OnlyHeavyStates = .False. \n"];
];
If[light==True,
WriteString[sphenoLD,"OnlyLightStates = .False. \n"];
];

];


(* ::Input::Initialization:: *)
(* Include Stefan's parts here *)


IndexFunction[y_]:=Block[{x},x=y;Switch[Depth[x],2,x=x;,3,x=x[[1]];];
Which[ToString[x]==ToString[External[1]],Return[gt1],ToString[x]==ToString[External[2]],Return[gt2],ToString[x]==ToString[External[3]],Return[gt3],ToString[x]==ToString[Internal[1]],Return[i1],ToString[x]==ToString[Internal[2]],Return[i2],ToString[x]==ToString[Internal[3]],Return[i3]];];
TakeOutIndex[x_]:=Block[{x1,x2,y},x1=x;If[Depth[x1]==3,y=Head[x1];];
If[Depth[x1]==4,{x2=Head[x1[[1]]];x1=Head[x1];y=x1[x2];};];
Return[y];];




MakeTreeLevelDecay[NModule_,DecayingParticle_,twobodydecays_,OneLtbds_,type_]:=Block[{i,j,k,OneLins,OneLtempout,NRoutine,OneLinfo,temp,CallDoList,CallMassesList,CallVertree,CallcouplingsList,CallExtMasses,RMsqInd,RMsqIndL,RMsqIndSt,RMsqIndLSt,CouplingsList,IndicesList,SymChaFactor,typeC,replaceexternalparticles,masses,couplings,allDiagrams},

replaceexternalparticles={f1->AntiField[DecayingParticle],f2->OneLtbds[[1]],f3->OneLtbds[[2]]};

allDiagrams={{{C[f1,f2,f3]},{External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},
{{{f1,gt1},{f2,gt2},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{f3,gt3}}}} }/.replaceexternalparticles;
{masses,couplings}=GetCouplingsMasses[allDiagrams];


NRoutine=NModule<>"To"<>ToString[If[(ToString[Head[f2/.replaceexternalparticles]]==ToString[conj]) ||(ToString[Head[f2/.replaceexternalparticles]]==ToString[bar]),c,""]]<>ToString[RE[f2/.replaceexternalparticles]]<>ToString[If[(ToString[Head[f3/.replaceexternalparticles]]==ToString[conj])||(ToString[Head[f3/.replaceexternalparticles]]==ToString[bar]),c,""]]<>ToString[RE[f3/.replaceexternalparticles]];

(* WriteTreeLevelDecay[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,type]; *)
WriteTreeLevelDecayAmp[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,type];
SA`SavedInformationTreeDecay=Join[SA`SavedInformationTreeDecay,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings}}}];

SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],couplings];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["Z"<>ToString[#]]&/@couplings];

If[FreeQ[{getBlank[DecayingParticle],OneLtbds[[1]],OneLtbds[[2]]},VectorW]==False,
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["G"<>ToString[#]]&/@cHPWlist];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["GZ"<>ToString[#]]&/@cHPWlist];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["GosZ"<>ToString[#]]&/@cHPWlist];
If[getGBCoup[couplings[[1]]]=!=False,
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["G"<>ToString[getGBCoup[#]]]&/@couplings,{}]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["GZ"<>ToString[getGBCoup[#]]]&/@couplings,{}]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["GosZ"<>ToString[getGBCoup[#]]]&/@couplings,{}]];
];
];

If[{OneLtbds[[1]],OneLtbds[[2]]}==={conj[VectorW],VectorW}||{OneLtbds[[1]],OneLtbds[[2]]}==={VectorW,conj[VectorW]},
If[getGBCoup2[couplings[[1]]]=!=False,
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[{},ToExpression["G"<>ToString[getGBCoup2[#]]]&/@couplings]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[{},ToExpression["GZ"<>ToString[getGBCoup2[#]]]&/@couplings]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[{},ToExpression["GosZ"<>ToString[getGBCoup2[#]]]&/@couplings]];
];
If[getGBCoup1[couplings[[1]]]=!=False,
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["G"<>ToString[getGBCoup1[#]]]&/@couplings,{}]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["GZ"<>ToString[getGBCoup1[#]]]&/@couplings,{}]];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],Join[ToExpression["GosZ"<>ToString[getGBCoup1[#]]]&/@couplings,{}]];
];
];

SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses];


];


MakeVertexCorrections[NModule_,DecayingParticle_,twobodydecays_,OneLtbds_,type_]:=Block[{i,j,k,OneLins,OneLtempout,NRoutine,OneLinfo,temp,CallDoList,CallMassesList,CallVertree,CallcouplingsList,CallExtMasses,RMsqInd,RMsqIndL,RMsqIndSt,RMsqIndLSt,CouplingsList,IndicesList,SymChaFactor,typeC,replaceexternalparticles,masses,couplings,allDiagrams},
(* allDiagrams=GenerateDiagramsDecayVertexCorrections[AntiField[DecayingParticle],OneLtbds[[1]],OneLtbds[[2]]]; *)

allDiagrams=GenerateDiagramsDecayVertexCorrections[AntiField[DecayingParticle],OneLtbds[[1]],OneLtbds[[2]]];
{masses,couplings}=GetCouplingsMasses[allDiagrams,True];

replaceexternalparticles={f1->AntiField[DecayingParticle],f2->OneLtbds[[1]],f3->OneLtbds[[2]]};

NRoutine=NModule<>"To"<>ToString[If[(ToString[Head[f2/.replaceexternalparticles]]==ToString[conj])||(ToString[Head[f2/.replaceexternalparticles]]==ToString[bar]),c,""]]<>ToString[RE[f2/.replaceexternalparticles]]<>ToString[If[(ToString[Head[f3/.replaceexternalparticles]]==ToString[conj])||(ToString[Head[f3/.replaceexternalparticles]]==ToString[bar]),c,""]]<>ToString[RE[f3/.replaceexternalparticles]];

SA`SavedInformationOneLoopDecaysVertex=Join[SA`SavedInformationOneLoopDecaysVertex,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings}}}];
(* WriteOneLoopCorrectionsDecay[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,type,"VERTEX"]; *)

											
(*WriteOneLoopCorrectionsDecayAmp[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,type,"VERTEX"];
  WriteOneLoopCorrectionsDecayAmpIR[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],Select[allDiagrams,(FreeQ[{Internal[1],Internal[2],Internal[3]}/.#[[2]],VectorP]==False || FreeQ[{Internal[1],Internal[2],Internal[3]}/.#[[2]],VectorG] ==False)&] ,masses,couplings,type,"VERTEX"];*)

WriteOneLoopCorrectionsDecayAmp[NRoutine,DecayingParticle,OneLtbds,allDiagrams,masses,couplings,type,"VERTEX"];
WriteOneLoopCorrectionsDecayAmpIR[NRoutine,DecayingParticle,OneLtbds,Select[allDiagrams,(FreeQ[{Internal[1],Internal[2],Internal[3]}/.#[[2]],VectorP]==False || FreeQ[{Internal[1],Internal[2],Internal[3]}/.#[[2]],VectorG] ==False)&] ,masses,couplings,type,"VERTEX"];											

SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],couplings];
If[FreeQ[twobodydecays,LOOP]==False && getType[DecayingParticle]===F,
SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["Z"<>ToString[#]]&/@couplings];
];
SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses];

];

MakeWaveCorrectionsAndCT[NModule_,DecayingParticle_,twobodydecays_,OneLtbds_,typeIn_]:=Block[{i,j,k,OneLins,OneLtempout,NRoutine,OneLinfo,temp,CallDoList,CallMassesList,CallVertree,CallcouplingsList,CallExtMasses,RMsqInd,RMsqIndL,RMsqIndSt,RMsqIndLSt,CouplingsList,IndicesList,SymChaFactor,typeC,replaceexternalparticles,masses,couplings,allDiagrams,Zconst,vectors,addvectors={},addvectors2={},addvectors3={},f1,f2,f3,headV,headV2,type},

f1=AntiField[DecayingParticle];
f2=OneLtbds[[1]];
f3=OneLtbds[[2]];

If[typeIn===LOOP,
type=ToExpression[ToString[getType[f1]]<>ToString[getType[f2]]<>ToString[getType[f3]]];,
type=typeIn;
];

Switch[type,
FFV | SSV,
If[Head[f3]===conj,headV=conj;,headV=Evaluate;];
vectors=Select[Particles[EWSB],#[[4]]===V&];
allDiagrams={};
For[i=1,i<=Length[vectors],
If[(vectors[[i,1]]===RE[f3] || FreeQ[CorrectionListVectorVector[EWSB],{vectors[[i,1]],RE[f3]}]===False ||  FreeQ[CorrectionListVectorVector[EWSB],{RE[f3],vectors[[i,1]]}]===False) && FreeQ[SPhenoCouplingsAllreallyAll,C[f1,f2,headV[vectors[[i,1]]]]]===False,
allDiagrams=Join[allDiagrams,{{{C[f1,f2,headV[vectors[[i,1]]]]},{External[1]->f1,External[2]->f2,External[3]->headV[vectors[[i,1]]],  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},
{{{f1,gt1},{f2,gt2},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{headV[vectors[[i,1]]],gt3}}}} }];
addvectors=Join[addvectors,{vectors[[i,1]]}];
];
i++;];,
SVV,
If[Head[f3]===conj,headV=conj;,headV=Evaluate;];
If[Head[f2]===conj,headV2=conj;,headV2=Evaluate;];
vectors=Select[Particles[EWSB],#[[4]]===V&];
allDiagrams={};
For[i=1,i<=Length[vectors],
For[j=1,j<=Length[vectors],
If[(vectors[[i,1]]===RE[f3] || FreeQ[CorrectionListVectorVector[EWSB],{vectors[[i,1]],RE[f3]}]===False ||  FreeQ[CorrectionListVectorVector[EWSB],{RE[f3],vectors[[i,1]]}]===False) && (vectors[[j,1]]===RE[f2]|| FreeQ[CorrectionListVectorVector[EWSB],{vectors[[j,1]],RE[f2]}]===False ||  FreeQ[CorrectionListVectorVector[EWSB],{RE[f2],vectors[[j,1]]}]===False) && FreeQ[SPhenoCouplingsAllreallyAll,C[f1,headV2[vectors[[j,1]]],headV[vectors[[i,1]]]]]===False,
allDiagrams=Join[allDiagrams,{{{C[f1,headV2[vectors[[j,1]]],headV[vectors[[i,1]]]]},{External[1]->f1,External[2]->headV2[vectors[[j,1]]],External[3]->headV[vectors[[i,1]]],  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},
{{{f1,gt1},{headV2[vectors[[j,1]]],gt2},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{headV[vectors[[i,1]]],gt3}}}} }];
addvectors=Join[addvectors,{vectors[[i,1]]}];
addvectors2=Join[addvectors2,{vectors[[j,1]]}];
];
j++;];
i++;];,
_,
If[typeIn===LOOP,
allDiagrams={};,
allDiagrams={{{C[f1,f2,f3]},{External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},
{{{f1,gt1},{f2,gt2},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{f3,gt3}}}} };
];
];
If[allDiagrams=={},
{masses,couplings}={DeleteCases[DeleteCases[Intersection[{SPhenoMass[f1],SPhenoMass[f2],SPhenoMass[f3],SPhenoMassSq[f1],SPhenoMassSq[f2],SPhenoMassSq[f3]}],0],0.],{}};,
{masses,couplings}=GetCouplingsMasses[allDiagrams];
];

masses=Intersection[Join[masses,DeleteCases[DeleteCases[Intersection[{SPhenoMass[f1],SPhenoMass[f2],SPhenoMass[f3],SPhenoMassSq[f1],SPhenoMassSq[f2],SPhenoMassSq[f3]}],0],0.]]];



NRoutine=NModule<>"To"<>ToString[If[(ToString[Head[f2]]==ToString[conj])||ToString[Head[f2]]==ToString[bar],c,""]]<>ToString[RE[f2]]<>ToString[If[(ToString[Head[f3]]==ToString[conj])||(ToString[Head[f3]]==ToString[bar]),c,""]]<>ToString[RE[f3]];
(* Zconst =ToExpression["Z"<>ToString[#]]&/@DeleteCases[Intersection[Flatten[Select[{f1,f2,f3}/. bar[x_]\[Rule]x /. conj[x_]\[Rule]x,FreeQ[massless,#]&]  /. diracSub[EWSB]/. bar[x_]\[Rule]x /. conj[x_]\[Rule]x]],0]; *)
Zconst =ToExpression["Zf"<>ToString[#]]&/@DeleteCases[Intersection[Flatten[{f1,f2,f3}/. bar[x_]->x /. conj[x_]->x  /. diracSub[EWSB]/. bar[x_]->x /. conj[x_]->x]],0];

If[addvectors=!={},
addvectors=RE/@DeleteCases[Intersection[addvectors],RE[f3]];
For[i=1,i<=Length[addvectors],
If[FreeQ[CorrectionListVectorVector[EWSB],{addvectors[[i]],f3}]===False || FreeQ[CorrectionListVectorVector[EWSB],{f3,addvectors[[i]]}]===False,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[addvectors[[i]]]<>ToString[RE[f3]]]}];
];
(*
If[FreeQ[CorrectionListVectorVector[EWSB],{addvectors[[i]],f3}]===False,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[addvectors[[i]]]<>ToString[RE[f3]]]}];,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[RE[f3]]<>ToString[addvectors[[i]]]]}];
];
*)
i++;];
];

If[addvectors2=!={},
addvectors2=RE/@DeleteCases[Intersection[addvectors],RE[f2]];
For[i=1,i<=Length[addvectors2],
If[FreeQ[CorrectionListVectorVector[EWSB],{addvectors2[[i]],f2}]===False || FreeQ[CorrectionListVectorVector[EWSB],{f2,addvectors2[[i]]}]===False,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[RE[f2]]<>ToString[addvectors2[[i]]]]}];
];
(*
If[FreeQ[CorrectionListVectorVector[EWSB],{addvectors2[[i]],f2}]===False,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[addvectors2[[i]]]<>ToString[RE[f2]]]}];,
Zconst=Join[Zconst,{ToExpression["Zf"<>ToString[RE[f2]]<>ToString[addvectors2[[i]]]]}];
]; *)
i++;];
];

Zconst=Intersection[Zconst];



If[WriteOneLoopCorrectionsWaveAmp[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,ToExpression["ct"<>ToString[#]]&/@couplings,Zconst,type] (*Returns true if there is any contribution *)
   , 
   SA`SavedInformationOneLoopDecaysWave=Join[SA`SavedInformationOneLoopDecaysWave,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings,Zconst}}}];

   SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],couplings];
   SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["ct"<>ToString[#]]&/@couplings];
   SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses];
   ,

   SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses];

  ];


(* (\*If[typeIn=!=LOOP,*\) *)
(*    (\* WriteOneLoopCorrectionsWave[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,Zconst,type]; *\) *)
(*    WriteOneLoopCorrectionsWaveAmp[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,ToExpression["ct"<>ToString[#]]&/@couplings,Zconst,type]; *)
(*    SA`SavedInformationOneLoopDecaysWave=Join[SA`SavedInformationOneLoopDecaysWave,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings,Zconst}}}]; *)

(*    SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],couplings]; *)
(*    SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],ToExpression["ct"<>ToString[#]]&/@couplings]; *)
(*    SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses]; *)


(* , *)
(*    (\* in case of a loop amplitude don't call the waveamp corrections! But we need some of the information to be stored*\) *)
(*    (\*SA`SavedInformationOneLoopDecaysWave=Join[SA`SavedInformationOneLoopDecaysWave,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings,Zconst}}}];*\) *)
(*    WriteOneLoopCorrectionsWaveAmp[NRoutine,DecayingParticle,OneLtbds[[1]],OneLtbds[[2]],allDiagrams,masses,couplings,{},Zconst,type]; (\*Don't need counterterms for loop induced *\) *)
(*    SA`SavedInformationOneLoopDecaysWave=Join[SA`SavedInformationOneLoopDecaysWave,{{DecayingParticle,{OneLtbds[[1]],OneLtbds[[2]]},NRoutine,{masses,couplings,Zconst}}}]; *)

(*    SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,2]],couplings]; *)
(*    SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]]=Join[SA`SavedInformationNeededMassesCouplingsParticle[[-1,3]],masses]; *)
(* ]; *)
(* *\) *)
   
];(*end MakeWaveCorrectionsAndCT *)




getZfactor[field1_,field2_,dim_]:=If[RE[field1]===RE[field2],
Return[getZfactor[field1,dim]];,
Return["Zf"<>ToString[field1]<>ToString[field2]];
];
getZfactorHead[field_,dim_]:=Block[{},
(* If[FreeQ[massless,RE[field/.diracSubBack1[ALL]/. diracSubBack2[ALL]]]===False || field===0, *)
If[field===0,
Return["0"];
];
If[Head[field]===conj,
Return["Conjg("<>getZfactor[RE[field],dim]<>")"];,
Return[getZfactor[field,dim]];
];
];

getZfactor[field_,dim_]:=Block[{dirac},
dirac = RE[field]/. diracSub[SA`CurrentStates];
If[Head[dirac]===List,
If[FreeQ[massless,RE[field]],
Return[{If[dirac[[1]]=!=0,"Zf"<>ToString[RE[RE[dirac[[1]]]]]<>dim,"0"],If[dirac[[2]]=!=0,"Zf"<>ToString[RE[RE[dirac[[2]]]]]<>dim,"0"]}];,
Return[{"0","0"}];
];,
If[FreeQ[massless,field],
Return["Zf"<>ToString[RE[RE[dirac]]]<>dim];,
Return["0"];
];
];
];


 





WriteModuleStart[NameModule_]:=Block[{i,j,k,typeDecays},
outputfortran=OpenWrite[ToFileName[$sarahSPhenoLoopDecayDir,"LoopDecay"<>NameModule<>"_"<>ModelName<>".f90"]];
WriteCopyRight[outputfortran];
WriteString[outputfortran,"Module OneLoopDecay_"<>NameModule<>"_"<>ToString[ModelName]<>"\n"];
WriteString[outputfortran,"Use Control \n"];
WriteString[outputfortran,"Use Settings \n"];
WriteString[outputfortran,"Use LoopFunctions \n"];
WriteString[outputfortran,"Use AddLoopFunctions \n"];
WriteString[outputfortran,"Use Model_Data_"<>ToString[ModelName]<>" \n"];
(* WriteString[outputfortran,"Use MsquaredTree \n"]; *)
typeDecays={"FFS","FFV","SSS","SFF","SSV","SVV"};
For[i=1,i<=Length[typeDecays],
WriteString[outputfortran,"Use Decay"<>typeDecays[[i]]<>" \n"];
i++;];
WriteString[outputfortran,"Use Bremsstrahlung \n\n"];
WriteString[outputfortran,"Contains \n\n"];];




GenerateDiagramsDecayVertexCorrections[f1_,f2_,f3_]:=Block[{temp,currentTop,type},
type=getType/@{f1,f2,f3};
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f3,FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},{{{f1,gt1},{Internal[1],i1},{AntiField[Internal[2]],i2}},{{f2,gt2},{AntiField[Internal[1]],i1},{Internal[3],i3}},{{f3,gt3},{AntiField[FieldToInsert[3]],i3},{FieldToInsert[2],i2}}}};
temp=InsFields[currentTop]; 

If[type==={S,S,V},
Select[temp,FreeQ[getType/@({Internal[1],Internal[2],Internal[3]}/.#[[2]]),G]&];
];

(*
currentTop={{C[AntiField[FieldToInsert[1]],f1,AntiField[FieldToInsert[2]]],C[f2,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[f3,FieldToInsert[1],FieldToInsert[3]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],External[1]\[Rule]f1,External[2]\[Rule]f2,External[3]\[Rule]f3,  Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt3, Topology\[Rule]1},{{{AntiField[Internal[1]],i1},{f1,gt1},{AntiField[Internal[2]],i2}},{{f2,gt2},{Internal[2],i2},{AntiField[Internal[3]],i3}},{{f3,gt3},{Internal[1],i1},{Internal[3],i3}}}};
temp=InsFields[currentTop];
*)


If[type==={S,S,S}||type==={S,S,V}||type==={S,V,V},
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,f3,AntiField[FieldToInsert[1]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->2},{{{f1,gt1},{Internal[1],i1},{AntiField[Internal[2]],i2}},{{f2,gt2},{f3,gt3},{AntiField[Internal[1]],i1},{Internal[2],i2}}}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,f3,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->3},
{{{f1,gt1},{f3,gt3},{Internal[1],i1},{AntiField[Internal[2]],i2}},{{f2,gt2},{AntiField[Internal[1]],i1},{Internal[2],i2}}}};
temp=Join[temp,InsFields[currentTop]];



If[type==={S,S,S} || type==={S,V,V},
currentTop={{C[f1,f2,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f3,AntiField[FieldToInsert[1]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->4},
{{{f1,gt1},{f2,gt2},{Internal[1],i1},{AntiField[Internal[2]],i2}},{{f3,gt3},{AntiField[Internal[1]],i1},{Internal[2],i2}}}};
temp=Join[temp,InsFields[currentTop]];
];
];


Return[DeleteCases[temp,{}]];
];

GenerateDiagramsDecayWaveCorrections[f1_,f2_,f3_]:=Block[{temp,currentTop},
(* With Quartic couplings *)
currentTop={{C[f1,f2,FieldToInsert[1]],C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[2],f3]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->1},
{{{f1,gt1},{f2,gt2},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{f3,gt3}}}};
temp=InsFields[currentTop];

currentTop={{C[f1,f3,FieldToInsert[1]],C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[2],f2]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->2},
{{{f1,gt1},{f3,gt3},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{f2,gt2}}}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[2],f1],C[f2,f3,FieldToInsert[1]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->3},
{{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[2],i2},{f1,gt1}},{{f2,gt2},{f3,gt3},{Internal[1],i1}}}};
temp=Join[temp,InsFields[currentTop]];

(* No Quartic couplings *)
currentTop={{C[f1,f2,FieldToInsert[1]],C[f3,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->4},
{{{f1,gt1},{f2,gt2},{Internal[1],i1}},{{f3,gt3},{Internal[2],i2},{AntiField[Internal[3]],i3}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[3],i3}}}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,f3,FieldToInsert[1]],C[f2,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->5},
{{{f1,gt1},{f3,gt3},{Internal[1],i1}},{{f2,gt2},{Internal[2],i2},{AntiField[Internal[3]],i3}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[3],i3}}}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[f2,f3,FieldToInsert[1]],C[AntiField[FieldToInsert[1]],AntiField[FieldToInsert[2]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, Topology->6},
{{{f1,gt1},{Internal[2],i2},{AntiField[Internal[3]],i3}},{{f2,gt2},{f3,gt3},{Internal[1],i1}},{{AntiField[Internal[1]],i1},{AntiField[Internal[2]],i2},{Internal[3],i3}}}};
temp=Join[temp,InsFields[currentTop]];

Return[DeleteCases[temp,{}]];
];

MatchVVVV[a_,b_]:=Block[{i,pos,slots={1,2,3,4},sub={},out,in,sel},
SetAttributes[ggTemp,Orderless];
out={ggTemp[1,2] ggTemp[3,4],ggTemp[1,3] ggTemp[2,4],ggTemp[1,4] ggTemp[2,3]};
in=out;
For[i=1,i<=4,
pos=Position[a,b[[i]],{1}];
sel=Select[pos,MemberQ[slots,#[[1]]]&][[1,1]];
sub=Join[sub,{i->sel}];
slots=DeleteCases[slots,sel];
i++;];
out=out/.sub;
Return[{Position[in,out[[1]]][[1,1]],Position[in,out[[2]]][[1,1]],Position[in,out[[3]]][[1,1]]}/.{1->"a",2->"b",3->"c"}];

];

WriteOneLoopCorrectionsDecayAmp[NameRoutine_,f1_,decays_,allDiagrams_,masses_,couplings_,type_,kind_]:=
    Block[{i,j,k,dim,dimAmp,inF1,inF2,inF3,c1,ind1,c2,ind2,coupsCallTree,coupsCall,coupsCheck,kend,dimIn={},massesCall,temp1,temp2,temp3,indorder,f2,f3},
	  allDiagramsSave=allDiagrams;
	  f2=decays[[1]];
	  f3=decays[[2]];
	  MakeSubroutineTitle["Amplitude_"<>kind<>"_"<>ModelName<>"_"<>NameRoutine,Flatten[{masses,couplings}],{},{"Amp"},outputfortran];
	  WriteString[outputfortran,"Implicit None\n\n"];
	  MakeVariableList[masses,", Intent(in)",outputfortran];
	  MakeVariableList[couplings,", Intent(in)",outputfortran];
	  dim="("<>ToString[getGen[f1]]<>","<>ToString[getGen[f2]]<>","<>ToString[getGen[f3]]<>")";
	  dim=Nest[StringReplace[#,{"(1,"->"(",",1,"->",",",1)"->")","(1)"->""}]&,dim,3];
	  Switch[getVertexType[{f1,f2,f3}],
		 FFV,dimAmp=StringReplace["(4)"<>dim,")("->","];,
		 FFS,dimAmp=StringReplace["(2)"<>dim,")("->","];,
		 SSS,dimAmp=StringReplace[""<>dim,")("->","];,
		 SFF,dimAmp=StringReplace["(2)"<>dim,")("->","];,
		 SSV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
		 SVV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
		 _,Print["Not yet done",{f1,f2,f3}];
		];

	  WriteString[outputfortran,"Complex(dp), Intent(out) :: Amp"<>dimAmp<>" \n\n"];
	  WriteString[outputfortran,"Integer :: i1, i2, i3, gt1, gt2, gt3 \n"];
	  Switch[getVertexType[{f1,f2,f3}],
		 FFV,WriteString[outputfortran,"Complex(dp) :: AmpC(4) \n"];,
		 FFS,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
		 SSS,WriteString[outputfortran,"Complex(dp) :: AmpC \n"];,
		 SSV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
		 SFF,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
		 SVV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
		 _,"Not yet done";
		];

	  WriteString[outputfortran,"Real(dp) :: Mex1, Mex2, Mex3, ExtRMsq \n"];
	  Switch[kind,
		 "VERTEX",
		 WriteString[outputfortran,"Real(dp) :: ML1, ML2, ML3 \n"];,
		 "WAVE",
		 WriteString[outputfortran,"Real(dp) :: ML1, ML2, MP \n"];
		];
	  WriteString[outputfortran,"Complex(dp) :: coupT1, coupT1L, coupT1R, coup1, coup1L, coup1R \n"];
	  WriteString[outputfortran,"Complex(dp) :: coup2, coup2L, coup2R, coup3, coup3L, coup3R, coup2a,coup2b,coup2c \n"];

	  If[getGen[f1]>1,WriteString[outputfortran,"Do gt1=1,"<>ToString[getGen[f1]]<>"\n"];dimIn=Join[dimIn,{gt1}];];
	  If[getGen[f2]>1,WriteString[outputfortran,"  Do gt2=1,"<>ToString[getGen[f2]]<>"\n"];dimIn=Join[dimIn,{gt2}];];
	  If[getGen[f3]>1,WriteString[outputfortran,"    Do gt3=1,"<>ToString[getGen[f3]]<>"\n"];dimIn=Join[dimIn,{gt3}];];
	  dimIn=StringReplace[StringReplace[ToString[dimIn],{"{}"->""}],{"{"->"(","}"->")"}];
	  Switch[getVertexType[{f1,f2,f3}],
		 SSS,dimIn=StringReplace[""<>dimIn,{")("->","}];,
		 _,dimIn=StringReplace["(:)"<>dimIn,{")("->","}];
		];
	  WriteString[outputfortran,"Amp"<>dimIn<>" = 0._dp \n"];
	  WriteString[outputfortran,"! External masses \n"];
	  WriteString[outputfortran,"Mex1 = "<>SPhenoMass[f1,gt1]<>" \n"];
	  WriteString[outputfortran,"Mex2 = "<>SPhenoMass[f2,gt2]<>" \n"];
	  WriteString[outputfortran,"Mex3 = "<>SPhenoMass[f3,gt3]<>" \n"];

	  (*
	     WriteString[outputfortran,"\n\n If (Mex1.gt.(Mex2+Mex3)) Then \n\n"];
	     *)

	  For[i=1,i<=Length[allDiagrams],
	      coupsCall="";
	      WriteString[outputfortran,"\n\n! "<>ToString[DeleteCases[{Internal[1],Internal[2],Internal[3]}/.allDiagrams[[i,2]],Internal[_]]]<>"\n"];
	      inF1=Internal[1]/.allDiagrams[[i,2]];
	      inF2=Internal[2]/.allDiagrams[[i,2]];
	      inF3=Internal[3]/.allDiagrams[[i,2]];
	      If[Head[inF3]===Internal,
		 ThreeInternal=False;
		 If[FlagLoopContributions===True,
		    WriteString[outputfortran,"If (("<>SPhenoIncludeLoop[getBlank[inF1]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF2]]<>")) Then \n"];
		   ];,
		 ThreeInternal=True;
		 If[FlagLoopContributions===True,
		    WriteString[outputfortran,"If (("<>SPhenoIncludeLoop[getBlank[inF1]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF2]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF3]]<>")) Then \n"];
		   ];
		];

	      If[getGen[inF1]>1,WriteString[outputfortran,"Do i1=1,"<>ToString[getGen[inF1]]<>"\n"]];
	      If[getGen[inF2]>1,WriteString[outputfortran,"  Do i2=1,"<>ToString[getGen[inF2]]<>"\n"]];
	      If[ThreeInternal,If[getGen[inF3]>1,WriteString[outputfortran,"    Do i3=1,"<>ToString[getGen[inF3]]<>"\n"]];];

	      (* Setting the masses *)
	      Switch[kind,
		     "VERTEX",

		     WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF1,i1]<>" \n"];
		     WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF2,i2]<>" \n"];

		     (*
			WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF1,i1]<>" \n"];
			WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
			*)

		     If[ThreeInternal,
			WriteString[outputfortran,"ML3 = "<>SPhenoMass[inF3,i3]<>" \n"];
			massesCall="ML1,ML2,ML3";,massesCall="ML1,ML2";
		       ];,
		     "WAVE",
		     WriteString[outputfortran,"MP = "<>SPhenoMass[inF1,i1]<>" \n"];
		     If[ThreeInternal===False, (* Quartic corrections *)
			WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
			massesCall="ML1,MP";,
			If[SortFieldExternalDecay[getType[inF2],getType[inF3]]==={getType[inF2],getType[inF3]},
			   WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
			   WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF3,i3]<>" \n"];,
			   WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF2,i2]<>" \n"];
			   WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF3,i3]<>" \n"];
			   {inF2,inF3}={inF3,inF2};
			  ];
			massesCall="ML1,ML2,MP";
		       ];
		    ];



	      If[ThreeInternal,kend=3;,kend=2;];

	      If[ThreeInternal,
		 coupsCheck="";
		 For[k=1,k<= kend,

		     c1=getSPhenoCoupling2[allDiagrams[[i,1,k]],SPhenoCouplingsAllreallyAll];
		     ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,k]]/.allDiagrams[[i,2]],c1[[2]]];

		     Switch[getType/@RE/@{f1,f2,f3},
			    {F,F,S}|{F,F,V}|{S,F,F}|{S,S,S}|{S,S,V},
			    c1=CheckFermionFlipDecay[FieldOrder[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k]/.allDiagrams[[i,2]],c1, ind1];
			    ind1=c1[[2]];c1=c1[[1]];
			    If[getVertexType[allDiagramsSave[[i,1,k]]]===SSV||getVertexType[allDiagramsSave[[i,1,k]]]===VVV ,
			       c1[[1]] =ExtraSign[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k] (getSignVertexFA[Cp@@(FieldOrder[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k]/.allDiagrams[[i,2]])/.{A_[gt1]->A,A_[gt2]->A,A_[gt3]->A,A_[i1]->A,A_[i2]->A,A_[i3]->A},c1[[2]],getVertexType[allDiagramsSave[[i,1,k]]]]c1[[1]]);
			      ];,
			    _,
			    Switch[k,
				   1,c1=CheckFermionFlipDecay[{Internal[1][i1],AntiField[Internal[2]][i2],External[1][gt1]}/.allDiagrams[[i,2]],c1, ind1];,
				   2,c1=CheckFermionFlipDecay[{Internal[3][i3],AntiField[Internal[1]][i1],External[2][gt2]}/.allDiagrams[[i,2]],c1, ind1];,
				   3,c1=CheckFermionFlipDecay[{Internal[2][i2],AntiField[Internal[3]][i3],External[3][gt3]}/.allDiagrams[[i,2]],c1, ind1]; 
				  ];
			    ind1=c1[[2]];c1=c1[[1]];
			    If[getVertexType[allDiagramsSave[[i,1,k]]]===SSV||getVertexType[allDiagramsSave[[i,1,k]]]===VVV ,
			       c1[[1]] = getSignVertex[Cp@@(allDiagramsSave[[i,3,k]] /.allDiagramsSave[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagramsSave[[i,1,k]]]]c1[[1]];
			      ];
			   ];


		     WriteVertexToFile[k,c1,ind1,getVertexType[allDiagrams[[i,1,k]]],outputfortran];
		     If[getVertexType[allDiagrams[[i,1,k]]]===FFS||getVertexType[allDiagrams[[i,1,k]]]===FFV,
			coupsCall=coupsCall<>",coup"<>ToString[k]<>"L,coup"<>ToString[k]<>"R";
			coupsCheck=coupsCheck<>"(Abs(coup"<>ToString[k]<>"L)+Abs(coup"<>ToString[k]<>"R))";,
			coupsCall=coupsCall<>",coup"<>ToString[k];
			coupsCheck=coupsCheck<>"(Abs(coup"<>ToString[k]<>"))";
		       ];
		     If[k<kend,coupsCheck=coupsCheck<>"*";];

		     k++;];
		 (* If[getVertexType[{f1,f2,f3}]===SVV,
		    WriteString[outputfortran,"AmpC = 0._dp \n"];, *)
		 WriteString[outputfortran,"If ("<>coupsCheck<>".gt.epsCoup) Then \n"];
		 If[(kind==="WAVE" && type===FFV && getType[inF1]===S) || (kind==="WAVE" && type===FFV && getType[inF1]===V && getType[inF2]===G),
		    WriteString[outputfortran, "AmpC = 0._dp ! Needs to check why this vanishes exactly in FeynArts \n"];,
		    WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];
		   ];
		 WriteString[outputfortran,"Else\n"];
		 WriteString[outputfortran," AmpC = 0._dp\n"];
		 WriteString[outputfortran,"End if\n"];
		 WriteString[outputfortran,"! Colour and symmetry Factor \n"];
		 (*If[FreeQ[VerticesInv[All],C[External[1],External[2],External[3]]/. allDiagrams[[i,2]]]===False,*)
		 If[decays[[3]]=!=LOOP,
		    (*
		    temp1=Join[allDiagrams[[i,1]],{C[AntiField[External[1]],AntiField[External[2]],AntiField[External[3]]]/.allDiagrams[[i,2]]}];
		    temp2=Join[DeleteCases[allDiagrams[[i,2]],Index[3]->x_]/.External[2]->Internal[4]/.External[3]->Internal[5],{External[2]->(AntiField[External[1]/.allDiagrams[[i,2]]])}];
		    temp3=Join[allDiagrams[[i,3]],{{{AntiField[External[1]],ex2},{AntiField[External[2]],Index[2]},{AntiField[External[3]],Index[3]}}}]/.allDiagrams[[i,2]]/.{gt1->ex1,gt2->in4,gt3->in5,i1->in1,i2->in2,i3->in3};
		    cfactor=getChargeFactor[{temp1,temp2,temp3},temp3/.temp2/.{gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
		       *)
		    cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
		    ,
		    cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
		   ];
		 (* ]; *)

		 If[AntiField[f1]===f1 && AntiField[f2]===f2&&AntiField[f3]===f3,
		    If[RE[inF1]===RE[inF2]&& RE[inF2]===RE[inF3],
		       If[AntiField[inF1]=!=inF1,
			  cfactor=2*cfactor;
			 ];
		      ];
		   ];

		 WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

		 ,

		 (*
		    If[getVertexType[{f1,f2,f3}]===SVV,
		    WriteString[outputfortran,"AmpC = 0._dp \n"];,
		    *)
		 (* two internal *)

		 coupsCall=",coup1,coup2";
		 coupsCheck="Abs(coup1)*Abs(coup2)";

		 Switch[Length[allDiagrams[[i,1,1]]],
			3,

			If[getVertexType[allDiagrams[[i,1,2]]]===VVVV,
			   coupsCall=",coup1,coup2a,coup2b,coup2c";
			   coupsCheck="Abs(coup1)*(Abs(coup2a)+Abs(coup2b)+Abs(coup2c)) ";
			   c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsAllreallyAll];
			   ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];
			   If[getVertexType[allDiagrams[[i,1,1]]]===SSV||getVertexType[allDiagrams[[i,1,1]]]===VVV ,
			      c1[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,1]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagrams[[i,1,1]]]]c1[[1]];
			     ];
			   WriteVertexToFile[1,c1,ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];
			   c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsColoredQuartics];
			   ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];

			   WriteVertexToFile[2,c2[[1,1]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
			   indorder=MatchVVVV[{f2,f3,conj[inF1],inF2},{c2[[2,1]],c2[[2,2]],c2[[2,3]],c2[[2,4]]}/.A_Symbol[{b_Symbol}]->A];
			   WriteString[outputfortran,"coup2"<>indorder[[1]]<>" = coup2 \n"];
			   WriteVertexToFile[2,c2[[1,2]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
			   WriteString[outputfortran,"coup2"<>indorder[[2]]<>" = coup2 \n"];
			   WriteVertexToFile[2,c2[[1,3]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
			   WriteString[outputfortran,"coup2"<>indorder[[3]]<>" = coup2 \n"];

			   WriteString[outputfortran,"If ("<>coupsCheck<>".gt.epsCoup) Then \n"];
			   WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];
			   WriteString[outputfortran,"Else\n"];
			   WriteString[outputfortran," AmpC = 0._dp\n"];
			   WriteString[outputfortran,"End if\n"];

			   WriteString[outputfortran,"! Colour and symmetry Factor \n"];
			   cfactor=1;
			   If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
			   WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

			   ,
			   c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsAllreallyAll];
			   ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];
			   If[getVertexType[allDiagrams[[i,1,1]]]===SSV||getVertexType[allDiagrams[[i,1,1]]]===VVV ,
			      c1[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,1]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagrams[[i,1,1]]]]c1[[1]];
			     ];

			   WriteVertexToFile[1,c1,ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];


			   c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsColoredQuartics];
			   ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];

			   For[k=1,k<=Length[c2[[1]]],
			       WriteVertexToFile[2,c2[[1,k]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];

			       WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];

			       WriteString[outputfortran,"! Colour and symmetry Factor \n"];
			       If[decays[[3]]=!=LOOP,
				  cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
				  ,
				  cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
				 ];
			       If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
			       WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

			       k++;];

			  ];,


			4,




			c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsColoredQuartics];
			ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];

			c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsAllreallyAll];
			ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];
			If[getVertexType[allDiagrams[[i,1,2]]]===SSV||getVertexType[allDiagrams[[i,1,2]]]===VVV ,
			   c2[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,2]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c2[[2]],getVertexType[allDiagrams[[i,1,2]]]]c2[[1]];
			  ];


			For[k=1,k<=Length[c1[[1]]],
			    WriteVertexToFile[1,c1[[1,k]],ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];
			    WriteVertexToFile[2,c2,ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];

			    WriteString[outputfortran,"If ("<>coupsCheck<>".gt.epsCoup) Then \n"];
			    WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];
			    WriteString[outputfortran,"Else\n"];
			    WriteString[outputfortran," AmpC = 0._dp\n"];
			    WriteString[outputfortran,"End if\n"];

			    WriteString[outputfortran,"! Colour and symmetry Factor \n"];

			    If[decays[[3]]=!=LOOP,
			       cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
			       ,
			       cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
			      ];

			    
			    If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
			    WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n\n"];
			    
			    
			    k++;];


		       ]; (* End Switch *)
		

		 (*Print[{Internal[1], Internal[2], Internal[3]} /. allDiagrams[[i, 2]],"colour factor: ",cfactor];*)
		 
		];






		 If[ThreeInternal,If[getGen[inF3]>1,WriteString[outputfortran,"    End Do\n"]];];
		 If[getGen[inF2]>1,WriteString[outputfortran,"  End Do\n"]];
		 If[getGen[inF1]>1,WriteString[outputfortran,"End Do\n"]];

		 If[FlagLoopContributions===True,
		    WriteString[outputfortran,"End if \n"];
		   ];

		 i++;];


	      (*
		 WriteString[outputfortran,"\n\n Else \n"];
		 WriteString[outputfortran,"  Amp"<>dimIn<>" = 0._dp \n"];
		 WriteString[outputfortran,"\n End if \n\n"];
		 *)
	      If[getGen[f3]>1,WriteString[outputfortran,"    End Do\n"]];
	      If[getGen[f2]>1,WriteString[outputfortran,"  End Do\n"]];
	      If[getGen[f1]>1,WriteString[outputfortran,"End Do\n"]];

	      WriteString[outputfortran,"End Subroutine Amplitude_"<>kind<>"_"<>ModelName<>"_"<>NameRoutine<>"\n\n\n"];
	     ];


WriteOneLoopCorrectionsDecayAmpIR[NameRoutine_,f1_,decays_,allDiagrams_,masses_,couplings_,type_,kind_]:=
Block[{i,j,k,dim,dimAmp,inF1,inF2,inF3,c1,ind1,c2,ind2,coupsCallTree,coupsCall,dimIn={},massesCall,temp1,temp2,temp3,indorder,f2,f3},
      allDiagramsSave=allDiagrams;
      f2=decays[[1]];
      f3=decays[[2]];
MakeSubroutineTitle["Amplitude_IR_"<>kind<>"_"<>ModelName<>"_"<>NameRoutine,Flatten[{masses,couplings}],{},{"Amp"},outputfortran];
WriteString[outputfortran,"Implicit None\n\n"];
MakeVariableList[masses,", Intent(in)",outputfortran];
MakeVariableList[couplings,", Intent(in)",outputfortran];
dim="("<>ToString[getGen[f1]]<>","<>ToString[getGen[f2]]<>","<>ToString[getGen[f3]]<>")";
dim=Nest[StringReplace[#,{"(1,"->"(",",1,"->",",",1)"->")","(1)"->""}]&,dim,3];
Switch[getVertexType[{f1,f2,f3}],
FFV,dimAmp=StringReplace["(4)"<>dim,")("->","];,
FFS,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SSS,dimAmp=StringReplace[""<>dim,")("->","];,
SFF,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SSV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SVV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
_,Print["Not yet done",{f1,f2,f3}];
];

WriteString[outputfortran,"Complex(dp), Intent(out) :: Amp"<>dimAmp<>" \n\n"];
WriteString[outputfortran,"Integer :: i1, i2, i3, gt1, gt2, gt3 \n"];
Switch[getVertexType[{f1,f2,f3}],
FFV,WriteString[outputfortran,"Complex(dp) :: AmpC(4) \n"];,
FFS,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SSS,WriteString[outputfortran,"Complex(dp) :: AmpC \n"];,
SSV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SFF,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SVV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
_,"Not yet done";
];

WriteString[outputfortran,"Real(dp) :: Mex1, Mex2, Mex3, ExtRMsq \n"];
Switch[kind,
"VERTEX",
WriteString[outputfortran,"Real(dp) :: ML1, ML2, ML3 \n"];,
"WAVE",
WriteString[outputfortran,"Real(dp) :: ML1, ML2, MP \n"];
];
WriteString[outputfortran,"Complex(dp) :: coupT1, coupT1L, coupT1R, coup1, coup1L, coup1R \n"];
WriteString[outputfortran,"Complex(dp) :: coup2, coup2L, coup2R, coup3, coup3L, coup3R, coup2a,coup2b,coup2c \n"];

If[getGen[f1]>1,WriteString[outputfortran,"Do gt1=1,"<>ToString[getGen[f1]]<>"\n"];dimIn=Join[dimIn,{gt1}];];
If[getGen[f2]>1,WriteString[outputfortran,"  Do gt2=1,"<>ToString[getGen[f2]]<>"\n"];dimIn=Join[dimIn,{gt2}];];
If[getGen[f3]>1,WriteString[outputfortran,"    Do gt3=1,"<>ToString[getGen[f3]]<>"\n"];dimIn=Join[dimIn,{gt3}];];
dimIn=StringReplace[StringReplace[ToString[dimIn],{"{}"->""}],{"{"->"(","}"->")"}];
Switch[getVertexType[{f1,f2,f3}],
SSS,dimIn=StringReplace[""<>dimIn,{")("->","}];,
_,dimIn=StringReplace["(:)"<>dimIn,{")("->","}];
];
WriteString[outputfortran,"Amp"<>dimIn<>" = 0._dp \n"];

WriteString[outputfortran,"IRdivOnly =.true. \n"];

WriteString[outputfortran,"! External masses \n"];
WriteString[outputfortran,"Mex1 = "<>SPhenoMass[f1,gt1]<>" \n"];
WriteString[outputfortran,"Mex2 = "<>SPhenoMass[f2,gt2]<>" \n"];
WriteString[outputfortran,"Mex3 = "<>SPhenoMass[f3,gt3]<>" \n"];

(*
WriteString[outputfortran,"\n\n If (Mex1.gt.(Mex2+Mex3)) Then \n\n"];
*)

For[i=1,i<=Length[allDiagrams],
coupsCall="";
WriteString[outputfortran,"\n\n! "<>ToString[DeleteCases[{Internal[1],Internal[2],Internal[3]}/.allDiagrams[[i,2]],Internal[_]]]<>"\n"];
inF1=Internal[1]/.allDiagrams[[i,2]];
inF2=Internal[2]/.allDiagrams[[i,2]];
inF3=Internal[3]/.allDiagrams[[i,2]];
If[Head[inF3]===Internal,
ThreeInternal=False;
If[FlagLoopContributions===True,
WriteString[outputfortran,"If (("<>SPhenoIncludeLoop[getBlank[inF1]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF2]]<>")) Then \n"];
];,
ThreeInternal=True;
If[FlagLoopContributions===True,
WriteString[outputfortran,"If (("<>SPhenoIncludeLoop[getBlank[inF1]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF2]]<>").and.("<>SPhenoIncludeLoop[getBlank[inF3]]<>")) Then \n"];
];
];

If[getGen[inF1]>1,WriteString[outputfortran,"Do i1=1,"<>ToString[getGen[inF1]]<>"\n"]];
If[getGen[inF2]>1,WriteString[outputfortran,"  Do i2=1,"<>ToString[getGen[inF2]]<>"\n"]];
If[ThreeInternal,If[getGen[inF3]>1,WriteString[outputfortran,"    Do i3=1,"<>ToString[getGen[inF3]]<>"\n"]];];

(* Setting the masses *)
Switch[kind,
"VERTEX",

WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF1,i1]<>" \n"];
WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF2,i2]<>" \n"];

(*
WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF1,i1]<>" \n"];
WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
*)

If[ThreeInternal,
WriteString[outputfortran,"ML3 = "<>SPhenoMass[inF3,i3]<>" \n"];
massesCall="ML1,ML2,ML3";,massesCall="ML1,ML2";
];,
"WAVE",
WriteString[outputfortran,"MP = "<>SPhenoMass[inF1,i1]<>" \n"];
If[ThreeInternal===False, (* Quartic corrections *)
WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
massesCall="ML1,MP";,
If[SortFieldExternalDecay[getType[inF2],getType[inF3]]==={getType[inF2],getType[inF3]},
WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF2,i2]<>" \n"];
WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF3,i3]<>" \n"];,
WriteString[outputfortran,"ML2 = "<>SPhenoMass[inF2,i2]<>" \n"];
WriteString[outputfortran,"ML1 = "<>SPhenoMass[inF3,i3]<>" \n"];
{inF2,inF3}={inF3,inF2};
];
massesCall="ML1,ML2,MP";
];
];



If[ThreeInternal,kend=3;,kend=2;];

If[ThreeInternal,

For[k=1,k<= kend,

c1=getSPhenoCoupling2[allDiagrams[[i,1,k]],SPhenoCouplingsAllreallyAll];
ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,k]]/.allDiagrams[[i,2]],c1[[2]]];

Switch[getType/@RE/@{f1,f2,f3},
{F,F,S}|{F,F,V}|{S,F,F}|{S,S,S}|{S,S,V},
c1=CheckFermionFlipDecay[FieldOrder[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k]/.allDiagrams[[i,2]],c1, ind1];
ind1=c1[[2]];c1=c1[[1]];
If[getVertexType[allDiagramsSave[[i,1,k]]]===SSV||getVertexType[allDiagramsSave[[i,1,k]]]===VVV ,
c1[[1]] =ExtraSign[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k] (getSignVertexFA[Cp@@(FieldOrder[getType[f1]->getType/@{f2,f3},1,getType/@{inF1,inF2,inF3},k]/.allDiagrams[[i,2]])/.{A_[gt1]->A,A_[gt2]->A,A_[gt3]->A,A_[i1]->A,A_[i2]->A,A_[i3]->A},c1[[2]],getVertexType[allDiagramsSave[[i,1,k]]]]c1[[1]]);
];,
_,
Switch[k,
1,c1=CheckFermionFlipDecay[{Internal[1][i1],AntiField[Internal[2]][i2],External[1][gt1]}/.allDiagrams[[i,2]],c1, ind1];,
2,c1=CheckFermionFlipDecay[{Internal[3][i3],AntiField[Internal[1]][i1],External[2][gt2]}/.allDiagrams[[i,2]],c1, ind1];,
3,c1=CheckFermionFlipDecay[{Internal[2][i2],AntiField[Internal[3]][i3],External[3][gt3]}/.allDiagrams[[i,2]],c1, ind1]; 
];
ind1=c1[[2]];c1=c1[[1]];
If[getVertexType[allDiagramsSave[[i,1,k]]]===SSV||getVertexType[allDiagramsSave[[i,1,k]]]===VVV ,
c1[[1]] = getSignVertex[Cp@@(allDiagramsSave[[i,3,k]] /.allDiagramsSave[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagramsSave[[i,1,k]]]]c1[[1]];
];
];


WriteVertexToFile[k,c1,ind1,getVertexType[allDiagrams[[i,1,k]]],outputfortran];
If[getVertexType[allDiagrams[[i,1,k]]]===FFS||getVertexType[allDiagrams[[i,1,k]]]===FFV,
coupsCall=coupsCall<>",coup"<>ToString[k]<>"L,coup"<>ToString[k]<>"R";,
coupsCall=coupsCall<>",coup"<>ToString[k];
];

k++;];
(* If[getVertexType[{f1,f2,f3}]===SVV,
WriteString[outputfortran,"AmpC = 0._dp \n"];, *)

If[(kind==="WAVE" && type===FFV && getType[inF1]===S) || (kind==="WAVE" && type===FFV && getType[inF1]===V && getType[inF2]===G),
WriteString[outputfortran, "AmpC = 0._dp ! Needs to check why this vanishes exactly in FeynArts \n"];,
WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];
];
WriteString[outputfortran,"! Colour and symmetry Factor \n"];

If[decays[[3]]=!=LOOP,
   cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
   ,
   cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
  ];

   
(* ]; *)

If[AntiField[f1]===f1 && AntiField[f2]===f2&&AntiField[f3]===f3,
If[RE[inF1]===RE[inF2]&& RE[inF2]===RE[inF3],
If[AntiField[inF1]=!=inF1,
cfactor=2*cfactor;
];
];
];

WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

,

(*
If[getVertexType[{f1,f2,f3}]===SVV,
WriteString[outputfortran,"AmpC = 0._dp \n"];,
*)
(* two internal *)

coupsCall=",coup1,coup2";

Switch[Length[allDiagrams[[i,1,1]]],
3,

If[getVertexType[allDiagrams[[i,1,2]]]===VVVV,
coupsCall=",coup1,coup2a,coup2b,coup2c";

c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsAllreallyAll];
ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];
If[getVertexType[allDiagrams[[i,1,1]]]===SSV||getVertexType[allDiagrams[[i,1,1]]]===VVV ,
c1[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,1]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagrams[[i,1,1]]]]c1[[1]];
];
WriteVertexToFile[1,c1,ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];
c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsColoredQuartics];
ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];

WriteVertexToFile[2,c2[[1,1]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
indorder=MatchVVVV[{f2,f3,conj[inF1],inF2},{c2[[2,1]],c2[[2,2]],c2[[2,3]],c2[[2,4]]}/.A_Symbol[{b_Symbol}]->A];
WriteString[outputfortran,"coup2"<>indorder[[1]]<>" = coup2 \n"];
WriteVertexToFile[2,c2[[1,2]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
WriteString[outputfortran,"coup2"<>indorder[[2]]<>" = coup2 \n"];
WriteVertexToFile[2,c2[[1,3]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];
WriteString[outputfortran,"coup2"<>indorder[[3]]<>" = coup2 \n"];

WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];

WriteString[outputfortran,"! Colour and symmetry Factor \n"];
cfactor=1;
If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

,
c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsAllreallyAll];
ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];
If[getVertexType[allDiagrams[[i,1,1]]]===SSV||getVertexType[allDiagrams[[i,1,1]]]===VVV ,
c1[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,1]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c1[[2]],getVertexType[allDiagrams[[i,1,1]]]]c1[[1]];
];

WriteVertexToFile[1,c1,ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];


c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsColoredQuartics];
ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];

For[k=1,k<=Length[c2[[1]]],
WriteVertexToFile[2,c2[[1,k]],ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];

WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];

WriteString[outputfortran,"! Colour and symmetry Factor \n"];
    If[decays[[3]]=!=LOOP,
	 cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
	 ,
	 cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
	 ];






    
If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n"];

k++;];

];,


4,




c1=getSPhenoCoupling2[allDiagrams[[i,1,1]],SPhenoCouplingsColoredQuartics];
ind1 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,1]]/.allDiagrams[[i,2]],c1[[2]]];

c2=getSPhenoCoupling2[allDiagrams[[i,1,2]],SPhenoCouplingsAllreallyAll];
ind2 =MakeIndicesCouplingWrapper[allDiagrams[[i,3,2]]/.allDiagrams[[i,2]],c2[[2]]];
If[getVertexType[allDiagrams[[i,1,2]]]===SSV||getVertexType[allDiagrams[[i,1,2]]]===VVV ,
c2[[1]] = getSignVertex[Cp@@(allDiagrams[[i,3,2]] /.allDiagrams[[i,2]] )/. Cp[{A1_,A2_Symbol},{B1_,B2_Symbol},{C1_,C2_Symbol}]->Cp[A1,B1,C1],c2[[2]],getVertexType[allDiagrams[[i,1,2]]]]c2[[1]];
];


For[k=1,k<=Length[c1[[1]]],
WriteVertexToFile[1,c1[[1,k]],ind1,getVertexType[allDiagrams[[i,1,1]]],outputfortran];
WriteVertexToFile[2,c2,ind2,getVertexType[allDiagrams[[i,1,2]]],outputfortran];

WriteString[outputfortran,"Call Amp_"<>kind<>"_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"_Topology"<>ToString[Topology/.allDiagrams[[i,2]]]<>"_"<>ToString[getType[inF1] /. G->U]<>If[kind==="WAVE","_",""]<>ToString[getType[inF2] /. G->U]<>If[ThreeInternal,ToString[getType[inF3] /. G->U],""]<>"(Mex1,Mex2,Mex3,"<>massesCall<>coupsCall<>",AmpC) \n"];

WriteString[outputfortran,"! Colour and symmetry Factor \n"];
    If[decays[[3]]=!=LOOP,
       cfactor = getChargeFactorDec[allDiagrams[[i]],decays[[4]]];
       ,
       cfactor = getChargeFactor[allDiagrams[[i]],allDiagrams[[i,3]] /. allDiagrams[[i,2]] /. {gt1->ex1,gt2->ex2,gt3->ex3,i1->in1,i2->in2,i3->in3},1];
      ];



    
If[conj[inF1]===inF1 && conj[inF2]===inF2 && inF1===inF2,cfactor=cfactor/2;];
WriteString[outputfortran,"Amp"<>dimIn<>" = Amp"<>dimIn<>" + oo16pi2*("<>SPhenoForm[cfactor]<>")*AmpC \n\n"];

k++;];


];
];






If[ThreeInternal,If[getGen[inF3]>1,WriteString[outputfortran,"    End Do\n"]];];
If[getGen[inF2]>1,WriteString[outputfortran,"  End Do\n"]];
If[getGen[inF1]>1,WriteString[outputfortran,"End Do\n"]];

If[FlagLoopContributions===True,
WriteString[outputfortran,"End if \n"];
];

i++;];


(*
WriteString[outputfortran,"\n\n Else \n"];
WriteString[outputfortran,"  Amp"<>dimIn<>" = 0._dp \n"];
WriteString[outputfortran,"\n End if \n\n"];
*)
If[getGen[f3]>1,WriteString[outputfortran,"    End Do\n"]];
If[getGen[f2]>1,WriteString[outputfortran,"  End Do\n"]];
If[getGen[f1]>1,WriteString[outputfortran,"End Do\n"]];

WriteString[outputfortran,"\n"];

WriteString[outputfortran,"IRdivOnly =.false. \n"];

WriteString[outputfortran,"End Subroutine Amplitude_IR_"<>kind<>"_"<>ModelName<>"_"<>NameRoutine<>"\n\n\n"];
];


WriteTreeLevelDecayAmp[NameRoutine_,f1_,f2_,f3_,allDiagrams_,masses_,couplings_,type_]:=Block[{i,j,k,dim,in1,in2,in3,c1,ind1,coupsCallTree,coupsCall,dimIn={},dimAmp},
MakeSubroutineTitle["Amplitude_Tree_"<>ModelName<>"_"<>NameRoutine,Flatten[{couplings,masses}],{},{(*"RMsqtree",*)"Amp"},outputfortran];
WriteString[outputfortran,"Implicit None\n\n"];
MakeVariableList[masses,", Intent(in)",outputfortran];
MakeVariableList[couplings,", Intent(in)",outputfortran];
dim="("<>ToString[getGen[f1]]<>","<>ToString[getGen[f2]]<>","<>ToString[getGen[f3]]<>")";
dim=Nest[StringReplace[#,{"(1,"->"(",",1,"->",",",1)"->")","(1)"->""}]&,dim,3];
Switch[getVertexType[{f1,f2,f3}],
FFV,dimAmp=StringReplace["(4)"<>dim,")("->","];,
FFS,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SSS,dimAmp=StringReplace[""<>dim,")("->","];,
SFF,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SSV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
SVV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
_,Print["Not yet done",{f1,f2,f3}];
];
WriteString[outputfortran,"Complex(dp) :: Amp"<>dimAmp<>" \n\n"];
WriteString[outputfortran,"Integer :: i1, i2, i3, gt1, gt2, gt3 \n"];
Switch[getVertexType[{f1,f2,f3}],
FFV,WriteString[outputfortran,"Complex(dp) :: AmpC(4) \n"];,
FFS,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SSS,WriteString[outputfortran,"Complex(dp) :: AmpC \n"];,
SFF,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SSV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
SVV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
_,"Not yet done";
];
WriteString[outputfortran,"Real(dp) :: Mex1, Mex2, Mex3, ExtRMsq \n"];
WriteString[outputfortran,"Complex(dp) :: coupT1, coupT1L, coupT1R \n\n"];

If[getGen[f1]>1,WriteString[outputfortran,"Do gt1=1,"<>ToString[getGen[f1]]<>"\n"];dimIn=Join[dimIn,{gt1}];];
If[getGen[f2]>1,WriteString[outputfortran,"  Do gt2=1,"<>ToString[getGen[f2]]<>"\n"];dimIn=Join[dimIn,{gt2}];];
If[getGen[f3]>1,WriteString[outputfortran,"    Do gt3=1,"<>ToString[getGen[f3]]<>"\n"];dimIn=Join[dimIn,{gt3}];];
dimIn=StringReplace[StringReplace[ToString[dimIn],{"{}"->""}],{"{"->"(","}"->")"}];
Switch[getVertexType[{f1,f2,f3}],
SSS,dimIn=StringReplace[""<>dimIn,{")("->","}];,
_,dimIn=StringReplace["(:)"<>dimIn,{")("->","}];
];
WriteString[outputfortran,"! External masses \n"];
WriteString[outputfortran,"Mex1 = "<>SPhenoMass[f1,gt1]<>" \n"];
WriteString[outputfortran,"Mex2 = "<>SPhenoMass[f2,gt2]<>" \n"];
WriteString[outputfortran,"Mex3 = "<>SPhenoMass[f3,gt3]<>" \n"];

(*
WriteString[outputfortran,"\n\n If (Mex1.gt.(Mex2+Mex3)) Then \n\n"];
*)

WriteString[outputfortran,"! Tree-Level Vertex \n"];
c1=getSPhenoCoupling2[C[AntiField[f1],f2,f3],SPhenoCouplingsAll];
ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,gt2},{f3,gt3},c1[[2]]][[1]];
Switch[type,
FFS|SFF,
WriteString[outputfortran,"coupT1L = "<>ToString[c1[[1,1]]]<>ind1<>"\n"];
WriteString[outputfortran,"coupT1R = "<>ToString[c1[[1,2]]]<>ind1<>"\n"];
coupsCallTree="coupT1L,coupT1R"; ,
FFV,  (* fermion flow opposite to FeynArts *)
WriteString[outputfortran,"coupT1L = "<>ToString[c1[[1,1]]]<>ind1<>"\n"];
WriteString[outputfortran,"coupT1R = "<>ToString[c1[[1,2]]]<>ind1<>"\n"];
coupsCallTree="coupT1R,coupT1L";,
SSV,
c1[[1]] = getSignVertex[Cp[AntiField[f1],f2,f3],c1[[2]],SSV]c1[[1]];
WriteString[outputfortran,"coupT1 = "<>ToString[c1[[1,1]]]<>ind1<>"\n"];
coupsCallTree="coupT1";,
_,
WriteString[outputfortran,"coupT1 = "<>ToString[c1[[1,1]]]<>ind1<>"\n"];
coupsCallTree="coupT1";
];

(* If[type===SVV,
WriteString[outputfortran,"AmpC = 0._dp \n"];, *)
WriteString[outputfortran,"Call TreeAmp_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"(Mex1,Mex2,Mex3,"<>coupsCallTree<>",AmpC) \n"];
(* ]; *)
WriteString[outputfortran,"! Colour and symmetry factor \n"];

Switch[type,
FFV, (* fermion flow opposite to FeynArts *)
WriteString[outputfortran,"Amp"<>dimIn<>" = -AmpC \n"];,
_,
WriteString[outputfortran,"Amp"<>dimIn<>" = AmpC \n"];
];

(*
WriteString[outputfortran,"\n\n Else \n"];
WriteString[outputfortran,"  Amp"<>dimIn<>" = 0._dp \n"];
WriteString[outputfortran,"\n End if \n\n"];
*)
If[getGen[f3]>1,WriteString[outputfortran,"    End Do\n"]];
If[getGen[f2]>1,WriteString[outputfortran,"  End Do\n"]];
If[getGen[f1]>1,WriteString[outputfortran,"End Do\n"]];

WriteString[outputfortran,"End Subroutine Amplitude_Tree_"<>ModelName<>"_"<>NameRoutine<>"\n\n\n"];
];


WriteOneLoopCorrectionsWaveAmp[NameRoutine_,f1_,f2_,f3_,allDiagrams_,masses_,couplings_,ctcouplings_,Zconst_,type_]:=
Module[{i,j,k,dim,in1,in2,in3,c1,ind1,coupsCallTree,coupsCall,dimIn={},field,dimInd,vectors,sign,colourfac,isloop,allvanishing},
      If[FreeQ[SPhenoCouplingsAll,C[AntiField[f1],f2,f3]],
	 isloop=True;
	 allvanishing=True;,(* if no tree coupling then start from assumption that there is nothing to compute *)
	 isloop=False;
	 allvanishing=False;
	];

      

	    
       MakeSubroutineTitle["Amplitude_WAVE_"<>ModelName<>"_"<>NameRoutine,Flatten[{couplings,ctcouplings,masses,Zconst}],{},{(*"RMsqtree",*)"Amp"},outputfortran];
       WriteString[outputfortran,"Implicit None\n\n"];
       MakeVariableList[masses,", Intent(in)",outputfortran];
       MakeVariableList[couplings,", Intent(in)",outputfortran];
       MakeVariableList[ctcouplings,", Intent(in)",outputfortran];
       MakeVariableList[Zconst,", Intent(in)",outputfortran];
       dim="("<>ToString[getGen[f1]]<>","<>ToString[getGen[f2]]<>","<>ToString[getGen[f3]]<>")";
       dim=Nest[StringReplace[#,{"(1,"->"(",",1,"->",",",1)"->")","(1)"->""}]&,dim,3];
       Switch[getVertexType[{AntiField[f1],f2,f3}],
	      FFV,dimAmp=StringReplace["(4)"<>dim,")("->","];,
	      FFS,dimAmp=StringReplace["(2)"<>dim,")("->","];,
	      SSS,dimAmp=StringReplace[""<>dim,")("->","];,
	      SSV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
	      SVV,dimAmp=StringReplace["(2)"<>dim,")("->","];,
	      SSS,dimAmp=StringReplace[""<>dim,")("->","];,
	      _,Print["Not yet done",{f1,f2,f3}];
	     ];

       partInvolved=getPartInv[{AntiField[f1],f2,f3}];

       WriteString[outputfortran,"Complex(dp), Intent(out) :: Amp"<>dimAmp<>" \n\n"];
       WriteString[outputfortran,"Integer :: i1, i2, i3, gt1, gt2, gt3 \n"];
       Switch[getVertexType[{f1,f2,f3}],
	      FFV,WriteString[outputfortran,"Complex(dp) :: AmpC(4) \n"];,
	      FFS,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
	      SSS,WriteString[outputfortran,"Complex(dp) :: AmpC \n"];,
	      SFF,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
	      SSV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
	      SVV,WriteString[outputfortran,"Complex(dp) :: AmpC(2) \n"];,
	      _,"Not yet done";
	     ];
       WriteString[outputfortran,"Real(dp) :: Mex1, Mex2, Mex3, ExtRMsq \n"];
       WriteString[outputfortran,"Complex(dp) :: coupT1, coupT1L, coupT1R \n"];
       WriteString[outputfortran,"Complex(dp) :: TcoupT1, TcoupT1L, TcoupT1R \n"];
       WriteString[outputfortran,"Complex(dp) :: ZcoupT1, ZcoupT1L, ZcoupT1R \n\n"];


       If[getGen[f1]>1,WriteString[outputfortran,"Do gt1=1,"<>ToString[getGen[f1]]<>"\n"];dimIn=Join[dimIn,{gt1}];];
       If[getGen[f2]>1,WriteString[outputfortran,"  Do gt2=1,"<>ToString[getGen[f2]]<>"\n"];dimIn=Join[dimIn,{gt2}];];
       If[getGen[f3]>1,WriteString[outputfortran,"    Do gt3=1,"<>ToString[getGen[f3]]<>"\n"];dimIn=Join[dimIn,{gt3}];];
       dimIn=StringReplace[StringReplace[ToString[dimIn],{"{}"->""}],{"{"->"(","}"->")"}];
       Switch[getVertexType[{AntiField[f1],f2,f3}],
	      SSS,dimIn=StringReplace[""<>dimIn,{")("->","}];,
	      _,dimIn=StringReplace["(:)"<>dimIn,{")("->","}];
	     ];
       WriteString[outputfortran,"! External masses \n"];
       WriteString[outputfortran,"Mex1 = "<>SPhenoMass[f1,gt1]<>" \n"];
       WriteString[outputfortran,"Mex2 = "<>SPhenoMass[f2,gt2]<>" \n"];
       WriteString[outputfortran,"Mex3 = "<>SPhenoMass[f3,gt3]<>" \n"];

       (*
	  WriteString[outputfortran,"\n\n If (Mex1.gt.(Mex2+Mex3)) Then \n\n"];
	  *)
       (*
	  If[type===SVV,
	  WriteString[outputfortran,"AmpC = 0._dp \n"];,
	  *)

       If[isloop===False && f3=!=VectorP,
	  c1=getSPhenoCoupling2[C[AntiField[f1],f2,f3],SPhenoCouplingsAll];
	  ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,gt2},{f3,gt3},c1[[2]]][[1]];

	  WriteString[outputfortran,"!----------------------------- \n"];
	  WriteString[outputfortran,"! Coupling counter term \n"];
	  WriteString[outputfortran,"!----------------------------- \n"];
	  Switch[type,
		 FFS|SFF,
		 WriteString[outputfortran,"ZcoupT1L = ct"<>ToString[c1[[1,1]]]<>ind1<>" \n"];
		 WriteString[outputfortran,"ZcoupT1R = ct"<>ToString[c1[[1,2]]]<>ind1<>" \n"];
		 coupsCallTree="ZcoupT1L,ZcoupT1R";,
		 FFV,
		 WriteString[outputfortran,"ZcoupT1L = ct"<>ToString[c1[[1,1]]]<>ind1<>" \n"];
		 WriteString[outputfortran,"ZcoupT1R = ct"<>ToString[c1[[1,2]]]<>ind1<>"\n"];
		 coupsCallTree="ZcoupT1R,ZcoupT1L";,
		 _,
		 WriteString[outputfortran,"ZcoupT1 = ct"<>ToString[c1[[1,1]]]<>ind1<>" \n"];
		 coupsCallTree="ZcoupT1";
		];,

	  If[isloop===False,
	     c1=getSPhenoCoupling2[C[AntiField[f1],f2,f3],SPhenoCouplingsAll];
	     ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,gt2},{f3,gt3},c1[[2]]][[1]];
	    ];
	  Switch[type,
		 FFS|SFF,
		 WriteString[outputfortran,"ZcoupT1L = 0._dp \n"];
		 WriteString[outputfortran,"ZcoupT1R = 0._dp \n"];
		 coupsCallTree="ZcoupT1L,ZcoupT1R";,
		 FFV,
		 WriteString[outputfortran,"ZcoupT1L = 0._dp \n"];
		 WriteString[outputfortran,"ZcoupT1R = 0._dp \n"];
		 coupsCallTree="ZcoupT1R,ZcoupT1L";,
		 _,
		 WriteString[outputfortran,"ZcoupT1 = 0._dp \n"];
		 coupsCallTree="ZcoupT1";
		];
	 ];


       WriteString[outputfortran,"!----------------------------- \n"];
       WriteString[outputfortran,"! Multiply Z-factors \n"];
       WriteString[outputfortran,"!----------------------------- \n"];


       WriteString[outputfortran,"! External Field 1 \n"];
       If[isloop===False,
	  If[getGen[f1]>1,
	     WriteString[outputfortran,"Do i1=1,"<>ToString[getGen[f1]]<>"\n"];
	     dimInd="(i1,gt1)";,
	     dimInd="";
	    ];
	  ind1 =MakeIndicesCouplingPS[{AntiField[f1],i1},{f2,gt2},{f3,gt3},c1[[2]]][[1]];

	  Switch[Dimensions[partInvolved],
		 {2,3},
		 WriteString[outputfortran,"ZcoupT1L = ZcoupT1L + 0.5_dp*"<>getZfactorHead[partInvolved[[1,1]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		 WriteString[outputfortran,"ZcoupT1R = ZcoupT1R + 0.5_dp*"<>getZfactorHead[partInvolved[[2,1]],dimInd]<>"*"<>ToString[c1[[1,2]]]<>ind1<>"\n"];,	
		 {1,3},
		 WriteString[outputfortran,"ZcoupT1 = ZcoupT1 + 0.5_dp*"<>getZfactorHead[partInvolved[[1,1]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		];
	  If[getGen[f1]>1,WriteString[outputfortran,"End Do\n"]];,
	  WriteString[outputfortran,"! Vanishing \n"];
	 ];



       WriteString[outputfortran,"\n\n! External Field 2 \n"];
       If[isloop===False,
	  If[getGen[f2]>1,
	     WriteString[outputfortran,"Do i1=1,"<>ToString[getGen[f2]]<>"\n"];
	     dimInd="(i1,gt2)";,
	     dimInd="";
	    ];
	  ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,i1},{f3,gt3},c1[[2]]][[1]];

	  Switch[Dimensions[partInvolved],
		 {2,3},
		 WriteString[outputfortran,"ZcoupT1L = ZcoupT1L + 0.5_dp*"<>getZfactorHead[partInvolved[[1,2]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		 WriteString[outputfortran,"ZcoupT1R = ZcoupT1R + 0.5_dp*"<>getZfactorHead[partInvolved[[2,2]],dimInd]<>"*"<>ToString[c1[[1,2]]]<>ind1<>"\n"];,
		 {1,3},
		 WriteString[outputfortran,"ZcoupT1 = ZcoupT1 + 0.5_dp*"<>getZfactorHead[partInvolved[[1,2]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		];

	  If[getGen[f2]>1,WriteString[outputfortran,"End Do\n"]];,
	  WriteString[outputfortran,"! Vanishing \n"];
	 ];


       WriteString[outputfortran,"\n\n! External Field 3 \n"];
       If[getType[f3]===V,(* in this case can have mixing *)
	  If[Head[f3]===conj,headV=conj;,headV=Evaluate;];
	  vectors=Select[Particles[EWSB],#[[4]]===V&];
	  For[i=1,i<=Length[vectors],
	      If[(vectors[[i,1]]===RE[f3] || FreeQ[CorrectionListVectorVector[EWSB],{vectors[[i,1]],f3}]===False  || FreeQ[CorrectionListVectorVector[EWSB],{f3,vectors[[i,1]]}]===False ||  FreeQ[CorrectionListVectorVector[EWSB],{OneLtbds[[2]],f3}]===False) &&FreeQ[SPhenoCouplingsAllreallyAll,C[AntiField[f1],f2,headV[vectors[[i,1]]]]]===False,
		 allvanishing=False;
		 cv=getSPhenoCoupling2[C[AntiField[f1],f2,headV[vectors[[i,1]]]],SPhenoCouplingsAll]; 
		 ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,gt2},{headV[vectors[[i,1]]],i1},cv[[2]]][[1]];
		 dimInd="";
		 If[FreeQ[masslessSave,vectors[[i,1]]] || FreeQ[masslessSave,f3],
		 Switch[type,
			FFV |FFS,
			WriteString[outputfortran,"ZcoupT1L = ZcoupT1L + 0.5_dp*"<>getZfactor[vectors[[i,1]],f3,dimInd]<>"*"<>ToString[cv[[1,1]]]<>ind1<>"\n"];
			WriteString[outputfortran,"ZcoupT1R = ZcoupT1R + 0.5_dp*"<>getZfactor[vectors[[i,1]],f3,dimInd]<>"*"<>ToString[cv[[1,2]]]<>ind1<>"\n"];,
			_,
			WriteString[outputfortran,"ZcoupT1 = ZcoupT1 + 0.5_dp*"<>getZfactor[vectors[[i,1]],f3,dimInd]<>"*"<>ToString[cv[[1,1]]]<>ind1<>"\n"];
		       ];
		      ];
		];
	      i++;
	     ];,(* If[getType[fs]===V is false just do like the cases above *)

	  If[isloop===False,
	     If[getGen[f3]>1,
		WriteString[outputfortran,"Do i1=1,"<>ToString[getGen[f3]]<>"\n"];
		dimInd="(i1,gt3)";,
		dimInd="";
	       ];
	     ind1 =MakeIndicesCouplingPS[{AntiField[f1],gt1},{f2,gt2},{f3,i1},c1[[2]]][[1]];
	     Switch[Dimensions[partInvolved],
		    {2,3},
		    WriteString[outputfortran,"ZcoupT1L = ZcoupT1L + 0.5_dp*"<>getZfactorHead[partInvolved[[1,3]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		    WriteString[outputfortran,"ZcoupT1R = ZcoupT1R + 0.5_dp*"<>getZfactorHead[partInvolved[[2,3]],dimInd]<>"*"<>ToString[c1[[1,2]]]<>ind1<>"\n"];,	
		    {1,3},
		    WriteString[outputfortran,"ZcoupT1 = ZcoupT1 + 0.5_dp*"<>getZfactorHead[partInvolved[[1,3]],dimInd]<>"*"<>ToString[c1[[1,1]]]<>ind1<>"\n"];
		   ];
	     If[getGen[f3]>1,WriteString[outputfortran,"End Do\n"]];,
	     WriteString[outputfortran,"! Vanishing \n"];
	    ];
	 ];

	  If[allvanishing===False,
	     
	     WriteString[outputfortran,"\n\n! Getting the amplitude \n"];

	     If[type===SSV && Head[c1]===List,
		sign = getSignVertex[Cp[AntiField[f1],f2,f3],c1[[2]],SSV];
		If[sign===-1,
		   coupsCallTree="-"<>coupsCallTree;
		  ];
	       ];

	     WriteString[outputfortran,"Call TreeAmp_"<>ToString[getType[f1]]<>"to"<>ToString[getType[f2] ]<>ToString[getType[f3]]<>"(Mex1,Mex2,Mex3,"<>coupsCallTree<>",AmpC) \n"];

	     (*WriteString[outputfortran,"! Colour and symmetry factor \n"];*)

	    (*
	     If[isloop,
		colourfac=CalculateColourFactorLoopInducedDecay[AntiField[f1],f2,f3],
		colourfac=CalculateColorFactorDecay[AntiField[f1],f2,f3]
	       ];

	       Switch[type,
		    FFV,(* fermion flow opposite to FeynArts *)
		    WriteString[outputfortran,"Amp"<>dimIn<>" = -"<>SPhenoForm[colourfac]<>"*AmpC \n"];,
		    _,
		    WriteString[outputfortran,"Amp"<>dimIn<>" = "<>SPhenoForm[colourfac]<>"*AmpC \n"];
		   ];

	       *)
	     (* only overall colour factor; we'll assume that the intermediate states aren't coloured ... *) 
	     
	     
	     Switch[type,
		    FFV,(* fermion flow opposite to FeynArts *)
		    WriteString[outputfortran,"Amp"<>dimIn<>" = -AmpC \n"];,
		    _,
		    WriteString[outputfortran,"Amp"<>dimIn<>" = AmpC \n"];
		   ];

	     (*
		WriteString[outputfortran,"\n\n Else \n"];
		WriteString[outputfortran,"  Amp"<>dimIn<>" = 0._dp \n"];
		WriteString[outputfortran,"\n End if \n\n"];
		*)
	     , (* allvanishing is true -> zero amplitude*)
	     
	     WriteString[outputfortran,"Amp"<>dimIn<>" = 0._dp\n"];
	    ];


       If[getGen[f3]>1,WriteString[outputfortran,"    End Do\n"]];
       If[getGen[f2]>1,WriteString[outputfortran,"  End Do\n"]];
       If[getGen[f1]>1,WriteString[outputfortran,"End Do\n"]];

	  WriteString[outputfortran,"End Subroutine Amplitude_WAVE_"<>ModelName<>"_"<>NameRoutine<>"\n\n\n"];

	  If[allvanishing,
	     Return[False],
	     Return[True]
	    ];
	 ];


       (* --------------- NO NEED TO MODIFY BELOW THIS LINE ------------------------------------------------- *)








       
GenerateZCouplings:=Block[{i,j,k,pos,zcoup,f1,f2,f3,sel,ind1r,ind2r,partinv},


SA`ZCouplings={};
SA`TempCouplings={};
For[i=1,i<=Length[namesAllreallyAll],
pos=Position[SPhenoParameters,namesAllreallyAll[[i]]][[1,1]];
zcoup=ToExpression["Z"<>ToString[namesAllreallyAll[[i]]]];
SA`ZCouplings=Join[SA`ZCouplings,{zcoup}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.namesAllreallyAll[[i]]->zcoup]; 

zcoup=ToExpression["Temp"<>ToString[namesAllreallyAll[[i]]]];
SA`TempCouplings=Join[SA`TempCouplings,{zcoup}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.namesAllreallyAll[[i]]->zcoup]; 
i++;];

MakeSubroutineTitle["getZCouplings",Flatten[{parametersAllreallyAll,namesAllreallyAll,SA`Zfactors,SA`ZCouplings}],{},{},sphenoLD];
WriteString[sphenoLD,"Implicit None\n\n"];
MakeVariableList[parametersAllreallyAll,", Intent(in)",sphenoLD];
MakeVariableList[namesAllreallyAll,", Intent(in)",sphenoLD];
MakeVariableList[SA`Zfactors,", Intent(in)",sphenoLD];
WriteString[sphenoLD,"Integer :: gt1, gt2\n"];
MakeVariableList[SA`TempCouplings,"",sphenoLD];
MakeVariableList[SA`ZCouplings,", Intent(out)",sphenoLD];

For[i=1,i<=Length[SA`Zfactors],
WriteString[sphenoLD,"Complex(dp) :: "<>ToString[SA`Zfactors[[i]]]<>"c("<>StringReplace[ToString[getDimSPheno[SA`Zfactors[[i]]]],{"{"->"","}"->""}]<>") \n"];
i++;];

For[i=1,i<=Length[SA`Zfactors],
WriteString[sphenoLD,ToString[SA`Zfactors[[i]]]<>"c = Conjg("<>ToString[SA`Zfactors[[i]]]<>")\n"];
i++;];

For[i=1,i<=Length[SA`ZCouplings],
WriteString[sphenoLD,"\n\n ! ## "<>ToString[SA`ZCouplings[[i]]]<>" ## \n"];
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>" = 0._dp \n"];
sel=Select[SPhenoCouplingsAllreallyAll,FreeQ[#,namesAllreallyAll[[i]]]==False&];
If[Length[List@@(sel[[1,1,1]])]===3,
WriteString[sphenoLD,ToString[SA`TempCouplings[[i]]]<>" = "<>ToString[namesAllreallyAll[[i]]]<>" \n"];
f1=sel[[1,-1,1]] /. A_[{a__}]->A;
f2=sel[[1,-1,2]]/. A_[{a__}]->A;
f3=sel[[1,-1,3]]/. A_[{a__}]->A;

If[getGen[f1]===1 && getGen[f2]===1 && getGen[f3]===1,
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>" = "<>ToString[SA`TempCouplings[[i]]]<>" \n"];
];

partinv=getPartInv[{f1,f2,f3}];

If[getGen[f1]>1 && getMixingMatrix[f1]=!={NoMatrix},
ind1r="(gt1";ind2r="(gt2";
If[getGen[f2]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
If[getGen[f3]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
ind1r=ind1r<>")";ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{"()"->"","(,"->"("}];
ind2r=StringReplace[ind2r,{"()"->"","(,"->"("}];

WriteString[sphenoLD,"Do gt1=1,"<>ToString[getGen[f1]]<>"\n"];
WriteString[sphenoLD,"  Do gt2=1,"<>ToString[getGen[f1]]<>"\n"]; 
If[getType[f1]=!=F,
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];,
If[StringTake[ToString[namesAllreallyAll[[i]]],{-1}]==="L",
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,1]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];,
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[2,1]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];
];
];

WriteString[sphenoLD," End Do \n"];
WriteString[sphenoLD,"End Do \n"];
WriteString[sphenoLD,ToString[SA`TempCouplings[[i]]]<>" = "<>ToString[SA`ZCouplings[[i]]]<>" \n"];
];

If[getGen[f2]>1 && getMixingMatrix[f2]=!={NoMatrix},
ind1r="(";ind2r="(";
If[getGen[f1]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
ind1r=ind1r<>"gt1";ind2r=ind2r<>"gt2";
If[getGen[f3]>1,ind1r=ind1r<>",:";ind2r=ind2r<>",:";];
ind1r=ind1r<>")";ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{"()"->"","(,"->"("}];
ind2r=StringReplace[ind2r,{"()"->"","(,"->"("}];
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>" = 0._dp \n"];
WriteString[sphenoLD,"Do gt1=1,"<>ToString[getGen[f2]]<>"\n"];
WriteString[sphenoLD,"  Do gt2=1,"<>ToString[getGen[f2]]<>"\n"]; 
If[getType[f2]=!=F,
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,2]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];,
If[StringTake[ToString[namesAllreallyAll[[i]]],{-1}]==="L",
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,2]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];,
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[2,2]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];
];
];

WriteString[sphenoLD," End Do \n"];
WriteString[sphenoLD,"End Do \n"];
WriteString[sphenoLD,ToString[SA`TempCouplings[[i]]]<>" = "<>ToString[SA`ZCouplings[[i]]]<>" \n"];
];

If[getGen[f3]>1 && getMixingMatrix[f3]=!={NoMatrix},
ind1r="(";ind2r="(";
If[getGen[f1]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
If[getGen[f2]>1,ind1r=ind1r<>":,";ind2r=ind2r<>":,";];
ind1r=ind1r<>"gt1";ind2r=ind2r<>"gt2";
ind1r=ind1r<>")";ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{"()"->"","(,"->"(",",,"->","}];
ind2r=StringReplace[ind2r,{"()"->"","(,"->"(",",,"->","}];
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>" = 0._dp \n"];
WriteString[sphenoLD,"Do gt1=1,"<>ToString[getGen[f3]]<>"\n"];
WriteString[sphenoLD,"  Do gt2=1,"<>ToString[getGen[f3]]<>"\n"]; 
WriteString[sphenoLD,ToString[SA`ZCouplings[[i]]]<>ind2r<>" = "<>ToString[SA`ZCouplings[[i]]]<>ind2r<>" + "<>SPhenoForm[SPhenoZFacHead[getMixingMatrixHead[partinv[[1,3]]]]]<>"(gt2,gt1)*"<>ToString[SA`TempCouplings[[i]]]<>ind1r<>" \n"];
WriteString[sphenoLD," End Do \n"];
WriteString[sphenoLD,"End Do \n"];
];
];



i++;];

(*
WriteString[sphenoLD,"Do gt1=1,"<>ToString[getGen[pD]]<>"\n"];
WriteString[sphenoLD,"  Do gt2=1,"<>ToString[getGen[pD]]<>"\n"]; 
WriteString[sphenoLD,"AmpTreeZ"<>name<>ind2<>" = AmpTreeZ"<>name<>ind2<>" + "<>SPhenoForm[SPhenoZFac[getMixingMatrix[pD]]]<>"(gt2,gt1)*AmpTree"<>name<>ind1<>" \n"];
*)


WriteString[sphenoLD,"End Subroutine  getZCouplings \n\n"];
]; 

GenerateGCouplings:=Block[{i,j,k,pos,zcoup,f1,f2,f3,sel,ind1r,indG,ind2r,partinv,vcoup,vf1,vf2,vf3,names},

SA`GBS=Select[Transpose[GoldstoneBosons[EWSB]][[2]] /. A_[{b_Integer}]->A,getElectricCharge[#]=!=0&];
InvolvesGBQ[x_]:=Block[{temp},
temp=Select[SA`GBS,FreeQ[x,#]==False&];
If[temp==={},
Return[False];,
Return[True];
];
];

gListGB=Select[SPhenoCouplingsAll,InvolvesGBQ[#]==True&];

namesForGB=Flatten[Table[Drop[gListGB[[i,2]],{1}],{i,1,Length[gListGB]}]];
names=namesForGB;
VnamesForGB={};

For[i=1,i<=Length[gListGB],
f1=gListGB[[i,-1,1]];
f2=gListGB[[i,-1,2]];
f3=gListGB[[i,-1,3]];
Switch[Position[{f1,f2,f3},SA`GBS[[1]]][[1,1]],
3,
vf3=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f3]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A,f3 /. A_[{b__}]->A /. getBlank[f3]->vf3 ]]==False&];
If[vcoup=!={},
VnamesForGB=Join[VnamesForGB,Drop[vcoup[[1,2]],{1}]];
VnamesForGB=Join[VnamesForGB,ToExpression["Z"<>ToString[#]]&/@Drop[vcoup[[1,2]],{1}]];
];,
2,
vf2=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f2]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A/. getBlank[f2]->vf2,f3 /. A_[{b__}]->A]]==False&];
If[vcoup=!={},
VnamesForGB=Join[VnamesForGB,Drop[vcoup[[1,2]],{1}]];
VnamesForGB=Join[VnamesForGB,ToExpression["Z"<>ToString[#]]&/@Drop[vcoup[[1,2]],{1}]];
];,
1,
vf1=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f1]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A,f3 /. A_[{b__}]->A]]==False&];
If[vcoup=!={},
VnamesForGB=Join[VnamesForGB,Drop[vcoup[[1,2]],{1}]];
VnamesForGB=Join[VnamesForGB,ToExpression["Z"<>ToString[#]]&/@Drop[vcoup[[1,2]],{1}]];
];
];
i++;];

SA`GBcouplings={};
SA`GBZcouplings={};
SA`GBosZcouplings={};

SA`subGBcouplings={};

For[i=1,i<=Length[names],
pos=Position[SPhenoParameters,names[[i]]][[1,1]];
zcoup=ToExpression["G"<>ToString[names[[i]]]];
SA`GBcouplings=Join[SA`GBcouplings,{zcoup}];
SA`subGBcouplings=Join[SA`subGBcouplings,{names[[i]]->zcoup}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.names[[i]]->zcoup]; 

zcoup=ToExpression["GZ"<>ToString[names[[i]]]];
SA`GBZcouplings=Join[SA`GBZcouplings,{zcoup}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.names[[i]]->zcoup]; 

zcoup=ToExpression["GosZ"<>ToString[names[[i]]]];
SA`GBosZcouplings=Join[SA`GBosZcouplings,{zcoup}];
SPhenoParameters=Join[SPhenoParameters,{SPhenoParameters[[pos]]}/.names[[i]]->zcoup]; 
i++;];

VnamesForGB = Intersection[VnamesForGB];

MakeSubroutineTitle["getGBCouplings",Flatten[{SA`massesOnlyInput,NewMassParameters,VnamesForGB,SA`GBcouplings,SA`GBZcouplings,SA`GBosZcouplings}],{},{},sphenoLD];
WriteString[sphenoLD,"Implicit None\n\n"];
MakeVariableList[SA`massesOnlyInput,", Intent(in)",sphenoLD];
MakeVariableList[NewMassParameters,", Intent(in)",sphenoLD];
MakeVariableList[VnamesForGB,", Intent(in)",sphenoLD];
WriteString[sphenoLD,"Integer :: gt1, gt2, gt3, i1, i2\n"];
MakeVariableList[SA`GBcouplings,", Intent(out)",sphenoLD];
MakeVariableList[SA`GBZcouplings,", Intent(out)",sphenoLD];
MakeVariableList[SA`GBosZcouplings,", Intent(out)",sphenoLD];


For[i=1,i<=Length[gListGB],
f1=gListGB[[i,-1,1]];
f2=gListGB[[i,-1,2]];
f3=gListGB[[i,-1,3]];
Switch[getVertexType[gListGB[[i,1,1]]],
FFS,
vf3=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f3]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A,f3 /. A_[{b__}]->A /. getBlank[f3]->vf3 ]]==False&];
ind1r="(";
If[getGen[f1]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f1]]<>"\n"];ind1r=ind1r<>"i1,";];
If[getGen[f2]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f2]]<>"\n"]; ind1r=ind1r<>"i2,";];
ind2r=ind1r<>")";
If[getGen[f3]>1,ind1r=ind1r<>"1";];
ind1r=ind1r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},

WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = 0._dp\n"];

WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = 0._dp\n"];

WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = 0._dp\n"];,

WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>SPhenoMassOS[f1,i1]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMassOS[f2,i2]<>"*"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"\n"];
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = -("<>SPhenoMassOS[f2,i2]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMassOS[f1,i1]<>"*"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"\n"];

WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>SPhenoMassOS[f1,i1]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMassOS[f2,i2]<>"*Z"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = -("<>SPhenoMassOS[f2,i2]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMassOS[f1,i1]<>"*Z"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"\n"];

WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>SPhenoMass[f1,i1]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMass[f2,i2]<>"*Z"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMass[vf3]]<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,3]]]<>ind1r<>" = -("<>SPhenoMass[f2,i2]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>" - "<>SPhenoMass[f1,i1]<>"*Z"<>ToString[vcoup[[1,2,3]]]<>ind2r<>")/"<>SPhenoForm[SPhenoMass[vf3]]<>"\n"];
];


If[getGen[f2]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f1]>1,WriteString[sphenoLD,"End Do \n"];];,

SSS,
f1=gListGB[[i,-1,1]];
f2=gListGB[[i,-1,2]];
f3=gListGB[[i,-1,3]];

(* Check for multiple Goldstones missing so far *)
Switch[Position[{f1,f2,f3},SA`GBS[[1]]][[1,1]],
3,
vf3=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f3]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A,f3 /. A_[{b__}]->A /. getBlank[f3]->vf3 ]]==False&];
ind1r="(";
If[getGen[f1]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f1]]<>"\n"];ind1r=ind1r<>"i1,";];
If[getGen[f2]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f2]]<>"\n"]; ind1r=ind1r<>"i2,";];
ind2r=ind1r<>")";
If[getGen[f3]>1,ind1r=ind1r<>"1";];
ind1r=ind1r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>  SPhenoForm[getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A  /. getBlank[f3]->vf3],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f1,i1]<>" - "<>SPhenoMassSqOS[f2,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A  /. getBlank[f3]->vf3],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f1,i1]<>" - "<>SPhenoMassSqOS[f2,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf3]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A  /. getBlank[f3]->vf3],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSq[f1,i1]<>" - "<>SPhenoMassSq[f2,i2]<>")/"<>SPhenoForm[SPhenoMass[vf3]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
];
If[getGen[f2]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f1]>1,WriteString[sphenoLD,"End Do \n"];];,
2,
vf2=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f2]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A /. getBlank[f2]->vf2 ,f3 /. A_[{b__}]->A ]]==False&];
ind1r="(";
If[getGen[f1]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f1]]<>"\n"];ind1r=ind1r<>"i1,";];
ind2r=ind1r;
If[getGen[f2]>1,ind1r=ind1r<>"1,";];
If[getGen[f3]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f3]]<>"\n"]; ind1r=ind1r<>"i2"; ind2r=ind2r<>"i2";];
ind1r=ind1r<>")";
ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  /. getBlank[f2]->vf2,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f1,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf2]]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  /. getBlank[f2]->vf2,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f1,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf2]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  /. getBlank[f2]->vf2,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSq[f1,i1]<>" - "<>SPhenoMassSq[f3,i2]<>")/"<>SPhenoForm[SPhenoMass[vf2]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
];
If[getGen[f3]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f1]>1,WriteString[sphenoLD,"End Do \n"];];,
1,
vf1=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f1]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ]]==False&];
ind1r="(";
ind2r="(";
If[getGen[f1]>1,ind1r=ind1r<>"1,";];
If[getGen[f2]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f2]]<>"\n"];ind1r=ind1r<>"i1,";ind2r=ind2r<>"i1,";];
If[getGen[f3]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f3]]<>"\n"]; ind1r=ind1r<>"i2";ind2r=ind2r<>"i2";];
ind1r=ind1r<>")";
ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f2,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>  SPhenoForm[getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSqOS[f2,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>SPhenoForm[  getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],SSV]]<>")*("<>SPhenoMassSq[f2,i1]<>" - "<>SPhenoMassSq[f3,i2]<>")/"<>SPhenoForm[SPhenoMass[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
];
If[getGen[f3]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f2]>1,WriteString[sphenoLD,"End Do \n"];];
];,
SSV,
Switch[Position[{f1,f2,f3},SA`GBS[[1]]][[1,1]],
2,
vf2=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f2]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A /. getBlank[f2]->vf2 ,f3 /. A_[{b__}]->A ]]==False&];
ind1r="(";
If[getGen[f1]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f1]]<>"\n"];ind1r=ind1r<>"i1,";];
ind2r=ind1r;
If[getGen[f2]>1,ind1r=ind1r<>"1,";];
If[getGen[f3]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f3]]<>"\n"]; ind1r=ind1r<>"i2"; ind2r=ind2r<>"i2";];
ind1r=ind1r<>")";
ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp \n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMassOS[vf2]]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMassOS[vf2]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMass[vf2]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
];
If[getGen[f3]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f1]>1,WriteString[sphenoLD,"End Do \n"];];,
1,
vf1=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f1]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ]]==False&];
ind1r="(";
ind2r="(";
If[getGen[f1]>1,ind1r=ind1r<>"1,";];
If[getGen[f2]>1,WriteString[sphenoLD,"Do i1=1,"<>ToString[getGen[f2]]<>"\n"];ind1r=ind1r<>"i1,";ind2r=ind2r<>"i1,";];
If[getGen[f3]>1,WriteString[sphenoLD," Do i2=1,"<>ToString[getGen[f3]]<>"\n"]; ind1r=ind1r<>"i2";ind2r=ind2r<>"i2";];
ind1r=ind1r<>")";
ind2r=ind2r<>")";
ind1r=StringReplace[ind1r,{",)"->")","()"->""}];
ind2r=StringReplace[ind2r,{",)"->")","()"->""}];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A ,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<>  SPhenoForm[getSignVertex[Cp[f1 /. A_[{b__}]->A,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0.5_dp*("<>SPhenoForm[  getSignVertex[Cp[f1 /. A_[{b__}]->A, f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],gListGB[[i,6]],SSV]]<>")/"<>SPhenoForm[SPhenoMass[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>ind2r<>"\n"];
];
If[getGen[f3]>1,WriteString[sphenoLD," End Do\n"];];
If[getGen[f2]>1,WriteString[sphenoLD,"End Do \n"];];
];,
SVV,
f1=gListGB[[i,-1,1]];
f2=gListGB[[i,-1,2]];
f3=gListGB[[i,-1,3]];
vf1=(GoldstoneBosons[EWSB][[Position[GoldstoneBosons[EWSB],getBlank[f1]][[1,1]]]])[[1]];
vcoup=Select[SPhenoCouplingsAll,FreeQ[#,C[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ]]==False&];
If[getGen[f1]>1,ind1r="(1)";,ind1r="";];
If[vcoup==={},
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = 0._dp \n"];,
WriteString[sphenoLD,"G"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],VVV]]<>")*("<>SPhenoMassSqOS[f2,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*"<>ToString[vcoup[[1,2,2]]]<>"\n"];
WriteString[sphenoLD,"GosZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<> SPhenoForm[ getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],VVV]]<>")*("<>SPhenoMassSqOS[f2,i1]<>" - "<>SPhenoMassSqOS[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>"\n"];
WriteString[sphenoLD,"GZ"<>ToString[gListGB[[i,2,2]]]<>ind1r<>" = ("<>  SPhenoForm[getSignVertex[Cp[f1 /. A_[{b__}]->A /. getBlank[f1]->vf1,f2  /. A_[{b__}]->A  ,f3 /. A_[{b__}]->A ],vcoup[[1,6]],VVV]]<>")*("<>SPhenoMassSq[f2,i1]<>" - "<>SPhenoMassSq[f3,i2]<>")/"<>SPhenoForm[SPhenoMassOS[vf1]]<>"*Z"<>ToString[vcoup[[1,2,2]]]<>" \n"];
];
];
i++;];

WriteString[sphenoLD,"End Subroutine  getGBCouplings \n\n"];

];



