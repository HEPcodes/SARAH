(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSPhenoOneLoopDecays[Eigenstates_]:=Block[{i},
Print["--------------------------------------"];
Print["Writing Routines for 1-Loop Decays    "];
Print["--------------------------------------"];


sphenoLD=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"OneLoopDecays_"<>ModelName<>".f90"]];
WriteCopyRight[sphenoLD];

WriteString[sphenoLD, "Module OneLoopDecays_"<>ModelName<>" \n "];
WriteString[sphenoLD, "Use Couplings_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use LoopCouplings_"<>ModelName<>" \n"];
WriteString[sphenoLD, "Use LoopMasses_"<>ModelName<>" \n \n"];
WriteString[sphenoLD, "Use RGEs_"<>ModelName<>" \n \n"];
WriteString[sphenoLD,"Use Tadpoles_"<>ModelName<>" \n "];
WriteString[sphenoLD, "Use CouplingsForDecays_"<>ModelName<>" \n \n"];

WriteString[sphenoLD, "Contains \n \n"];
GenerateCounterTerms;
WriteSPhenoLoopDecys[Eigenstates];
(* GenerateCalcLoopDiagrams; *)
GenerateCalculationRunningParameters;



WriteString[sphenoLD, "End Module OneLoopDecays_"<>ModelName<>" \n "];
Close[sphenoLD];

];


(*
SPheno`CounterTermDefintions = {
{g1, PiVZ/SPhenoMassSq[VZ]},
{g2,  PiVZ/SPhenoMassSq[VZ]},
{Ye, SigmaSFe}
};
*)

(*
CounterTerm[x_]:=ToExpression["d"<>SPhenoForm[x]];
GenerateCounterTerms:=Block[{i,j,k,dim,ct},
SA`ListCounterTerms={};
For[i=1,i<=Length[listAllParametersAndVEVs],
dim=getDimSPheno[listAllParametersAndVEVs[[i]]];
ct=CounterTerm[listAllParametersAndVEVs[[i]]];
SA`ListCounterTerms = Join[SA`ListCounterTerms,{ct}];
Switch[Length[dim],
0,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{},{}}}];,
1,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen},dim}}];,
2,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen},dim}}];,
3,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen,gen},dim}}];
];
If[FreeQ[realVar,listAllParametersAndVEVs[[i]]]==False,realVar=Join[realVar,{ct}];];
i++;];
];
*)


WriteSPhenoLoopDecys[Eigenstates_]:=Block[{i,k,dim,par},
CounterTerm[x_]:=ToExpression["d"<>SPhenoForm[x]];
GenerateCounterTerms:=Block[{i,j,k,dim,ct},
SA`ListCounterTerms={};
For[i=1,i<=Length[listAllParametersAndVEVs],
dim=getDimSPheno[listAllParametersAndVEVs[[i]]];
ct=CounterTerm[listAllParametersAndVEVs[[i]]];
SA`ListCounterTerms = Join[SA`ListCounterTerms,{ct}];
Switch[Length[dim],
0,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{},{}}}];,
1,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen},dim}}];,
2,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen},dim}}];,
3,
	SPhenoParameters=Join[SPhenoParameters,{{ct,{gen,gen,gen},dim}}];
];
If[FreeQ[realVar,listAllParametersAndVEVs[[i]]]==False,realVar=Join[realVar,{ct}];];
i++;];
];




MakeSubroutineTitle["CalculateOneLoopDecays",Join[listVEVs,listAllParameters],{},{"epsI","deltaM","kont"},sphenoLD];

WriteString[sphenoLD,"Real(dp), Intent(in) :: epsI, deltaM \n"];
WriteString[sphenoLD,"Integer, Intent(inout) :: kont \n"];

MakeVariableList[listAllParameters,",Intent(in)",sphenoLD];
MakeVariableList[listVEVs,",Intent(in)",sphenoLD];

WriteString[sphenoLD,"Real(dp) :: p2 \n"];
MakeVariableList[NewMassParameters,"",sphenoLD];
MakeVariableList[SA`ListCounterTerms,"",sphenoLD];
MakeVariableList[namesAllreallyAll,"",sphenoLD];
(* MakeVariableList[Union[Flatten[{NeededCouplingsUnmixed,NeededCouplingsLoop,namesAll}]],"",sphenoLD]; *)

SA`SelfEnergieNames={};

For[k=1,k<=Length[SA`LoopMassesParticle], 
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
dim=getGen[SA`LoopMassesParticle[[k]]];
dimS = ToString[getGen[SA`LoopMassesParticle[[k]]]];
dimS = "("<>dimS<>","<>dimS<>")";
Switch[ListTree[[i,4]],
ScalarMass,
par = ToExpression["Pi"<>ToString[ListMassES[[i,1]]]];
WriteString[sphenoLD,"Complex(dp) :: Pi"<>ToString[ListMassES[[i,1]]]<>dimS <>"\n"];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];,
FermionMassSymm,
WriteString[sphenoLD,"Complex(dp) :: SigmaL"<>ToString[ListMassES[[i,1]]]<>dimS <>", SigmaR"<>ToString[ListMassES[[i,1]]]<>dimS <>", SigmaS"<>ToString[ListMassES[[i,1]]]<>dimS <>"\n"];
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaS"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];,
FermionMassNonSymm,
WriteString[sphenoLD,"Complex(dp) :: SigmaL"<>ToString[ListMassES[[i,1]]]<>dimS <>", SigmaR"<>ToString[ListMassES[[i,1]]]<>dimS <>", SigmaS"<>ToString[ListMassES[[i,1]]]<>dimS <>"\n"];
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaS"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
];
k++;];

 For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0,
nameCurrent=ToString[listNotMixedMasses[[i,1]]];
nameMass=listNotMixedMasses[[i,2]];
particleCurrent=listNotMixedMasses[[i,1]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";
dim=getGen[particleCurrent];
dimS = "("<>ToString[getGen[particleCurrent]]<>","<>ToString[getGen[particleCurrent]]<>")";
If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2,
Switch[listNotMixedMasses[[i,6]],
ScalarMass,
WriteString[sphenoLD,"Complex(dp) :: Pi"<>nameCurrent<>dimS<>"\n"];,

FermionMassSymm,
WriteString[sphenoLD,"Complex(dp) :: SigmaL"<>nameCurrent<>dimS<>", SigmaR"<>nameCurrent<>dimS<>", SigmaS"<>nameCurrent<>dimS<>"\n"];
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaS"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];,
FermionMassNonSymm,
WriteString[sphenoLD,"Complex(dp) :: SigmaL"<>nameCurrent<>dimS<>", SigmaR"<>nameCurrent<>dimS<>", SigmaS"<>nameCurrent<>dimS<>"\n"];
par = ToExpression["SigmaL"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaS"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
par = ToExpression["SigmaR"<>ToString[ListMassES[[i,1]]]];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{generation,generation},{dim,dim}}}];
 ];,

If[getType[particleCurrent]===F,
If[AntiField[particleCurrent]===particleCurrent,
WriteString[sphenoLD,"Complex(dp) :: Sigma"<>nameCurrent <>"\n"];
par = ToExpression["Sigma"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];,
WriteString[sphenoLD,"Complex(dp) :: SigmaL"<>nameCurrent<>", SigmaR"<>nameCurrent<>", SigmaS"<>nameCurrent<>"\n"];
par = ToExpression["SigmaL"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par = ToExpression["SigmaS"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
par = ToExpression["SigmaR"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
];,
WriteString[sphenoLD,"Complex(dp) :: Pi"<>nameCurrent<>"\n"];
par = ToExpression["Pi"<>nameCurrent];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
];
];
];
i++;]; 

For[i=1,i<=Length[CorrectionListVectorVector[Eigenstates]], 
par=ToExpression["Pi"<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,1]]]<>SPhenoForm[CorrectionListVectorVector[Eigenstates][[i,1,2]]]];
WriteString[sphenoLD,"Complex(dp) :: "<>ToString[par]<>"\n"];
SA`SelfEnergieNames=Join[SA`SelfEnergieNames,{par}];
SPhenoParameters=Join[SPhenoParameters,{{par,{},{}}}];
i++;];



If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoLD];
];


WriteString[sphenoLD, "Iname = Iname + 1 \n"];
WriteString[sphenoLD, "NameOfUnit(Iname) = 'CalculateOneLoopDecays'\n \n"];
WriteString[sphenoLD,"Write(*,*) \"Calculating one loop decays\" \n"];

WriteString[sphenoLD, "! Write intilization of all counter terms \n"];


(* CALL OF FUNCTION TO CALCULATE VERTICES AND SELF-ENERGIES *)

MakeCall["CalcRunningParameters",Flatten[{NewMassParameters,listAllParametersAndVEVs,SA`ListCounterTerms,namesAllreallyAll,SA`SelfEnergieNames}],{SPhenoMass[hh,1]},{"deltaM","kont"},sphenoLD];


WriteString[sphenoLD,"Iname = Iname - 1 \n \n"];
WriteString[sphenoLD,"End Subroutine CalculateOneLoopDecays  \n \n \n"];

];



WriteCalculateAllSelfEnergies:=Block[{i,k,subTemp={}},

For[i=1,i<=Length[SA`subUnrotedFieldsRotatedFields],
subTemp=Join[subTemp,{ToString[SA`subUnrotedFieldsRotatedFields[[i,1]]]->ToString[SA`subUnrotedFieldsRotatedFields[[i,2]]]}];
i++;];

For[k=1,k<=Length[SA`LoopMassesParticle], 
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
Switch[ListTree[[i,4]],
ScalarMass,
AddTadpoles=False;
WriteSelfEnergyScalar[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]], AddTadpoles,True];,
FermionMassSymm,
WriteSelfEnergyFermionSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2]]],True];,
FermionMassNonSymm,
WriteSelfEnergyFermionNonSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2,1]]],ToString[ListTree[[i,2,2]]],True];
];
k++;];

 For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0,
nameCurrent=ToString[listNotMixedMasses[[i,1]]];
nameMass=listNotMixedMasses[[i,2]];
particleCurrent=listNotMixedMasses[[i,1]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";

If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2,
Switch[listNotMixedMasses[[i,6]],
ScalarMass,
WriteSelfEnergyScalar[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False,False];,

FermionMassSymm,
WriteSelfEnergyFermionSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,False];,

FermionMassNonSymm,
WriteSelfEnergyFermionNonSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,mixing2,False];
 ];,

WriteSelfEnergySingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],ToExpression/@StringReplace[ToString[#],subTemp]&/@NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False];

];
];
i++;]; 

list=CorrectionListVectorVector[SA`CurrentStates];
For[i=1,i<=Length[list],
WriteSelfEnergyVectorVector[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],list[[i,1,1]],list[[i,1,2]],NeededMassesVV[[i]],NeededCouplingsVV[[i]],list[[i,2]]];
i++;];

];


WriteSelfEnergyScalar[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_,mixed_]:=Block[{i2,i3},
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name},sphenoLD];
];

WriteSelfEnergyVectorVector[Name_,particle1_,particle2_,masses_,couplings_,contributions_]:=Block[{i2,i3},
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name},sphenoLD];
];


WriteSelfEnergyFermionSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName_,mixed_]:=Block[{i2,i3},
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,il]<> "\n"];
MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>NameP,"SigmaR"<>NameP,"SigmaS"<>NameP},sphenoLD];
 ];

WriteSelfEnergyFermionNonSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName1_,MixingName2_, mixed_]:=Block[{},
WriteString[sphenoLoop, "p2 = "<>Name<> "2_t(iL)\n"];
MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"SigmaL"<>NameP,"SigmaR"<>NameP,"SigmaS"<>NameP},sphenoLD];
];

WriteSelfEnergySingle[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_]:=Block[{i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
WriteString[sphenoLoop, "p2 = "<>ToString[SPhenoMassSq[particle]]<> "\n"];

If[getType[particle]===F,
MakeCall["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"Sigma"<>Name},sphenoLD];,
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","Pi"<>Name},sphenoLD];
];
];


(* GenerateCalcLoopDiagrams:=Block[{},
MakeSubroutineTitle["CalcLoopDiagrams",Join[Join[NewMassParameters,Join[listVEVs,listAllParameters]],SA`ListCounterTerms],{},{"kont"},sphenoLD];
MakeVariableList[NewMassParameters,",Intent(in)",sphenoLD];
MakeVariableList[listVEVs,",Intent(in)",sphenoLD];
MakeVariableList[listAllParameters,",Intent(in)",sphenoLD];
MakeVariableList[SA`ListCounterTerms,",Intent(in)",sphenoLD];
MakeVariableList[namesAllreallyAll,"",sphenoLD];
WriteString[sphenoLD,"Integer, Intent(inout) :: kont \n"];

WriteString[sphenoLD, "Iname = Iname + 1 \n"];
WriteString[sphenoLD, "NameOfUnit(Iname) = 'CalcLoopDiagrams'\n \n"];

(*
MakeCall["AllCouplings" , Join[parametersAll,namesAll],{},{},sphenoLD];
*)


WriteString[sphenoLD,"Iname = Iname - 1 \n \n"];
WriteString[sphenoLD,"End Subroutine CalcLoopDiagrams \n"];

]; *)

GenerateCalculationRunningParameters:=Block[{i,j,k},
MakeSubroutineTitle["CalcRunningParameters",Flatten[{NewMassParameters,Map[ToExpression[SPhenoForm[#]<>"input"]&,listAllParametersAndVEVs],SA`ListCounterTerms,namesAllreallyAll,SA`SelfEnergieNames}],{"m_in"},{"deltaM","kont"},sphenoLD];
MakeVariableList[NewMassParameters,",Intent(out)",sphenoLD];
MakeVariableList[Map[ToExpression[SPhenoForm[#]<>"input"]&,listAllParametersAndVEVs],",Intent(in)",sphenoLD];
MakeVariableList[listAllParametersAndVEVs,"",sphenoLD];
MakeVariableList[SA`ListCounterTerms,",Intent(out)",sphenoLD];
MakeVariableList[SA`SelfEnergieNames,",Intent(out)",sphenoLD];
MakeVariableList[namesAllreallyAll,", Intent(out)",sphenoLD];
WriteString[sphenoLD,"Real(dp), Intent(in) :: m_in \n"];
WriteString[sphenoLD,"Real(dp), Intent(in) :: deltaM \n"];

If[NonSUSYModel=!=True,
WriteString[sphenoLD,"Real(dp) :: dt, tz, g1D("<>ToString[numberAllwithVEVs]<>"), Qin \n"];
];
WriteString[sphenoLD,"Integer :: i2, i3, gt1, gt2, gt3 \n"];
MakeVariableList[NewParametersFromTadpoles,"",sphenoLD];
WriteString[sphenoLD,"Real(dp) :: gSM(10), sinW2, p2 \n"];
WriteString[sphenoLD,"Integer, Intent(inout) :: kont \n"];

WriteString[sphenoLD, "Iname = Iname + 1 \n"];
WriteString[sphenoLD, "NameOfUnit(Iname) = 'CalcRunningParameters'\n \n"];


For[i=1,i<=Length[listAllParametersAndVEVs],
WriteString[sphenoCoup,SPhenoForm[listAllParametersAndVEVs[[i]]]<>" = "<>SPhenoForm[listAllParametersAndVEVs[[i]]]<>"input \n"];
i++;];

If[NonSUSYModel=!=True,
WriteGUTnormalization[sphenoCoup];

MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{},{"g1D"},sphenoCoup];
WriteString[sphenoLD,"Qin=sqrt(getRenormalizationScale()) \n"];

(* Add check if running up or down ! *)

WriteString[sphenoLD,"If (m_in.le.Qin) Then \n"];
WriteString[sphenoLD,"  tz=Log(m_in/Qin) \n"];
WriteString[sphenoLD,"  dt=tz/50._dp \n"];
WriteString[sphenoLD,"  Call odeint(g1D,"<>ToString[numberAllwithVEVs]<>",0._dp,tz,deltaM,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
WriteString[sphenoLD, "Else \n"];
WriteString[sphenoLD,"  tz=Log(Qin/m_in) \n"];
WriteString[sphenoLD,"  dt=tz/50._dp \n"];
WriteString[sphenoLD,"  Call odeint(g1D,"<>ToString[numberAllwithVEVs]<>",tz,0._dp,deltaM,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
WriteString[sphenoLD, "End if \n"];

MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"g1D"},{},sphenoLD];
WriteRemoveGUTnormalization[sphenoLD];
];

(* Check if SM-like particle or heavier than SUSY scale *)

If[NonSUSYModel=!=True,
If[getRParity[particle,SA`CurrentStates]===1,
WriteString[sphenoLD,"If (m_in.le.Qin) Then \n"];

WriteString[sphenoLD,"gSM(1)=sqrt(Alpha_mZ*4*Pi) \n"];
WriteString[sphenoLD,"gSM(2)=sqrt(AlphaS_mZ*4*Pi) \n"];

WriteString[sphenoLD,"gSM(3)= 0.486E-03_dp ! mf_l_mz(1) \n"];
WriteString[sphenoLD,"gSM(4)= 0.10272 !mf_l_mz(2) \n"];
WriteString[sphenoLD,"gSM(5)= 1.74624 !mf_l_mz(3) \n"];
WriteString[sphenoLD,"gSM(6)= 1.27E-03_dp ! mf_u_mz(1) \n"];
WriteString[sphenoLD,"gSM(7)= 0.619  ! mf_u_mz(2) \n"];
WriteString[sphenoLD,"gSM(8)= 2.9E-03_dp !mf_d_mz(1) \n"];
WriteString[sphenoLD,"gSM(9)= 0.55 !mf_d_mz(2) \n"];
WriteString[sphenoLD,"gSM(10)= 2.89 ! mf_d_mz(3) \n"];

WriteString[sphenoLD,"If (m_in.le.sqrt(mz2)) Then \n"];
WriteString[sphenoLD,"  tz=Log(m_in/sqrt(mz2)) \n"];
WriteString[sphenoLD,"  dt=tz/50._dp \n"];
WriteString[sphenoLD,"  Call odeint(gSM,10,0._dp,tz,deltaM,dt,0._dp,rge10_SMa,kont)\n\n"];
WriteString[sphenoLD, "Else \n"];
WriteString[sphenoLD,"  tz=Log(sqrt(mz2)/m_in) \n"];
WriteString[sphenoLD,"  dt=tz/50._dp \n"];
WriteString[sphenoLD,"  Call odeint(gSM,10,tz,0._dp,deltaM,dt,0._dp,rge10_SMa,kont)\n\n"];
WriteString[sphenoLD, "End if \n"];

WriteString[sphenoLD,SPhenoForm[DownYukawa]<>"(1,1) =gSM(8)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[DownYukawa]<>"(2,2) =gSM(9)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[DownYukawa]<>"(3,3) =gSM(10)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[ElectronYukawa]<>"(1,1) =gSM(3)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[ElectronYukawa]<>"(2,2)=gSM(4)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[ElectronYukawa]<>"(3,3)=gSM(5)*sqrt(2._dp)/"<>SPhenoForm[VEVSM1]<>" \n"];
WriteString[sphenoLD,SPhenoForm[UpYukawa]<>"(1,1)=gSM(6)*sqrt(2._dp)/"<>SPhenoForm[VEVSM2]<>" \n"];
WriteString[sphenoLD,SPhenoForm[UpYukawa]<>"(2,2)=gSM(7)*sqrt(2._dp)/"<>SPhenoForm[VEVSM2]<>" \n"];


WriteString[sphenoLD,SPhenoForm[strongCoupling]<>" =gSM(2) \n"];
WriteString[sphenoLD,"g3running=gSM(2) \n"];
WriteString[sphenoLD,SPhenoForm[leftCoupling]<>"=gSM(1)/sqrt(sinW2) \n"];
WriteString[sphenoLD,SPhenoForm[hyperchargeCoupling]<>" = "<> SPhenoForm[leftCoupling]<>"*Sqrt(sinW2/(1._dp-sinW2)) \n"];
WriteString[sphenoLD,"End if \n"];
];
];


WriteTadpoleSolution[sphenoLD];

MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{".True.","kont"},sphenoLD];

MakeCall["AllCouplingsReallyAll" , Join[parametersAllreallyAll,namesAllreallyAll],{},{},sphenoLD];

WriteString[sphenoLD,"p2 = m_in**2 \n"];
WriteCalculateAllSelfEnergies;

For[i=1,i<=Length[SA`ListCounterTerms],
WriteString[sphenoLD,SPhenoForm[SA`ListCounterTerms[[i]]]<>" = 0._dp \n"];
i++;];

WriteString[sphenoLD,"Iname = Iname - 1 \n \n"];
WriteString[sphenoLD,"End Subroutine CalcRunningParameters \n"];
];

