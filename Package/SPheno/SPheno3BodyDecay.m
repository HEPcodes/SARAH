(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



MakeDecayLists3Body[particle_,file_]:=Block[{i,temp, channels,addedDecays},

$sarahSPheno3BodyDecays=ToFileName[{$sarahCurrentSPhenoDir,"3-Body-Decays"}];
If[FileExistsQ[$sarahSPheno3BodyDecays]=!=True,
CreateDirectory[$sarahSPheno3BodyDecays];
];

(* Print["Decay of ", particle]; *)

Switch[getType[particle],
F,temp2=ThreeBodyDecay[particle];,
S,temp2=ThreeBodyDecayScalar[AntiField[particle]];
];

If[getGenSPheno[particle]>1,
temp=temp2[[2]];,
temp={};
For[i=1,i<=Length[temp2[[2]]],
If[FreeQ[temp2[[2,i,1]],particle]==True,
temp = Join[temp,{temp2[[2,i]]}];
];
i++;];
];

If[AntiField[particle]===particle,
temp2 = temp;
temp = {};
addedDecays={};
For[i=1,i<=Length[temp2],
If[FreeQ[addedDecays,temp2[[i,1]]/. FinalStates->C] && FreeQ[addedDecays,AntiField/@(temp2[[i,1]]/. FinalStates->C)],
temp=Join[temp,{temp2[[i]]}];
addedDecays=Join[addedDecays,{temp2[[i,1]]/. FinalStates->C}];
];
i++;];
];


NeededMasses=Table[{},{Length[temp]}];
NeededWidths=Table[{},{Length[temp]}];
NeededWidthsTemp=Table[{},{Length[temp]}];
NeededCouplings=Table[{},{Length[temp]}];
NeededCouplingsAll=Table[{},{Length[temp]}];
NeededCouplingsInsert=Table[{},{Length[temp]}];
NeededIntegrals=Table[{},{Length[temp]}];

For[i=1,i<=Length[temp],
For[j=2,j<=Length[temp[[i]]],
If[FreeQ[NeededMasses[[i]], SPhenoMass[Final1/.temp[[i,j]]]]==True  && FreeQ[massless,getBlank[Final1/.temp[[i,j]]]]==True,
NeededMasses[[i]] = Join[NeededMasses[[i]],{SPhenoMass[Final1/.temp[[i,j]]]}];
];

If[FreeQ[NeededMasses[[i]], SPhenoMass[Final2/.temp[[i,j]]]]==True && FreeQ[massless,getBlank[Final2/.temp[[i,j]]]]==True,
NeededMasses[[i]] = Join[NeededMasses[[i]],{SPhenoMass[Final2/.temp[[i,j]]]}];
];

If[FreeQ[NeededMasses[[i]], SPhenoMass[Final3/.temp[[i,j]]]]==True && FreeQ[massless,getBlank[Final3/.temp[[i,j]]]]==True, 
NeededMasses[[i]] = Join[NeededMasses[[i]],{SPhenoMass[Final3/.temp[[i,j]]]}];
];

If[FreeQ[NeededMasses[[i]], SPhenoMass[Propagator/.temp[[i,j]]]]==True && FreeQ[massless,getBlank[Propagator/.temp[[i,j]]]]==True,
NeededMasses[[i]] = Join[NeededMasses[[i]],{SPhenoMass[Propagator/.temp[[i,j]]]}];
];

If[getType[particle]===F,
If[FreeQ[NeededWidths[[i]], SPhenoWidth[Propagator/.temp[[i,j]]]]==True && FreeQ[massless,getBlank[Propagator/.temp[[i,j]]]]==True,
NeededWidths[[i]] = Join[NeededWidths[[i]],{SPhenoWidth[Propagator/.temp[[i,j]]]}];
Missing::Decay="The width of `` is needed for the three-body decay of ``, but it is not calculated. Please add the particle to 'ListDecayParticles' in your SPheno.m file";
If[FreeQ[ListDecayParticles,RE[Propagator/.temp[[i,j]]]] && FreeQ[{VectorW,VectorZ},RE[Propagator/.temp[[i,j]]]],Message[Missing::Decay,Propagator/.temp[[i,j]],particle];];
NeededWidthsTemp[[i]] = Join[NeededWidthsTemp[[i]],{ToExpression[ToString[SPhenoWidth[Propagator/.temp[[i,j]]]]<>"temp"]}];
];
];

If[FreeQ[NeededCouplingsInsert[[i]], (Couplings /. temp[[i,j]])[[1]]]==True,
NeededCouplingsInsert[[i]]=Join[NeededCouplingsInsert[[i]],{{(Couplings /. temp[[i,j]])[[1]]}}];
NeededCouplings[[i]]=Join[NeededCouplings[[i]],{getSPhenoCoupling[(Couplings /. temp[[i,j]])[[1]]][[1]]}];
];

NeededCouplingsAll[[i]]=Join[NeededCouplingsAll[[i]],{getSPhenoCoupling[(Couplings /. temp[[i,j]])[[1]]]}];

If[FreeQ[NeededCouplingsInsert[[i]], (Couplings /. temp[[i,j]])[[2]]]==True,
NeededCouplingsInsert[[i]]=Join[NeededCouplingsInsert[[i]],{{(Couplings /. temp[[i,j]])[[2]]}}];
NeededCouplings[[i]]=Join[NeededCouplings[[i]],{getSPhenoCoupling[(Couplings /. temp[[i,j]])[[2]]][[1]]}];
];

NeededCouplingsAll[[i]]=Join[NeededCouplingsAll[[i]],{getSPhenoCoupling[(Couplings /. temp[[i,j]])[[2]]]}];

j++;];

If[FreeQ[NeededMasses[[i]],SPhenoMass[particle]]==True,NeededMasses[[i]] = Join[NeededMasses[[i]],{SPhenoMass[particle]}];];


If[getType[particle]===F,NeededIntegrals[[i]]=Intersection[MakeListNeededIntegrals[temp[[i]]]];];
NeededCouplings[[i]] = Intersection[NeededCouplings[[i]]];
i++;];


NeededMassesComplete=Intersection[Flatten[NeededMasses]];
NeededWidthsComplete=Intersection[Flatten[NeededWidths]];
NeededCouplingsComplete=Intersection[Flatten[NeededCouplings]];

SPhenoThreeBody=OpenWrite[ToFileName[$sarahSPheno3BodyDecays,file]];

WriteCopyRight[SPhenoThreeBody];

WriteString[SPhenoThreeBody,"Module "<>ToString[particle]<>"3Decays_"<>ModelName<>" \n \n"];
WriteString[SPhenoThreeBody,"Use Control \n"];
WriteString[SPhenoThreeBody, "Use CouplingsForDecays_"<>ModelName<>" \n"];
If[getType[particle]===F,
WriteString[SPhenoThreeBody,"Use ThreeBodyPhaseSpace \n \n"];,
WriteString[SPhenoThreeBody,"Use ThreeBodyPhaseSpaceS \n \n"];
];
WriteString[SPhenoThreeBody,"Contains \n \n"];

channels=0;

DecayWidth3B={};
DecayWidth3BI={};

For[i=1,i<=Length[NeededMasses],
(* finalStates=getBlank[List@@temp[[i,1]]]; *)
finalStates=List@@temp[[i,1]]/. {A_[{b_}]->A};
nameWidth=ToExpression["g"<>ToString[particle]<>SPhenoShortName[finalStates[[1]]]<>SPhenoShortName[finalStates[[2]]]<>SPhenoShortName[finalStates[[3]]]];
nameWidthI=ToExpression["g"<>ToString[particle]<>SPhenoShortName[finalStates[[1]]]<>SPhenoShortName[finalStates[[2]]]<>SPhenoShortName[finalStates[[3]]]<>"i"];
SPhenoParameters=Join[SPhenoParameters,{{nameWidth,{generation,generation,generation,generation},{getGenSPheno[particle],getGenSPheno[finalStates[[1]]],getGenSPheno[finalStates[[2]]],getGenSPheno[finalStates[[3]]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{nameWidthI,{generation,generation,generation},{getGenSPheno[finalStates[[1]]],getGenSPheno[finalStates[[2]]],getGenSPheno[finalStates[[3]]]}}}];

channels +=getGenSPheno[finalStates[[1]]]*getGenSPheno[finalStates[[2]]]*getGenSPheno[finalStates[[3]]];

DecayWidth3B = Join[DecayWidth3B,{nameWidth}];
DecayWidth3BI = Join[DecayWidth3BI,{nameWidthI}];
realVar=Join[realVar,{nameWidth,nameWidthI}];
All3BodyWidths = Join[All3BodyWidths,{nameWidth}];
i++;];

 WriteThreeBodyDecayTotal[particle,NeededMassesComplete,NeededCouplingsComplete,NeededIntegralsComplete,NeededWidthsComplete,DecayWidth3B,DecayWidth3BI,NeededCouplings,NeededMasses, NeededIntegrals,NeededWidthsTemp,temp,SPhenoThreeBody];


(* savedDecayInfos3Body=Join[savedDecayInfos3Body,{{particle,NeededMassesComplete,NeededCouplingsComplete,NeededWidthsComplete,DecayWidth3B,temp,NeededCouplings}}]; *)

savedDecayInfos3Body=Join[savedDecayInfos3Body,{{particle,NeededMassesComplete,NeededCouplingsComplete,NeededWidthsComplete,DecayWidth3B,temp}}];

If[FreeQ[SPhenoParameters,SPhenoWidth[particle]]==True,
SPhenoParameters= Join[SPhenoParameters,{{ToExpression["gP"<>ToString[particle]],{generation,generation},{getGenSPheno[particle],channels}}}];
SPhenoParameters= Join[SPhenoParameters,{{ToExpression["gT"<>ToString[particle]],{generation},{getGenSPheno[particle]}}}];
SPhenoParameters = Join[SPhenoParameters,{{ToExpression["BR"<>ToString[particle]],{generation,generation},{getGenSPheno[particle],channels}}}];,

pos=Position[SPhenoParameters,ToExpression["gP"<>ToString[particle]]];
If[pos=!={},
pos=pos[[1,1]];,
ThreeBodyDecays::No2BodyDecay="No 2-body decay defined for ``";
Message[ThreeBodyDecays::No2BodyDecay,particle];
Abort[];
];
oldLength = SPhenoParameters[[pos,3,2]];
BR2and3 = Join[BR2and3,{{particle,oldLength,oldLength+channels}}];
SPhenoParameters[[pos,3,2]]= SPhenoParameters[[pos,3,2]] + channels;
pos=Position[SPhenoParameters,ToExpression["BR"<>ToString[particle]]][[1,1]];
SPhenoParameters[[pos,3,2]]= SPhenoParameters[[pos,3,2]] + channels;


];
(*
For[i=1,i\[LessEqual]Length[NeededCouplings],
 WriteThreeBodyDecay[particle,Map[getBlank,List@@temp[[i,1]]],Delete[temp[[i]],1],NeededMasses[[i]],NeededCouplings[[i]],NeededCouplingsAll[[i]],NeededIntegrals[[i]],NeededWidths[[i]],SPhenoThreeBody,i];
i++;];  
*)

For[i=1,i<=Length[NeededCouplings],
 WriteThreeBodyDecay[particle,List@@temp[[i,1]],Delete[temp[[i]],1],NeededMasses[[i]],NeededCouplings[[i]],NeededCouplingsAll[[i]],NeededIntegrals[[i]],NeededWidths[[i]],SPhenoThreeBody,i];
i++;];  




WriteString[SPhenoThreeBody,"End Module "<>ToString[particle]<>"3Decays_"<>ModelName<>" \n \n"];
Close[SPhenoThreeBody];

];

MakeListNeededIntegrals[list_]:=Block[{i,j,tempList,name,name2,temp},
tempList={};
For[i=2,i<=Length[list],
temp =getIntegralDiagonal[list[[i]]];
tempList=Join[tempList,{{SPhenoIntName[temp],SPhenoIntNr1[temp],SPhenoIntNr2[temp],SPhenoIntNameN[temp]}}];
For[j=i,j<=Length[list],
temp =getIntegralOffDiagonal[list[[i]],list[[j]], Final1 /. list[[i]], Final1 /. list[[j]]];
tempList=Join[tempList,{{SPhenoIntName[temp],SPhenoIntNr1[temp],SPhenoIntNr2[temp],SPhenoIntNameN[temp]}}];

If[(Final1 /. list[[i]]) === (Final2 /. list[[i]]) || (Final1 /. list[[i]]) === (Final3 /. list[[i]]), 
temp =getIntegralOffDiagonal[list[[i]],list[[j]], One[Final1 /. list[[i]]], Final2 /. list[[j]]];
tempList=Join[tempList,{{SPhenoIntName[temp],SPhenoIntNr1[temp],SPhenoIntNr2[temp],SPhenoIntNameN[temp]}}];,
If[(Final1 /. list[[j]]) === (Final2 /. list[[j]]) || (Final1 /. list[[j]]) === (Final3 /. list[[j]]), 
temp =getIntegralOffDiagonal[list[[i]],list[[j]], One[Final1 /. list[[i]]], Final2 /. list[[j]]];
tempList=Join[tempList,{{SPhenoIntName[temp],SPhenoIntNr1[temp],SPhenoIntNr2[temp],SPhenoIntNameN[temp]}}];
];
];


j++;];
i++;];
Return[tempList];
];



getIntegralDiagonal[process_]:=Block[{temp},
If[getType[Propagator /. process]===V,
Return[Vs];,
Return[Ss];
];
]; 


getIntegralOffDiagonal[process1_, process2_,f1a_, f1b_]:=Block[{temp,channel},
type1=getType[Propagator /. process1];
type2=getType[Propagator /. process2];

prop1=Propagator /. process1;
prop2=Propagator /. process2;

If[f1a===f1b,channel="ss";,channel="st";];

If[type1===S && type2===V,
type1t=type2;type2=type1; type1=type1t;
]; 

Return[ToExpression[ToString[type1]<>ToString[type2]<>channel]]; 

];

MakeListPhaseSpaceIntegrals[Vector1_,Scalar1_,SchannelV_,STchannelV_,SchannelS_,SSchannelVS_,STchannelVS_]:=Block[{name,name2,i},

ListDiagonal={{Vs,Vector1,SchannelV},{Vst,Vector1,STchannelV},{Ss,Scalar1,SchannelS}};

ListOffDiagonal={{VVst,Vector1,STchannelV},{VVss,Scalar1,SSchannelVS},{VSss,Scalar1,SSchannelVS},{VSst,Scalar1,STchannelVS},
{SSss,Scalar1,SSchannelVS},{SSst,Scalar1,STchannelVS}};


realVar = Join[realVar,{IntegralVVss}];

For[i=1,i<=Length[ListDiagonal],
name=ToExpression["Integral"<>ToString[ListDiagonal[[i,1]]]];
name2=ToExpression["N"<>ToString[ListDiagonal[[i,1]]]];

SPhenoIntName[ListDiagonal[[i,1]]]=name;
SPhenoIntNameN[ListDiagonal[[i,1]]]=name2;
SPhenoIntNr1[ListDiagonal[[i,1]]]=ListDiagonal[[i,2]];
SPhenoIntNr2[ListDiagonal[[i,1]]]=ListDiagonal[[i,3]];

SPhenoParameters=Join[SPhenoParameters,{{name,{generation,generation},{ListDiagonal[[i,2]],ListDiagonal[[i,3]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{name2,{},{}}}];
NeededIntegralsComplete= Join[NeededIntegralsComplete,{{name,ListDiagonal[[i,2]],ListDiagonal[[i,3]],name2}}];
realVar=Join[realVar,{name}];
i++;
];

For[i=1,i<=Length[ListOffDiagonal],
name=ToExpression["Integral"<>ToString[ListOffDiagonal[[i,1]]]];
name2=ToExpression["N"<>ToString[ListOffDiagonal[[i,1]]]];
SPhenoParameters=Join[SPhenoParameters,{{name,{generation,generation},{ListOffDiagonal[[i,2]],ListOffDiagonal[[i,3]]}}}];
SPhenoParameters=Join[SPhenoParameters,{{name2,{},{}}}];

SPhenoIntName[ListOffDiagonal[[i,1]]]=name;
SPhenoIntNameN[ListOffDiagonal[[i,1]]]=name2;
SPhenoIntNr1[ListOffDiagonal[[i,1]]]=ListOffDiagonal[[i,2]];
SPhenoIntNr2[ListOffDiagonal[[i,1]]]=ListOffDiagonal[[i,3]];


NeededIntegralsComplete= Join[NeededIntegralsComplete,{{name,ListOffDiagonal[[i,2]],ListOffDiagonal[[i,3]],name2}}];
i++;
];

];




 WriteThreeBodyDecayTotal[particle_,masses_,couplings_,integrals_,neededwidths_,widths_,widthsI_,detailcouplings_,detailmasses_,detailintegrals_,detailwidths_,processes_,file_]:=Block[{i,tempString},


MakeSubroutineTitle[ToString[particle]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,neededwidths,widths}],{"n_in"},{"epsI", "deltaM","CheckRealStates","gT","gPartial","BR"},file];

WriteString[file,"Implicit None \n \n"];

(* MakeVariableList[masses,",Intent(in)",file]; *)
MakeVariableList[NewMassParameters,",Intent(in)",file];
(* MakeVariableList[couplings,",Intent(in)",file]; *)
MakeVariableList[couplings,"",file];
MakeVariableList[listAllParametersAndVEVs,",Intent(in)",file];
MakeVariableList[widths,",Intent(inout)",file];
MakeVariableList[neededwidths,",Intent(in)",file];
MakeVariableList[widthsI,"",file];


If[Length[neededwidths]!= 0,
tempString="";
For[i=1,i<=Length[neededwidths],
If[getDimSPheno[neededwidths[[i]]]=!={} && getDimSPheno[neededwidths[[i]]]=!={1} ,
tempString=tempString <>ToString[neededwidths[[i]]]<>"temp("<>ToString[getDimSPheno[neededwidths[[i]]][[1]]] <>"),";,
tempString=tempString <>ToString[neededwidths[[i]]]<>"temp,";
];
i++;];
tempString=StringDrop[tempString,-1];
WriteString[file,"Real(dp) :: "<> FortranLineBreak[tempString]<>"\n"]; 
];

tempString="";
tempStringIntR="";
tempStringIntC="";
For[i=1,i<=Length[integrals],
tempString=tempString <> ToString[integrals[[i,4]]]<>",";
If[FreeQ[realVar,integrals[[i,1]]]==False,
tempStringIntR=tempStringIntR <> ToString[integrals[[i,1]]]<>"(:,:),";,
tempStringIntC=tempStringIntC <> ToString[integrals[[i,1]]]<>"(:,:),";
];
i++;];
 tempString=StringDrop[tempString,-1];
 tempStringIntR=StringDrop[tempStringIntR,-1];
tempStringIntC=StringDrop[tempStringIntC,-1];
If[getType[particle]===F,
WriteString[file,"Integer :: "<> FortranLineBreak[tempString]<>"\n"]; 
WriteString[file,"Complex(dp), Allocatable :: "<> FortranLineBreak[tempStringIntC]<>"\n"]; 
WriteString[file,"Real(dp), Allocatable :: "<> FortranLineBreak[tempStringIntR]<>"\n"]; 
];

WriteString[file,"Real(dp), Intent(inout), Optional :: BR(:,:), gPartial(:,:) \n"];
If[getGenSPheno[particle]>1,
WriteString[file,"Real(dp), Intent(inout) :: gT(:) \n"];,
WriteString[file,"Real(dp), Intent(inout) :: gT \n"];
];

WriteString[file,"Integer, Intent(in) :: n_in \n"];
WriteString[file,"Real(dp), Intent(in) :: epsI, deltaM \n"];
WriteString[file, "Logical, Intent(in) ::  CheckRealStates \n"];
WriteString[file,"Integer :: i_start, i_end, i_run, n_out, n_length, gt1, gt2, gt3, i1 \n"];
WriteString[file, "Logical :: check \n"];

WriteString[file, "Iname = Iname +1 \n"];
WriteString[file, "NameOfUnit(Iname) = '"<>ToString[particle]<>"ThreeBodyDecay' \n \n"];


If[getType[particle]===F,
For[i=1,i<=Length[integrals],
WriteString[file, "Allocate( "<>ToString[integrals[[i,1]]] <>"("<>ToString[integrals[[i,2]]]<>","<>ToString[integrals[[i,3]]]<>") ) \n"];
i++;];
];

WriteString[file, "\n \n"];



WriteString[file,"If (CheckRealStates) Then \n"];
For[i=1,i<=Length[neededwidths],
WriteString[file, ToString[neededwidths[[i]]]<> "temp = 0._dp \n"];
i++;];
WriteString[file, "Else \n"];
For[i=1,i<=Length[neededwidths],
WriteString[file, ToString[neededwidths[[i]]]<> "temp = "<>ToString[neededwidths[[i]]]<>" \n"];
i++;];
WriteString[file, "End If \n \n"];
WriteString[file, "check=CheckRealStates \n"];


WriteString[file, "\n \n"];

WriteString[file,"If (n_in.Lt.0) Then \n"];
WriteString[file, " i_start = 1 \n"];
WriteString[file, " i_end = "<>ToString[getGenSPheno[particle]]<>" \n "];
WriteString[file, "Else If ( (n_in.Ge.1).And.(n_in.Le. "<>ToString[getGenSPheno[particle]]<>") ) Then \n"];
WriteString[file, " i_start = n_in \n"];
WriteString[file, " i_end = n_in \n"];
WriteString[file, "Else \n"];
WriteString[file, " If (ErrorLevel.Ge.-1) Then \n"];
WriteString[file, "   Write (ErrCan, *) 'Problem in subroutine'//NameOfUnit(Iname) \n"];
WriteString[file, "   Write (ErrCan, *) 'Value of n_in out of range, (n_in,"<>ToString[getGenSPheno[particle]]<>") = ',n_in,"<>ToString[getGenSPheno[particle]]<>" \n"];
WriteString[file, " End If \n \n"];
WriteString[file, " If (ErrorLevel.Gt.0) Call TerminateProgram \n \n"];
WriteString[file, " If (Present(BR)) BR = 0._dp \n"];
WriteString[file, " Iname = Iname - 1 \n"];
WriteString[file, " Return \n"];
WriteString[file, "End If \n \n"];

If[getGenSPheno[particle]>1,
WriteString[file, "Do i_run = i_start, i_end \n \n"];,
WriteString[file, "i_run = 1 \n \n"];
];

MakeCall["CouplingsFor_"<>SPhenoForm[particle]<>"_decays_"<>"3B",Flatten[{NewMassParameters,listAllParametersAndVEVs,couplings}],{SPhenoMass[particle,"i_run"],"i_run"},{"deltaM"},file];


If[getType[particle]===F,
For[i=1,i<=Length[integrals],
WriteString[file, ToString[integrals[[i,1]]] <>" = 0._dp \n"];
WriteString[file, ToString[integrals[[i,4]]] <>" = 0  \n"];
i++;];
];

WriteString[file,"\n \n"];


For[i=1,i<=Length[detailmasses],
(* finalparticles= Map[getBlank,List @@ processes[[i,1]]]; *)

finalparticles= List @@ processes[[i,1]];

WriteString[file,ToString[widthsI[[i]]] <>" = 0._dp \n"];

If[getType[particle]===F,
MakeCall[ToString[particle]<>"To"<>SPhenoShortName[finalparticles[[1]]]<>SPhenoShortName[finalparticles[[2]]]<>SPhenoShortName[finalparticles[[3]]],Flatten[{detailmasses[[i]],detailcouplings[[i]],Transpose[detailintegrals[[i]]][[1]],Transpose[detailintegrals[[i]]][[4]],detailwidths[[i]]}],{"i_run"},{"deltaM", "epsI","check",ToString[widthsI[[i]]] },file];,
MakeCall[ToString[particle]<>"To"<>SPhenoShortName[finalparticles[[1]]]<>SPhenoShortName[finalparticles[[2]]]<>SPhenoShortName[finalparticles[[3]]],Flatten[{detailmasses[[i]],detailcouplings[[i]]}],{"i_run"},{"deltaM", "epsI","check",ToString[widthsI[[i]]] },file];
];



(*
MakeCall[ToString[particle]<>"To"<>ToString[finalparticles[[1]]]<>ToString[finalparticles[[2]]]<>ToString[finalparticles[[3]]],Flatten[{listAllParametersAndVEVs,detailmasses[[i]],Transpose[detailintegrals[[i]]][[1]],Transpose[detailintegrals[[i]]][[4]],detailwidths[[i]]}],{"i_run"},{"deltaM", "epsI","check",ToString[widthsI[[i]]] },file];
*)

WriteString[file,ToString[widths[[i]]] <>"(i_run,:,:,:) = "<>ToString[widthsI[[i]]]<>" \n"];
If[(AntiField[particle]===particle) && (C@@processes[[i,1]]=!=(AntiField/@(C@@processes[[i,1]]))),
If[getGenSPheno[particle]>1,
WriteString[file,"gT(i_run) = gT(i_run) + 2._dp*Sum("<>ToString[widthsI[[i]]]<>") \n \n"];,
WriteString[file,"gT = gT + 2._dp*Sum("<>ToString[widthsI[[i]]]<>") \n \n"];
];,
If[getGenSPheno[particle]>1,
WriteString[file,"gT(i_run) = gT(i_run) + Sum("<>ToString[widthsI[[i]]]<>") \n \n"];,
WriteString[file,"gT = gT + Sum("<>ToString[widthsI[[i]]]<>") \n \n"];
];
];

i++;];
If[getGenSPheno[particle]>1,
WriteString[file, "End Do \n \n\n"];
];

WriteString[file, "If (Present(gPartial)) Then\n"];
WriteString[file, "Do i1 = i_start, i_end \n \n"];
WriteString[file, "n_length=1\n"];

For[i=1,i<=Length[processes],
finalparticles= Map[getBlank,List @@ processes[[i,1]]];
finalparticlesHead=List @@ processes[[i,1]] /. A_Symbobl[b__List]->A;
WriteString[file,"Do gt1="<>ToString[getGenSPhenoStart[finalparticles[[1]]]] <> ","<>ToString[getGenSPheno[finalparticles[[1]]]] <> "\n"];
If[finalparticlesHead[[2]]===finalparticlesHead[[1]],
WriteString[file,"  Do gt2=gt1,"<>ToString[getGenSPheno[finalparticles[[2]]]] <> "\n"];,
WriteString[file,"  Do gt2="<>ToString[getGenSPhenoStart[finalparticles[[2]]]] <> ","<>ToString[getGenSPheno[finalparticles[[2]]]] <> "\n"];
];
If[finalparticlesHead[[3]]===finalparticlesHead[[2]],
WriteString[file,"    Do gt3=gt2,"<>ToString[getGenSPheno[finalparticles[[3]]]] <> "\n"];,
If[finalparticlesHead[[3]]===finalparticlesHead[[1]],
WriteString[file,"    Do gt3=gt1,"<>ToString[getGenSPheno[finalparticles[[3]]]] <> "\n"];,
WriteString[file,"    Do gt3="<>ToString[getGenSPhenoStart[finalparticles[[3]]]] <> ","<>ToString[getGenSPheno[finalparticles[[3]]]] <> "\n"];
];
];

If[(AntiField[particle]===particle) && (C@@processes[[i,1]]=!=(AntiField/@(C@@processes[[i,1]]))),
WriteString[file, "gPartial(i1,n_length)= 2._dp*"<>ToString[widths[[i]]]<>"(i1,gt1,gt2,gt3)\n"];,
WriteString[file, "gPartial(i1,n_length)= "<>ToString[widths[[i]]]<>"(i1,gt1,gt2,gt3)\n"];
];

WriteString[file, "n_length=n_length+1\n"];
WriteString[file, "     End Do \n"];  
WriteString[file, "  End Do \n"];  
WriteString[file, "End Do \n"];  
i++;];

If[getGenSPheno[particle]>1,
WriteString[file, "If (Present(BR).And.(gT(i1).Gt.0._dp)) Then \n"];
WriteString[file, "BR(i1,:)=gPartial(i1,:)/gT(i1)\n"];
WriteString[file, "Else If (Present(BR)) Then\n"];
WriteString[file, "BR(i1,:)=0._dp\n"];
WriteString[file, "End If\n \n"];,
WriteString[file, "If (Present(BR).And.(gT.Gt.0._dp)) Then \n"];
WriteString[file, "BR(i1,:)=gPartial(i1,:)/gT\n"];
WriteString[file, "Else If (Present(BR)) Then\n"];
WriteString[file, "BR(i1,:)=0._dp\n"];
WriteString[file, "End If\n \n"];
];

WriteString[file, "End Do \n"];
WriteString[file, "End if \n"];

If[getType[particle]===F,
For[i=1,i<=Length[integrals],
WriteString[file, "Deallocate( "<>ToString[integrals[[i,1]]] <>" ) \n"];
i++;];
];

(* WriteString[file, "gT = 0._dp\n"];
WriteString[file, "gPartial = 0._dp\n"];
WriteString[file,"If (Present(BR)) Then\n"];
WriteString[file, "  BR=0._dp\n"];
WriteString[file, "End If\n \n"];

];
*)



WriteString[file, "Iname = Iname - 1 \n \n"];
WriteString[file, "End Subroutine "<>ToString[particle]<>"ThreeBodyDecay"<>"\n \n \n"];

];



MakeDiagonalProcess[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1b_,f2b_,f3b_},{prop_,nProp_},{couplingsAll_, NRC_},process_,file_]:=Switch[getType[particle],
F,MakeDiagonalProcessFermion[particle, {f1,n1},{f2,n2},{f3,n3},{f1b,f2b,f3b},{prop,nProp},{couplingsAll, NRC},process,file];,
S,MakeDiagonalProcessScalar[particle, {f1,n1},{f2,n2},{f3,n3},{f1b,f2b,f3b},{prop,nProp},{couplingsAll, NRC},process,file];
];

MakeDiagonalProcessFermion[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1b_,f2b_,f3b_},{prop_,nProp_},{couplingsAll_, NRC_},process_,file_]:=Block[{temp1,temp2},

listCorrInd=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1b,f2b,f3b];
temp1=MakeIndicesCoupling[{AntiField[particle],iIN},{prop,nProp},{Final1 /. process,listCorrInd[[1]]},couplingsAll[[2*(NRC-1)+1,2]]];
temp2=MakeIndicesCoupling[{AntiField[prop],nProp},{Final2 /. process,listCorrInd[[2]]},{Final3 /. process,listCorrInd[[3]]},couplingsAll[[2*NRC,2]]];

ind1=temp1[[1]];
checkHC1=temp1[[2]];
ind2=temp2[[1]];
checkHC2=temp2[[2]];

WriteString[file, "mass(2) = "<> SPhenoMass[f1b /. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[1]]]<>" \n"];
WriteString[file, "mass(3) = -"<> SPhenoMass[f2b/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[2]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f3b/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[3]]]<>" \n \n"];

If[checkHC1==False,
WriteString[file, "coup(2) = Conjg("<>ToString[ couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>") \n"];
WriteString[file, "coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC-1)+1,1,2]]] <> ind1 <>") \n"];,
WriteString[file, "coup(1) = "<>ToString[ couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>" \n"];
WriteString[file, "coup(2) = "<> ToString[couplingsAll[[2*(NRC-1)+1,1,2]]] <> ind1 <>" \n"];
];
If[checkHC2==False,
WriteString[file, "coup(4) = Conjg("<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>") \n"];
WriteString[file, "coup(3) = Conjg("<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>")\n"];,
WriteString[file, "coup(3) = "<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>" \n"];
WriteString[file, "coup(4) = "<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>"\n"];
];

tempInt=getIntegralDiagonal[process];

name=ToString[SPhenoIntName[tempInt]];
name2=ToString[SPhenoIntNameN[tempInt]];

If[getType[prop]===S,
WriteString[file,"Call IntegrateScalarSS(Boson2,mass,coup,deltaM,epsI,"<>name<>","<>name2<>",resR, check) \n"];,
WriteString[file,"Call IntegrateGaugeSS(Boson2,mass,coup,deltaM,epsI,"<>name<>","<>name2<>",resR, check) \n"];
];

MakeSymmFactorPart[{f1 /. {One[x_]->x, Two[x_]->x},n1},{f2/. {One[x_]->x, Two[x_]->x},n2},{f3/. {One[x_]->x, Two[x_]->x},n3},"resR",file];
fac=CallGetChargeFactorDecay[AntiField[particle],process,process,"BOX"];
WriteString[file,"resR= "<>SPhenoForm[fac]<>"*resR ! color factor \n"];
WriteString[file, "resS = resS + resR \n \n "];


];




MakeDiagonalProcessScalar[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1b_,f2b_,f3b_},{prop_,nProp_},{couplingsAll_, NRC_},process_,file_]:=Block[{temp1,temp2},
listCorrInd=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1b,f2b,f3b];
temp1=MakeIndicesCoupling[{AntiField[particle],iIN},{prop,nProp},{Final1 /. process,listCorrInd[[1]]},couplingsAll[[2*(NRC-1)+1,2]]];
temp2=MakeIndicesCoupling[{AntiField[prop],nProp},{Final2 /. process,listCorrInd[[2]]},{Final3 /. process,listCorrInd[[3]]},couplingsAll[[2*NRC,2]]];

ind1=temp1[[1]];
checkHC1=temp1[[2]];
ind2=temp2[[1]];
checkHC2=temp2[[2]];

(*
WriteString[file, "mass(2) = "<> SPhenoMass[f1b /. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[1]]]<>" \n"];
WriteString[file, "mass(3) = -"<> SPhenoMass[f2b/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[2]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f3b/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[3]]]<>" \n \n"];
*)

WriteString[file, "mass(1) = "<> SPhenoMass[prop,nProp]<>" \n"];
WriteString[file, "mass(2) = "<> SPhenoMass[prop,nProp]<>" \n"];
WriteString[file, "m_in = "<> SPhenoMass[particle,iIN]<>" \n"];

If[getType[prop]===F,
If[checkHC1==False,
WriteString[file, "coup(2) = Conjg("<>ToString[ couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>") \n"];
WriteString[file, "coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC-1)+1,1,2]]] <> ind1 <>") \n"];,
WriteString[file, "coup(1) = "<>ToString[ couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>" \n"];
WriteString[file, "coup(2) = "<> ToString[couplingsAll[[2*(NRC-1)+1,1,2]]] <> ind1 <>" \n"];
];
If[checkHC2==False,
WriteString[file, "coup(4) = Conjg("<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>") \n"];
WriteString[file, "coup(3) = Conjg("<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>")\n"];,
WriteString[file, "coup(3) = "<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>" \n"];
WriteString[file, "coup(4) = "<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>"\n"];
];,
If[checkHC1==False,
WriteString[file, "coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>") \n"];,
WriteString[file, "coup(1) = "<>ToString[ couplingsAll[[2*(NRC-1)+1,1,1]]] <> ind1 <>" \n"];
];
If[checkHC2==False,
WriteString[file, "coup(3) = Conjg("<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>") \n"];
WriteString[file, "coup(2) = Conjg("<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>")\n"];,
WriteString[file, "coup(2) = "<> ToString[couplingsAll[[2*NRC,1,1]]] <>ind2 <>" \n"];
WriteString[file, "coup(3) = "<> ToString[couplingsAll[[2*NRC,1,2]]] <>ind2 <>"\n"];
];
];

tempInt=getIntegralDiagonal[process];

name=ToString[SPhenoIntName[tempInt]];
name2=ToString[SPhenoIntNameN[tempInt]];

Switch[getType[prop],
S,
WriteString[file, "coup(4:6) = coup(1:3) \n"];
WriteString[file, "Call IntegrateSaSa(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];,
F,
 WriteString[file, "coup(5:8) = coup(1:4) \n"];
WriteString[file, "Call IntegrateFFLM(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];,
V,
WriteString[file, "coup(4:6) = coup(1:3) \n"];
WriteString[file, "Call IntegrateVV(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
];
fac=CallGetChargeFactorDecay[AntiField[particle],process,process,"BOX"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];

(*
If[getType[prop]===S,
WriteString[file,"Call IntegrateScalarSS(Boson2,mass,coup,deltaM,epsI,"<>name<>","<>name2<>",resR, check) \n"];,
WriteString[file,"Call IntegrateGaugeSS(Boson2,mass,coup,deltaM,epsI,"<>name<>","<>name2<>",resR, check) \n"];
];
*)

MakeSymmFactorPart[{f1 /. {One[x_]->x, Two[x_]->x},n1},{f2/. {One[x_]->x, Two[x_]->x},n2},{f3/. {One[x_]->x, Two[x_]->x},n3},"resC",file];
WriteString[file, "resS = resS + resC \n \n "];


];

GenerateAllSquaredDiagramsDiagonal[particle_,{f1_,n1_},{f2_,n2_},{f3_,n3_}, {process1_,nr1_},{couplings_, nrC1_},file_]:=Block[{temp,i},


listFinalStates={f1,f2,f3};
listFinalStatesPro1 = {Final1 /. process1, Final2 /. process1,Final3 /. process1};

If[Length[Intersection[listFinalStates]]==3,
MakeDiagonalProcess[particle,{f1,n1},{f2,n2},{f3,n3},{Final1 /. process1,Final2 /. process1,Final3 /. process1},{Propagator /. process1,nr1},{couplings,nrC1},process1,file];,

If[Length[Intersection[listFinalStates]]==2,
temp=MakeCorrespondingStates[{f1,f2,f3},{Final1 /. process1, Final2 /. process1,Final3 /. process1},{Final1 /. process1, Final2 /. process1,Final3 /. process1}];
listFinalStatesRep=temp[[1]];
FinalListProcess1=temp[[2]];

MakeDiagonalProcess[particle, {listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]],FinalListProcess1[[2]],FinalListProcess1[[3]]},{Propagator /. process1,nr1},{couplings,nrC1},process1,file];


(* If[(Final1 /.process1)===(Final3 /.process1) || (Final1 /.process1)===(Final3 /.process1) , *)
If[FreeQ[Couplings/.process1,Cp[a___,b_,c___,b_]],
MakeDiagonalProcess[particle, {listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[2]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[3]] /. {One[x_]->Two[x], Two[x_]->One[x]}},{Propagator /. process1,nr1},{couplings,nrC1},process1,file];
 ]; 

MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}},{FinalListProcess1[[1]],FinalListProcess1[[2]],FinalListProcess1[[3]]}, {Propagator /. process1, nr1},{Propagator /. process1, nr1},{couplings,nrC1,nrC1},process1,process1,-1,file];,


listFinalStatesRep={One[f1],Two[f2],Three[f3]};
FinalListProcess1={One[Final1 /. process1],Two[Final2 /. process1],Three[Final3 /. process1]};

MakeDiagonalProcess[particle, {listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]],FinalListProcess1[[2]],FinalListProcess1[[3]]},{Propagator /. process1,nr1},{couplings,nrC1},process1,file];


MakeDiagonalProcess[particle, {listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[2]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[3]] /. {One[x_]->Two[x], Two[x_]->One[x]}},{Propagator /. process1,nr1},{couplings,nrC1},process1,file];


listSubCrossingST1={{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]},
				{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]}};

For[i=1,i<=6,
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. listSubCrossingST1[[i]],FinalListProcess1[[2]] /. listSubCrossingST1[[i]],FinalListProcess1[[3]] /. listSubCrossingST1[[i]]},{FinalListProcess1[[1]],FinalListProcess1[[2]],FinalListProcess1[[3]]}, {Propagator /. process1, nr1},{Propagator /. process1, nr1},{couplings,nrC1,nrC1},process1,process1,-1,file];
i++;];

];
];
];


WriteThreeBodyDecay[particle_,finalparticles_,diagrams_,masses_,couplings_,couplingsAll_,integrals_,widths_,file_,Fnr_]:=Block[{i,j,name,name2,tempString, factor,temp1a,temp2a,temp1b,temp2b, temp,nrSaved},

If[getType[particle]===F,
MakeSubroutineTitle[ToString[particle]<>"To"<>SPhenoShortName[finalparticles[[1]]]<>SPhenoShortName[finalparticles[[2]]]<>SPhenoShortName[finalparticles[[3]]],Flatten[{masses,couplings,Transpose[integrals][[1]],Transpose[integrals][[4]],widths}],{"iIN"},{"deltaM", "epsI","check","g", "WriteContributions"},file];,
MakeSubroutineTitle[ToString[particle]<>"To"<>SPhenoShortName[finalparticles[[1]]]<>SPhenoShortName[finalparticles[[2]]]<>SPhenoShortName[finalparticles[[3]]],Flatten[{masses,couplings}],{"iIN"},{"deltaM", "epsI","check","g", "WriteContributions"},file];
];


WriteString[file,"Implicit None \n \n"];
MakeVariableList[Flatten[{masses,couplings}],",Intent(in)", file]; 
If[getType[particle]===F,MakeVariableList[Transpose[integrals][[1]],",Intent(inout)", file];];
If[getType[particle]===F,MakeVariableList[widths,",Intent(inout)",file];];

If[getType[particle]===F,
tempString="";
For[i=1,i<=Length[integrals],
tempString=tempString <> ToString[integrals[[i,4]]]<>",";
i++;];
 tempString=StringDrop[tempString,-1];
WriteString[file,"Integer, Intent(inout) :: "<> FortranLineBreak[tempString]<>"\n"]; 
];
WriteString[file,"Real(dp),Intent(inout)::g(:,:,:) \n"];


WriteString[file,"Logical, Intent(in) :: check \n"];
WriteString[file,"Integer, Intent(in) :: iIN \n"];
WriteString[file,"Real(dp), Intent(in) :: epsI, deltaM \n"];
WriteString[file,"Logical, Optional :: WriteContributions \n"];
WriteString[file,"Integer :: i1,i2,gt1,gt2,gt3, Isum \n"];
WriteString[file,"Real(dp) :: resR,  res1, res2, resD, m_in \n"];
WriteString[file,"Complex(dp) :: resC, resS \n"];
WriteString[file,"Real(dp), Allocatable :: gSum(:,:,:,:) \n"];
WriteString[file,"Character(len=20), Allocatable :: Contribution(:,:,:,:) \n"];

If[getType[particle]===S,
WriteString[file,"Real(dp)::smin,smax,smin2,smax2,rj2,rk2,rm2 \n"];
WriteString[file,"Real(dp)::r_out(3),r_outcrossed(3) \n"];
WriteString[file,"Real(dp)::mass(3) \n"];
WriteString[file,"Complex(dp)::coup(10) \n"];,

WriteString[file,"Real(dp) :: Boson2(2), mass(4),  Boson4(4) \n"];
WriteString[file,"Complex(dp) :: coup(4), coup2(8),coupT \n"];
];


WriteString[file,"mass(1) = " <>SPhenoMass[particle,iIN]<>" \n \n"];

WriteString[file, "Isum = "<>ToString[NumberOfDiagrams[diagrams]]<>" \n"];
nrSaved = ToString[NumberOfDiagrams[diagrams]];

WriteString[file, "Allocate( gSum("<>ToString[getGenSPheno[Final1 /. diagrams[[1]]]] <>","<>ToString[getGenSPheno[Final2 /. diagrams[[1]]]]   <>","<>ToString[getGenSPheno[Final3 /. diagrams[[1]]]]  <>", Isum) ) \n"];
WriteString[file, "Allocate( Contribution("<>ToString[getGenSPheno[Final1 /. diagrams[[1]]]] <>","<>ToString[getGenSPheno[Final2 /. diagrams[[1]]]]   <>","<>ToString[getGenSPheno[Final3 /. diagrams[[1]]]]  <>", Isum) ) \n"];


WriteString[file, "gSum = 0._dp  \n"];
WriteString[file, "Contribution = ' ' \n \n"];

WriteString[file, "Isum = 0 \n \n"];


 FinalParticle1=Final1 /. diagrams[[1]];
FinalParticle2=Final2 /. diagrams[[1]];
FinalParticle3=Final3 /. diagrams[[1]]; 



If[getGenSPheno[FinalParticle1]>1,
var1="gt1";
If[FinalParticle1===particle,
DoLoop1="    Do gt1="<>ToString[getGenSPhenoStart[FinalParticle1]] <> ", iIN-1\n";
DoLoopEnd1= "   End Do \n";,
DoLoop1="    Do gt1="<>ToString[getGenSPhenoStart[FinalParticle1]] <> ","<>ToString[getGenSPheno[FinalParticle1]] <> "\n";
DoLoopEnd1= "   End Do \n";
];,
DoLoop1="";
DoLoopEnd1= "";
var1="1";
];

If[getGenSPheno[FinalParticle2]>1,
var2="gt2";
If[FinalParticle2===particle,
If[FinalParticle2===FinalParticle1,
DoLoop2="      Do gt2=gt1, iIN-1\n";,
DoLoop2="      Do gt2="<>ToString[getGenSPhenoStart[FinalParticle2]] <> ", iIN-1\n";
];
DoLoopEnd2= "     End Do \n";,
If[FinalParticle2===FinalParticle1,
DoLoop2="      Do gt2=gt1,"<>ToString[getGenSPheno[FinalParticle2]] <> "\n";,
DoLoop2="      Do gt2="<>ToString[getGenSPhenoStart[FinalParticle2]] <> ","<>ToString[getGenSPheno[FinalParticle2]] <> "\n";
];
DoLoopEnd2= "     End Do \n";
];,
DoLoop2="";
DoLoopEnd2= "";
var2="1";
];

If[getGenSPheno[FinalParticle3]>1,
var3="gt3";
If[FinalParticle3===particle,
If[FinalParticle3===FinalParticle2,
DoLoop3="        Do gt3=gt2, iIN-1\n";,
If[FinalParticle3===FinalParticle1,
DoLoop3="        Do gt3=gt1, iIN-1\n";,
DoLoop3="        Do gt3="<>ToString[getGenSPhenoStart[FinalParticle3]] <> ", iIN-1\n";
];
];
DoLoopEnd3= "       End Do \n";,
If[FinalParticle3===FinalParticle2,
DoLoop3="        Do gt3=gt2,"<>ToString[getGenSPheno[FinalParticle3]] <> "\n";,
If[FinalParticle3===FinalParticle1,
DoLoop3="        Do gt3=gt1,"<>ToString[getGenSPheno[FinalParticle3]] <> "\n";,
DoLoop3="        Do gt3="<>ToString[getGenSPhenoStart[FinalParticle3]] <> ","<>ToString[getGenSPheno[FinalParticle3]] <> "\n";
];
];
DoLoopEnd3= "       End Do \n";
];,
DoLoop3="";
DoLoopEnd3= "";
var3="1";
];



WriteString[file, DoLoop1];  WriteString[file, DoLoop2];  WriteString[file, DoLoop3];
WriteString[file, "Isum = 0 \n \n"];


If[getType[particle]===S,
posF=Position[getType/@{FinalParticle1,FinalParticle2,FinalParticle3},F];
posS=Position[getType/@{FinalParticle1,FinalParticle2,FinalParticle3},S];
WriteString[file,"rk2 = ("<>SPhenoMass[ToExpression["FinalParticle"<>ToString[posF[[1,1]]]],ToExpression["gt"<>ToString[posF[[1,1]]]]]<>"/"<>SPhenoMass[particle,iIN]<>")**2 \n"]; (* rk2=(mf_l(k)/mSl(i))**2 *)
WriteString[file,"rm2 = ("<>SPhenoMass[ToExpression["FinalParticle"<>ToString[posF[[2,1]]]],ToExpression["gt"<>ToString[posF[[2,1]]]]]<>"/"<>SPhenoMass[particle,iIN]<>")**2 \n"]; (* rm2=(mf_l(m)/mSl(i))**2 *)
WriteString[file,"rj2 = ("<>SPhenoMass[ToExpression["FinalParticle"<>ToString[posS[[1,1]]]],ToExpression["gt"<>ToString[posS[[1,1]]]]]<>"/"<>SPhenoMass[particle,iIN]<>")**2 \n"]; (* rj2=(mSl(j)/mSl(i))**2 *)

WriteString[file,"smin=2._dp*Sqrt(rk2) \n"];
WriteString[file,"smax=1._dp+rk2-rj2-rm2-2._dp*Sqrt(rj2*rm2) \n"];
WriteString[file,"smin2=2._dp*Sqrt(rm2) \n"];
WriteString[file,"smax2=1._dp+rm2-rj2-rk2-2._dp*Sqrt(rj2*rk2) \n"];
WriteString[file,"m_in="<>SPhenoMass[particle,iIN]<>" \n"];


WriteString[file,"r_out(1)=rj2 \n"];
WriteString[file,"r_out(2)=rk2 \n"];
WriteString[file,"r_out(3)=rm2 \n"];

WriteString[file,"r_outcrossed(1)=rj2 \n"];
WriteString[file,"r_outcrossed(2)=rm2 \n"];
WriteString[file,"r_outcrossed(3)=rk2 \n"];

];

WriteString[file, "If(Abs("<>SPhenoMass[particle,iIN]<>").gt.(Abs("<>SPhenoMass[FinalParticle3,gt3]<>")+Abs("<>SPhenoMass[FinalParticle2,gt2]<>")+Abs("<>SPhenoMass[FinalParticle1,gt1]<>"))) Then \n"];



For[i=1,i<=Length[diagrams],

WriteString[file,"!-------------- \n"];
WriteString[file,"!  " <> ToString[Propagator /. diagrams[[i]]] <>" \n"];
WriteString[file,"!-------------- \n"];

If[getGenSPheno[Propagator/. diagrams[[i]]]>1,WriteString[file,"Do i1=1,"<>ToString[getGenSPheno[Propagator /. diagrams[[i]]]] <> "\n"];];
WriteString[file, "Isum = Isum + 1 \n"];

If[getType[particle]===F,
WriteString[file, "Boson2(1) = "<>SPhenoMass[Propagator /. diagrams[[i]], i1] <>" \n"];
WriteString[file, "Boson2(2) ="<>SPhenoWidth[Propagator /. diagrams[[i]], i1] <>" \n \n"];

WriteString[file, "Boson4(1) = "<>SPhenoMass[Propagator /. diagrams[[i]], i1] <>" \n"];
WriteString[file, "Boson4(2) ="<>SPhenoWidth[Propagator /. diagrams[[i]], i1] <>" \n"];
WriteString[file, "Boson4(3) = "<>SPhenoMass[Propagator /. diagrams[[i]], i1] <>" \n"];
WriteString[file, "Boson4(4) ="<>SPhenoWidth[Propagator /. diagrams[[i]], i1] <>" \n \n"];
];
WriteString[file, "resS=0._dp \n"];
WriteString[file, "resD=0._dp \n \n"];

GenerateAllSquaredDiagramsDiagonal[particle,{FinalParticle1,gt1},{FinalParticle2,gt2},{FinalParticle3,gt3}, {diagrams[[i]],i1},{couplingsAll, i},file];

WriteString[file,"resD = resD + resS \n"];
WriteString[file,"If (resD.ne.resD) Then \n"];
WriteString[file,"Write(*,*) \"NaN appearing in the following diagrams: \" \n"];
WriteString[file,"Write(*,*) \""<>ToString[particle]<>"->"<>SPhenoShortName[finalparticles[[1]]]<>" "<>SPhenoShortName[finalparticles[[2]]]<>" "<>SPhenoShortName[finalparticles[[3]]] <>" Propagator: "<>ToString[Propagator /. diagrams[[i]]]<>"\" \n"];
WriteString[file,"Write(*,*)  \"M_in: \",m_in \n"];
WriteString[file,"Write(*,*)  \"mass: \",mass \n"];
WriteString[file,"Write(*,*)  \"coup: \",coup \n"];
WriteString[file,"gSum("<>var1<>","<>var2<>",",var3<>",Isum)= 0._dp\n"];
WriteString[file,"Else \n"];
WriteString[file,"gSum("<>var1<>","<>var2<>",",var3<>",Isum)=resD\n"];
WriteString[file,"End If \n"];
WriteString[file,"Contribution("<>var1<>","<>var2<>",",var3<>",Isum)='"<>ToString[Propagator /. diagrams[[i]]] <>"'\n"];

If[getGenSPheno[Propagator/. diagrams[[i]]]>1,WriteString[file,"      End Do \n"];];
WriteString[file,"\n\n\n"];
i++;];


For[i=1,i<=Length[diagrams],
For[j=i,j<=Length[diagrams],
If[i=!=j || getGenSPheno[Propagator/. diagrams[[i]]]>1,

WriteString[file,"!-------------- \n"];
WriteString[file,"!  " <> ToString[Propagator /. diagrams[[i]]]<>", "<> ToString[Propagator /. diagrams[[j]]] <>" \n"];
WriteString[file,"!-------------- \n"];

If[i==j ,
If[getGenSPheno[Propagator/. diagrams[[i]]]>1,WriteString[file,"Do i1=1,"<>ToString[getGenSPheno[Propagator /. diagrams[[i]]]-1] <> "\n"];];,
If[getGenSPheno[Propagator/. diagrams[[i]]]>1,WriteString[file,"Do i1=1,"<>ToString[getGenSPheno[Propagator /. diagrams[[i]]]] <> "\n"];];
 ];

If[i==j ,
If[getGenSPheno[Propagator/. diagrams[[j]]]>1,WriteString[file,"  Do i2=i1+1,"<>ToString[getGenSPheno[Propagator /. diagrams[[j]]]] <> "\n"];];,
If[getGenSPheno[Propagator/. diagrams[[j]]]>1,WriteString[file,"  Do i2=1,"<>ToString[getGenSPheno[Propagator /. diagrams[[j]]]] <> "\n"];];
];

If[getType[particle]===F,
WriteString[file, "Boson4(1) = "<>SPhenoMass[Propagator /. diagrams[[i]],i1] <>" \n"];
WriteString[file, "Boson4(2) = "<>SPhenoWidth[Propagator /. diagrams[[i]],i1] <>" \n"];
WriteString[file, "Boson4(3) = "<>SPhenoMass[Propagator /. diagrams[[j]],i2] <>" \n"];
WriteString[file, "Boson4(4) = "<>SPhenoWidth[Propagator /. diagrams[[j]],i2] <>" \n"];
];

WriteString[file, "Isum = Isum + 1 \n \n"];

WriteString[file, "resS = 0._dp \n"];

GenerateAllSquaredDiagrams[particle,{FinalParticle1,gt1},{FinalParticle2,gt2},{FinalParticle3,gt3}, {diagrams[[i]],i1}, {diagrams[[j]],i2},{couplingsAll, i, j},file];

WriteString[file,"If (resS.ne.resS) Then \n"];
WriteString[file,"Write(*,*) \"NaN appearing in the following diagrams: \" \n"];
WriteString[file,"Write(*,*) \""<>ToString[particle]<>"->"<>SPhenoShortName[finalparticles[[1]]]<>" "<>SPhenoShortName[finalparticles[[2]]]<>" "<>SPhenoShortName[finalparticles[[3]]] <>" Propagator: "<>ToString[Propagator /. diagrams[[i]]] <>","<>ToString[Propagator /. diagrams[[j]]]<>"\" \n"];
WriteString[file,"Write(*,*)  \"M_in: \",m_in \n"];
WriteString[file,"Write(*,*)  \"mass: \",mass \n"];
WriteString[file,"Write(*,*)  \"coup: \",coup \n"];
WriteString[file,"gSum("<>var1<>","<>var2<>",",var3<>",Isum)= 0._dp  \n"];
WriteString[file,"Else \n"];
WriteString[file,"gSum("<>var1<>","<>var2<>",",var3<>",Isum)= resS  \n"];
WriteString[file,"End If \n"];
WriteString[file,"Contribution("<>var1<>","<>var2<>",",var3<>",Isum)='"<>ToString[Propagator /. diagrams[[i]]] <>","<>ToString[Propagator /. diagrams[[j]]] <>"'\n"];

If[getGenSPheno[Propagator/. diagrams[[i]]]>1,WriteString[file,"        End Do \n"];];If[getGenSPheno[Propagator/. diagrams[[j]]]>1,WriteString[file,"      End Do \n"];];

WriteString[file,"\n\n\n"];
];
j++;];
i++;];

WriteString[file, "Else \n"];
WriteString[file,"gSum("<>var1<>","<>var2<>",",var3<>",:)= 0._dp  \n"];

WriteString[file, "End If \n"];
WriteString[file, DoLoopEnd3];  WriteString[file, DoLoopEnd2];  WriteString[file, DoLoopEnd1];


WriteString[file,"!---------- \n"];
WriteString[file,"!Summing \n"];
WriteString[file,"!---------- \n"];

WriteString[file,"g=0._dp \n"];

WriteString[file, DoLoop1];  WriteString[file, DoLoop2];  WriteString[file, DoLoop3];

WriteString[file,"g("<>var1<>","<>var2<>",",var3<>")=Sum(gSum("<>var1<>","<>var2<>",",var3<>",1:"<>nrSaved<>"))\n"];
WriteString[file,"If (g("<>var1<>","<>var2<>",",var3<>").Lt.0._dp) Then\n"];
WriteString[file,"  Write (ErrCan,*)'Error in Subroutine'//NameOfUnit(Iname)\n"];
WriteString[file,"  g("<>var1<>","<>var2<>",",var3<>")=0._dp\n"];
WriteString[file,"End If\n"];

WriteString[file, DoLoopEnd3];  WriteString[file, DoLoopEnd2];  WriteString[file, DoLoopEnd1];


(*
factor=CalculateColorFactorDecay[AntiField[getBlank[particle]],getBlank[Final1 /. diagrams[[1]]],getBlank[Propagator /. diagrams[[1]]]]*CalculateColorFactorDecay[getBlank[Propagator /. diagrams[[1]]],getBlank[Final3 /. diagrams[[1]]],getBlank[Final2 /. diagrams[[1]]]];
*)


factor=CalculateColorFactorDecay[AntiField[particle],Final1 /. diagrams[[1]],Propagator /. diagrams[[1]]]*CalculateColorFactorDecay[AntiField[Propagator /. diagrams[[1]]],Final3 /. diagrams[[1]],Final2 /. diagrams[[1]]];



If[getType[particle]===F,
(* WriteString[file,"  g = "<>SPhenoForm[factor] <>"*oo512pi3 / Abs("<>SPhenoMass[particle,iIN]<>")**3*g\n"]; *)
WriteString[file,"  g = oo512pi3 / Abs("<>SPhenoMass[particle,iIN]<>")**3*g\n"];,
(* factor=CalculateColorFactorDecay[AntiField[particle],Final1 /. diagrams[[1]],Propagator /. diagrams[[1]]]*CalculateColorFactorDecay[AntiField[Propagator /. diagrams[[1]]],Final3 /. diagrams[[1]],Final2 /. diagrams[[1]]]/DimR[SU3,SA`DynL[getBlank[particle],color] /.{0}\[Rule]{0,0}/. SA`DynL[a__]\[Rule]{0,0}]; *)
(* factor=CalculateColorFactorDecay[AntiField[particle],Final1 /. diagrams[[1]],Propagator /. diagrams[[1]]]*CalculateColorFactorDecay[AntiField[Propagator /. diagrams[[1]]],Final3 /. diagrams[[1]],Final2 /. diagrams[[1]]];
If[NumericQ[factor]===False,factor=1;]; 
WriteString[file,"  g = "<>SPhenoForm[factor] <>"*g\n"]; *)
WriteString[file,""];
];

WriteString[file, "End Subroutine "<>ToString[particle]<>"To"<>SPhenoShortName[finalparticles[[1]]]<>SPhenoShortName[finalparticles[[2]]]<>SPhenoShortName[finalparticles[[3]]]<> " \n \n \n"];

]; 




MakeCorrespondingStates[listCorr_,list1_,list2_]:=Block[{i,f1,f2,f3,f1T,f2T,f3T, listFinalStatesRep,FinalListProcess1,FinalListProcess2, tempList1,tempList2},
f1=listCorr[[1]]; f2=listCorr[[2]]; f3=listCorr[[3]];
If[f1===f2, 
f1T=One[f1]; 
f2T=Two[f2];
f3T = f3;,
If[f1===f3, 
f1T=One[f1]; 
f2T = f2; 
f3T = Two[f3];,
If[f2===f3, 
f1T=f1;f2T=One[f2]; f3T=Two[f3];];
];
];

listFinalStatesRep={f1T,f2T,f3T};

tempList1 = listCorr;
tempList2 = listFinalStatesRep;
FinalListProcess1={};

For[i=1,i<=3,
pos=Position[tempList1,list1[[i]],1][[1,1]]; 
FinalListProcess1 = Join[FinalListProcess1,{tempList2[[pos]]}];
tempList1=Delete[tempList1,pos];
tempList2=Delete[tempList2,pos];
i++;
];

tempList1 = listCorr;
tempList2 = listFinalStatesRep;
FinalListProcess2={};

For[i=1,i<=3,
pos=Position[tempList1,list2[[i]],1][[1,1]]; 
FinalListProcess2 = Join[FinalListProcess2,{tempList2[[pos]]}];
tempList1=Delete[tempList1,pos];
tempList2=Delete[tempList2,pos];
i++;
];

Return[{listFinalStatesRep, FinalListProcess1,FinalListProcess2}];

];


GenerateAllSquaredDiagrams[particle_,{f1_,n1_},{f2_,n2_},{f3_,n3_}, {process1_,nr1_}, {process2_,nr2_},{couplings_, nrC1_, nrC2_},file_]:=Block[{i},

listFinalStates={f1,f2,f3};
listFinalStatesPro1 = {Final1 /. process1, Final2 /. process1,Final3 /. process1};
listFinalStatesPro2 = {Final1 /. process2, Final2 /. process2,Final3 /. process2};


If[Length[Intersection[listFinalStates]]==3,
MakeOffDiagonalProcess[particle,{f1,n1},{f2,n2},{f3,n3},{Final1/.process1, Final2 /. process1, Final3 /. process1},{Final1/.process2, Final2 /. process2, Final3 /. process2}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,1,file];,

If[Length[Intersection[listFinalStates]]==2,
temp = MakeCorrespondingStates[listFinalStates,listFinalStatesPro1 ,listFinalStatesPro2];
listFinalStatesRep=temp[[1]];
FinalListProcess1=temp[[2]];
FinalListProcess2=temp[[3]];


MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]],FinalListProcess1[[2]],FinalListProcess1[[3]]},{FinalListProcess2[[1]],FinalListProcess2[[2]],FinalListProcess2[[3]]}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,1,file];

If[(Final1 /. process1) === (Final2 /. process1) || (Final1 /. process1) === (Final3 /. process1),
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}},{FinalListProcess2[[1]],FinalListProcess2[[2]],FinalListProcess2[[3]]}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,-1,file];

If[(Final1 /. process2) === (Final2 /. process2) || (Final1 /. process2) === (Final3 /. process2),
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess1[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}},{FinalListProcess2[[1]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,1,file];


MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] ,FinalListProcess1[[2]],FinalListProcess1[[3]]},{FinalListProcess2[[1]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,-1,file];
];,

If[(Final1 /. process2) === (Final2 /. process2) || (Final1 /. process2) === (Final3 /. process2),
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] ,FinalListProcess1[[2]],FinalListProcess1[[3]]},{FinalListProcess2[[1]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[2]]/. {One[x_]->Two[x], Two[x_]->One[x]},FinalListProcess2[[3]]/. {One[x_]->Two[x], Two[x_]->One[x]}}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,-1,file];
];
];,

listFinalStatesRep={One[f1],Two[f2],Three[f3]};
FinalListProcess1={One[Final1 /. process1],Two[Final2 /. process1],Three[Final3 /. process1]};
FinalListProcess2={One[Final1 /. process2],Two[Final2 /. process2],Three[Final3 /. process2]};


listSubCrossingSS={{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]},
				{One[x_]->Three[x],Two[x_]->Two[x], Three[x_]->One[x]}};

For[i=1,i<=3,
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] ,FinalListProcess1[[2]],FinalListProcess1[[3]]},{FinalListProcess2[[1]]/. listSubCrossingSS[[i]],FinalListProcess2[[2]]/. listSubCrossingSS[[i]],FinalListProcess2[[3]]/. listSubCrossingSS[[i]]}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,-1,file];
i++;];


listSubCrossingST1={{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]},
				{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]}};

listSubCrossingST2={{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]},
				{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->Two[x],Two[x_]->One[x], Three[x_]->Three[x]},
				{One[x_]->One[x],Two[x_]->Two[x], Three[x_]->Three[x]},
				{One[x_]->Three[x],Two[x_]->One[x], Three[x_]->Two[x]}};


For[i=1,i<=6,
MakeOffDiagonalProcess[particle,{listFinalStatesRep[[1]],n1},{listFinalStatesRep[[2]],n2},{listFinalStatesRep[[3]],n3},{FinalListProcess1[[1]] /. listSubCrossingST1[[i]],FinalListProcess1[[2]] /. listSubCrossingST1[[i]],FinalListProcess1[[3]] /. listSubCrossingST1[[i]]},{FinalListProcess2[[1]]/. listSubCrossingST2[[i]],FinalListProcess2[[2]]/. listSubCrossingST2[[i]],FinalListProcess2[[3]]/. listSubCrossingST2[[i]]}, {Propagator /. process1, nr1},{Propagator /. process2, nr2},{couplings,nrC1,nrC2},process1,process2,-1,file];
i++;];
];
];
];


MakeOffDiagonalProcess[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1a_,f2a_,f3a_},{f1b_,f2b_,f3b_},{prop1_,nProp1_},{prop2_,nProp2_},{couplingsAll_, NRC1_,NRC2_},process1_, process2_,relativeFactor_,file_]:=
Switch[getType[particle],
F,MakeOffDiagonalProcessFermion[particle, {f1,n1},{f2,n2},{f3,n3},{f1a,f2a,f3a},{f1b,f2b,f3b},{prop1,nProp1},{prop2,nProp2},{couplingsAll, NRC1,NRC2},process1, process2,relativeFactor,file];,
S,MakeOffDiagonalProcessScalar[particle, {f1,n1},{f2,n2},{f3,n3},{f1a,f2a,f3a},{f1b,f2b,f3b},{prop1,nProp1},{prop2,nProp2},{couplingsAll, NRC1,NRC2},process1, process2,(* relativeFactor *) 1,file]; (* CHECK ! *)
];



MakeOffDiagonalProcessFermion[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1a_,f2a_,f3a_},{f1b_,f2b_,f3b_},{prop1_,nProp1_},{prop2_,nProp2_},{couplingsAll_, NRC1_,NRC2_},process1_, process2_,relativeFactor_,file_]:=Block[{temp1,temp2, fac},

listCorrInd=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1a,f2a,f3a];
temp1a=MakeIndicesCoupling[{AntiField[particle],iIN},{prop1,nProp1},{Final1 /. process1,listCorrInd[[1]]},couplingsAll[[2*(NRC1-1)+1,2]]];
temp1b=MakeIndicesCoupling[{AntiField[prop1],nProp1},{Final2 /. process1,listCorrInd[[2]]},{Final3 /. process1,listCorrInd[[3]]},couplingsAll[[2*NRC1,2]]];


listCorrInd1=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1b,f2b,f3b];
temp2a=MakeIndicesCoupling[{particle,iIN},{AntiField[prop2],nProp2},{AntiField[Final1 /. process2],listCorrInd1[[1]]},couplingsAll[[2*(NRC2-1)+1,2]],True];
temp2b=MakeIndicesCoupling[{prop2,nProp2},{AntiField[Final2 /. process2],listCorrInd1[[2]]},{AntiField[Final3 /. process2],listCorrInd1[[3]]},couplingsAll[[2*NRC2,2]],True];


ind1a=temp1a[[1]];
check1a=temp1a[[2]];
ind2a=temp2a[[1]];
check2a=temp2a[[2]];
ind1b=temp1b[[1]];
check1b=temp1b[[2]];
ind2b=temp2b[[1]];
check2b=temp2b[[2]];

If[getType[prop1]===V,
LRconjugated1={"1","2","5","6"};,
LRconjugated1={"2","1","6","5"};
];

If[getType[prop2]===S, 
LRconjugated2={"3","4","7","8"};,
LRconjugated2={"4","3","8","7"};
];


If[f1a=== f1b,
WriteString[file, "mass(2) = "<> SPhenoMass[f1a/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[1]]]<>" \n"];
WriteString[file, "mass(3) = -"<> SPhenoMass[f2a/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[2]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f3a/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[3]]]<>" \n \n"];,
WriteString[file, "mass(2) = "<> SPhenoMass[f1b /. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd1[[1]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f1a/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[1]]]<>" \n"];
mass3 = DeleteCases[{f2a,f3a},f1b][[1]];
pos3=Position[{f1a,f2a,f3a},mass3][[1,1]];
WriteString[file, "mass(3) = -"<> SPhenoMass[mass3/. {One[x_]->x, Two[x_]->x, Three[x_]->x},listCorrInd[[pos3]]]<>" \n \n"];
];


If[check1a==True,
WriteString[file,"coup2("<>LRconjugated1[[1]] <>") = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>") \n"];
WriteString[file,"coup2("<>LRconjugated1[[2]] <>") = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,2]] ]<> ind1a <>") \n"];,
WriteString[file,"coup2(1) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>" \n"];
WriteString[file,"coup2(2) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,2]] ]<> ind1a <>" \n"];
];

If[check2a==False,
WriteString[file,"coup2("<>LRconjugated2[[1]] <>") = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>") \n"];
WriteString[file,"coup2("<>LRconjugated2[[2]] <>") = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>")  \n"];,
WriteString[file,"coup2(3) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
WriteString[file,"coup2(4) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>"  \n"];
];

If[check1b==True,
WriteString[file,"coup2("<>LRconjugated1[[3]] <>") = Conjg("<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>") \n"];
WriteString[file,"coup2("<>LRconjugated1[[4]] <>") = Conjg("<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>") \n"];,
WriteString[file,"coup2(5) = "<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>" \n"];
WriteString[file,"coup2(6) = "<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>" \n"];
];

If[check2b==False,  
WriteString[file,"coup2("<>LRconjugated2[[3]] <>") = Conjg("<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>") \n"];
WriteString[file,"coup2("<>LRconjugated2[[4]] <>") = Conjg("<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>") \n"];,
WriteString[file,"coup2(7) = "<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>" \n"];
WriteString[file,"coup2(8) = "<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>" \n"];
];




tempInt=getIntegralOffDiagonal[process1,process2, f1a, f1b];
name=ToString[SPhenoIntName[tempInt]];
name2=ToString[SPhenoIntNameN[tempInt]];

If[getType[prop1] ===S && getType[prop2]===S,
If[f1a===f1b,
WriteString[file, "Call IntegrateScalarS1S2(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resC, check) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC= "<>SPhenoForm[fac]<>"*resC ! color factor \n"];,
WriteString[file, "Call IntegrateScalarST(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resC, check) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=-2.*relativeFactor;
fac=-2.;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"TRIANGLE"];
WriteString[file,"resC= "<>SPhenoForm[fac]<>"*resC ! color factor \n"];
];,
If[getType[prop1] ===V && getType[prop2]===V,
If[f1b=== f1a,
WriteString[file, "Call IntegrateGaugeSS(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resR, check) \n"];
WriteString[file, "If (resR.ne.resR) resR = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resR \n"];,
WriteString[file, "Call IntegrateGaugeST(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resC, check) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=-2.;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC= "<>SPhenoForm[fac]<>"*resC ! color factor \n"];
];,
If[f1b=== f1a,
WriteString[file, "Call IntegrateGaugeSscalarS(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resC, check) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC= "<>SPhenoForm[fac]<>"*resC ! color factor \n"];,
If[AntiField[particle]=!=particle,
If[f2b===f2,
fac=-2.;
WriteString[file, "coupT = coup2(7) \n"];
WriteString[file, "coup2(7) = coup2(8) \n"];
WriteString[file, "coup2(8) = coupT \n"];,
fac =2;
WriteString[file, "coupT = coup2(2) \n"];
WriteString[file, "coup2(2) = coup2(1) \n"];
WriteString[file, "coup2(1) = coupT \n"];
];,
If[f2b===f2,
fac=2.;
WriteString[file, "coupT = coup2(5) \n"];
WriteString[file, "coup2(5) = coup2(6) \n"];
WriteString[file, "coup2(6) = coupT \n"];,
fac =-2;
];
];
WriteString[file, "Call IntegrateGaugeSscalarT(Boson4, mass, coup2, deltaM, epsI,"<>name<>","<>name2<>", resC, check) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
(* fac=-2.*relativeFactor; *)

WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC= "<>SPhenoForm[fac]<>"*resC ! color factor \n"];
];
];
];

MakeSymmFactorPart[{f1 /. {One[x_]->x, Two[x_]->x, Three[x_]->x},n1},{f2/. {One[x_]->x, Two[x_]->x, Three[x_]->x},n2},{f3/. {One[x_]->x, Two[x_]->x, Three[x_]->x},n3},"resC",file];

WriteString[file, "resS = resS + resC \n"];

];






MakeOffDiagonalProcessScalar[particle_, {f1_,n1_},{f2_,n2_},{f3_,n3_},{f1a_,f2a_,f3a_},{f1b_,f2b_,f3b_},{prop1_,nProp1_},{prop2_,nProp2_},{couplingsAll_, NRC1_,NRC2_},process1_, process2_,relativeFactor_,file_]:=Block[{temp1,temp2, fac,cfac},

listCorrInd=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1a,f2a,f3a];
temp1a=MakeIndicesCoupling[{AntiField[particle],iIN},{prop1,nProp1},{Final1 /. process1,listCorrInd[[1]]},couplingsAll[[2*(NRC1-1)+1,2]]];
temp1b=MakeIndicesCoupling[{AntiField[prop1],nProp1},{Final2 /. process1,listCorrInd[[2]]},{Final3 /. process1,listCorrInd[[3]]},couplingsAll[[2*NRC1,2]]];


listCorrInd1=getCorrespondingIndices[{f1,n1}, {f2,n2},{f3,n3},f1b,f2b,f3b];

temp2a=MakeIndicesCoupling[{particle,iIN},{AntiField[prop2],nProp2},{AntiField[Final1 /. process2],listCorrInd1[[1]]},couplingsAll[[2*(NRC2-1)+1,2]],True];

temp2b=MakeIndicesCoupling[{prop2,nProp2},{AntiField[Final2 /. process2],listCorrInd1[[2]]},{AntiField[Final3 /. process2],listCorrInd1[[3]]},couplingsAll[[2*NRC2,2]],True];


ind1a=temp1a[[1]];
check1a=temp1a[[2]];
ind2a=temp2a[[1]];
check2a=temp2a[[2]];
ind1b=temp1b[[1]];
check1b=temp1b[[2]];
ind2b=temp2b[[1]];
check2b=temp2b[[2]];

If[getType[prop1]===V,
LRconjugated1={"1","2","5","6"};,
LRconjugated1={"2","1","6","5"};
];

If[getType[prop2]===V,
LRconjugated2={"3","4","7","8"};,
LRconjugated2={"4","3","8","7"};
];


(*
If[f1a=== f1b,
WriteString[file, "mass(2) = "<> SPhenoMass[f1a/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[1]]]<>" \n"];
WriteString[file, "mass(3) = -"<> SPhenoMass[f2a/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[2]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f3a/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[3]]]<>" \n \n"];,
WriteString[file, "mass(2) = "<> SPhenoMass[f1b /. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd1[[1]]]<>" \n"];
WriteString[file, "mass(4) = "<> SPhenoMass[f1a/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[1]]]<>" \n"];
mass3 = DeleteCases[{f2a,f3a},f1b][[1]];
pos3=Position[{f1a,f2a,f3a},mass3][[1,1]];
WriteString[file, "mass(3) = -"<> SPhenoMass[mass3/. {One[x_]\[Rule]x, Two[x_]\[Rule]x, Three[x_]\[Rule]x},listCorrInd[[pos3]]]<>" \n \n"];
];
*)


Switch[Sort[{getType[prop1],getType[prop2]}],
{V,V},
If[prop1=!=prop2,
WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2]] <>"  \n"];


If[check1a==True,
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]] ]<> ind1a <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>" \n"];
];

If[check1b==False,
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[2*(NRC1),1,1]]] <> ind1b <>") \n"];
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[2*(NRC1),1,2]]] <> ind1b <>")  \n"];,
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[2*(NRC1),1,1]]] <> ind1b <>" \n"];
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[2*(NRC1),1,2]]] <> ind1b <>"  \n"];
];

If[check2a==True,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>") \n"];,
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
];

If[check2b==False,
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>") \n"];
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>") \n"];,
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>" \n"];
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>" \n"];
];

(*
If[check2a\[Equal]False,
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>") \n"];
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>")  \n"];,
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>"  \n"];
];

If[check2a\[Equal]False,
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>") \n"];
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>")  \n"];,
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>"  \n"];
];

If[check1b\[Equal]True,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>") \n"];,
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>" \n"];
];

If[check2b\[Equal]False,
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>") \n"];
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>") \n"];,
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>" \n"];
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>" \n"];
];
*)

WriteString[file, "Call IntegrateVaVb(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];
];,

{F,F},

WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2]] <>"  \n"];


If[check1a==True,
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>") \n"];
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,2]] ]<> ind1a <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>" \n"];
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,2]] ]<> ind1a <>" \n"];
];

If[check1b==True,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>") \n"];
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>") \n"];,
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>" \n"];
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>" \n"];
];

If[check2a==True,
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>") \n"];
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>")  \n"];,
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,2]]] <> ind2a <>"  \n"];
];

If[check2b==True,
WriteString[file,"coup(7) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>") \n"];
WriteString[file,"coup(8) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>") \n"];,
WriteString[file,"coup(7) = "<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>" \n"];
WriteString[file,"coup(8) = "<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>" \n"];
];

If[f1a===f1b,
WriteString[file, "Call IntegrateFFLM(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];,
WriteString[file, "Call IntegrateChiChiInterference(mass,m_in,r_outcrossed,coup,smin2,smax2,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
fac=2.*relativeFactor;
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOXCROSS"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];
];,



{F,S},
Switch[getType[prop1],
F,
	WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1] ]<>"  \n"];
	WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2]] <>"  \n"];
	checkFa=check1a;checkFb=check1b;
	indFa = ind1a;indFb = ind1b;
	NRFa =2*( NRC1-1)+1; NRFb =2*NRC1;

	checkSa=check2a;checkSb=check2b;
	indSa = ind2a;indSb = ind2b;
	NRSa =2*( NRC2-1)+1; NRSb =2*NRC2;
	cfac=CallGetChargeFactorDecay[AntiField[particle],process2,process1,"TRIANGLE"];,

S,

	WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
	WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop2,nProp2] ]<>"  \n"];

	checkFa=check2a;checkFb=check2b;
	indFa = ind2a;indFb = ind2b;
	NRFa =2*( NRC2-1)+1; NRFb =2*NRC2;

	checkSa=check1a;checkSb=check1b;
	indSa = ind1a;indSb = ind1b;
	NRSa =2*( NRC1-1)+1; NRSb =2*NRC1;
	cfac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"TRIANGLE"];
];

If[checkFa==True,
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[NRFa,1,1]]] <> indFa <>") \n"];
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[NRFa,1,2]] ]<> indFa <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[NRFa,1,1]]] <> indFa <>" \n"];
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[NRFa,1,2]] ]<> indFa <>" \n"];
];

If[checkFb==False,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[NRFb,1,1]]] <> indFb <>") \n"];
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[NRFb,1,2]]] <> indFb <>")  \n"];,
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[NRFb,1,1]]] <> indFb <>" \n"];
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[NRFb,1,2]]] <> indFb <>"  \n"];
];

If[checkSa==True,
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[NRSa,1,1]] ]<> indSa <>") \n"];,
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[NRSa,1,1]]] <> indSa <>" \n"];
];

If[checkSb==False,
WriteString[file,"coup(7) = Conjg("<> ToString[couplingsAll[[NRSb,1,1]]] <> indSb <>") \n"];
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[NRSb,1,2]]] <> indSb <>")  \n"];,
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[NRSb,1,1]]] <> indSb <>" \n"];
WriteString[file,"coup(7) = "<> ToString[couplingsAll[[NRSb,1,2]]] <> indSb <>"  \n"];
];

WriteString[file,"Call IntegrateSF(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
WriteString[file,"resC = "<>ToString[FortranForm[cfac]]<>"*resC  ! Color factor \n"];,


{F,V},
Switch[getType[prop1],
F,

	WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1] ]<>"  \n"];
	WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2]] <>"  \n"];

	checkFa=check1a;checkFb=check1b;
	indFa = ind1a;indFb = ind1b;
	NRFa =2*( NRC1-1)+1; NRFb =2*NRC1;

	checkVa=check2a;checkVb=check2b;
	indVa = ind2a;indVb = ind2b;
	NRVa =2*( NRC2-1)+1; NRVb =2*NRC2;
	cfac=CallGetChargeFactorDecay[AntiField[particle],process2,process1,"TRIANGLE"];,

V,
	WriteString[file,"mass(2) = "<> ToString[SPhenoMassSq[prop1,nProp1]] <>"  \n"];
	WriteString[file,"mass(1) = "<> ToString[SPhenoMassSq[prop2,nProp2] ]<>"  \n"];
	checkFa=check2a;checkFb=check2b;
	indFa = ind2a;indFb = ind2b;
	NRFa =2*( NRC2-1)+1; NRFb =2*NRC2;

	checkVa=check1a;checkVb=check1b;
	indVa = ind1a;indVb = ind1b;
	NRVa =2*( NRC1-1)+1; NRVb=2*NRC1;
	cfac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"TRIANGLE"];
];

If[checkFa==True,
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[NRFa,1,1]]] <> indFa <>") \n"];
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[NRFa,1,2]] ]<> indFa <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[NRFa,1,1]]] <> indFa <>" \n"];
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[NRFa,1,2]] ]<> indFa <>" \n"];
];

If[checkFb==False,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[NRFb,1,1]]] <> indFb <>") \n"];
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[NRFb,1,2]]] <> indFb <>")  \n"];,
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[NRFb,1,1]]] <> indFb <>" \n"];
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[NRFb,1,2]]] <> indFb <>"  \n"];
];

If[checkVa==True,
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[NRVa,1,1]] ]<> indVa <>") \n"];,
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[NRVa,1,1]]] <> indVa <>" \n"];
];

If[checkVb==False,
WriteString[file,"coup(7) = Conjg("<> ToString[couplingsAll[[NRVb,1,1]]] <> indVb <>") \n"];
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[NRVb,1,2]]] <> indVb <>")  \n"];,
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[NRVb,1,1]]] <> indVb <>" \n"];
WriteString[file,"coup(7) = "<> ToString[couplingsAll[[NRVb,1,2]]] <> indVb <>"  \n"];
];


WriteString[file,"Call IntegrateVF(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file,"resC = "<>ToString[FortranForm[cfac]]<>"*resC  ! Color factor \n"];

WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];,

{S,S},
WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2] ]<>"  \n"];

If[check1a==True,
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]] ]<> ind1a <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[2*(NRC1-1)+1,1,1]]] <> ind1a <>" \n"];
];
If[check1b==False,
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>") \n"];
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>")  \n"];,
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[2*NRC1,1,1]]] <> ind1b <>" \n"];
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[2*NRC1,1,2]]] <> ind1b <>"  \n"];
];

If[check2a==True,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]] ]<> ind2a <>") \n"];,
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[2*(NRC2-1)+1,1,1]]] <> ind2a <>" \n"];
];

If[check1b==False,
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>") \n"];
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>")  \n"];,
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[2*NRC2,1,1]]] <> ind2b <>" \n"];
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[2*NRC2,1,2]]] <> ind2b <>"  \n"];
];


WriteString[file,"Call IntegrateSaSb(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
WriteString[file,"resC = 2._dp*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];,

{S,V},
Switch[getType[prop1],
S,
	WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
	WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop2,nProp2] ]<>"  \n"];

	checkSa=check1a;checkSb=check1b;
	indSa = ind1a;indSb = ind1b;
	NRSa =2*( NRC1-1)+1; NRSb =2*NRC1;

	checkVa=check2a;checkVb=check2b;
	indVa = ind2a;indVb = ind2b;
	NRVa =2*( NRC2-1)+1; NRVb =2*NRC2;,

V,
	
	WriteString[file,"mass(2) = "<> ToString[SPhenoMass[prop1,nProp1]] <>"  \n"];
	WriteString[file,"mass(1) = "<> ToString[SPhenoMass[prop2,nProp2] ]<>"  \n"];

	checkSa=check2a;checkSb=check2b;
	indSa = ind2a;indSb = ind2b;
	NRSa =2*( NRC2-1)+1; NRSb =2*NRC2;

	checkVa=check1a;checkVb=check1b;
	indVa = ind1a;indVb = ind1b;
	NRVa =2*( NRC1-1)+1; NRVb =2*NRC1;
];

If[checkVa==True,
WriteString[file,"coup(1) = Conjg("<> ToString[couplingsAll[[NRVa,1,1]] ]<> indVa <>") \n"];,
WriteString[file,"coup(1) = "<> ToString[couplingsAll[[NRVa,1,1]]] <> indVa <>" \n"];
];

If[checkVb==False,
WriteString[file,"coup(2) = Conjg("<> ToString[couplingsAll[[NRVb,1,1]]] <> indVb <>") \n"];
WriteString[file,"coup(3) = Conjg("<> ToString[couplingsAll[[NRVb,1,2]]] <> indVb <>")  \n"];,
WriteString[file,"coup(3) = "<> ToString[couplingsAll[[NRVb,1,1]]] <> indVb <>" \n"];
WriteString[file,"coup(2) = "<> ToString[couplingsAll[[NRVb,1,2]]] <> indVb <>"  \n"];
];

If[checkSa==True,
WriteString[file,"coup(4) = Conjg("<> ToString[couplingsAll[[NRSa,1,1]] ]<> indSa <>") \n"];,
WriteString[file,"coup(4) = "<> ToString[couplingsAll[[NRSa,1,1]]] <> indSa <>" \n"];
];

If[checkSb==False,
WriteString[file,"coup(5) = Conjg("<> ToString[couplingsAll[[NRSb,1,1]]] <> indSb <>") \n"];
WriteString[file,"coup(6) = Conjg("<> ToString[couplingsAll[[NRSb,1,2]]] <> indSb <>")  \n"];,
WriteString[file,"coup(6) = "<> ToString[couplingsAll[[NRSb,1,1]]] <> indSb <>" \n"];
WriteString[file,"coup(5) = "<> ToString[couplingsAll[[NRSb,1,2]]] <> indSb <>"  \n"];
];

WriteString[file,"If(Abs(mass(1)-mass(2)).lt.0.1) Then \n"];
WriteString[file,"Call IntegrateVSGoldstone(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
WriteString[file,"Else \n"];
WriteString[file,"Call IntegrateVS(mass,m_in,r_out,coup,smin,smax,epsI,resC) \n"];
WriteString[file, "If (resC.ne.resC) resC = 0._dp\n"];
WriteString[file,"End If \n"];
WriteString[file,"resC = 2._dp*resC \n"];
fac=CallGetChargeFactorDecay[AntiField[particle],process1,process2,"BOX"];
WriteString[file,"resC = "<>ToString[FortranForm[fac]]<>"*resC  ! Color factor \n"];,


{V,V},
WriteString[file, "! Two different gauge bosons are not supported yet \n"];


];





tempInt=getIntegralOffDiagonal[process1,process2, f1a, f1b];
name=ToString[SPhenoIntName[tempInt]];
name2=ToString[SPhenoIntNameN[tempInt]];


MakeSymmFactorPart[{f1 /. {One[x_]->x, Two[x_]->x, Three[x_]->x},n1},{f2/. {One[x_]->x, Two[x_]->x, Three[x_]->x},n2},{f3/. {One[x_]->x, Two[x_]->x, Three[x_]->x},n3},"resC",file];

WriteString[file, "resS = resS + resC \n"];

];


NumberOfDiagrams[list_]:=Block[{i,temp},
temp=0;
For[i=1,i<=Length[list],
temp +=getGenSPheno[Propagator/. list[[i]]];
i++;];

Return[temp^2];
];


MakeSymmFactorPart[{p1_,n1_},{p2_,n2_},{p3_,n3_},string_,file_]:=Block[{},
If[p1===p2===p3,
WriteString[file,"If (("<>ToString[n1]<>".Eq."<>ToString[n2]<>").And.("<>ToString[n2]<>".Eq."<>ToString[n3]<>")) Then \n"];
WriteString[file,string <>"="<>string<>"/6._dp\n"];
WriteString[file,"Else If (("<>ToString[n1]<>".Eq."<>ToString[n2]<>").Or.("<>ToString[n2]<>".Eq."<>ToString[n3]<>").Or.("<>ToString[n1]<>".Eq."<>ToString[n3]<>")) Then\n"];
	  WriteString[file,string<>"="<> string <>"/2._dp \n"];
WriteString[file,"End If\n"];,
If[p1===p2,
WriteString[file,"If ("<>ToString[n1]<>".Eq."<>ToString[n2]<>") Then \n"];
WriteString[file,string<>"="<> string <>"/2._dp \n"];
WriteString[file,"End If\n"];,
If[p1===p3,
WriteString[file,"If ("<>ToString[n1]<>".Eq."<>ToString[n3]<>") Then \n"];
WriteString[file,string<>"="<> string <>"/2._dp \n"];
WriteString[file,"End If\n"];,
If[p2===p3,
WriteString[file,"If ("<>ToString[n3]<>".Eq."<>ToString[n2]<>") Then \n"];
WriteString[file,string<>"="<> string <>"/2._dp \n"];
WriteString[file,"End If\n"];
];
];
];
];


];
