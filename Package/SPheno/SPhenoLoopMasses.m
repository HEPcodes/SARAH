(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSPhenoLoopMasses[Eigenstates_]:=Block[{i,k,pos,list},
(*
Print["--------------------------------------"];
Print["Writing SPheno Loop Masses "];
Print["--------------------------------------"];
*)
Print[StyleForm["Write loop masses","Section",FontSize->12]];

(* $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}]; *)
(* CreateDirectory[$sarahCurrentSPhenoDir]; *)
sphenoLoop=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"LoopMasses_"<>ModelName<>".f90"]];

subSolution = {};
InitSPhenoLoopMasses[Eigenstates];

WriteHeaderLoopMasses;
WriteCalcLoopMasses;

Print["  Writing one-loop tadpoles: ",Dynamic[DynamicTad1LoopNr],"/",Length[loopContributionTad],"(",Dynamic[DynamicTad1LoopName],")"];
For[i=1,i<=Length[loopContributionTad],
DynamicTad1LoopNr=i;
DynamicTad1LoopName=listVEVseparated[[i]];
If[loopContributionTad[[i]]=!={} && Intersection[listVEVseparated[[i]]]=!={0},
WriteLoopTadpole[Intersection[listVEVseparated[[i]]],ScalarsForTadpoles[[i]],NeededMassesLoopTad[[i]], NeededCouplingsLoopTad[[i]], loopContributionTad[[i]]];
];
i++;];
DynamicTad1LoopName="All Done";


Print["  Writing one-loop masses: ",Dynamic[DynamicMass1LoopNr],"/",Length[SA`LoopMassesParticle]+Length[listNotMixedMasses],"(",Dynamic[DynamicMass1LoopName],")"];
For[k=1,k<=Length[SA`LoopMassesParticle], 
DynamicMass1LoopNr=i;
DynamicMass1LoopName=SA`LoopMassesParticle[[k]];
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
Switch[ListTree[[i,4]],
ScalarMass,
AddTadpoles=False;
WriteLoopMassScalar[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]], AddTadpoles,True];
WriteScalarProp[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]]];,
FermionMassSymm,
WriteLoopMassFermionSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2]]],True];
WriteFermionProp[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]]];,
FermionMassNonSymm,
WriteLoopMassFermionNonSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],ListTree[[i,5]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]], ListTree[[i,3]],ToString[ListTree[[i,1]]],ToString[ListTree[[i,2,1]]],ToString[ListTree[[i,2,2]]],True];
WriteFermionPropNonSymm[ToString[ListMassES[[i,1]]],ListMassES[[i,1]],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]],loopContribution[[k]],False];
];
k++;];


 For[i=1,i<=Length[listNotMixedMasses],
DynamicMass1LoopNr=i+Length[SA`LoopMassesParticle];
DynamicMass1LoopName=listNotMixedMasses[[i,1]];

If[listNotMixedMasses[[i,4]]=!=0,
nameCurrent=ToString[listNotMixedMasses[[i,1]]];
nameMass=listNotMixedMasses[[i,2]];
particleCurrent=listNotMixedMasses[[i,1]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";

If[Length[Dimensions[listNotMixedMasses[[i,5]]]]===2,
Switch[listNotMixedMasses[[i,6]],
ScalarMass,
WriteLoopMassScalar[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False,False];
WriteScalarProp[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]];,

FermionMassSymm,
WriteLoopMassFermionSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,False];
WriteFermionProp[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]];,

FermionMassNonSymm,
WriteLoopMassFermionNonSymm[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,nameMass,mixing1,mixing2,False];
 WriteFermionPropNonSymm[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],False];
];,

Switch[listNotMixedMasses[[i,6]],
ScalarMass,
WriteLoopMassSingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False];
WriteScalarPropSingle[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]];,

FermionMassSymm,
WriteLoopMassSingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False];
WriteFermionPropSingle[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]];,

FermionMassNonSymm,
WriteLoopMassSingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False];
 WriteFermionPropNonSymmSingle[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]];,

VectorMass,
WriteLoopMassSingle[nameCurrent,particleCurrent,parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]],treeMassCurrent,False];
WriteVectorPropSingle[nameCurrent,particleCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]],Unmixed1Loop[[i]]]; 
];


];
];
i++;]; 

SMFermion={Electron,BottomQuark,TopQuark};
WithPhotonGluonQ[x_]:=If[FreeQ[x,VectorP]==True && FreeQ[x,VectorG]==True, Return[False];,Return[True];];

If[SupersymmetricModel=!=False,
For[i=1,i<=Length[SMFermion],
If[FreeQ[SA`LoopMassesParticle,SMFermion[[i]]]==False,
pos=Position[ListMassES,SMFermion[[i]]][[1,1]];
pos2=Position[SA`LoopMassesParticle,SMFermion[[i]]][[1,1]];
 WriteFermionPropNonSymm[ToString[ListMassES[[pos,1]]]<>"MZ",ListMassES[[pos,1]],NeededMassesLoop[[pos2]],NeededCouplingsLoop[[pos2]],DeleteCases[loopContribution[[pos2]],x_?WithPhotonGluonQ],True];
];
i++;];
];

If[SA`AddOneLoopDecay === True,
(*
For[i=1,i\[LessEqual]Length[CorrectionListVectorScalar],
WriteVectorScalarMixedSE[ToString[CorrectionListVectorScalar[[i,1,1]]]<>ToString[CorrectionListVectorScalar[[i,1,2]]],CorrectionListVectorScalar[[i,1,1]],CorrectionListVectorScalar[[i,1,2]],NeededMassesVS[[i]],NeededCouplingsVS[[i]],CorrectionListVectorScalar[[i]]];
i++;];
*)
list=CorrectionListVectorVector[Eigenstates];
For[i=1,i<=Length[list],
WriteVectorScalarMixedSE[ToString[list[[i,1,1]]]<>ToString[list[[i,1,2]]],list[[i,1,1]],list[[i,1,2]],NeededMassesVV[[i]],NeededCouplingsVV[[i]],list[[i,2]]];
i++;];
];
DynamicMass1LoopName="All Done";

WriteRXiLoopFunctions;

WriteString[sphenoLoop,"End Module LoopMasses_"<>ModelName<>" \n"];

Close[sphenoLoop];


];


MakeListsLoopContributions[loopContribution_,couplings_]:=Block[{i,NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop},

NeededMassesLoop=Table[{},{Length[loopContribution]}];
NeededCouplingsLoop=Table[{},{Length[loopContribution]}];
CorrectionTypeLoop=Table[{},{Length[loopContribution]}];

For[i=1,i<=Length[loopContribution],
For[j=1,j<=Length[loopContribution[[i]]],
NewMass1=SPhenoMass[loopContribution[[i,j,1]]];
NewMass1Sq=SPhenoMassSq[loopContribution[[i,j,1]]];
NewMass2=SPhenoMass[loopContribution[[i,j,2]]];
NewMass2Sq=SPhenoMassSq[loopContribution[[i,j,2]]];

If[FreeQ[NeededMassesLoop[[i]],NewMass1] && FreeQ[massless,getBlank[loopContribution[[i,j,1]]]] &&  getType[loopContribution[[i,j,1]]]=!=G,
NeededMassesLoop[[i]]=Join[NeededMassesLoop[[i]],{NewMass1,NewMass1Sq}];
];
If[FreeQ[NeededMassesLoop[[i]],NewMass2] && FreeQ[massless,getBlank[loopContribution[[i,j,2]]]] &&  getType[loopContribution[[i,j,1]]]=!=G,
NeededMassesLoop[[i]]=Join[NeededMassesLoop[[i]],{NewMass2,NewMass2Sq}];
];

NeededCouplingsLoop[[i]]=Join[NeededCouplingsLoop[[i]],getSPhenoCoupling[loopContribution[[i,j,3]],couplings][[1]]];
If[loopContribution[[i,j,4]]===GGS && C@@(AntiField/@loopContribution[[i,j,3]])=!=C@@loopContribution[[i,j,3]],
NeededCouplingsLoop[[i]]=Join[NeededCouplingsLoop[[i]],getSPhenoCoupling[AntiField/@loopContribution[[i,j,3]],couplings][[1]]];
];
j++;];
i++;];

For[i=1,i<=Length[NeededCouplingsLoop],
NeededCouplingsLoop[[i]]=Flatten[NeededCouplingsLoop[[i]]];
i++;];

Return[{NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop}];

];

MakeListsLoopContributions2[loopContribution_,couplings_]:=Block[{i,NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop},

NeededMassesLoop=Table[{},{Length[loopContribution]}];
NeededCouplingsLoop=Table[{},{Length[loopContribution]}];
CorrectionTypeLoop=Table[{},{Length[loopContribution]}];

For[i=1,i<=Length[loopContribution],
For[j=1,j<=Length[loopContribution[[i,2]]],
NewMass1=SPhenoMass[loopContribution[[i,2,j,1]]];
NewMass1Sq=SPhenoMassSq[loopContribution[[i,2,j,1]]];
NewMass2=SPhenoMass[loopContribution[[i,2,j,2]]];
NewMass2Sq=SPhenoMassSq[loopContribution[[i,2,j,2]]];

If[FreeQ[NeededMassesLoop[[i]],NewMass1] && FreeQ[massless,getBlank[loopContribution[[i,2,j,1]]]] &&  getType[loopContribution[[i,2,j,1]]]=!=G,
NeededMassesLoop[[i]]=Join[NeededMassesLoop[[i]],{NewMass1,NewMass1Sq}];
];
If[FreeQ[NeededMassesLoop[[i]],NewMass2] && FreeQ[massless,getBlank[loopContribution[[i,2,j,2]]]] &&  getType[loopContribution[[i,2,j,1]]]=!=G,
NeededMassesLoop[[i]]=Join[NeededMassesLoop[[i]],{NewMass2,NewMass2Sq}];
];

NeededCouplingsLoop[[i]]=Join[NeededCouplingsLoop[[i]],getSPhenoCoupling[loopContribution[[i,2,j,3]],couplings][[1]]];
NeededCouplingsLoop[[i]]=Join[NeededCouplingsLoop[[i]],getSPhenoCoupling[loopContribution[[i,2,j,4]],couplings][[1]]];


j++;];
i++;];

For[i=1,i<=Length[NeededCouplingsLoop],
NeededCouplingsLoop[[i]]=Flatten[NeededCouplingsLoop[[i]]];
i++;];

Return[{NeededMassesLoop,NeededCouplingsLoop,CorrectionTypeLoop}];

];


InitSPhenoLoopMasses[Eigenstates_]:=Block[{i,k,i1,i2},
Print["  Getting needed information"];

(*
mixTree=DEFINITION[Eigenstates][MatterSector];
massesTree=MassMatricesFull[Eigenstates];
*)

massesTree={};
mixTree={};

For[k=1,k<=Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[k]]][MatterSector]]===List,
mixTree=Join[mixTree,DEFINITION[NameOfStates[[k]]][MatterSector]];
massesTree=Join[massesTree,MassMatricesFullND[NameOfStates[[k]]]];
];
k++;];


parDef=ParticleDefinitions[Eigenstates];
paraDef=ParameterDefinitions;
loopContribution=LoopCorrectionMassMatrices[Eigenstates];
loopContributionTad=LoopCorrectionTadpoles[Eigenstates];
Unmixed1Loop=LoopCorrectionUnmixed[Eigenstates];

temp=MakeListsLoopContributions[loopContribution,SPhenoCouplingsLoop];

NeededMassesLoop=temp[[1]];
NeededCouplingsLoop=temp[[2]];
CorrectionTypeLoop=temp[[3]]; 

temp=MakeListsLoopContributions[loopContributionTad,SPhenoCouplingsLoop];

NeededMassesLoopTad=temp[[1]];
NeededCouplingsLoopTad=temp[[2]];
CorrectionTypeLoopTad=temp[[3]];

temp=MakeListsLoopContributions[Unmixed1Loop,SPhenoCouplingsLoop];

NeededMassesUnmixed=temp[[1]];
NeededCouplingsUnmixed=temp[[2]];
CorrectionTypeUnmixed=temp[[3]];

(*
temp=MakeListsLoopContributions2[CorrectionListVS,SPhenoCouplingsAllreallyAll];

NeededMassesVS=temp[[1]];
NeededCouplingsVS=temp[[2]];
CorrectionTypeVS=temp[[3]];
*)

If[SA`AddOneLoopDecay === True,
temp=MakeListsLoopContributions2[CorrectionListVectorVector[Eigenstates],SPhenoCouplingsAllreallyAll];

NeededMassesVV=temp[[1]];
NeededCouplingsVV=temp[[2]];
CorrectionTypeVV=temp[[3]];
];

];


WriteCalcLoopMasses:=Block[{i,j,count1,count2,ii1,ii2,solHighScale,higgsdim,higgsdimstr},

posZ =Position[listNotMixedMasses,VectorZ][[1,1]];
massesZ= Extract[NeededMassesUnmixed,posZ];
couplingsZ= Extract[NeededCouplingsUnmixed,posZ];


Print["  Writing routine for all loop corrections"];

MakeSubroutineTitle["OneLoopMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},sphenoLoop];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[listAllParameters,",Intent(inout)",sphenoLoop];
MakeVariableList[NewMassParameters,",Intent(inout)",sphenoLoop];
MakeVariableList[listVEVs,",Intent(inout)",sphenoLoop];
If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoLoop];
];


MakeVariableList[HiggsSoftBreakingMassesTemp,"",sphenoLoop];
MakeVariableList[Union[Flatten[{NeededCouplingsUnmixed,NeededCouplingsLoop}]],"",sphenoLoop];
WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1, j2, j3, j4, il, i_count, ierr \n"];
If[SupersymmetricModel=!=False,
WriteString[sphenoLoop, "Integer :: i2L, iFin \n"];
WriteString[sphenoLoop, "Logical :: Convergence2L \n"];
WriteString[sphenoLoop, "Real(dp) :: Pi2S_EffPot_save("<>ToString[getGen[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>"), diff("<>ToString[getGen[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>")\n"];
];

If[SPhenoOnlyForHM===True,
WriteString[sphenoLoop, "Complex(dp) :: Tad1Loop("<>ToString[Length[SA`VEVsHOMreal]+Length[SA`VEVsHOMcomplex]]<>"), dmz2  \n"];,
WriteString[sphenoLoop, "Complex(dp) :: Tad1Loop("<>ToString[SA`NrTadpoleEquations]<>"), dmz2  \n"];
];
WriteString[sphenoLoop, "Real(dp) :: comp("<>ToString[Length[SubSolutionsTadpolesLoop]]<>"), tanbQ, vev2\n"];

If[UseHiggs2LoopMSSM==True,
higgsdim=Min[4,getGenSPheno[hh]];(*at least two higgses,but maximum 4 allowed here!*)
higgsdimstr=ToString[higgsdim];
WriteString[sphenoLoop,"Real(dp) :: tadpoles_MSSM(2), vevs_MSSM(2), Q2, Pi2S_MSSM(2,2), sinb2, cosb2, sinbcosb \n"];
WriteString[sphenoLoop,"Real(dp) :: tadpoles_asat(4), vevs_asat(4), Pi2S_asat(4,4),PiP2S_asat(4,4), Mglu_asat(2),mo2_asat, MAps \n"];
WriteString[sphenoLoop,"complex(dp) :: MDO_asat,BO_asat,MO_asat,lam_asat,LT_asat, ZG_asat(2,2), mu_asat\n"];
];

If[SPhenoOnlyForHM=!=True,
solHighScale = {};
SA`ListParametersFromTadpoles1L = {};
If[SeveralIndependentTadpoleSolutions=!=True,
SA`ListParametersFromTadpoles1L=Table[SubSolutionsTadpolesLoop[[i,1]],{i,1,Length[SubSolutionsTadpolesLoop]}];,
SA`ListParametersFromTadpoles1L=Table[SubSolutionsTadpolesLoop[[1,i,1]],{i,1,Length[SubSolutionsTadpolesLoop[[1]]]}];
];
If[NumericalSolutionTadpoleEquations===True,
SA`ListParametersFromTadpoles1L =ParametersToSolveTadpoles;
];

SA`ListParametersFromTadpoles1L = Intersection[SA`ListParametersFromTadpoles1L/. A_[b_Integer]->A /. A_[b_Integer,c_Integer]->A /. A_[b_Integer,c_Integer,d_Integer]->A/.re[a_]->a /. im[a_]->a];

For[i=1,i<=Length[SA`ListParametersFromTadpoles1L],
dim="";
If[getDimParameters[SA`ListParametersFromTadpoles1L[[i]]]=!={} && getDimParameters[SA`ListParametersFromTadpoles1L[[i]]]=!={1},
dim=StringReplace[ToString[getDimParameters[SA`ListParametersFromTadpoles1L[[i]]]],{"{"->"(","}"->")"}];
];
If[FreeQ[realVar,SA`ListParametersFromTadpoles1L[[i]]],
NoWriteString[sphenoLoop, "Complex(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]]<>"1L"<>dim<>","<>SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]]<>"2L"<>dim<>" \n"];,
NoWriteString[sphenoLoop, "Real(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]]<>"1L"<>dim<>","<>SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]]<>"2L"<>dim<>" \n"];
]; 

solHighScale = Join[solHighScale,{SA`ListParametersFromTadpoles1L[[i]]}];
i++;];

SA`ListParametersFromTadpoles=Select[Intersection[Flatten[Join[{ParametersToSolveTadpoles},{ParametersToSolveTadpolesLowScaleInput}]]/. A_[b_Integer]->A /. A_[b_Integer,c_Integer]->A /. A_[b_Integer,c_Integer,d_Integer]->A/.re[a_]->a /. im[a_]->a],(FreeQ[parameters,#]==False)&];


SA`ListParametersFromTadpoles1Llow = {};
If[SeveralIndependentTadpoleSolutionsLowScale=!=True,
SA`ListParametersFromTadpoles1Llow=Table[SubSolutionsTadpolesLoopLowScale[[i,1]],{i,1,Length[SubSolutionsTadpolesLoopLowScale]}];,
SA`ListParametersFromTadpoles1Llow=Table[SubSolutionsTadpolesLoopLowScale[[1,i,1]],{i,1,Length[SubSolutionsTadpolesLoopLowScale[[1]]]}];
];

If[NumericalSolutionTadpoleEquations===True,
SA`ListParametersFromTadpoles1Llow =ParametersToSolveTadpolesLowScaleInput;
];

SA`ListParametersFromTadpoles1Llow = Intersection[SA`ListParametersFromTadpoles1Llow/. A_[b_Integer]->A /. A_[b_Integer,c_Integer]->A /. A_[b_Integer,c_Integer,d_Integer]->A/.re[a_]->a /. im[a_]->a];



 If[SameTadpoleSolutions=!=True,
For[i=1,i<=Length[SA`ListParametersFromTadpoles1Llow],
dim="";
If[getDimParameters[SA`ListParametersFromTadpoles1Llow[[i]]]=!={} && getDimParameters[SA`ListParametersFromTadpoles1Llow[[i]]]=!={1},
dim=StringReplace[ToString[getDimParameters[SA`ListParametersFromTadpoles1Llow[[i]]]],{"{"->"(","}"->")"}];
];  
 If[FreeQ[solHighScale,SA`ListParametersFromTadpoles1Llow[[i]]],
If[FreeQ[realVar,SA`ListParametersFromTadpoles1Llow[[i]]],
NoWriteString[sphenoLoop, "Complex(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]]<>"1L"<>dim<>","<>SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]]<>"2L"<>dim<>" \n"];,
NoWriteString[sphenoLoop, "Real(dp) :: "<>SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]]<>"1L"<>dim<>","<>SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]]<>"2L"<>dim<>" \n"];
];
];

i++;];
]; 
];


WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = 'OneLoopMasses' \n \n"];

WriteString[sphenoLoop,"kont = 0 \n \n"];



For[i=1,i<=Length[NewNumericalDependences],
WriteString[sphenoLoop, SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
i++;];

WriteString[sphenoLoop,"! Set Gauge fixing parameters \n"];
WriteString[sphenoLoop,"RXi= RXiNew \n"];
For[i=1,i<=Length[SA`GaugeFixingRXi],
If[FreeQ[Particles[Current],SA`GaugeFixingRXi[[i,2]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`GaugeFixingRXi[[i,1]]]<>" = RXi \n"];
];
i++;];

If[AddOHDM=!=True && FreeQ[parameters,VEVSM1]==False && FreeQ[parameters,VEVSM2]==False,
WriteString[sphenoLoop,"tanbQ="<>SPhenoForm[VEVSM2]<>"/"<>SPhenoForm[VEVSM1]<> "\n"];
];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},sphenoLoop];



For[i=1,i<=Length[SA`ListParametersFromTadpoles],
WriteString[sphenoLoop, SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"Tree  = "<> SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"\n"];
i++;];


If[SPhenoOnlyForHM=!=True,
WriteString[sphenoLoop, "\n \n If (CalculateOneLoopMasses) Then \n \n"];

(*
WriteString[sphenoLoop,"! Set Gauge fixing parameters \n"];
WriteString[sphenoLoop,"RXi= RXiNew \n"];
For[i=1,i\[LessEqual]Length[SA`GaugeFixingRXi],
If[FreeQ[Particles[Current],SA`GaugeFixingRXi[[i,2]]]\[Equal]False,
WriteString[sphenoLoop,SPhenoForm[SA`GaugeFixingRXi[[i,1]]]<>" = RXi \n"];
];
i++;];
*)

MakeCall["CouplingsForVectorBosons" , Join[parametersZW,namesZW],{},{},sphenoLoop];

(* If[NonSUSYModel=!=True, *)
If[(Select[{"Hypercharge-Coupling","Left-Coupling"},FreeQ[ParameterDefinitions,#]&]==={}) && (Select[{"Down-VEV","Up-VEV"},FreeQ[ParameterDefinitions,#]&]==={}|| FreeQ[ParameterDefinitions,"EW-VEV"]==False),
MakeCall["Pi1Loop"<>ToString[VectorZ],Flatten[{massesZ,couplingsZ}],{"mZ2"},{"kont","dmZ2"},sphenoLoop];
If[AuxiliaryHyperchargeCoupling, WriteString[sphenoLoop,SPhenoForm[hyperchargeCoupling] <>" = " <>SPhenoForm[ExpressionAuxHypercharge] <>" \n"];];
WriteString[sphenoLoop,"vev2=4._dp*Real(mZ2+dmz2,dp)/("<>SPhenoForm[hyperchargeCoupling] <>"**2+"<>SPhenoForm[leftCoupling] <>"**2) -"<>SPhenoForm[SA`AdditionalDoubletVEVs]<>" \n"];
If[AddOHDM=!=True,
WriteString[sphenoLoop,SPhenoForm[VEVSM1]<> "=Sqrt(vev2/(1._dp+tanbQ**2))\n"];
WriteString[sphenoLoop,SPhenoForm[VEVSM2]<> "=tanbQ*"<>SPhenoForm[VEVSM1]<> "\n"];,
WriteString[sphenoLoop,SPhenoForm[VEVSM]<> "= sqrt(vev2)\n"];
];
];

If[DEFINITION[NonStandardVEVs1L]===True,
MakeCall["Pi1Loop"<>ToString[VectorZ],Flatten[{massesZ,couplingsZ}],{"mZ2"},{"kont","dmZ2"},sphenoLoop];
For[i=1,i<=Length[DEFINITION[NonStandardVEVs1Lrelations]],
WriteString[sphenoLoop,DEFINITION[NonStandardVEVs1Lrelations][[i]]<>"\n"];
i++;];
];

WriteTadpoleSolution[sphenoLoop];


MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},sphenoLoop];
];


MakeCall["CouplingsForLoopMasses" , Join[parametersLoop,namesLoop],{},{},sphenoLoop];

off=1;
For[i=1,i<=Length[loopContributionTad],
If[loopContributionTad[[i]]=!={} && Intersection[listVEVseparated[[i]]]=!={0},
MakeCall["OneLoopTadpoles"<>ToString[ScalarsForTadpoles[[i]]],Flatten[{Intersection[listVEVseparated[[i]]],NeededMassesLoopTad[[i]], NeededCouplingsLoopTad[[i]]}],{},{"Tad1Loop("<>ToString[off]<>":"<>ToString[off-1+getGen[ScalarsForTadpoles[[i]]]]<>")"},sphenoLoop]; 
(* MakeCall["OneLoopTadpoles"<>ToString[ScalarsForTadpoles[[i]]],Flatten[{Intersection[listVEVseparated[[i]]],NeededMassesLoopTad[[i]], NeededCouplingsLoopTad[[i]]}],{},{"Tad1Loop("<>ToString[off]<>":"<>ToString[off-1+ Length[Intersection[listVEVseparated[[i]]]]]<>")"},sphenoLoop]; *)
off += getGen[ScalarsForTadpoles[[i]]]; 
(* off += Length[Intersection[listVEVseparated[[i]]]]; *)
];
i++;];

For[i=1,i<=Length[SA`ListParametersFromTadpoles],
WriteString[sphenoLoop, SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"Tree  = "<> SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"\n"];
i++;];


If[SupersymmetricModel=!=False,
WriteString[sphenoLoop, "If (CalculateTwoLoopHiggsMasses) Then \n"];
(*
WriteString[sphenoLoop, "  If (.not.CalculateMSSM2Loop) Then \n"];

WriteString[sphenoLoop, "  ! Make sure that there are no exactly degenerated masses! \n"];
ArrayParameters=Select[listAllParameters,(Length[getDimParameters[#]]\[Equal]2)&];
For[i=1,i\[LessEqual]Length[ArrayParameters],
WriteString[sphenoLoop,"   "<>SPhenoForm[ArrayParameters[[i]]]<> "_saveEP ="<>SPhenoForm[ArrayParameters[[i]] ]<>"\n"];
WriteString[sphenoLoop,"   where (aint(Abs("<>SPhenoForm[ArrayParameters[[i]]]<>")).eq."<>SPhenoForm[ArrayParameters[[i]]]<>") "<>SPhenoForm[ArrayParameters[[i]]]<>"="<>SPhenoForm[ArrayParameters[[i]]]<>"*(1 + "<>ToString[i]<>"*1.0E-12_dp)\n"];
i++;];
WriteString[sphenoLoop,"\n"];
*)
WriteString[sphenoLoop,"    If(GaugelessLimit) Then \n"];
For[i=1,i<=Length[listVEVsStable],
WriteString[sphenoLoop,"  "<>ToString[listVEVsStable[[i]]]<>" = 0._dp \n"];
i++;];
For[i=1,i<=Length[listBrokenGaugeCouplings],
WriteString[sphenoLoop,"   "<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<> "_saveEP ="<>SPhenoForm[listBrokenGaugeCouplings[[i]] ]<>"\n"];
WriteString[sphenoLoop,"   "<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<> " = 0._dp \n"];
i++;];
(*
WriteTadpoleSolution[sphenoLoop]; 
WriteShiftTadpoleSolution[sphenoLoop];
*)
WriteString[sphenoLoop,"     Else \n"];
For[i=1,i<=Length[listVEVsStable],
WriteString[sphenoLoop,"  "<>ToString[listVEVsStable[[i]]]<>" = "<>ToString[listVEVs[[i]]]<>" \n"];
i++;];
(* WriteShiftTadpoleSolution[sphenoLoop]; *)
WriteString[sphenoLoop,"     End if \n\n"];

WriteString[sphenoLoop,"SELECT CASE (TwoLoopMethod) \n"];

WriteString[sphenoLoop,"CASE ( 1 , 2 ) \n"];

WriteString[sphenoLoop,"  ! Make sure that there are no exactly degenerated masses! \n"];
ArrayParameters=Select[listAllParameters,(Length[getDimParameters[#]]==2)&];
For[i=1,i<=Length[ArrayParameters],WriteString[sphenoLoop,"   "<>SPhenoForm[ArrayParameters[[i]]]<>"_saveEP ="<>SPhenoForm[ArrayParameters[[i]]]<>"\n"];
WriteString[sphenoLoop,"   where (aint(Abs("<>SPhenoForm[ArrayParameters[[i]]]<>")).eq."<>SPhenoForm[ArrayParameters[[i]]]<>") "<>SPhenoForm[ArrayParameters[[i]]]<>"="<>SPhenoForm[ArrayParameters[[i]]]<>"*(1 + "<>ToString[i]<>"*1.0E-12_dp)\n"];
i++;];
WriteString[sphenoLoop,"\n"];

WriteString[sphenoLoop, "If (TwoLoopSafeMode) Then \n"];
WriteString[sphenoLoop, "  iFin = 12 \n"];
WriteString[sphenoLoop, "  Convergence2L = .false. \n"];
WriteString[sphenoLoop,"  hstep_pn = 2.0_dp \n"];
WriteString[sphenoLoop,"  hstep_sa = 2.0_dp \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "  iFin = 1 \n"];
WriteString[sphenoLoop, "  Convergence2L = .true. \n"];
WriteString[sphenoLoop, "End if \n\n"];
WriteString[sphenoLoop, "Pi2S_EffPot_save = 0._dp \n"];
WriteString[sphenoLoop, "Pi2S_EffPot = 0._dp \n\n"];
WriteString[sphenoLoop, "Do i2L = 1, iFin \n"];

MakeCall["CalculateCorrectionsEffPot",Join[listVEVs,listAllParameters],{"ti_ep2L","pi_ep2L"},{"kont"},sphenoLoop];


count1=1;
For[i=1,i<=Length[listVEVs],
For[ii1=1,ii1<=getGen[listVEVs[[i]]],
count2=1;
For[j=1,j<=Length[listVEVs],
For[ii2=1,ii2<=getGen[listVEVs[[j]]],
If[i===j && ii1===ii2,
If[getGen[listVEVs[[i]]]>1,
WriteString[sphenoLoop, "Pi2S_EffPot("<>ToString[count1]<>","<>ToString[count2]<>") = pi_ep2L("<>ToString[count1]<>","<>ToString[count2]<>")!-ti_ep2L("<>ToString[count1]<>")/"<>ToString[listVEVs[[i]]]<>"("<>ToString[ii1]<>")\n"];,
WriteString[sphenoLoop, "Pi2S_EffPot("<>ToString[count1]<>","<>ToString[count2]<>") = pi_ep2L("<>ToString[count1]<>","<>ToString[count2]<>")!-ti_ep2L("<>ToString[count1]<>")/"<>ToString[listVEVs[[i]]]<>"\n"];
];,
WriteString[sphenoLoop, "Pi2S_EffPot("<>ToString[count1]<>","<>ToString[count2]<>") = pi_ep2L("<>ToString[count1]<>","<>ToString[count2]<>")\n"];
];
count2++;
ii2++;];
j++;];
count1++;
ii1++;];
i++;];

WriteString[sphenoLoop," diff=(Pi2S_EffPot-Pi2S_EffPot_save)/MaxVal(Abs(Pi2S_EffPot)) \n"];
WriteString[sphenoLoop,"  If (MaxVal(Abs(diff)).lt.1.0E-4_dp) Then \n"];
WriteString[sphenoLoop,"    Convergence2L = .True. \n"];
WriteString[sphenoLoop,"    Exit \n"];
WriteString[sphenoLoop,"  Else \n"];
WriteString[sphenoLoop,"    Pi2S_EffPot_save = Pi2S_EffPot \n"];
WriteString[sphenoLoop,"  hstep_pn = hstep_pn/2._dp \n"];
WriteString[sphenoLoop,"  hstep_sa = hstep_sa/2._dp \n"];
WriteString[sphenoLoop,"  End If \n"];
WriteString[sphenoLoop,"End do \n"];

WriteString[sphenoLoop,"If (.not.Convergence2L) Then \n"];
WriteString[sphenoLoop," Write(*,*) \"WARNING: Two-Loop corrections are numerically unstable! \"  \n"];
WriteString[sphenoLoop," Call TerminateProgram \n"];
WriteString[sphenoLoop,"End If  \n"];

WriteString[sphenoLoop," Pi2A0 = 0._dp \n"];

(*
WriteString[sphenoLoop,"   If(GaugelessLimit) Then \n"];
For[i=1,i\[LessEqual]Length[listBrokenGaugeCouplings],
WriteString[sphenoLoop,"   "<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<> " ="<>SPhenoForm[listBrokenGaugeCouplings[[i]]] <>"_saveEP \n"];
i++;];
WriteString[sphenoLoop,"   End if \n\n"];
*)

For[i=1,i<=Length[ArrayParameters],
WriteString[sphenoLoop,"   "<>SPhenoForm[ArrayParameters[[i]]]<> " ="<>SPhenoForm[ArrayParameters[[i]] ]<>"_saveEP \n"];
i++;];

WriteString[sphenoLoop,"\n\n CASE ( 3 ) ! Diagrammatic method \n"];

WriteString[sphenoLoop,"  ! Make sure that there are no exactly degenerated masses! \n"];
ArrayParameters=Select[listAllParameters,(Length[getDimParameters[#]]==2)&];
For[i=1,i<=Length[ArrayParameters],WriteString[sphenoLoop,"   "<>SPhenoForm[ArrayParameters[[i]]]<>"_saveEP ="<>SPhenoForm[ArrayParameters[[i]]]<>"\n"];
WriteString[sphenoLoop,"   where (aint(Abs("<>SPhenoForm[ArrayParameters[[i]]]<>")).eq."<>SPhenoForm[ArrayParameters[[i]]]<>") "<>SPhenoForm[ArrayParameters[[i]]]<>"="<>SPhenoForm[ArrayParameters[[i]]]<>"*(1 + "<>ToString[i]<>"*1.0E-12_dp)\n"];
i++;];
WriteString[sphenoLoop,"\n"];

MakeCall["CalculatePi2S",Join[listVEVs,listAllParameters],{"0._dp"},{"kont","ti_ep2L","Pi2S_EffPot","PiP2S_EffPot"},sphenoLoop];

For[i=1,i<=Length[ArrayParameters],
WriteString[sphenoLoop,"   "<>SPhenoForm[ArrayParameters[[i]]]<> " ="<>SPhenoForm[ArrayParameters[[i]] ]<>"_saveEP \n"];
i++;];

WriteString[sphenoLoop,"\n\n CASE ( 8 , 9 ) ! Hard-coded routines \n  \n"];
If[UseHiggs2LoopMSSM==True,
(*
WriteString[sphenoLoop,"\n\n  Else ! Slavich's routines \n\n"];
If[UseHiggs2LoopMSSM\[Equal]True,
WriteString[sphenoLoop,"vevs_DR(1) = vd \n"];
WriteString[sphenoLoop,"vevs_DR(2) = vu \n"];
WriteString[sphenoLoop,"Q2 = GetRenormalizationScale() \n"];
WriteString[sphenoLoop,"Call Two_Loop_Tadpoles_MSSM(g3,MGlu,mAH2(2),vevs_DR, &\n"];
WriteString[sphenoLoop,"& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"];
WriteString[sphenoLoop,"& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
WriteString[sphenoLoop,"& Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu"]<>", tadpoles_2L,kont ) \n\n"];

WriteString[sphenoLoop,"ti_ep2L(1) = tadpoles_2L(1)*vevs_DR(1) \n"];
WriteString[sphenoLoop,"ti_ep2L(2) = tadpoles_2L(2)*vevs_DR(2) \n \n"];

WriteString[sphenoLoop,"Call PiPseudoScalar2(g3,MGlu,mAH2(2),vevs_DR, & \n"];
WriteString[sphenoLoop,"& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"];
WriteString[sphenoLoop,"& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
WriteString[sphenoLoop,"& Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu"]<>", Pi2A0,kont ) \n"];

WriteString[sphenoLoop,"vevs_DR(1) = vd \n"];
WriteString[sphenoLoop,"vevs_DR(2) = vu \n"];
WriteString[sphenoLoop,"Call PiScalar2(Q2,g3,MGlu,mAH2(2),vevs_DR, & \n"];
WriteString[sphenoLoop," Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"];
WriteString[sphenoLoop," Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
WriteString[sphenoLoop," Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu"]<>",0, Pi2S,kont ) \n\n"];

WriteString[sphenoLoop,"! Some two loop corrections are absorbed in M_A in Pietro's routines \n\n"];
WriteString[sphenoLoop," Call PiPseudoScalar2(g3,MGlu,mAH2(2),vevs_DR,& \n" ];
WriteString[sphenoLoop," & Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp),& \n"];
WriteString[sphenoLoop," & Real(ml2(3,3),dp),Td(3,3),Tu(3,3),Te(3,3),Yd(3,3),& \n"];
WriteString[sphenoLoop," & Yu(3,3),Ye(3,3),"<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu"]<>",Pi2A0,kont) \n"];
WriteString[sphenoLoop," tanbQ=vu/vd \n"];
WriteString[sphenoLoop," cosb2=1._dp/(1._dp+tanbQ**2) \n"];
WriteString[sphenoLoop," sinb2=1._dp-cosb2 \n"];
WriteString[sphenoLoop," sinbcosb=Sqrt(cosb2*sinb2) \n"];

WriteString[sphenoLoop," Pi2S(1,1)=Pi2S(1,1)+Pi2A0*sinb2 + tadpoles_2L(1) \n"];
WriteString[sphenoLoop," Pi2S(1,2)=Pi2S(1,2)-Pi2A0*sinbcosb \n"];
WriteString[sphenoLoop," Pi2S(2,2)=Pi2S(2,2)+Pi2A0*cosb2 + tadpoles_2L(2) \n"];
WriteString[sphenoLoop," Pi2S(2,1)=Pi2S(1,2) \n \n"];

WriteString[sphenoLoop, "Pi2S_EffPot(1:2,1:2) = Pi2S \n\n"];
];

WriteString[sphenoLoop,"  End if \n \n"];
*)

WriteString[sphenoLoop,"! Strong corrections first\n"];
WriteString[sphenoLoop,"vevs_asat = 1._dp\n"];

For[ii1=1,ii1<=higgsdim,ii1++,WriteString[sphenoLoop,"vevs_asat("<>ToString[ii1]<>") = "<>SPhenoForm[listVEVs[[ii1]]]<>"\n"];];

(*Now to make sure we have all the correct definitions,and if not then to insert them accordingly...*)
(*Need lam,LT,MD0,mo2,BO,MO,Mglu(2),ZG(2)*)

If[getGenSPheno[Gluino]<2,
WriteString[sphenoLoop,"Mglu_asat(1) = MGlu\n"];
WriteString[sphenoLoop,"Mglu_asat(2) = 1._dp\n"];
WriteString[sphenoLoop,"ZG_asat(1,1) = 1._dp\n"];
WriteString[sphenoLoop,"ZG_asat(1,2) = 0._dp\n"];
WriteString[sphenoLoop,"ZG_asat(2,1) = 0._dp\n"];
WriteString[sphenoLoop,"ZG_asat(2,2) = 1._dp\n"];,
WriteString[sphenoLoop,"Mglu_asat(1:2) = MGlu(1:2)\n"];
WriteString[sphenoLoop,"ZG_asat(1:2,1:2) = ZG(1:2,1:2)\n"];
];

tvar=getEntryParameter[MDGoc,OutputName];
If[tvar===None,WriteString[sphenoLoop,"MDO_asat = 0._dp\n"];,
WriteString[sphenoLoop,"MDO_asat = "<>ToString[tvar]<>"\n"];
];
tvar=getEntryParameter[moc2,OutputName];
If[tvar===None,WriteString[sphenoLoop,"mo2_asat = 1._dp\n"];,
WriteString[sphenoLoop,"mo2_asat = "<>ToString[tvar]<>"\n"];
];
tvar=getEntryParameter[MO,OutputName];
If[tvar===None,WriteString[sphenoLoop,"MO_asat = 0._dp\n"];,
WriteString[sphenoLoop,"MO_asat = "<>ToString[tvar]<>"\n"];
];
tvar=getEntryParameter[B[MO],OutputName];
If[tvar===None,WriteString[sphenoLoop,"BO_asat = 0._dp\n"];,
WriteString[sphenoLoop,"BO_asat = "<>ToString[tvar]<>"\n"];
];


tpos=Position[ParameterDefinitions,"Singlet-Higgs-Interaction"];
If[tpos=!={},
tpos=Position[SuperPotential,ParameterDefinitions[[tpos[[1,1]],1]]];
singlet=DeleteCases[DeleteCases[SuperPotential[[tpos[[1,1]]]][[2]],Hd],Hu][[1]];
tvarres=SuperPotential[[tpos[[1,1]]]];
If[FreeQ[tvarres,{___,Hu,___,Hd,___}]==False,
WriteString[sphenoLoop,"lam_asat = real("<>ToString[-1*tvarres[[1,1]]]<>"*"<>ToString[getEntryParameter[tvarres[[1,2]],OutputName]]<>",dp)\n"];,
WriteString[sphenoLoop,"lam_asat = real("<>ToString[tvarres[[1,1]]]<>"*"<>ToString[getEntryParameter[tvarres[[1,2]],OutputName]]<>",dp)\n"];
];,
tpos=Position[SuperPotential,{singlet,Hd,Hu}];
If[tpos=={},
tpos=Position[SuperPotential,{singlet,Hu,Hd}];
If[tpos=={},
WriteString[sphenoLoop,"lam_asat = 0._dp\n"];,
tvarres=SuperPotential[[tpos[[1,1]]]][[1]];
WriteString[sphenoLoop,"lam_asat = real("<>ToString[-1*tvarres[[1]]]<>"*"<>ToString[getEntryParameter[tvarres[[2]],OutputName]]<>",dp)\n"];];,tvarres=SuperPotential[[tpos[[1,1]]]][[1]];
WriteString[sphenoLoop,"lam_asat = real("<>ToString[tvarres[[1]]]<>"*"<>ToString[getEntryParameter[tvarres[[2]],OutputName]]<>",dp)\n"];
];
];

tpos=Position[SuperPotential,{Hd,Hu}];
If[tpos=={},
tpos=Position[SuperPotential,{Hu,Hd}];
If[tpos=={},
WriteString[sphenoLoop,"mu_asat = 0.001_dp\n"];,
WriteString[sphenoLoop,"mu_asat = mu ! Sign changed FS 03/06/15 \n"];
];,
WriteString[sphenoLoop,"mu_asat = -mu !  Sign changed FS 03/06/15  \n"];
];

tpos=Position[SuperPotential,{Hd,T,Hu}];
If[tpos=={},tpos=Position[SuperPotential,{Hu,T,Hd}];
If[tpos=={},
WriteString[sphenoLoop,"LT_asat = 0._dp\n"];,
tvarres=SuperPotential[[tpos[[1,1]]]][[1]];
WriteString[sphenoLoop,"LT_asat = real("<>ToString[-1*tvarres[[1]]]<>"*"<>ToString[getEntryParameter[tvarres[[2]],OutputName]]<>"/sqrt(2._dp),dp)\n"];];,tvarres=SuperPotential[[tpos[[1,1]]]][[1]];
WriteString[sphenoLoop,"LT_asat = real("<>ToString[tvarres[[1]]]<>"*"<>ToString[getEntryParameter[tvarres[[2]],OutputName]]<>"/sqrt(2._dp),dp)\n"];];

(*write calling routine*)

WriteString[sphenoLoop,"Q2 = GetRenormalizationScale() \n"];
WriteString[sphenoLoop,"call CalculateStrongCorrections2L(Q2,g3,MGlu_asat,ZG_asat, vevs_asat, &\n"];
WriteString[sphenoLoop,"& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), &\n"];
WriteString[sphenoLoop,"& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &\n"];
WriteString[sphenoLoop,"& Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu_asat"]<>
",MDO_asat,mo2_asat,BO_asat,MO_asat,lam_asat,LT_asat,0,pip2s_asat,pi2s_asat,tadpoles_asat,kont )\n"];

WriteString[sphenoLoop,"do i1 = 1,"<>higgsdimstr<>"\n"];
WriteString[sphenoLoop,"ti_ep2L(i1) = tadpoles_asat(i1)\n"];
WriteString[sphenoLoop,"pi2s_effpot(i1,i1) = pi2s_asat(i1,i1)+tadpoles_asat(i1)/vevs_asat(i1)\n"];
WriteString[sphenoLoop,"pip2s_effpot(i1,i1) = pip2s_asat(i1,i1)+tadpoles_asat(i1)/vevs_asat(i1)\n"];
WriteString[sphenoLoop,"do i2 = 1,i1-1\n"];
WriteString[sphenoLoop,"pi2s_effpot(i1,i2) = pi2s_asat(i1,i2)\n"];
WriteString[sphenoLoop,"pi2s_effpot(i2,i1) = pi2s_asat(i2,i1)\n"];
WriteString[sphenoLoop,"pip2s_effpot(i1,i2) = pip2s_asat(i1,i2)\n"];
WriteString[sphenoLoop,"pip2s_effpot(i2,i1) = pip2s_asat(i2,i1)\n"];
WriteString[sphenoLoop,"end do\n"];
WriteString[sphenoLoop,"end do\n\n"];

WriteString[sphenoLoop,"If ( TwoLoopMethod .eq. 9) then ! Slavich's routines \n\n"];
WriteString[sphenoLoop,"vevs_MSSM(1) = vd \n"];
WriteString[sphenoLoop,"vevs_MSSM(2) = vu \n"];


tpos=Position[SuperPotential,{Hd,Hu}];
If[tpos=={},
tpos=Position[SuperPotential,{Hu,Hd}];
If[tpos=={},
WriteString[sphenoLoop,"MAps = 0.0 \n"];,
WriteString[sphenoLoop,"MAps = Bmu*(vu/vd+vd/vu) \n"];
];,
WriteString[sphenoLoop,"MAps = -Bmu*(vu/vd+vd/vu)\n"];
];


tpos=Position[ParameterDefinitions,"Singlet-Higgs-Interaction"];
If[tpos=!={},
If[FreeQ[ParameterDefinitions,"Mu-parameter"],
tpos=Position[SuperPotential,ParameterDefinitions[[tpos[[1,1]],1]]];
tvarres=SuperPotential[[tpos[[1,1]]]];
If[FreeQ[tvarres,{___,Hu,___,Hd,___}]==False,
WriteString[sphenoLoop,"MAps = MAps + TLam*vS/Sqrt(2._dp)/sin(Atan(vu/vd))/cos(Atan(vu/vd)) \n"];
WriteString[sphenoLoop,"mu_asat =  lam*vS/Sqrt(2._dp) \n"];,
WriteString[sphenoLoop,"MAps = MAps - TLam*vS/Sqrt(2._dp)/sin(Atan(vu/vd))/cos(Atan(vu/vd))\n"];
WriteString[sphenoLoop,"mu_asat =  - lam*vS/Sqrt(2._dp) \n"];
];,
tpos=Position[SuperPotential,ParameterDefinitions[[tpos[[1,1]],1]]];
tvarres=SuperPotential[[tpos[[1,1]]]];
If[FreeQ[tvarres,{___,Hu,___,Hd,___}]==False,
WriteString[sphenoLoop,"MAps = MAps + TLam*vS/Sqrt(2._dp)/sin(Atan(vu/vd))/cos(Atan(vu/vd)) \n"];
WriteString[sphenoLoop,"mu_asat = mu + lam*vS/Sqrt(2._dp) \n"];,
WriteString[sphenoLoop,"MAps = MAps - TLam*vS/Sqrt(2._dp)/sin(Atan(vu/vd))/cos(Atan(vu/vd))\n"];
WriteString[sphenoLoop,"mu_asat = mu - lam*vS/Sqrt(2._dp) \n"];
];
];
];


tpos=Position[SuperPotential,{singlet,singlet,singlet}];
If[tpos=!={},
WriteString[sphenoLoop,"MAps = MAps + lam*vS**2*kap/2._dp/sin(Atan(vu/vd))/cos(Atan(vu/vd)) \n"];
];


WriteString[sphenoLoop,"Q2 = GetRenormalizationScale() \n"];
WriteString[sphenoLoop,"Call Yukawa2L_Tadpoles_MSSM(MAps,vevs_MSSM, &\n"];
WriteString[sphenoLoop,"& Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"];
WriteString[sphenoLoop,"& Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
WriteString[sphenoLoop,"& Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu_asat"]<>", tadpoles_MSSM,kont ) \n\n"];

WriteString[sphenoLoop,"ti_ep2L(1) = ti_ep2L(1) + tadpoles_MSSM(1)*vevs_MSSM(1) \n"];
WriteString[sphenoLoop,"ti_ep2L(2) = ti_ep2L(2) + tadpoles_MSSM(2)*vevs_MSSM(2) \n \n"];
WriteString[sphenoLoop,"vevs_MSSM(1) = vd \n"];
WriteString[sphenoLoop,"vevs_MSSM(2) = vu \n"];
WriteString[sphenoLoop,"Call Yukawa2L_Scalar(Q2,MAps,vevs_MSSM, & \n"];
WriteString[sphenoLoop," Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp), & \n"];
WriteString[sphenoLoop," Real(ml2(3,3),dp), Td(3,3), Tu(3,3), Te(3,3), Yd(3,3), &  \n"];
WriteString[sphenoLoop," Yu(3,3), Ye(3,3), "<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu_asat"]<>",0, Pi2S_MSSM,kont ) \n\n"];

WriteString[sphenoLoop,"! Some two loop corrections are absorbed in M_A in Pietro's routines \n\n"];
WriteString[sphenoLoop," Call Yukawa2L_PseudoScalar(MAps,vevs_MSSM,& \n"];
WriteString[sphenoLoop," & Real(md2(3,3),dp),Real(mu2(3,3),dp),Real(mq2(3,3),dp),Real(me2(3,3),dp),& \n"];
WriteString[sphenoLoop," & Real(ml2(3,3),dp),Td(3,3),Tu(3,3),Te(3,3),Yd(3,3),& \n"];
WriteString[sphenoLoop," & Yu(3,3),Ye(3,3),"<>If[UseAuxiliaryMu2Loop===True,SPhenoForm[AuxiliaryMu2Loop],"mu_asat"]<>",Pi2A0,kont) \n"];
WriteString[sphenoLoop," tanbQ=vu/vd \n"];
WriteString[sphenoLoop," cosb2=1._dp/(1._dp+tanbQ**2) \n"];
WriteString[sphenoLoop," sinb2=1._dp-cosb2 \n"];
WriteString[sphenoLoop," sinbcosb=Sqrt(cosb2*sinb2) \n"];

WriteString[sphenoLoop," Pi2S_MSSM(1,1)=Pi2S_MSSM(1,1)+Pi2A0*sinb2 + tadpoles_MSSM(1) \n"];
WriteString[sphenoLoop," Pi2S_MSSM(1,2)=Pi2S_MSSM(1,2)-Pi2A0*sinbcosb \n"];
WriteString[sphenoLoop," Pi2S_MSSM(2,2)=Pi2S_MSSM(2,2)+Pi2A0*cosb2 + tadpoles_MSSM(2) \n"];
WriteString[sphenoLoop," Pi2S_MSSM(2,1)=Pi2S_MSSM(1,2) \n \n"];

WriteString[sphenoLoop,"Pi2S_EffPot(1:2,1:2) = Pi2S_EffPot(1:2,1:2) + Pi2S_MSSM \n\n"];

WriteString[sphenoLoop," PiP2S_effpot(1,1)=pip2s_effpot(1,1)+Pi2A0*sinb2 +  tadpoles_MSSM(1) \n"];
WriteString[sphenoLoop," PiP2S_effpot(1,2)=pip2s_effpot(1,2)+Pi2A0*sinbcosb \n"];
WriteString[sphenoLoop," PiP2S_effpot(2,2)=pip2s_effpot(2,2)+Pi2A0*cosb2 +  tadpoles_MSSM(2) \n"];
WriteString[sphenoLoop," PiP2S_effpot(2,1)=pip2s_effpot(1,2)\n \n"];

WriteString[sphenoLoop,"end if ! Ends slavich routines\n\n"];

];(*ends "If[UseHiggs2LoopMSSM==True, "*)
WriteString[sphenoLoop," END SELECT\n \n"];

WriteString[sphenoLoop,"   If(GaugelessLimit) Then \n"];
For[i=1,i<=Length[listBrokenGaugeCouplings],
WriteString[sphenoLoop,"   "<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<>" ="<>SPhenoForm[listBrokenGaugeCouplings[[i]]]<>"_saveEP \n"];
i++;];
WriteString[sphenoLoop,"   End if \n\n"];

WriteString[sphenoLoop,"Else ! Two loop turned off \n"];
WriteString[sphenoLoop, "Pi2S_EffPot = 0._dp \n\n"];
WriteString[sphenoLoop, "Pi2A0 = 0._dp \n\n"];
WriteString[sphenoLoop, "ti_ep2L = 0._dp \n\n"];
WriteString[sphenoLoop,"End if \n"];
];

subTadpolesHiggs2Loop = {};
subTadpolesHiggs2Loop2L = {};
If[SupersymmetricModel=!=False,
WriteShiftTadpoleSolution[sphenoLoop];
For[i=1,i<=Length[SA`ListParametersFromTadpoles1L],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1L[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L = " <> SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"\n"];
];
If[(FreeQ[parameters,T[SA`ListParametersFromTadpoles1L[[i]]]] ==False) &&(FreeQ[SA`ListParametersFromTadpoles1L,T[SA`ListParametersFromTadpoles1L[[i]]]]),
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{T[SA`ListParametersFromTadpoles1L[[i]]]->T[SA`ListParametersFromTadpoles1L[[i]]],SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L"]}];
subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{T[SA`ListParametersFromTadpoles1L[[i]]]->T[SA`ListParametersFromTadpoles1L[[i]]],SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"2L"]}];,
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L"]}];
subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"2L"]}];
];
i++;];

If[SameTadpoleSolutions=!=True,
For[i=1,i<=Length[SA`ListParametersFromTadpoles1Llow],
If[FreeQ[solHighScale,SA`ListParametersFromTadpoles1Llow[[i]]],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1Llow[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L = " <> SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"\n"];
];
If[(FreeQ[parameters,T[SA`ListParametersFromTadpoles1L[[i]]]] ==False) &&(FreeQ[SA`ListParametersFromTadpoles1L,T[SA`ListParametersFromTadpoles1L[[i]]]]),
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{T[SA`ListParametersFromTadpoles1Llow[[i]]]->T[SA`ListParametersFromTadpoles1Llow[[i]]],SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L"]}];
subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{T[SA`ListParametersFromTadpoles1Llow[[i]]]->T[SA`ListParametersFromTadpoles1Llow[[i]]],SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"2L"]}];,
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L"]}];
subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"2L"]}];
];
];
i++;];
];

WriteString[sphenoLoop, "Tad1Loop(1:"<>ToString[getGen[HiggsBoson]]<>") = Tad1Loop(1:"<>ToString[getGen[HiggsBoson]]<>") - ti_ep2L \n"];

WriteShiftTadpoleSolution[sphenoLoop];
For[i=1,i<=Length[SA`ListParametersFromTadpoles1L],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1L[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"2L = " <> SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"\n"];
];
i++;];

If[SameTadpoleSolutions=!=True,
For[i=1,i<=Length[SA`ListParametersFromTadpoles1Llow],
If[FreeQ[solHighScale,SA`ListParametersFromTadpoles1Llow[[i]]],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1Llow[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"2L = " <> SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"\n"];
];
];
i++;];
];,

(* one-loop tadpoles for non-SUSY case *)

WriteShiftTadpoleSolution[sphenoLoop];
For[i=1,i<=Length[SA`ListParametersFromTadpoles1L],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1L[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L = " <> SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"\n"];
];
If[(FreeQ[parameters,T[SA`ListParametersFromTadpoles1L[[i]]]] ==False) &&(FreeQ[SA`ListParametersFromTadpoles1L,T[SA`ListParametersFromTadpoles1L[[i]]]]),
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{T[SA`ListParametersFromTadpoles1L[[i]]]->T[SA`ListParametersFromTadpoles1L[[i]]],SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L"]}];
(* subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{T[SA`ListParametersFromTadpoles1L[[i]]]\[Rule]T[SA`ListParametersFromTadpoles1L[[i]]],SA`ListParametersFromTadpoles1L[[i]]\[Rule]ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"2L"]}]; *)
subTadpolesHiggs2Loop2L = subTadpolesHiggs2Loop;,
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{SA`ListParametersFromTadpoles1L[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"1L"]}];
(* subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{SA`ListParametersFromTadpoles1L[[i]]\[Rule]ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1L[[i]]] <>"2L"]}]; *)
subTadpolesHiggs2Loop2L = subTadpolesHiggs2Loop;
];
i++;];

If[SameTadpoleSolutions=!=True,
For[i=1,i<=Length[SA`ListParametersFromTadpoles1Llow],
If[FreeQ[solHighScale,SA`ListParametersFromTadpoles1Llow[[i]]],
If[FreeQ[parametersSave,SA`ListParametersFromTadpoles1Llow[[i]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L = " <> SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"\n"];
];
If[(FreeQ[parameters,T[SA`ListParametersFromTadpoles1L[[i]]]] ==False) &&(FreeQ[SA`ListParametersFromTadpoles1L,T[SA`ListParametersFromTadpoles1L[[i]]]]),
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{T[SA`ListParametersFromTadpoles1Llow[[i]]]->T[SA`ListParametersFromTadpoles1Llow[[i]]],SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L"]}];
(* subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{T[SA`ListParametersFromTadpoles1Llow[[i]]]\[Rule]T[SA`ListParametersFromTadpoles1Llow[[i]]],SA`ListParametersFromTadpoles1Llow[[i]]\[Rule]ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"2L"]}]; *)
subTadpolesHiggs2Loop2L = subTadpolesHiggs2Loop;,
subTadpolesHiggs2Loop = Join[subTadpolesHiggs2Loop,{SA`ListParametersFromTadpoles1Llow[[i]]->ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"1L"]}];
(* subTadpolesHiggs2Loop2L = Join[subTadpolesHiggs2Loop2L,{SA`ListParametersFromTadpoles1Llow[[i]]\[Rule]ToExpression[SPhenoForm[SA`ListParametersFromTadpoles1Llow[[i]]] <>"2L"]}]; *)
subTadpolesHiggs2Loop2L = subTadpolesHiggs2Loop;
];
];
i++;];
];

];

For[k=1,k<=Length[SA`LoopMassesParticle],
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
If[FreeQ[SMParticles,ListMassES[[i,1]]] || getGen[ListMassES[[i,1]]]=!=3 || (ListMassES[[i,1]]===Neutrino && FreeQ[massless,Neutrino]),
Switch[ListTree[[i,4]],
ScalarMass,
If[FreeQ[ListTree[[i,3]] /. subSolution,Tad1Loop]==True,
If[ListMassES[[i,1]]===HiggsBoson || ListMassES[[i,1]]===PseudoScalar || ListMassES[[i,1]]===ChargedHiggs,
Switch[ListMassES[[i,1]],
HiggsBoson,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{If[ListMassES[[i,1]]===HiggsBoson ,ListTree[[i,5]]/. subTadpolesHiggs2Loop2L,ListTree[[i,5]]/. subTadpolesHiggs2Loop],NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];,
_,
If[ListMassES[[i,1]]===PseudoScalar && SupersymmetricModel===True,
WriteString[sphenoLoop,"If (TwoLoopMethod.gt.2) Then \n"];
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop2L,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
WriteString[sphenoLoop,"Else \n"];
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
WriteString[sphenoLoop,"End if \n"];,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
];
];,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
];,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"Tadpole_1L","0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];
];,
FermionMassSymm,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2]]]<>"_1L","kont"},sphenoLoop];,
FermionMassNonSymm,
MakeCall["OneLoop"<>ToString[ListMassES[[i,1]]],Flatten[{ListTree[[i,5]]/. subTadpolesHiggs2Loop,NeededMassesLoop[[k]],NeededCouplingsLoop[[k]]}],{},{"0.1_dp*delta_mass",SPhenoForm[ListTree[[i,1]]]<>"_1L",SPhenoForm[ListTree[[i,1]]]<>"2_1L",SPhenoForm[ListTree[[i,2,1]]]<>"_1L",SPhenoForm[ListTree[[i,2,2]]]<>"_1L","kont"},sphenoLoop];
 ];
];
k++;];


 For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0 && FreeQ[SMParticles,listNotMixedMasses[[i,1]]] && listNotMixedMasses[[i,6]]=!=VectorMass,
nameCurrent=listNotMixedMasses[[i,2]];
particleCurrent=ToString[listNotMixedMasses[[i,1]]];
parametersCurrent=listNotMixedMasses[[i,3]];
treeMassCurrent=listNotMixedMasses[[i,5]]/. subSolution;
mixing1="None1";
mixing2="None2";

Switch[listNotMixedMasses[[i,6]],
ScalarMass,
MakeCall["OneLoop"<>particleCurrent,Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]]}],{},{"0.1_dp*delta_mass",nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},sphenoLoop];,
FermionMassSymm,
MakeCall["OneLoop"<>particleCurrent,Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]]}],{},{"0.1_dp*delta_mass",nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},sphenoLoop];,
FermionMassNonSymm,
MakeCall["OneLoop"<>particleCurrent,Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]]}],{},{"0.1_dp*delta_mass",nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},sphenoLoop];,
VectorMass,
MakeCall["OneLoop"<>particleCurrent,Flatten[{parametersCurrent,NeededMassesUnmixed[[i]],NeededCouplingsUnmixed[[i]]}],{},{"0.1_dp*delta_mass",nameCurrent<>"_1L",nameCurrent<>"2_1L","kont"},sphenoLoop];
];
];
i++;]; 


For[k=1,k<=Length[SA`LoopMassesParticle],
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
If[FreeQ[SMParticles,ListMassES[[i,1]]] || getGen[ListMassES[[i,1]]]=!=3 || (ListMassES[[i,1]]===Neutrino && FreeQ[massless,Neutrino]),

WriteString[sphenoLoop, SPhenoForm[ListTree[[i,1]]] <> " = "<> SPhenoForm[ListTree[[i,1]]]<>"_1L \n"];WriteString[sphenoLoop, SPhenoForm[ListTree[[i,1]]] <> "2 = "<> SPhenoForm[ListTree[[i,1]]]<>"2_1L \n"];
If[Length[ListTree[[i,2]]]==0,
WriteString[sphenoLoop, SPhenoForm[ListTree[[i,2]]] <> " = "<> SPhenoForm[ListTree[[i,2]]]<>"_1L \n"];,
WriteString[sphenoLoop, SPhenoForm[ListTree[[i,2,1]]] <> " = "<> SPhenoForm[ListTree[[i,2,1]]]<>"_1L \n"];
WriteString[sphenoLoop, SPhenoForm[ListTree[[i,2,2]]] <> " = "<> SPhenoForm[ListTree[[i,2,2]]]<>"_1L \n"];
];
];
k++;];


For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0 && FreeQ[SMParticles,listNotMixedMasses[[i,1]]] && listNotMixedMasses[[i,6]]=!=VectorMass,
WriteString[sphenoLoop,listNotMixedMasses[[i,2]] <> " = "<>listNotMixedMasses[[i,2]]<>"_1L \n"];WriteString[sphenoLoop,listNotMixedMasses[[i,2]] <> "2 = "<>listNotMixedMasses[[i,2]]<>"2_1L \n"];
];
i++;];


WriteString[sphenoLoop,"End If \n \n"];

MakeCall["SortGoldstones",NewMassParameters,{},{"kont"},sphenoLoop];

WriteString[sphenoLoop,"! Set pole masses \n"];
SetPoleMasses[sphenoLoop];

(* For Goldstones *)

WriteString[sphenoLoop,"! Shift Everything to t'Hooft Gauge\n"];
WriteString[sphenoLoop,"RXi=  1._dp \n"];
For[i=1,i<=Length[SA`GaugeFixingRXi],
If[FreeQ[Particles[Current],SA`GaugeFixingRXi[[i,2]]]==False,
WriteString[sphenoLoop,SPhenoForm[SA`GaugeFixingRXi[[i,1]]]<>" = 1._dp \n"];
];
i++;];

For[i=1,i<=Length[GoldstoneGhost],
If[Head[GoldstoneGhost[[i,2]]]===Symbol,
WriteString[sphenoLoop,SPhenoMass[GoldstoneGhost[[i,2]],1]<>"="<>SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
WriteString[sphenoLoop,SPhenoMassSq[GoldstoneGhost[[i,2]],1]<>"="<>SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];,
WriteString[sphenoLoop,SPhenoMass[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>SPhenoMass[GoldstoneGhost[[i,1]],i] <>"\n" ];
WriteString[sphenoLoop,SPhenoMassSq[GoldstoneGhost[[i,2,0]],GoldstoneGhost[[i,2,1,1]]]<>"="<>SPhenoMassSq[GoldstoneGhost[[i,1]],i] <>"\n" ];
];
i++;];

WriteString[sphenoLoop,"mf_u2 = mf_u**2 \n"];
WriteString[sphenoLoop,"mf_d2 = mf_d**2 \n"];
WriteString[sphenoLoop,"mf_l2 = mf_l**2 \n \n\n "];


WriteString[sphenoLoop,"If (WriteTreeLevelTadpoleSolutions) Then \n"];
WriteString[sphenoLoop,"! Saving tree-level parameters for output\n"];
For[i=1,i<=Length[SA`ListParametersFromTadpoles],
WriteString[sphenoLoop, SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"  = "<> SPhenoForm[SA`ListParametersFromTadpoles[[i]]]<>"Tree \n"];
i++;];
WriteString[sphenoLoop, "End if \n"];


WriteString[sphenoLoop,"\n\n"];




WriteString[sphenoLoop,"Iname = Iname -1 \n"];

WriteString[sphenoLoop,"End Subroutine OneLoopMasses \n \n"];

];






WriteLoopMassScalar[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_,mixed_]:=Block[{i2,i3},
If[PrintDebug, Print["Subroutine for 1 Loop Correction of ", Name]; ];

If[FreeQ[QuadruplePrecision,particle],stringQP="";,stringQP="QP";];


If[mixed==True,
If[addTad==True,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta","mass","mass2","RS","kont"},sphenoLoop];,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2","RS","kont"},sphenoLoop];
];,
If[addTad==True,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta","mass","mass2","kont"},sphenoLoop];,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2","kont"},sphenoLoop];
];
];


dimMatrix = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[parameters,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];

WriteString[sphenoLoop, "Complex(dp) :: mat2a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat2"<>"("<>dimMatrix<>","<>dimMatrix<>"),  PiSf("<>dimMatrix<>","<>dimMatrix<>","<>dimMatrix<>")\n"];
WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count, ierr \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
WriteString[sphenoLoop, "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"),p2, test("<>dimMatrix<>") \n"];
WriteString[sphenoLoop, "Real(dp), Intent(out) :: mass("<>dimMatrix<>"), mass2("<>dimMatrix<>") \n"];
If[mixed==True,
WriteString[sphenoLoop, "Complex(dp), Intent(out) ::  RS"<>"("<>dimMatrix<>","<>dimMatrix<>") \n"];,
WriteString[sphenoLoop, "Complex(dp) ::  RS"<>"("<>dimMatrix<>","<>dimMatrix<>") \n"];
];

If[addTad==True,
WriteString[sphenoLoop, "Complex(dp), Intent(in) ::  Tad1Loop("<>ToString[SA`NrTadpoleEquations]<>") \n"];
];


WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];


For[i2=1,i2<=ToExpression[dimMatrix],
For[i3=i2,i3<=ToExpression[dimMatrix],
MakeSPhenoCoupling[tree[[i2,i3]],"mat2a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
i3++;];
i2++;];

WriteString[sphenoLoop, "\n \n "];

WriteString[sphenoLoop,"Do i1=2,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "  Do i2 = 1, i1-1 \n"];
If[conj[particle]=!=particle,
WriteString[sphenoLoop, "  mat2a(i1,i2) = Conjg(mat2a(i2,i1)) \n"];,
WriteString[sphenoLoop, "  mat2a(i1,i2) = (mat2a(i2,i1)) \n"];
];
WriteString[sphenoLoop, "  End do \n"];
WriteString[sphenoLoop, "End do \n"]; 
WriteString[sphenoLoop, "\n \n"];


WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "PiSf(i1,:,:) = ZeroC \n"];
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,i1]<> "\n"];
If[FreeQ[Transpose[GoldstoneGhost][[2]],particle]==False,
For[i2=1,i2<=getGen[particle],
 If[FreeQ[Transpose[GoldstoneGhost][[2]],particle[{i2}]]==False, 
WriteString[sphenoLoop, "If (i1.eq."<>ToString[i2]<>") p2 = 0._dp \n"];
 ]; 
i2++;];
];


MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","PiSf(i1,:,:)"},sphenoLoop];
WriteString[sphenoLoop,"End Do \n"];

(* WriteString[sphenoLoop,"Do i1="<>dimMatrix <>","<>ToString[getGenSPhenoStart[particle]]<>",-1 \n"]; *)
WriteString[sphenoLoop,"Do i1="<>dimMatrix <>",1,-1 \n"];
If[SupersymmetricModel=!=False,
If[particle===HiggsBoson,
WriteString[sphenoLoop,"PiSf(i1,:,:) = PiSf(i1,:,:) - Pi2S_EffPot \n"];,
If[particle===PseudoScalar,
WriteString[sphenoLoop,"PiSf(i1,:,:) = PiSf(i1,:,:) - PiP2S_EffPot \n"];
];
];
];

WriteString[sphenoLoop,"mat2 = mat2a - Real(PiSf(i1,:,:),dp) \n"];

WriteString[sphenoLoop,"Call Chop(mat2) \n"];
WriteString[sphenoLoop,"Call Eigensystem"<>stringQP<>"(mat2,mi2,RS,kont,test) \n"];


WriteString[sphenoLoop,"If ((kont.Eq.-8).Or.(kont.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop,"  kont = 0 \n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"If ((kont.Ne.0).And.(ErrorLevel.Ge.0)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop,"End If \n"];


WriteString[sphenoLoop,"mass2(i1) = mi2(i1) \n"];
WriteString[sphenoLoop, "End do \n \n"]; 


WriteString[sphenoLoop,"Do i1=1," <> dimMatrix <>"\n"];
WriteString[sphenoLoop, "  If (Abs(mass2(i1)).Le.MaxMassNumericalZero**2) mass2(i1) = 0._dp \n"]; 
WriteString[sphenoLoop,"  If (mass2(i1).Ge.0._dp) Then \n"];
WriteString[sphenoLoop,"    mass(i1) = Sqrt(mass2(i1)) \n"];
WriteString[sphenoLoop,"  Else \n"];
WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"];
If[FreeQ[GoldstoneGhost,particle]==False, 
WriteString[sphenoLoop,"   If ((i1.Gt.1).or.(Abs(mass2(i1)).gt.MaxVal(Abs(mass2)))) Then \n"];
]; 
WriteString[sphenoLoop,"     Write(*,*) 'Warning from routine '//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"     Write(*,*) 'in the calculation of the masses' \n"];
WriteString[sphenoLoop,"     Write(*,*) 'occurred a negative mass squared!' \n"];
WriteString[sphenoLoop,"   Call TerminateProgram \n"];
If[FreeQ[GoldstoneGhost,particle]==False,
WriteString[sphenoLoop,"   End If \n"];
];
WriteString[sphenoLoop,"   End If \n"];
WriteString[sphenoLoop,"   kont = -301 \n"];
WriteString[sphenoLoop,"   mass(i1) = 0._dp \n"];
WriteString[sphenoLoop,"  End If \n"];
WriteString[sphenoLoop,"End Do \n \n"];


WriteString[sphenoLoop,"i_count = 0 \n"];
WriteString[sphenoLoop,"Do  \n"];
WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
WriteString[sphenoLoop,"test_m2 = mass2 \n"];

WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "PiSf(i1,:,:) = ZeroC \n"];
WriteString[sphenoLoop, "p2 =  mass2(i1) \n"];

If[FreeQ[Transpose[GoldstoneGhost][[2]],particle]==False,
For[i2=1,i2<=getGen[particle],
If[FreeQ[Transpose[GoldstoneGhost][[2]],particle[{i}]]==False,
WriteString[sphenoLoop, "If (i1.eq."<>ToString[i2]<>") p2 = 0._dp \n"];
];
i2++;];
];

MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","PiSf(i1,:,:)"},sphenoLoop];
WriteString[sphenoLoop,"End Do \n"];

(* WriteString[sphenoLoop,"Do i1="<>dimMatrix <>","<>ToString[getGenSPhenoStart[particle]]<>",-1 \n"]; *)
WriteString[sphenoLoop,"Do i1="<>dimMatrix <>",1,-1 \n"];

If[SupersymmetricModel=!=False,
If[particle===HiggsBoson,
WriteString[sphenoLoop,"PiSf(i1,:,:) = PiSf(i1,:,:) - Pi2S_EffPot \n"];,
If[UseHiggs2LoopMSSM==True&&particle===PseudoScalar,
WriteString[sphenoLoop,"PiSf(i1,:,:) = PiSf(i1,:,:) - PiP2S_EffPot \n"];
];
];
];
WriteString[sphenoLoop,"mat2 = mat2a - Real(PiSf(i1,:,:),dp) \n"];
WriteString[sphenoLoop,"Call Chop(mat2) \n"];
WriteString[sphenoLoop,"Call Eigensystem"<>stringQP<>"(mat2,mi2,RS,kont,test) \n"];


WriteString[sphenoLoop,"If ((kont.Eq.-8).Or.(kont.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop,"  kont = 0 \n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"If ((kont.Ne.0).And.(ErrorLevel.Ge.0)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Diagonalization did not work in routine \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"mass2(i1) = mi2(i1) \n"];
WriteString[sphenoLoop, "End do \n"]; 


WriteString[sphenoLoop,"Do i1=1,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop," If (Abs(mass2(i1)).Le.MaxMassNumericalZero**2) mass2(i1) = 0._dp \n"]; 
WriteString[sphenoLoop," If (test_m2(i1).Ne.0._dp) Then \n"];
WriteString[sphenoLoop,"    test_m2(i1) = Abs(test_m2(i1) - mass2(i1)) / test_m2(i1) \n"];
WriteString[sphenoLoop," Else \n"];
WriteString[sphenoLoop,"    test_m2(i1) = Abs(mass2(i1)) \n"];
WriteString[sphenoLoop," End If \n"];
WriteString[sphenoLoop," If (Abs(mass2(i1)).lt.1.0E-30_dp) test_m2(i1) = 0._dp \n"];
WriteString[sphenoLoop," If (mass2(i1).Ge.0._dp) Then \n"];
WriteString[sphenoLoop,"    mass(i1) = sqrt(mass2(i1)) \n"];
WriteString[sphenoLoop,"  Else \n"];
(* WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"]; 
If[FreeQ[GoldstoneGhost,particle]\[Equal]False,
WriteString[sphenoLoop,"   If ((i1.Gt.1).or.(Abs(mass2(i1)).gt.MaxVal(Abs(mass2)))) Then \n"];
]; *)
WriteString[sphenoLoop,"     Write(*,*) 'Warning from routine '//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"     Write(*,*) 'in the calculation of the masses occurred a negative mass squared!' \n"];
WriteString[sphenoLoop,"     Write(*,*) 'generation: ',i1 \n"];
WriteString[sphenoLoop,"     Write(*,*) 'mass: ',mass2(i1) \n"];
WriteString[sphenoLoop,"   SignOfMassChanged = .True. \n"];
(* WriteString[sphenoLoop,"   Call TerminateProgram \n"]; 
If[FreeQ[GoldstoneGhost,particle]\[Equal]False,
WriteString[sphenoLoop,"   End If \n"];
]; *)
(* WriteString[sphenoLoop,"   End If \n"];
WriteString[sphenoLoop,"   kont = -301 \n"]; *)
WriteString[sphenoLoop,"   mass(i1) = 0._dp \n"];
WriteString[sphenoLoop,"  End If \n"];
WriteString[sphenoLoop,"End Do \n \n"];

WriteString[sphenoLoop,"If (Maxval(test_m2).LT.0.1_dp*delta) Exit \n"];
WriteString[sphenoLoop,"If (i_count.Gt.30) Then \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Problem in \"//NameOfUnit(Iname), test_m2, mass2 \n"];
WriteString[sphenoLoop,"  kont = -510 \n"];
WriteString[sphenoLoop,"  Call AddError(510) \n"];
WriteString[sphenoLoop," Exit \n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"End Do \n \n \n"];

WriteString[sphenoLoop,"Iname = Iname -1 \n"];

WriteString[sphenoLoop,"End Subroutine OneLoop"<>Name <> "\n \n \n"];




];


WriteLoopMassFermionSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName_,mixed_]:=Block[{i2,i3},

If[PrintDebgu,Print["Subroutine for 1 Loop Correction of ", Name];];
If[FreeQ[QuadruplePrecision,particle],stringQP="";,stringQP="QP";];

If[mixed==True,
MakeSubroutineTitle["OneLoop"<>NameP,Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",Name<>"2_1L",MixingName<>"_1L","ierr"},sphenoLoop];,
MakeSubroutineTitle["OneLoop"<>NameP,Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",Name<>"2_1L","ierr"},sphenoLoop];
];

dimMatrix = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[parameters,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];

WriteString[sphenoLoop, "Complex(dp) :: mat1a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat1"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat2"<>"("<>dimMatrix<>","<>dimMatrix<>") \n"];
WriteString[sphenoLoop, "Integer , Intent(inout):: ierr \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1, j2,j3,j4,il,i_count \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
WriteString[sphenoLoop, "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"),p2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(out) :: "<> Name <>"_1L("<>dimMatrix <>"),"<> Name <>"2_1L("<>dimMatrix <>") \n" ];
If[mixed==True,
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: " MixingName<>"_1L("<>dimMatrix <>","<>dimMatrix <>") \n" ];,
WriteString[sphenoLoop, "Complex(dp) :: " MixingName<>"_1L("<>dimMatrix <>","<>dimMatrix <>") \n" ];
];
WriteString[sphenoLoop, "Real(dp) :: "<> Name <>"_t("<>dimMatrix <>"),"<> Name <>"2_t("<>dimMatrix <>") \n" ];
WriteString[sphenoLoop, "Complex(dp) :: " MixingName<>"_t("<>dimMatrix <>","<>dimMatrix <>") \n" ];
WriteString[sphenoLoop, "Complex(dp) ::  phaseM, E"<>dimMatrix<>"("<>dimMatrix<>"), sigL("<>dimMatrix <>","<>dimMatrix <>"), sigR("<>dimMatrix <>","<>dimMatrix <>"), sigS("<>dimMatrix <>","<>dimMatrix <>") \n"];
WriteString[sphenoLoop, "Real(dp) :: "<>MixingName<>"a("<>dimMatrix<>","<>dimMatrix<>"), test(2), eig("<>dimMatrix<>") \n\n"];


WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];


For[i2=1,i2<=ToExpression[dimMatrix],
For[i3=1,i3<=ToExpression[dimMatrix],
MakeSPhenoCoupling[tree[[i2,i3]],"mat1a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
i3++;];
i2++;];

WriteString[sphenoLoop, "\n \n "];


WriteString[sphenoLoop,"Do il="<>dimMatrix <>",1,-1\n"];

WriteString[sphenoLoop,"sigL=0._dp \n"];
WriteString[sphenoLoop,"sigR=0._dp \n"];
WriteString[sphenoLoop,"sigS=0._dp \n"];
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,il]<> "\n"];

MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

AddLoopCorrectionRoutineSymmFermions[Name,MixingName,dimMatrix];

WriteString[sphenoLoop, "!---------------------------------------- \n"];
WriteString[sphenoLoop, "! Redoing Calculation using redefined p2 \n"];
WriteString[sphenoLoop, "!----------------------------------------- \n \n"];

WriteString[sphenoLoop,"i_count = 0 \n"];
WriteString[sphenoLoop,"p2_loop: Do  \n"];
WriteString[sphenoLoop,"i_count = i_count + 1 \n"];

WriteString[sphenoLoop,"sigL=0._dp \n"];
WriteString[sphenoLoop,"sigR=0._dp \n"];
WriteString[sphenoLoop,"sigS=0._dp \n"];
WriteString[sphenoLoop, "p2 = "<>Name<> "2_1L(iL)\n"];

MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

AddLoopCorrectionRoutineSymmFermions[Name,MixingName,dimMatrix];

WriteString[sphenoLoop,"If (p2.Ne.0._dp) Then \n"];
WriteString[sphenoLoop,"  test(1) = Abs("<>Name<>"2_1L(il)-p2)/p2\n"];
WriteString[sphenoLoop,"Else \n"];
WriteString[sphenoLoop,"  test(2) = Abs("<>Name<>"2_1L(il))\n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"If (Abs("<>Name<>"2_1L(il)).lt.1.0E-30_dp) Exit p2_loop \n"];
WriteString[sphenoLoop,"If (test(1).lt.0.1_dp*delta) Exit p2_loop \n"];
WriteString[sphenoLoop,"If(i_count.gt.30) then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Exit p2_loop \n"];
WriteString[sphenoLoop,"End if\n"];
WriteString[sphenoLoop,"End Do p2_loop \n"];
WriteString[sphenoLoop,"End Do \n \n"];


WriteString[sphenoLoop,"Iname = Iname -1 \n"];

WriteString[sphenoLoop,"End Subroutine OneLoop"<>NameP <> "\n \n \n"];


];


AddLoopCorrectionRoutineSymmFermions[Name_,MixingName_,dimMatrix_]:=Block[{},
WriteString[sphenoLoop,"mat1 = mat1a - 0.5_dp*(SigS + Transpose(SigS) + & \n"];
WriteString[sphenoLoop,"      & MatMul(Transpose(SigL),mat1a) + MatMul(SigR,mat1a) + & \n"];
WriteString[sphenoLoop,"      & MatMul(mat1a,Transpose(SigR)) + MatMul(mat1a,SigL)) \n \n"];

WriteString[sphenoLoop, "If (ForceRealMatrices) mat1 = Real(mat1,dp) \n"]; 
WriteString[sphenoLoop, "If (Maxval(Abs(Aimag(mat1))).Eq.0._dp) Then \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(Real(mat1,dp),Eig,"<>  MixingName <>"a,ierr,test) \n \n "];

WriteString[sphenoLoop, "  Do i1=1,"<>dimMatrix <>"\n"];
(* WriteString[sphenoLoop, "   If (Eig(i1).Lt.0._dp.And.(RotateNegativeFermionMasses)) Then \n"]; *)
WriteString[sphenoLoop, "   If (Eig(i1).Lt.0._dp) Then \n"];
WriteString[sphenoLoop, "    "<>Name<>"_t(i1) = - Eig(i1) \n"];
WriteString[sphenoLoop, "    "<>MixingName<>"_1L(i1,:) = (0._dp,1._dp)*" <>MixingName <>"a(i1,:) \n"];
WriteString[sphenoLoop, "   Else \n"];
WriteString[sphenoLoop, "    "<>Name<>"_t(i1) = Eig(i1) \n"];
WriteString[sphenoLoop, "    "<>MixingName<>"_1L(i1,:) = "<>MixingName<>"a(i1,:)\n"];
WriteString[sphenoLoop, "    End If \n"];
WriteString[sphenoLoop, "   End Do \n \n"];

WriteString[sphenoLoop, "Do i1=1,"<>ToString[ToExpression[dimMatrix]-1]<>"\n"];
WriteString[sphenoLoop, "  Do i2=i1+1,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "    If (Abs("<>Name<>"_t(i1)).Gt.Abs("<>Name<>"_t(i2))) Then \n"];
WriteString[sphenoLoop, "      Eig(1) = "<>Name<>"_t(i1) \n"];
WriteString[sphenoLoop, "      "<>Name<>"_t(i1) = "<>Name <>"_t(i2) \n"];
WriteString[sphenoLoop, "      "<>Name<>"_t(i2) = Eig(1) \n"];
WriteString[sphenoLoop, "      E"<>dimMatrix<>" = " <>MixingName<>"_1L(i1,:) \n"];
WriteString[sphenoLoop, "      "<>MixingName<>"_1L(i1,:) = "<>MixingName<>"_1L(i2,:) \n"];
WriteString[sphenoLoop, "      "<>MixingName<>"_1L(i2,:) = E"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "    End If \n"];
WriteString[sphenoLoop, "   End Do \n"];
WriteString[sphenoLoop, "End Do \n \n"];

WriteString[sphenoLoop, Name<>"_1L(iL) = "<>Name<>"_t(iL) \n"];
WriteString[sphenoLoop, Name<>"2_1L(iL) = "<>Name<>"_t(iL)**2 \n"];

WriteString[sphenoLoop, "Else \n \n"];

WriteString[sphenoLoop, "mat2 = Matmul( Transpose(Conjg( mat1) ), mat1 ) \n"];
WriteString[sphenoLoop, "Call Eigensystem"<>stringQP<>"(mat2, Eig, "<>MixingName<>"_1L, ierr, test) \n"];
WriteString[sphenoLoop, "mat2 = Matmul( Conjg("<>MixingName<>"_1L), Matmul( mat1, Transpose( Conjg("<>MixingName<>"_1L)))) \n"];
WriteString[sphenoLoop, "Do i1=1,"<>dimMatrix<>"\n"];
WriteString[sphenoLoop, "If (Abs(mat2(i1,i1)).gt.0._dp) Then \n"];
WriteString[sphenoLoop, "  phaseM = Sqrt( mat2(i1,i1) / Abs(mat2(i1,i1))) \n"];
WriteString[sphenoLoop, "  "<>MixingName<>"_1L(i1,:)= phaseM * "<>MixingName<>"_1L(i1,:) \n"];
WriteString[sphenoLoop, "End if \n"];

WriteString[sphenoLoop, "  If (Eig(i1).Le.0._dp) Then \n"];
WriteString[sphenoLoop, "    If (ErrorLevel.Ge.0) Then \n"];
WriteString[sphenoLoop, "      Write(10,*) 'Warning from Subroutine '//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop, "      Write(10,*) 'a mass squarred is negative: ',i1,Eig(i1) \n"];
WriteString[sphenoLoop, "      Write(*,*) 'Warning from Subroutine '//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop, "      Write(*,*) 'a mass squarred is negative: ',i1,Eig(i1) \n"];
WriteString[sphenoLoop, "      Call TerminateProgram \n"];
WriteString[sphenoLoop, "    End If \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) 'Warning from routine '//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) 'in the calculation of the masses' \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) 'occurred a negative mass squared!' \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) i1,Eig(i1) \n"];
WriteString[sphenoLoop, "  Eig(i1) = 1._dp \n"];
WriteString[sphenoLoop,"   SignOfMassChanged = .True. \n"];
WriteString[sphenoLoop, " End if \n"];


WriteString[sphenoLoop, "End Do \n"];
WriteString[sphenoLoop, Name <> "_1L = Sqrt( Eig ) \n \n"];
WriteString[sphenoLoop, Name <> "2_1L = Eig \n \n"];
WriteString[sphenoLoop, "End If \n \n"]; 



WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop, "  ierr = 0 \n"];
WriteString[sphenoLoop, "End If \n \n"];




];


WriteLoopMassFermionNonSymm[NameP_,particle_,parameters_,masses_,couplings_,contributions_, tree_, Name_,MixingName1_,MixingName2_, mixed_]:=Block[{i2,i3},

If[PrintDebug,Print["Subroutine for 1 Loop Correction of ", NameP];];
If[FreeQ[QuadruplePrecision,particle],stringQP="";,stringQP="QP";];

If[mixed==True,
MakeSubroutineTitle["OneLoop"<>NameP,Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",Name<>"2_1L",MixingName1<>"_1L",MixingName2<>"_1L","ierr"},sphenoLoop];,
MakeSubroutineTitle["OneLoop"<>NameP,Flatten[{parameters,masses,couplings}],{},{"delta",Name<>"_1L",Name<>"2_1L","ierr"},sphenoLoop];
];

dimMatrix = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[parameters,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];

WriteString[sphenoLoop, "Complex(dp) :: mat1a"<>"("<>dimMatrix<>","<>dimMatrix<>"), mat1"<>"("<>dimMatrix<>","<>dimMatrix<>") \n"];
WriteString[sphenoLoop, "Integer , Intent(inout):: ierr \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
WriteString[sphenoLoop, "Real(dp) :: mi2("<>dimMatrix<>"), test_m2("<>dimMatrix<>"), p2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(out) :: "<> Name <>"_1L("<>dimMatrix <>"),"<> Name <>"2_1L("<>dimMatrix <>") \n " ];
If[mixed==True,
WriteString[sphenoLoop,  "Complex(dp), Intent(out) :: "<>MixingName1<>"_1L("<>dimMatrix <>","<>dimMatrix <>"), "<>MixingName2<>"_1L("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];,
WriteString[sphenoLoop,  "Complex(dp) :: "<>MixingName1<>"_1L("<>dimMatrix <>","<>dimMatrix <>"), "<>MixingName2<>"_1L("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
];
WriteString[sphenoLoop, "Real(dp) :: "<> Name <>"_t("<>dimMatrix <>"),"<> Name <>"2_t("<>dimMatrix <>") \n " ];
WriteString[sphenoLoop,  "Complex(dp) :: "<>MixingName1<>"_t("<>dimMatrix <>","<>dimMatrix <>"), "<>MixingName2<>"_t("<>dimMatrix <>","<>dimMatrix <>"), sigL("<>dimMatrix <>","<>dimMatrix <>"), sigR("<>dimMatrix <>","<>dimMatrix <>"), sigS("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
WriteString[sphenoLoop, "Complex(dp) :: mat"<>"("<>dimMatrix<>","<>dimMatrix<>")=0._dp, mat2"<>"("<>dimMatrix<>","<>dimMatrix<>")=0._dp, phaseM \n\n"];
WriteString[sphenoLoop,  "Complex(dp) :: "<>MixingName1<>"2("<>dimMatrix <>","<>dimMatrix <>"), "<>MixingName2<>"2("<>dimMatrix <>","<>dimMatrix <>") \n \n " ];
WriteString[sphenoLoop,  "Real(dp) :: "<>MixingName1<>"1("<>dimMatrix <>","<>dimMatrix <>"), "<>MixingName2<>"1("<>dimMatrix <>","<>dimMatrix <>"), test(2) \n \n " ];


WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];


For[i2=1,i2<=ToExpression[dimMatrix],
For[i3=1,i3<=ToExpression[dimMatrix],
MakeSPhenoCoupling[tree[[i2,i3]],"mat1a("<>ToString[i2]<>","<>ToString[i3]<>")",sphenoLoop];
i3++;];
i2++;];

WriteString[sphenoLoop, "\n \n "];


WriteString[sphenoLoop,"Do il="<>dimMatrix <>",1,-1\n"];

WriteString[sphenoLoop,"sigL=0._dp \n"];
WriteString[sphenoLoop,"sigR=0._dp \n"];
WriteString[sphenoLoop,"sigS=0._dp \n"];
WriteString[sphenoLoop, "p2 = "<>SPhenoMassSq[particle,il]<> " \n"];

MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

WriteString[sphenoLoop,"mat1 = mat1a - SigS - MatMul(SigR,mat1a) - MatMul(mat1a,SigL) \n \n"];

WriteString[sphenoLoop, "mat2 = Matmul(Transpose(Conjg(mat1)),mat1) \n"];
WriteString[sphenoLoop, "If (ForceRealMatrices) mat2 = Real(mat2,dp) \n"]; 
WriteString[sphenoLoop, "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName2 <>"1,ierr,test) \n"];
WriteString[sphenoLoop, MixingName2<>"2 = "<>MixingName2<>"1 \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(mat2,"<>Name<>"2_t,"<>  MixingName2 <>"2,ierr,test) \n "];
WriteString[sphenoLoop, "End If \n \n"];

WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop, "  ierr = 0 \n"];
WriteString[sphenoLoop, "End If \n \n"];



WriteString[sphenoLoop, "!---------------------------------------- \n"];
WriteString[sphenoLoop, "! Redoing Calculation using redefined p2 \n"];
WriteString[sphenoLoop, "!----------------------------------------- \n \n"];

WriteString[sphenoLoop,"i_count = 0 \n"];
WriteString[sphenoLoop,"p2_loop: Do  \n"];
WriteString[sphenoLoop,"i_count = i_count + 1 \n"];

WriteString[sphenoLoop,"sigL=0._dp \n"];
WriteString[sphenoLoop,"sigR=0._dp \n"];
WriteString[sphenoLoop,"sigS=0._dp \n"];
WriteString[sphenoLoop, "p2 = "<>Name<> "2_t(iL)\n"];

MakeCall["Sigma1Loop"<>NameP,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

WriteString[sphenoLoop,"mat1 = mat1a - SigS - MatMul(SigR,mat1a) - MatMul(mat1a,SigL) \n \n"];

WriteString[sphenoLoop, "mat2 = Matmul(Transpose(Conjg(mat1)),mat1) \n"];
WriteString[sphenoLoop, "If (ForceRealMatrices) mat2 = Real(mat2,dp) \n"]; 
WriteString[sphenoLoop, "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName2 <>"1,ierr,test) \n"];
WriteString[sphenoLoop, MixingName2<>"2 = "<>MixingName2<>"1 \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(mat2,"<>Name<>"2_t,"<>  MixingName2 <>"2,ierr,test) \n "];
WriteString[sphenoLoop, "End If \n \n"];

WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop, "  ierr = 0 \n"];
WriteString[sphenoLoop, "End If \n \n"];


WriteString[sphenoLoop,Name<>"2_1L(il) = "<>Name<>"2_t(il) \n"];
WriteString[sphenoLoop,Name<>"_1L(il) = Sqrt("<>Name<>"2_1L(il)) \n \n"];

WriteString[sphenoLoop,"If (p2.Ne.0._dp) Then \n"];
WriteString[sphenoLoop,"  test(1) = Abs("<>Name<>"2_1L(il)-p2)/p2\n"];
WriteString[sphenoLoop,"Else \n"];
WriteString[sphenoLoop,"  test(2) = Abs("<>Name<>"2_1L(il))\n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"If (Abs("<>Name<>"2_1L(il)).lt.1.0E-30_dp) Exit p2_loop \n"];
WriteString[sphenoLoop,"If (test(1).lt.0.1_dp*delta) Exit p2_loop \n"];
WriteString[sphenoLoop,"If(i_count.gt.30) then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Exit p2_loop \n"];
WriteString[sphenoLoop,"End if\n"];
WriteString[sphenoLoop,"End Do p2_loop \n"];



WriteString[sphenoLoop, "mat2 = Matmul(mat1,Transpose(Conjg(mat1))) \n"];
WriteString[sphenoLoop, "If (ForceRealMatrices) mat2 = Real(mat2,dp) \n"]; 
WriteString[sphenoLoop, "If (Maxval(Abs(Aimag(mat2))).Eq.0._dp) Then \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(Real(mat2,dp),"<>Name<>"2_t,"<>  MixingName1 <>"1,ierr,test) \n \n \n"];
WriteString[sphenoLoop, MixingName1<>"2 = "<>MixingName1<>"1 \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "Call EigenSystem"<>stringQP<>"(mat2,"<>Name<>"2_t,"<>  MixingName1 <>"2,ierr,test) \n \n \n"];
WriteString[sphenoLoop, "End If \n"];
WriteString[sphenoLoop, MixingName1 <>"2 = Conjg("<>MixingName1<>"2) \n \n"];

WriteString[sphenoLoop,"If ((ierr.Eq.-8).Or.(ierr.Eq.-9)) Then \n"];
WriteString[sphenoLoop,"  Write(ErrCan,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Possible numerical problem in \"//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"  If (ErrorLevel.Eq.2) Call TerminateProgram \n"];
WriteString[sphenoLoop, "  ierr = 0 \n"];
WriteString[sphenoLoop, "End If \n \n"];

WriteString[sphenoLoop, "mat2 = Matmul(Matmul( Conjg("<>MixingName1<>"2),mat1),Transpose( Conjg("<>MixingName2<>"2))) \n"];
WriteString[sphenoLoop, "Do i1=1,"<>dimMatrix <>"\n"];
WriteString[sphenoLoop, "If (Abs(mat2(i1,i1)).gt.0._dp) Then \n"];
WriteString[sphenoLoop, "phaseM = mat2(i1,i1) / Abs(mat2(i1,i1)) \n"];
WriteString[sphenoLoop, MixingName2<>"2(i1,:) = phaseM *"<>MixingName2<>"2(i1,:) \n "];
WriteString[sphenoLoop, "End if \n"];
WriteString[sphenoLoop, "End Do \n \n"];

WriteString[sphenoLoop, MixingName1<>"_1L = "<>MixingName1<>"2 \n "];
WriteString[sphenoLoop, MixingName2<>"_1L = "<>MixingName2<>"2 \n "];


WriteString[sphenoLoop,"End Do  \n \n"];


WriteString[sphenoLoop,"Iname = Iname -1 \n"];

WriteString[sphenoLoop,"End Subroutine OneLoop"<>NameP <> "\n \n \n"];


];


WriteScalarProp[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];

dimString = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1,j2,j3,j4, gO1, gO2, ierr \n \n \n"];
WriteString[sphenoLoop,"res = 0._dp \n \n"];


For[i=1,i<=Length[contributions],

WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

WriteString[sphenoLoop,"sumI = 0._dp \n \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];

type=contributions[[i,4]];
If[type =!= SSVV && type =!= SSSS,
dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];

If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[type===FFS || type===FFV,
If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "G0m2 = Gloop(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = -2._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"    SumI(gO1,gO2) = (coupL1*coupL2+coupR1*coupR2)*G0m2 & \n"];
WriteString[sphenoLoop,"                & + (coupL1*coupR2+coupR1*coupL2)*B0m2 \n"];
WriteString[sphenoLoop,"   End Do \n"];
WriteString[sphenoLoop,"End Do \n"];


If[AntiField[particle]===particle,
factor = 2 contributions[[i,6]]*contributions[[i,5]];,
factor = contributions[[i,6]]*contributions[[i,5]];
];,

ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];


If[getType[contributions[[i,1]]]===S,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];
scalarpart=getBlank[contributions[[i,1]]];
indexScalar=i1;,
scalarpart=getBlank[contributions[[i,2]]];
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
indexScalar=i2;
];


If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSV,
(* If[FreeQ[GoldstoneGhost,particle]\[Equal]True ||  FreeQ[GoldstoneGhost,scalarpart]\[Equal]True, *)
	WriteString[sphenoLoop, "F0m2 = FloopRXi(p2,"<>m12<>","<>m22<>") \n"]; (*,
	WriteString[sphenoLoop, "If ("<>ToString[indexScalar]<>".eq.1) Then \n"];
	WriteString[sphenoLoop, "F0m2 = Floop(p2,0._dp,"<>m22<>") \n"];
	WriteString[sphenoLoop, "Else \n"];
	WriteString[sphenoLoop, "F0m2 = Floop(p2,"<>m12<>","<>m22<>") \n"];
			WriteString[sphenoLoop, "End If \n"];
];*)
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
   WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*coup2*F0m2 \n"];
   WriteString[sphenoLoop,"   End Do \n"];
   WriteString[sphenoLoop,"End Do \n"];
If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor =contributions[[i,6]]*contributions[[i,5]];
];,
SSS,
   WriteString[sphenoLoop, "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
   WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 = Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*coup2*B0m2 \n"];
   WriteString[sphenoLoop,"   End Do \n"];
   WriteString[sphenoLoop,"End Do \n"];
If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor = contributions[[i,6]]*contributions[[i,5]];
];,
SVV, 
  (*  WriteString[sphenoLoop, "F0m2 =  7._dp/2._dp*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"]; *)
(*
   WriteString[sphenoLoop, "F0m2 = 4._dp*Real(B0(p2,"<>m12<>","<>m22<>")-0.5_dp*rMS,dp)  \n "];
   WriteString[sphenoLoop, "F0m2 = F0m2 -0.25_dp*(A0("<>m22<>")/"<>m12<>"*(-1+RXi)+A0("<>m12<>")/"<>m22<>"*(-1+RXi))   \n "];
*)
  WriteString[sphenoLoop, "F0m2 = SVVloop(p2,"<>m12<>","<>m22<>")   \n "];
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
   WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ") \n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*coup2*F0m2 \n"];
   WriteString[sphenoLoop,"   End Do \n"];
   WriteString[sphenoLoop,"End Do \n"];
  If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor = contributions[[i,6]]*contributions[[i,5]];
];,
GGS, 
  (*  WriteString[sphenoLoop, "F0m2 = Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"]; *)
   WriteString[sphenoLoop, "F0m2 = -Real(B0(p2,"<>m12<>"*RXi,"<>m22<>"*RXi),dp) \n "];
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
   WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 =  " <>ToString[getSPhenoCoupling[AntiField/@contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> " \n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*coup2*F0m2 \n"];
   WriteString[sphenoLoop,"   End Do \n"];
   WriteString[sphenoLoop,"End Do \n"];
  If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor = contributions[[i,6]]*contributions[[i,5]];
];
];
];

If[Head[factor]===Integer,factor=1. factor;];
factor = SPhenoForm[factor];

WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];,


If[FreeQ[massless,contributions[[i,1]]],
dim1=getGenSPheno[contributions[[i,1]]];
If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];

m12 = SPhenoMassSq[contributions[[i,1]],i1] ;

ind1=MakeIndicesCoupling[{particle,gO1},{particle,gO2},{contributions[[i,1]],i1},{contributions[[i,2]],i1},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSVV,
	  WriteString[sphenoLoop, "A0m2 = 0.75_dp*A0("<>m12<>") + 0.25_dp*RXi*A0("<>m12<>"*RXi) - 0.5_dp*"<>m12<>"*rMS \n"];
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
  WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = coup1*A0m2 \n"];
WriteString[sphenoLoop,"   End Do \n"]; 
   WriteString[sphenoLoop,"End Do \n"];
factor = 4contributions[[i,6]]*contributions[[i,5]];,
SSSS,
   WriteString[sphenoLoop, "A0m2 = A0("<>m12<>") \n"];
   WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
  WriteString[sphenoLoop, "  Do gO2 = gO1, "<> dimString <>"\n"]; 
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI(gO1,gO2) = -coup1*A0m2 \n"];
  WriteString[sphenoLoop,"   End Do \n"];
   WriteString[sphenoLoop,"End Do \n"];
factor=contributions[[i,6]];
];

If[Head[factor]===Integer,factor=1. factor;];

factor = SPhenoForm[factor];

WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
];
];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End If \n "];
];
i++;];

WriteString[sphenoLoop,"\n\n"];

WriteString[sphenoLoop, "Do gO2 = 1, "<> dimString <>"\n"];
WriteString[sphenoLoop, "  Do gO1 = gO2+1, "<> dimString <>"\n"];
If[conj[particle]=!=particle,
WriteString[sphenoLoop,"     res(gO1,gO2) = Conjg(res(gO2,gO1))  \n"];,
WriteString[sphenoLoop,"     res(gO1,gO2) = (res(gO2,gO1))  \n"];
];
WriteString[sphenoLoop,"   End Do \n"];
WriteString[sphenoLoop,"End Do \n \n"];


WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];


WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];

];


WriteScalarPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res\n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,ierr \n \n \n"];
WriteString[sphenoLoop,"res = 0._dp \n \n"];


For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

WriteString[sphenoLoop,"sumI = 0._dp \n \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];
type=contributions[[i,4]];
If[type =!= SSVV && type =!= SSSS,
dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];

If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[type===FFS || type===FFV,
If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "G0m2 = Gloop(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = -2._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"    SumI = (coupL1*coupL2+coupR1*coupR2)*G0m2 & \n"];
WriteString[sphenoLoop,"                & + (coupL1*coupR2+coupR1*coupL2)*B0m2 \n"];
If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor =contributions[[i,6]]*contributions[[i,5]];
];,

ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];


If[getType[contributions[[i,1]]]===S,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSV,
   WriteString[sphenoLoop, "F0m2 = FloopRXi(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
   WriteString[sphenoLoop,"    SumI = coup1*coup2*F0m2 \n"];
If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor =contributions[[i,6]]*contributions[[i,5]];
];,
SSS,
   WriteString[sphenoLoop, "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 = Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
   WriteString[sphenoLoop,"    SumI = coup1*coup2*B0m2 \n"];
If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor =contributions[[i,6]]*contributions[[i,5]];
];,
SVV, 
   WriteString[sphenoLoop, "F0m2 = SVVloop(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
  WriteString[sphenoLoop,"coup2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
   WriteString[sphenoLoop,"    SumI = coup1*coup2*F0m2 \n"];
 If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor =contributions[[i,6]]*contributions[[i,5]];
];,
GGS, 
   WriteString[sphenoLoop, "F0m2 =  -Real(B0(p2,"<>m12<>"*RXi,"<>m22<>"*RXi),dp) \n "];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
                   WriteString[sphenoLoop,"coup2 =  " <>ToString[getSPhenoCoupling[AntiField/@contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> " \n"];
                   WriteString[sphenoLoop,"    SumI = coup1*coup2*F0m2 \n"];
  If[conj[particle]===particle,
factor =2*contributions[[i,6]]*contributions[[i,5]];,
factor = contributions[[i,6]]*contributions[[i,5]];
];
];
];

If[Head[factor]===Integer,factor=1. factor;];
factor = SPhenoForm[factor];

WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];,



dim1=getGenSPheno[contributions[[i,1]]];
If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];


m12 = SPhenoMassSq[contributions[[i,1]],i1] ;

ind1=MakeIndicesCoupling[{particle,gO1},{particle,gO2},{contributions[[i,1]],i1},{contributions[[i,2]],i1},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSVV,
	  WriteString[sphenoLoop, "A0m2 =  0.75_dp*A0("<>m12<>") + 0.25_dp*RXi*A0("<>m12<>"*RXi) - 0.5_dp*"<>m12<>"*rMS \n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI = coup1*A0m2 \n"];
factor = 4contributions[[i,6]]*contributions[[i,5]];,
SSSS,
   WriteString[sphenoLoop, "A0m2 = A0("<>m12<>") \n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI = -coup1*A0m2 \n"];
factor=1 contributions[[i,6]];
] ;


If[Head[factor]===Integer,factor=1. factor;];

factor = SPhenoForm[factor];



WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];

];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
i++;];

WriteString[sphenoLoop,"\n\n"];

WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];


WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];

];





WriteFermionProp[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

dimString = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: SigL("<>dimString<>","<>dimString<>"),SigR("<>dimString<>","<>dimString<>"), SigS("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL("<>dimString<>","<>dimString<>"), sumR("<>dimString<>","<>dimString<>"), sumS("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];

WriteString[sphenoLoop,"SigL = Cmplx(0._dp,0._dp,dp) \n"];
WriteString[sphenoLoop,"SigR = Cmplx(0._dp,0._dp,dp) \n"];
WriteString[sphenoLoop,"SigS = Cmplx(0._dp,0._dp,dp) \n \n"];

For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];

type=contributions[[i,4]];

dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];



If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
WriteString[sphenoLoop,"SumS = 0._dp \n"];
WriteString[sphenoLoop,"sumR = 0._dp \n"];
WriteString[sphenoLoop,"sumL = 0._dp \n"];





ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];


If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];


If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
WriteString[sphenoLoop, "  Do gO2 = 1, "<> dimString <>"\n"];

If[type ===FFS,
WriteString[sphenoLoop, "B1m2 = -1._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = 2._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS(gO1,gO2) = coupR1*coupL2*B0m2 \n"];
WriteString[sphenoLoop,"sumR(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
WriteString[sphenoLoop,"sumL(gO1,gO2) = coupL1*coupL2*B1m2 \n"];,
WriteString[sphenoLoop, "B1m2 = -2._dp*(B1(p2,"<>m12<>","<>m22<>") + 0.5_dp*rMS) \n"];
WriteString[sphenoLoop, "B0m2 = -8._dp*"<>m1<>"*(B0(p2,"<>m12<>","<>m22<>") - 0.5_dp*rMS) \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS(gO1,gO2) = coupL1*coupR2*B0m2 \n"];
WriteString[sphenoLoop,"sumR(gO1,gO2) = coupL1*coupL2*B1m2 \n"];
WriteString[sphenoLoop,"sumL(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
];
WriteString[sphenoLoop,"   End Do \n"];
WriteString[sphenoLoop,"End Do \n"];

factor = contributions[[i,6]]*contributions[[i,5]];

If[Head[factor]===Integer, factor=1. factor;];

factor=SPhenoForm[factor];

WriteString[sphenoLoop,"SigL = SigL +"<>factor<>"* sumL\n"];
WriteString[sphenoLoop,"SigR = SigR +"<>factor<>"* sumR \n"];
WriteString[sphenoLoop,"SigS = SigS +"<>factor<>"* sumS \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];

If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n "];
];
i++;];

WriteString[sphenoLoop,"\n\n"];

WriteString[sphenoLoop,"SigL = oo16pi2*SigL \n \n"];
WriteString[sphenoLoop,"SigR = oo16pi2*SigR \n \n"];
WriteString[sphenoLoop,"SigS = oo16pi2*SigS \n \n"];




WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];

];


WriteFermionPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];


WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: Sig \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumS,sumR,sumL \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];

WriteString[sphenoLoop,"Sig = Cmplx(0._dp,0._dp,dp) \n"];

For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];

type=contributions[[i,4]];

dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];



If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
WriteString[sphenoLoop,"SumR = 0._dp \n"];
WriteString[sphenoLoop,"SumL = 0._dp \n"];
WriteString[sphenoLoop,"SumS = 0._dp \n"];


ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
If[type ===FFS,
WriteString[sphenoLoop, "B1m2 = -1._dp*B1(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = -2._dp*"<>m1<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS = coupR1*coupL2*B0m2 \n"];
WriteString[sphenoLoop,"sumR = coupR1*coupR2*B1m2 \n"];
WriteString[sphenoLoop,"sumL = coupL1*coupL2*B1m2 \n"];,
WriteString[sphenoLoop, "B1m2 = -2._dp*(B1(p2,"<>m12<>","<>m22<>")+ 0.5_dp*rMS) \n"];
WriteString[sphenoLoop, "B0m2 = -8._dp*"<>m1<>"*(B0(p2,"<>m12<>","<>m22<>") - 0.5_dp*rMS) \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS = coupL1*coupR2*B0m2 \n"];
WriteString[sphenoLoop,"sumR = coupL1*coupL2*B1m2 \n"];
WriteString[sphenoLoop,"sumL = coupR1*coupR2*B1m2 \n"];
];

factor = contributions[[i,6]]*contributions[[i,5]];

If[Head[factor]===Integer, factor=1. factor;];

factor=SPhenoForm[factor];

WriteString[sphenoLoop,"Sig = Sig +"<>factor<>"*(sumS + "<>ToString[SPhenoMass[particle]]<>"*(sumL+sumR))\n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
i++;];

WriteString[sphenoLoop,"\n\n"];

WriteString[sphenoLoop,"Sig = oo16pi2*Sig \n \n"];

WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];

];


WriteFermionPropNonSymm[Name_,particle_,masses_,couplings_,contributions_,setOnShell_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sigL","sigR","sigS"},sphenoLoop];

dimString = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: SigL("<>dimString<>","<>dimString<>"),SigR("<>dimString<>","<>dimString<>"), SigS("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL("<>dimString<>","<>dimString<>"), sumR("<>dimString<>","<>dimString<>"), sumS("<>dimString<>","<>dimString<>") \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];

WriteString[sphenoLoop,"SigL = Cmplx(0._dp,0._dp,dp) \n"];
WriteString[sphenoLoop,"SigR = Cmplx(0._dp,0._dp,dp) \n"];
WriteString[sphenoLoop,"SigS = Cmplx(0._dp,0._dp,dp) \n \n"];

For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];
type=contributions[[i,4]];

dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];



If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
WriteString[sphenoLoop,"SumS = 0._dp \n"];
WriteString[sphenoLoop,"sumR = 0._dp \n"];
WriteString[sphenoLoop,"sumL = 0._dp \n"];





ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "Do gO1 = 1, "<> dimString <>"\n"];
WriteString[sphenoLoop, "  Do gO2 = 1, "<> dimString <>"\n"];

If[type ===FFS,
If[setOnShell==False,
WriteString[sphenoLoop, "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];,
WriteString[sphenoLoop, "If(gO1.eq.gO2) Then \n"];
WriteString[sphenoLoop, "B1m2 = -0.5_dp*Real(B1("<>SPhenoMassSq[particle,gO1]<>","<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "B0m2 = "<>m1<>"*Real(B0("<>SPhenoMassSq[particle,gO1]<>","<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "End If \n"];
];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS(gO1,gO2) = coupR1*coupL2*B0m2 \n"];
WriteString[sphenoLoop,"sumR(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
WriteString[sphenoLoop,"sumL(gO1,gO2) = coupL1*coupL2*B1m2 \n"];,

If[setOnShell==False,
WriteString[sphenoLoop, "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>")+ 0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop, "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>")-0.5_dp*rMS,dp) \n"];,
WriteString[sphenoLoop, "If(gO1.eq.gO2) Then \n"];
WriteString[sphenoLoop, "B1m2 = - Real(B1("<>SPhenoMassSq[particle,gO1]<>","<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "B0m2 = -4._dp*"<>m1<>"*Real(B0("<>SPhenoMassSq[particle,gO1]<>","<>m12<>","<>m22<>")-0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop, "Else \n"];
WriteString[sphenoLoop, "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>")+ 0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop, "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>")-0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop, "End If \n"];
];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS(gO1,gO2) = coupL1*coupR2*B0m2 \n"];
WriteString[sphenoLoop,"sumR(gO1,gO2) = coupL1*coupL2*B1m2 \n"];
WriteString[sphenoLoop,"sumL(gO1,gO2) = coupR1*coupR2*B1m2 \n"];
];

WriteString[sphenoLoop,"   End Do \n"];
WriteString[sphenoLoop,"End Do \n"];

factor = contributions[[i,6]]*contributions[[i,5]];
If[Head[factor]===Integer,factor=1. factor;];
factor = SPhenoForm[factor];

WriteString[sphenoLoop,"SigL = SigL +"<>factor<>"* sumL\n"];
WriteString[sphenoLoop,"SigR = SigR +"<>factor<>"* sumR \n"];
WriteString[sphenoLoop,"SigS = SigS +"<>factor<>"* sumS \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];

If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
i++;];

WriteString[sphenoLoop,"SigL = oo16pi2*SigL \n \n"];
WriteString[sphenoLoop,"SigR = oo16pi2*SigR \n \n"];
WriteString[sphenoLoop,"SigS = oo16pi2*SigS \n \n"];




WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];

];


WriteFermionPropNonSymmSingle[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];

dimString = ToString[getGenSPheno[particle]];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: Sig \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumL, sumR, sumS \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2,B1m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];

WriteString[sphenoLoop,"Sig = Cmplx(0._dp,0._dp,dp) \n"];

For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];
type=contributions[[i,4]];

dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];



If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
WriteString[sphenoLoop,"SumS = 0._dp \n"];
WriteString[sphenoLoop,"sumR = 0._dp \n"];
WriteString[sphenoLoop,"sumL = 0._dp \n"];





ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];


If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
If[type ===FFS,
WriteString[sphenoLoop, "B1m2 = -0.5_dp*Real(B1(p2,"<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop, "B0m2 = "<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>"),dp) \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS = coupR1*coupL2*B0m2 \n"];
WriteString[sphenoLoop,"sumR = coupR1*coupR2*B1m2 \n"];
WriteString[sphenoLoop,"sumL = coupL1*coupL2*B1m2 \n"];,
WriteString[sphenoLoop, "B1m2 = - Real(B1(p2,"<>m12<>","<>m22<>")+ 0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop, "B0m2 = -4._dp*"<>m1<>"*Real(B0(p2,"<>m12<>","<>m22<>")-0.5_dp*rMS,dp) \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"coupR2 =  Conjg(" <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind2<> ")\n"];
WriteString[sphenoLoop,"SumS = coupL1*coupR2*B0m2 \n"];
WriteString[sphenoLoop,"sumR = coupL1*coupL2*B1m2 \n"];
WriteString[sphenoLoop,"sumL = coupR1*coupR2*B1m2 \n"];
];


factor =SPhenoForm[1. contributions[[i,6]]*contributions[[i,5]]];

WriteString[sphenoLoop,"Sig = Sig +"<>factor<>"*(sumS + "<>ToString[SPhenoMass[particle]]<>"*(sumL+sumR))\n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];


If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
i++;];

WriteString[sphenoLoop,"\n\n"];

WriteString[sphenoLoop,"Sig = oo16pi2*Sig \n \n"];




WriteString[sphenoLoop, "End Subroutine Sigma1Loop"<>Name  <>" \n \n"];

];


WriteHeaderLoopMasses:=Block[{i,dim,dim2},
WriteCopyRight[sphenoLoop];
WriteString[sphenoLoop,"Module LoopMasses_"<>ModelName<>" \n \n"];
WriteString[sphenoLoop,"Use Control \n"];
WriteString[sphenoLoop,"Use Couplings_"<>ModelName<>" \n"];
WriteString[sphenoLoop,"Use LoopFunctions \n"];
WriteString[sphenoLoop,"Use Mathematics \n"];
WriteString[sphenoLoop,"Use MathematicsQP \n"];
WriteString[sphenoLoop,"Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoLoop,"Use StandardModel \n"];
WriteString[sphenoLoop,"Use Tadpoles_"<>ModelName<>" \n "];
If[SupersymmetricModel=!=False,
WriteString[sphenoLoop,"Use EffectivePotential_"<>ModelName<>" \n "];
WriteString[sphenoLoop,"Use Pole2L_"<>ModelName<>" \n "];
];
WriteString[sphenoLoop,"Use SusyMasses_"<>ModelName<>" \n \n"];


If[UseHiggs2LoopMSSM==True,
WriteString[sphenoLoop,"Use TwoLoopHiggsMass_SARAH \n \n"];
];

For[k=1,k<=Length[SA`LoopMassesParticle],
i=Position[ListTree,SPhenoMass[SA`LoopMassesParticle[[k]]]][[1,1]];
If[FreeQ[SMParticles,ListMassES[[i,1]]] || getGen[ListMassES[[i,1]]]=!=3 || (ListMassES[[i,1]]===Neutrino && FreeQ[massless,Neutrino]),

(* For[i=1,i\[LessEqual]Length[ListTree], *)
dim="("<>ToString[Length[ListTree[[i,3]]]]<>")";
dim2="("<>ToString[Length[ListTree[[i,3]]]]<>","<>ToString[Length[ListTree[[i,3]]]]<>")";
If[Length[ListTree[[i,2]]]==0,
WriteString[sphenoLoop,"Real(dp), Private :: "<>SPhenoForm[ListTree[[i,1]]] <>"_1L"<>dim<>", "<>SPhenoForm[ListTree[[i,1]]] <>"2_1L"<>dim<>"  \n"];
WriteString[sphenoLoop,"Complex(dp), Private :: "<>SPhenoForm[ListTree[[i,2]]] <>"_1L"<>dim2<>"  \n"];,
WriteString[sphenoLoop,"Real(dp), Private :: "<>SPhenoForm[ListTree[[i,1]]] <>"_1L"<>dim<>", "<>SPhenoForm[ListTree[[i,1]]] <>"2_1L"<>dim<>"  \n"];
WriteString[sphenoLoop,"Complex(dp), Private :: "<>SPhenoForm[ListTree[[i,2,1]]] <>"_1L"<>dim2<>","<>SPhenoForm[ListTree[[i,2,2]]] <>"_1L"<>dim2<>"\n"];
];
(* i++;]; *)
];
k++;];

For[i=1,i<=Length[listNotMixedMasses],
If[listNotMixedMasses[[i,4]]=!=0,
If[getGenSPheno[listNotMixedMasses[[i,1]]]==1, 
dim="";,
dim = "("<>ToString[getGenSPheno[listNotMixedMasses[[i,1]]]]<>")";
];

(*If[Length[Dimensions[listNotMixedMasses[[i,5]]]]\[Equal]2,
dim="("<>ToString[Length[listNotMixedMasses[[i,5]]]]<>")";,
dim="";
]; *)
WriteString[sphenoLoop,"Real(dp), Private :: "<>listNotMixedMasses[[i,2]] <>"_1L"<>dim<>", "<>listNotMixedMasses[[i,2]]  <>"2_1L"<>dim<>"  \n"];
];
i++;];


(* WriteString[sphenoLoop,"Logical::SPA_Convention \n"]; *)

If[SupersymmetricModel=!=False,
WriteString[sphenoLoop,"Real(dp), save :: rMS = 0._dp \n"];,
WriteString[sphenoLoop,"Real(dp), save :: rMS = 1._dp \n"];
];

If[SupersymmetricModel=!=False,
WriteString[sphenoLoop, "Real(dp) :: pi2A0  \n"];
WriteString[sphenoLoop, "Real(dp) :: ti_ep2L("<>ToString[getGen[HiggsBoson]]<>")  \n"];
WriteString[sphenoLoop, "Real(dp) :: pi_ep2L("<>ToString[getGen[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>")\n"];
WriteString[sphenoLoop, "Real(dp) :: Pi2S_EffPot("<>ToString[getGen[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>")\n"];
WriteString[sphenoLoop,"Real(dp) :: PiP2S_EffPot("<>ToString[getGen[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>")\n"];
];
WriteString[sphenoLoop,"Contains \n \n"];

];


WriteLoopTadpole[Lvevs_,particle_,masses_,couplings_,contributions_]:=Block[{i,jj,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},

If[PrintDebug,Print["Subroutien for 1 Loop Tadpoles: ", Lvevs];];


MakeSubroutineTitle["OneLoopTadpoles"<>ToString[particle],Flatten[{Lvevs,masses,couplings}],{},{"tadpoles"},sphenoLoop];

(* dimString=ToString[Length[Lvevs]]; *)
dimString=ToString[getGen[particle]];
WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
MakeVariableList[Lvevs,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Integer :: i1,i2, gO1, gO2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL, coupR, coup, temp, res, A0m, sumI("<>dimString<> ")  \n"];
WriteString[sphenoLoop, "Real(dp) :: m1 \n"];
WriteString[sphenoLoop, "Complex(dp), Intent(out) :: tadpoles("<>dimString<> ") \n"];

WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = 'OneLoopTadpoles"<>ToString[particle]<>"'\n \n"];

WriteString[sphenoLoop,"tadpoles = 0._dp \n \n"];

For[i=1,i<=Length[contributions],
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If ("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>") Then \n"];
];

type=contributions[[i,4]];
dim=getGenSPheno[contributions[[i,1]]];

If[SPhenoOnlyForHM=!=True,
If[dim > 1, WriteString[sphenoLoop,"Do i1 = 1, "<> ToString[dim] <> "\n "];];,
If[dim > 1, WriteString[sphenoLoop,"Do i1 = "<>ToString[getGenSPhenoStart[contributions[[i,1]]]]<>", "<> ToString[dim] <> "! Landau gauge only for HM project \n  "];];
];

ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i1},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];

m1 = SPhenoMass[contributions[[i,1]],i1];
m12=SPhenoMassSq[contributions[[i,1]],i1];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SVV,
	(*  WriteString[sphenoLoop, "A0m = A0("<>m12<>") \n"]; *)
         WriteString[sphenoLoop, "A0m = 3._dp*A0("<>m12<>")+RXi*A0("<>m12<>"*RXi) - 2._dp*"<>m12<>"*rMS \n"];
	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
	WriteString[sphenoLoop,"    coup = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
	WriteString[sphenoLoop,"    sumI(gO1) = coup*A0m \n"];
	WriteString[sphenoLoop,"  End Do \n \n"];,
SSS,
	WriteString[sphenoLoop, "A0m = A0("<>m12<>") \n"];
	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
	WriteString[sphenoLoop,"   coup = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
	WriteString[sphenoLoop,"   sumI(gO1) = -coup*A0m \n"];
	WriteString[sphenoLoop,"  End Do \n \n"];,
FFS,
	WriteString[sphenoLoop, "A0m = 2._dp*"<>m1<>"*A0("<>m12<>") \n"];
	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
	WriteString[sphenoLoop,"   coupL = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
         WriteString[sphenoLoop,"   coupR = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
	WriteString[sphenoLoop,"   sumI(gO1) = (coupL+coupR)*A0m \n"];
	WriteString[sphenoLoop,"  End Do \n \n"];,
GGS,
	(* WriteString[sphenoLoop, "A0m = -2._dp*A0("<>m12<>") \n"]; *)
         WriteString[sphenoLoop, "A0m = 1._dp*A0("<>m12<>"*RXi) \n"];
	WriteString[sphenoLoop, "  Do gO1 = 1, "<> dimString <>"\n"];
	WriteString[sphenoLoop,"    coup = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
	WriteString[sphenoLoop,"    sumI(gO1) = coup*A0m \n"];
	WriteString[sphenoLoop,"  End Do \n \n"];
];

factor = 2*contributions[[i,6]]*contributions[[i,5]];

If[Head[factor]===Integer,factor=1. factor;];
factor = SPhenoForm[factor];

WriteString[sphenoLoop,"tadpoles =  tadpoles + "<>factor<>"*sumI \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];

If[dim > 1, WriteString[sphenoLoop,"End Do \n "];];
If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
i++;];


WriteString[sphenoLoop,"\n\n\n"];
(*
If[SPhenoOnlyForHM=!=True,
For[i=1,i\[LessEqual]Length[Lvevs],
 WriteString[sphenoLoop,"tadpoles("<>ToString[i] <>") = oo16pi2*tadpoles("<>ToString[i] <>") \n"]; 
i++;];,
For[i=1,i\[LessEqual]Length[SA`VEVsHOMreal]+Length[SA`VEVsHOMcomplex],
 WriteString[sphenoLoop,"tadpoles("<>ToString[i] <>") = oo16pi2*tadpoles("<>ToString[i] <>") \n"]; 
i++;];
]; *)
 WriteString[sphenoLoop,"tadpoles = oo16pi2*tadpoles \n"]; 



WriteString[sphenoLoop, "Iname = Iname - 1 \n"];
WriteString[sphenoLoop,"End Subroutine OneLoopTadpoles"<>ToString[particle]<>" \n \n"];


];



WriteVectorPropSingle[Name_,particle_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},
MakeSubroutineTitle["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2, B1m2, H0m2, B22m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2, A0m12, A0m22 \n"];
WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2, coup3, temp, sumI \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
WriteString[sphenoLoop,"res = 0._dp \n \n"];

For[i=1,i<=Length[contributions],
type=contributions[[i,4]];
If[type =!= VVVV && type =!= SSVV,
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];
WriteString[sphenoLoop,"sumI = 0._dp \n \n"];
];

If[type =!= VVVV && type =!= SSVV,
dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];

If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[type===FFV,

If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "H0m2 = Hloop(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = 4._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"    SumI = (Abs(coupL1)**2+Abs(coupR1)**2)*H0m2 & \n"];
WriteString[sphenoLoop,"                & + (Real(Conjg(coupL1)*coupR1,dp))*B0m2 \n"];
If[conj[particle]===particle,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
];,

ind1=MakeIndicesCoupling[{AntiField[particle],gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)][[1]];
ind2=StringReplace[ind1,"gO1"->"gO2"];

If[getType[contributions[[i,1]]]===V,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSV,
 (*  WriteString[sphenoLoop, "B22m2 = -4._dp*B00(p2,"<>m12<>","<>m22<>")  \n"]; *)
   WriteString[sphenoLoop, "B22m2 = VSSloop(p2,"<>m12<>","<>m22<>")  \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B22m2 \n"];
   If[conj[particle]===particle,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
];,
VVV,
  (*  WriteString[sphenoLoop, "B0m2 = 10._dp*B00(p2,"<>m12<>","<>m22<>")+("<>m12<>"+"<>m22<>"+4._dp*p2)*B0(p2,"<>m12<>","<>m22<>")\n"];
   WriteString[sphenoLoop, "A0m12 = A0("<>m12<>") \n"];
   WriteString[sphenoLoop, "A0m22 =A0("<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 = Conjg(coup1) \n"];
   WriteString[sphenoLoop,"    SumI = -2._dp*rMS*("<>m12<>"+"<>m22<>"-p2/3._dp)+A0m12+A0m22+B0m2  \n"];
   WriteString[sphenoLoop,"    SumI = -SumI*coup1*coup2 \n"]; *)
       WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
       WriteString[sphenoLoop,"coup2 = Conjg(coup1) \n"];
       WriteString[sphenoLoop,"    SumI = -VVVloop(p2,"<>m12<>","<>m22<>")*coup1*coup2 \n"];
 If[conj[particle]===particle,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
];,
SVV, 
  (*  WriteString[sphenoLoop, "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"]; *)
 WriteString[sphenoLoop, "B0m2 = VVSloop(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"    SumI = Abs(coup1)**2*B0m2 \n"];
 If[conj[particle]===particle,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
];,
GGV,
WriteString[sphenoLoop,"SumI = 0._dp \n"]; 
(* WriteString[sphenoLoop, "B0m2 = B00(p2,"<>m12<>","<>m22<>")\n"]; *)
WriteString[sphenoLoop, "B0m2 = VGGloop(p2,"<>m12<>","<>m22<>")\n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coup2 = Conjg(coup1) \n"];
WriteString[sphenoLoop,"   SumI = coup1*coup2*B0m2 \n"]; 
 If[conj[particle]===particle,
	factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,5]]];,
	factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,5]]];
];
];
];
WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];,
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];

If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If ("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>") Then \n"];
];

dim1=getGenSPheno[contributions[[i,1]]];
If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];

m12 = SPhenoMassSq[contributions[[i,1]],i1] ;

ind1=MakeIndicesCoupling[{particle,gO1},{particle,gO2},{contributions[[i,1]],i1},{contributions[[i,2]],i1},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[2]]/. ToExpression["U"<>ToString[particle]]->particle)];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop)) Then \n"];];
Switch[type,
SSVV,
           WriteString[sphenoLoop,"SumI = 0._dp \n"]; 
	  WriteString[sphenoLoop," A0m2 = A0("<>m12<>")\n"];
           WriteString[sphenoLoop," coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
           WriteString[sphenoLoop," SumI = coup1*A0m2 \n"];
           factor = SPhenoForm[contributions[[i,6]]*contributions[[i,5]]];,
VVVV,
         WriteString[sphenoLoop,"SumI = 0._dp \n"]; 
	WriteString[sphenoLoop, "A0m2 = 3._dp/4._dp*A0("<>m12<>") +RXi/4._dp*A0("<>m12<>"*RXi) \n"];
         WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,1]]] <>ind1<> "\n"];
         WriteString[sphenoLoop,"coup2 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,2]]] <>ind1<> "\n"];
         WriteString[sphenoLoop,"coup3 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsLoop][[1,3]]] <>ind1<> "\n"];
         WriteString[sphenoLoop,"SumI = ((2._dp*rMS*coup1+(1-RXi**2)/8._dp*(coup2+coup3))*"<>m12<>"-(4._dp*coup1+coup2+coup3)*A0m2)\n"];
        factor = SPhenoForm[contributions[[i,6]]*contributions[[i,5]]];
];
WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];
];
i++;];

WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];


WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];

];


WriteLoopMassSingle[Name_,particle_,parameters_,masses_,couplings_,contributions_, tree_,addTad_]:=Block[{i2,i3,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},

If[PrintDebug,Print["Subroutine for 1 Loop Correction of ", Name];];
If[FreeQ[QuadruplePrecision,particle],stringQP="";,stringQP="QP";];

If[addTad==True,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"Tad1Loop","delta","mass","mass2","kont"},sphenoLoop];,
MakeSubroutineTitle["OneLoop"<>Name,Flatten[{parameters,masses,couplings}],{},{"delta","mass","mass2","kont"},sphenoLoop];
];

MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[parameters,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];

WriteString[sphenoLoop, "Integer , Intent(inout):: kont \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4,j1,j2,j3,j4,il,i_count, ierr \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: delta \n"];
WriteString[sphenoLoop, "Real(dp) :: mi, mi2, p2, test_m2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: PiSf, sig \n"];
WriteString[sphenoLoop, "Real(dp), Intent(out) :: mass, mass2 \n"];

If[addTad==True,
WriteString[sphenoLoop, "Complex(dp), Intent(in) ::  Tad1Loop("<>ToString[Length[TEqu]]<>") \n"];
];

WriteString[sphenoLoop, "Iname = Iname + 1 \n"];
WriteString[sphenoLoop, "NameOfUnit(Iname) = '"<>"OneLoop"<> Name<>"'\n \n"];

If[getType[particle]===F,
WriteString[sphenoLoop, "mi = "<>ToString[SPhenoMass[particle]] <>" \n"];,
If[getType[particle]===V,
 WriteString[sphenoLoop, "mi2 = "<>ToString[SPhenoMassSq[particle]/.Delta[a__]->0] <>" \n"]; ,
WriteString[sphenoLoop, "mi2 = "<>SPhenoForm[TreeMass[particle,SA`CurrentStates ]/. Delta[a_,b_]->1] <>" \n"];
];
];

WriteString[sphenoLoop, "\n \n"];

If[FreeQ[GoldstoneBosons[SA`CurrentStates],particle] || getType[particle]===V,
WriteString[sphenoLoop, "p2 = "<>ToString[SPhenoMassSq[particle]]<> "\n"];,
WriteString[sphenoLoop, "p2 = 0._dp \n"];
];

If[getType[particle]===F,
WriteString[sphenoLoop, "sig = ZeroC \n"];
MakeCall["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
WriteString[sphenoLoop,"mass = mi - sig \n"];
WriteString[sphenoLoop,"mass2= mass**2 \n"];,
WriteString[sphenoLoop, "PiSf = ZeroC \n"];
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","PiSf"},sphenoLoop];
If[getType[particle]===S,
WriteString[sphenoLoop,"mass2 = mi2 - Real(PiSf,dp) \n"];,
WriteString[sphenoLoop,"mass2 = mi2 + Real(PiSf,dp) \n"];
];
WriteString[sphenoLoop,"mass = sqrt(mass2) \n"];
];

WriteString[sphenoLoop,"i_count = 0 \n"];
WriteString[sphenoLoop,"Do  \n"];
WriteString[sphenoLoop,"i_count = i_count + 1 \n"];
WriteString[sphenoLoop,"test_m2 = mass2 \n"];

WriteString[sphenoLoop, "p2 =  mass2 \n"];

If[getType[particle]===F,
WriteString[sphenoLoop, "sig = ZeroC \n"];
MakeCall["Sigma1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"sig"},sphenoLoop];
WriteString[sphenoLoop,"mass = mi - sig \n"];
WriteString[sphenoLoop,"mass2= mass**2 \n"];,
WriteString[sphenoLoop, "PiSf = ZeroC \n"];
MakeCall["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","PiSf"},sphenoLoop];
If[getType[particle]===S,
WriteString[sphenoLoop,"mass2 = mi2 - Real(PiSf,dp) \n"];,
WriteString[sphenoLoop,"mass2 = mi2 + Real(PiSf,dp) \n"];
];
WriteString[sphenoLoop,"mass = sqrt(mass2) \n"];
];


WriteString[sphenoLoop," If (test_m2.Ne.0._dp) Then \n"];
WriteString[sphenoLoop,"    test_m2 = Abs(test_m2 - mass2) / test_m2 \n"];
WriteString[sphenoLoop," Else \n"];
WriteString[sphenoLoop,"    test_m2 = Abs(mass2) \n"];
WriteString[sphenoLoop," End If \n"];
WriteString[sphenoLoop," If (mass2.Ge.0._dp) Then \n"];
WriteString[sphenoLoop,"   If (RotateNegativeFermionMasses) Then \n"];
WriteString[sphenoLoop,"    mass = sqrt(mass2) \n"];
WriteString[sphenoLoop,"   End if \n"];
WriteString[sphenoLoop,"  Else \n"];
WriteString[sphenoLoop," If (Abs(mass2).lt.1.0E-30_dp) test_m2 = 0._dp \n"];
(* WriteString[sphenoLoop,"   If (ErrorLevel.Ge.0) Then \n"]; *)
WriteString[sphenoLoop,"     Write(ErrCan,*) 'Warning from routine'//NameOfUnit(Iname) \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) 'in the calculation of the masses' \n"];
WriteString[sphenoLoop,"     Write(ErrCan,*) 'occurred a negative mass squared!' \n"];
(* WriteString[sphenoLoop,"     If (ErrorLevel.Eq.2) Call TerminateProgram \n"]; *)
WriteString[sphenoLoop,"   SignOfMassChanged = .True. \n"];
(* WriteString[sphenoLoop,"   End If \n"];
WriteString[sphenoLoop,"   kont = -301 \n"]; *)
WriteString[sphenoLoop,"   mass = 0._dp \n"];
WriteString[sphenoLoop,"  End If \n"];

WriteString[sphenoLoop,"If (test_m2.LT.0.1_dp*delta) Exit \n"];
WriteString[sphenoLoop,"If (i_count.Gt.30) Then \n"];
WriteString[sphenoLoop,"  Write(*,*) \"Problem in \"//NameOfUnit(Iname), test_m2, mass2 \n"];
WriteString[sphenoLoop,"  kont = -510 \n"];
WriteString[sphenoLoop,"  Call AddError(510) \n"];
WriteString[sphenoLoop," Exit \n"];
WriteString[sphenoLoop,"End If \n"];
WriteString[sphenoLoop,"End Do \n \n \n"];


WriteString[sphenoLoop,"Iname = Iname -1 \n"];

WriteString[sphenoLoop,"End Subroutine OneLoop"<>Name <> "\n \n \n"];




];


WriteVectorScalarMixedSE[Name_,particle1_,particle2_,masses_,couplings_,contributions_]:=Block[{i,m1,m12,m2,m22,ind1,ind2,dim1,dim2,type,factor},

If[PrintDebug,Print["Write self-energy for ",particle1," - ",particle2];];

MakeSubroutineTitle["Pi1Loop"<>Name,Flatten[{masses,couplings}],{"p2"},{"kont","res"},sphenoLoop];

WriteString[sphenoLoop, "Implicit None \n"];
MakeVariableList[masses,", Intent(in)",sphenoLoop];
MakeVariableList[couplings,", Intent(in)",sphenoLoop];
WriteString[sphenoLoop, "Integer, Intent(inout) :: kont \n"];
WriteString[sphenoLoop, "Real(dp) :: B0m2, F0m2, G0m2, B1m2, H0m2, B22m2, m1, m2 \n"];
WriteString[sphenoLoop, "Real(dp), Intent(in) :: p2 \n"];
WriteString[sphenoLoop, "Complex(dp) :: A0m2 \n"];
If[getGenSPheno[particle1]==1&&getGenSPheno[particle2]==1,
dim="";,dim=StringReplace[ToString[DeleteCases[{getDimSPheno[particle1],getDimSPheno[particle2]},1]],{"{"->"(","}"->")"}];];
WriteString[sphenoLoop, "Complex(dp), Intent(inout) :: res "<>dim<>" \n"];
WriteString[sphenoLoop, "Complex(dp) :: coupL1, coupR1, coupL2,coupR2, coup1,coup2,temp, sumI \n"];
WriteString[sphenoLoop, "Integer :: i1,i2,i3,i4, gO1, gO2, ierr \n \n \n"];
WriteString[sphenoLoop,"res = 0._dp \n \n"];

For[i=1,i<=Length[contributions],
type=contributions[[i,5]];
WriteString[sphenoLoop,"!------------------------ \n"];
WriteString[sphenoLoop,"! "<> ToString[contributions[[i,1]]]<>", "<>  ToString[contributions[[i,2]]]<>" \n"];
WriteString[sphenoLoop,"!------------------------ \n"];
If[FlagLoopContributions===True,
WriteString[sphenoLoop,"If (("<>SPhenoIncludeLoop[getBlank[contributions[[i,1]]]]<>").and.("<>SPhenoIncludeLoop[getBlank[contributions[[i,2]]]]<>")) Then \n"];
];
WriteString[sphenoLoop,"sumI = 0._dp \n \n"];

If[type =!= VVVV && type =!= SSVV,
dim1=getGenSPheno[contributions[[i,1]]];
dim2=getGenSPheno[contributions[[i,2]]];

If[dim1 > 1, WriteString[sphenoLoop,"    Do i1 = 1, "<> ToString[dim1] <> "\n "];];
If[dim2 > 1, WriteString[sphenoLoop,"      Do i2 = 1, "<> ToString[dim2] <> "\n "];];
ind1=MakeIndicesCoupling[{particle1,gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[2]])][[1]];
ind2=MakeIndicesCoupling[{AntiField[particle2],gO2},{AntiField[contributions[[i,1]]],i1},{AntiField[contributions[[i,2]]],i2},(getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[2]])][[1]];
If[type===FFV,
If[getType[contributions[[i,1]]]===F,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
WriteString[sphenoLoop, "H0m2 = Hloop(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop, "B0m2 = 4._dp*"<>m1<>"*"<>m2<>"*B0(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coupL1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupR1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,2]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coupL2 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind2<> "\n"];
WriteString[sphenoLoop,"coupR2 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,2]]] <>ind2<> "\n"];
WriteString[sphenoLoop,"    SumI = (coupL1*coupL2+coupR1*coupR2)*H0m2 & \n"];
WriteString[sphenoLoop,"                & + 0.5_dp*(coupL1*coupR2 + coupL2*coupR1)*B0m2 \n"];
If[conj[particle1]===particle1 && conj[particle2]===particle2,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,7]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,7]]];
];,

ind1=MakeIndicesCoupling[{particle1,gO1},{contributions[[i,1]],i1},{contributions[[i,2]],i2},(getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[2]])][[1]];
ind2=MakeIndicesCoupling[{AntiField[particle2],gO2},{AntiField[contributions[[i,1]]],i1},{AntiField[contributions[[i,2]]],i2},(getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[2]])][[1]];

If[getType[contributions[[i,1]]]===V,
m1 = SPhenoMass[contributions[[i,1]],i1];
m12 = SPhenoMassSq[contributions[[i,1]],i1];
m2 = SPhenoMass[contributions[[i,2]],i2];
m22 = SPhenoMassSq[contributions[[i,2]],i2];,
m2 = SPhenoMass[contributions[[i,1]],i1];
m22 = SPhenoMassSq[contributions[[i,1]],i1];
m1 = SPhenoMass[contributions[[i,2]],i2];
m12 = SPhenoMassSq[contributions[[i,2]],i2];
];

If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"If (("<>m12<>".lt.MaxMassLoop).and.("<>m22<>".lt.MaxMassLoop)) Then \n"];];
If[getType[particle2]===V,
Switch[type,
SSV,
   WriteString[sphenoLoop, "B22m2 = -4._dp*B22(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 = " <>ToString[getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind2<> "\n"];
   WriteString[sphenoLoop,"    SumI = coup1*coup2*B22m2 \n"];
 If[conj[particle1]===particle1 && conj[particle2]===particle2,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,7]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,7]]];
];,
VVV,
If[FreeQ[massless,contributions[[i,1]]]==True && FreeQ[massless,contributions[[i,2]]]==True,
WriteString[sphenoLoop, "B0m2 = - (4._dp*p2+"<>m12<>" +"<>m22<>" )*B0(p2,"<>m12<>","<>m22<>") - 8._dp*B22(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coup2 = " <>ToString[getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind2<> "\n"];
WriteString[sphenoLoop,"    SumI = coup1*coup2*B0m2 \n"];,
WriteString[sphenoLoop, "B0m2 = - 4._dp*p2*B0(p2,"<>m12<>","<>m22<>") - 8._dp*B22(p2,"<>m12<>","<>m22<>") \n"];
WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind1<> "\n"];
WriteString[sphenoLoop,"coup2 = " <>ToString[getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind2<> "\n"];
WriteString[sphenoLoop,"    SumI = coup1*coup2*B0m2 \n"];
];
If[conj[particle1]===particle1 && conj[particle2]===particle2,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,7]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,7]]];
];,
SVV, 
If[FreeQ[massless,contributions[[i,1]]]==True && FreeQ[massless,contributions[[i,2]]]==True,
   WriteString[sphenoLoop, "B0m2 = B0(p2,"<>m12<>","<>m22<>") \n"];
   WriteString[sphenoLoop,"coup1 = " <>ToString[getSPhenoCoupling[contributions[[i,3]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind1<> "\n"];
   WriteString[sphenoLoop,"coup2 = " <>ToString[getSPhenoCoupling[contributions[[i,4]],SPhenoCouplingsAllreallyAll][[1,1]]] <>ind2<> "\n"];
   WriteString[sphenoLoop,"    SumI = coup1*coup2*B0m2 \n"];
If[conj[particle1]===particle1 && conj[particle2]===particle2,
factor = SPhenoForm[2.*contributions[[i,6]]*contributions[[i,7]]];,
factor = SPhenoForm[1.*contributions[[i,6]]*contributions[[i,7]]];
]; 
];
];,
Switch[type,
VVV,
	Print[VVV];,
SVV,
	Print[SVV];,
SSV,
	Print[SSV];
];
];
];

WriteString[sphenoLoop,"res = res +"<>factor<>"* SumI  \n"];
If[AddCheckMaxMassInLoops===True,WriteString[sphenoLoop,"End If \n"]];
If[dim1 > 1, WriteString[sphenoLoop,"      End Do \n "];];
If[dim2 > 1, WriteString[sphenoLoop,"    End Do \n "];];
If[FlagLoopContributions===True,
WriteString[sphenoLoop,"End if \n"];
];,


dim1=getGenSPheno[contributions[[i,1]]];
];

i++;];

WriteString[sphenoLoop,"res = oo16pi2*res \n \n"];

WriteString[sphenoLoop, "End Subroutine Pi1Loop"<>Name  <>" \n \n"];

];

WriteRXiLoopFunctions:=Block[{},
AppendSourceCode["RXiLoopFunctions.f90",sphenoLoop];

(*
WriteString[sphenoLoop,"Complex(dp) Function FloopRXi(p2,m12,m22) \n"];
WriteString[sphenoLoop,"Implicit None \n\n"];
WriteString[sphenoLoop,"Real(dp),Intent(in)::p2,m12,m22 \n\n"];
WriteString[sphenoLoop,"If (RXi.eq.1._dp) Then \n"];
WriteString[sphenoLoop,"  FloopRXi=Floop(p2,m12,m22)\n"];
WriteString[sphenoLoop,"Else\n"];
WriteString[sphenoLoop,"  If ((m12.gt.0.1).and.(m22.gt.0.1)) Then \n"];
WriteString[sphenoLoop,"      FloopRXi=A0(m12)-A0(m22)+((m12-p2)*A0(m22))/m22-&\n"];
WriteString[sphenoLoop,"      & ((m12-p2+m22*RXi)*A0(m22*RXi))/m22+(-m12+m22+p2)*b0(p2,m12,m22)-&\n"];
WriteString[sphenoLoop,"      & (m12-(m12-p2)**2/m22+3._dp*p2)*b0(p2,m12,m22)-((m12-p2)**2*b0(p2,m12,m22*RXi))/m22\n"];
WriteString[sphenoLoop,"  Else\n"];
WriteString[sphenoLoop,"   If ((p2.gt.0.1_dp).or.(m12.gt.0.1_dp)) Then\n"];
WriteString[sphenoLoop,"    FloopRXi=A0(m12)-2._dp*(m12+p2)*B0(p2,0._dp,m12)\n"];
WriteString[sphenoLoop,"   Else\n"];
WriteString[sphenoLoop,"    FloopRXi=0.0_dp\n"];
WriteString[sphenoLoop,"   End if\n"];
WriteString[sphenoLoop,"  End if\n"];
WriteString[sphenoLoop,"End if\n"];
WriteString[sphenoLoop,"End Function FloopRXi\n\n\n"];

WriteString[sphenoLoop,"Complex(dp) Function SVVloop(p2,m12,m22) \n"];
WriteString[sphenoLoop,"Implicit None \n\n"];
WriteString[sphenoLoop,"Real(dp),Intent(in)::p2,m12,m22 \n\n"];
WriteString[sphenoLoop,"If (RXi.eq.1._dp) Then \n"];
WriteString[sphenoLoop,"  SVVloop=4._dp*Real(B0(p2,m12,m22)-0.5_dp*rMS,dp)  \n"];
WriteString[sphenoLoop,"Else\n"];
WriteString[sphenoLoop,"  If ((m12.gt.0).and.(m22.gt.0)) Then \n"];
WriteString[sphenoLoop,"      SVVloop=rMS-A0(m12)/(8._dp*m12)+(RXi*A0(m12))/(8._dp*m12)-A0(m22)/(8._dp*m22)+(RXi*A0(m22))/(8._dp*m22)+A0(m12*RXi)/(8._dp*m12) &\n"]; WriteString[sphenoLoop,"       & -(RXi*A0(m12*RXi))/(8._dp*m12)+A0(m22*RXi)/(8._dp*m22)-&\n"];
WriteString[sphenoLoop,"       & (RXi*A0(m22*RXi))/(8._dp*m22)-(5._dp*B0(p2,m12,m22))/4._dp-(m12*B0(p2,m12,m22))/(8._dp*m22) &\n"]; 
WriteString[sphenoLoop,"       & -(m22*B0(p2,m12,m22))/(8._dp*m12)+(p2*B0(p2,m12,m22))/(4._dp*m12)+(p2*B0(p2,m12,m22))/(4._dp*m22)-&\n"];
WriteString[sphenoLoop,"       & (p2**2*B0(p2,m12,m22))/(8._dp*m12*m22)+(m12*B0(p2,m12,m22*RXi))/(8._dp*m22)-(p2*B0(p2,m12,m22*RXi))/(4._dp*m22) &\n"];
WriteString[sphenoLoop,"       &+(p2**2*B0(p2,m12,m22*RXi))/(8._dp*m12*m22)-(RXi*B0(p2,m12,m22*RXi))/4._dp-&\n"];
WriteString[sphenoLoop,"       & (p2*RXi*B0(p2,m12,m22*RXi))/(4._dp*m12)+(m22*RXi**2*B0(p2,m12,m22*RXi))/(8._dp*m12)&\n"];
WriteString[sphenoLoop,"       &+(m22*B0(p2,m22,m12*RXi))/(8._dp*m12)-(p2*B0(p2,m22,m12*RXi))/(4._dp*m12)+&\n"];
WriteString[sphenoLoop,"       & (p2**2*B0(p2,m22,m12*RXi))/(8._dp*m12*m22)-(RXi*B0(p2,m22,m12*RXi))/4._dp-(p2*RXi*B0(p2,m22,m12*RXi))/(4._dp*m22)&\n"];
WriteString[sphenoLoop,"       & +(m12*RXi**2*B0(p2,m22,m12*RXi))/(8._dp*m22)-&\n"];
WriteString[sphenoLoop,"       & (p2**2*B0(p2,m12*RXi,m22*RXi))/(8._dp*m12*m22)+(p2*RXi*B0(p2,m12*RXi,m22*RXi))/(4._dp*m12) & \n"];
WriteString[sphenoLoop,"       & +(p2*RXi*B0(p2,m12*RXi,m22*RXi))/(4._dp*m22)-(RXi**2*B0(p2,m12*RXi,m22*RXi))/4._dp-&\n"];
WriteString[sphenoLoop,"       & (m12*RXi**2*B0(p2,m12*RXi,m22*RXi))/(8._dp*m22)-(m22*RXi**2*B0(p2,m12*RXi,m22*RXi))/(8._dp*m12)\n"];
WriteString[sphenoLoop,"  Else\n"];
WriteString[sphenoLoop,"     SVVloop=4._dp*Real(B0(p2,m12,m22)-0.5_dp*rMS,dp)  \n"];
WriteString[sphenoLoop,"   End if\n"];
WriteString[sphenoLoop,"End if\n"];
WriteString[sphenoLoop,"End Function SVVloop\n\n\n"];
*)

];




