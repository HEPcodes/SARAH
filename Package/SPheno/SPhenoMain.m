(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSPhenoMain[NameForModel_]:=Block[{i},

(*
Print["-----------------------------------"];
Print["Write SPheno Main File"];
Print["-----------------------------------"];
*)

Print[StyleForm["Write SPheno main file","Section",FontSize->12]];

spheno=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"SPheno"<>NameForModel<>".f90"]];

WriteCopyRight[spheno];

WriteString[spheno,"Program SPheno"<>NameForModel<>" \n \n"];

WriteString[spheno,"Use Control\n"];
WriteString[spheno,"Use InputOutput_"<>ModelName<>"\n"];
WriteString[spheno,"Use LoopFunctions\n"];
If[AddLowEnergyConstraint ===True && SPhenoOnlyForHM=!=True,
WriteString[spheno,"Use RunSM_"<>ModelName<>"\n"]; 
WriteString[spheno,"Use LowEnergy_"<>ModelName<>"\n"]; 
If[SkipFlavorKit=!=True,
WriteString[spheno,"Use FlavorKit_LFV_"<>ModelName<>"\n"]; 
WriteString[spheno,"Use FlavorKit_QFV_"<>ModelName<>"\n"]; 
WriteString[spheno,"Use FlavorKit_Observables_"<>ModelName<>"\n"];
]; 
];
WriteString[spheno,"Use Mathematics\n"];
WriteString[spheno,"Use Model_Data_"<>ModelName<>"\n"];
WriteString[spheno,"Use Tadpoles_"<>ModelName<>" \n "];
If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,"Use RGEs_"<>ModelName<>"\n"];
WriteString[spheno,"!Use StandardModel\n"];
WriteString[spheno,"Use Boundaries_"<>ModelName<>"\n "];
];


If[IncludeFineTuning===True,
WriteString[spheno,"Use FineTuning_"<>ModelName<>"\n"];
];

If[SPhenoOnlyForHM=!=True,WriteString[spheno,"Use HiggsCS_"<>ModelName<>"\n"];];
WriteString[spheno,"Use TreeLevelMasses_"<>ModelName<>"\n"];
WriteString[spheno,"Use LoopMasses_"<>ModelName<>"\n \n"];
If[SPhenoOnlyForHM=!=True, WriteString[spheno,"Use BranchingRatios_"<>ModelName<>"\n \n"];];




WriteString[spheno,"Implicit None\n \n"];

WriteString[spheno,"Real(dp) :: epsI=0.00001_dp, deltaM = 0.000001_dp \n"];
WriteString[spheno, "Real(dp) :: mGut = -1._dp, ratioWoM = 0._dp\n"];
WriteString[spheno, "Integer :: kont \n \n"];
WriteString[spheno, "Integer,Parameter :: p_max=100\n"];
WriteString[spheno, "Real(dp) :: Ecms(p_max),Pm(p_max),Pp(p_max), dt, tz, Qin, gSM(11) \n"];
If[OnlyLowEnergySPheno===True,
WriteString[spheno, "Real(dp) :: vev, sinw2, f_GMSB\n"];,
WriteString[spheno, "Real(dp) :: vev, sinw2\n"];
];
If[SupersymmetricModel===False,
WriteString[spheno, "Complex(dp) :: YdSM(3,3), YuSM(3,3), YeSM(3,3)\n"];
WriteString[spheno, "Real(dp) :: vSM, g1SM, g2SM, g3SM\n"];
WriteString[spheno, "Integer :: i1 \n"];
];

CheckSCKM;
If[WriteCKMBasis===True,
WriteString[spheno,"Complex(dp) :: Yd_ckm(3,3), Yu_ckm(3,3), Tu_ckm(3,3), Td_ckm(3,3), mq2_ckm(3,3), mu2_ckm(3,3), md2_ckm(3,3) \n"];
WriteString[spheno,"Complex(dp) :: Yd_out(3,3), Yu_out(3,3), Tu_out(3,3), Td_out(3,3), mq2_out(3,3), mu2_out(3,3), md2_out(3,3) \n"];
];

If[DEFINITION[UseNonStandardYukwas]===True,
WriteString[spheno,"Real(dp) :: vd_aux, vu_aux\n"];
];

If[SupersymmetricModel===True && DEFINITION[UseNonStandardYukwas]===True,
WriteString[spheno, "Complex(dp) :: YdSM(3,3), YuSM(3,3), YeSM(3,3)\n"];
WriteString[spheno, "Real(dp) :: vSM\n"];
];

WriteString[spheno, "Logical :: ISR(p_max)=.False.\n"];
WriteString[spheno, "Logical :: CalcTBD\n"];
(* MakeVariableList[NewParametersFromTadpoles,"",spheno]; *)
MakeVariableList[Transpose[ListOfLowEnergyNames][[1]],"",spheno]; (* NonPublic *)

For[i=1,i<=Length[ListOfLowEnergyNames],
If[ListOfLowEnergyNames[[i,2]]=!=0,
WriteString[spheno,ToString[ListOfLowEnergyNames[[i,1]]]<>" = 0._dp \n"];
];
i++;];


WriteString[spheno, "Call get_command_argument(1,inputFileName)\n"];
WriteString[spheno, "If (len_trim(inputFileName)\[Equal]0) Then\n"];
WriteString[spheno, "  inputFileName=\"LesHouches.in."<>NameForModel<>"\"\n"];
WriteString[spheno, "Else\n"];
WriteString[spheno, "  inputFileName=trim(inputFileName)\n"];
WriteString[spheno, "End if\n"];

WriteString[spheno, "Call get_command_argument(2,outputFileName)\n"];
WriteString[spheno, "If (len_trim(outputFileName)\[Equal]0) Then\n"];
WriteString[spheno, "  outputFileName=\"SPheno.spc."<>NameForModel<>"\"\n"];
WriteString[spheno, "Else\n"];
WriteString[spheno, "  outputFileName=trim(outputFileName)\n"];
WriteString[spheno, "End if \n"];


If[SupersymmetricModel===False,
WriteString[spheno,"g1SM = 0._dp \n"];
WriteString[spheno,"g2SM = 0._dp \n"];
WriteString[spheno,"g3SM = 0._dp \n"];
WriteString[spheno,"YdSM = 0._dp \n"];
WriteString[spheno,"YeSM = 0._dp \n"];
WriteString[spheno,"YuSM = 0._dp \n"];
WriteString[spheno,"vSM = 0._dp \n"];
];

WriteString[spheno,"Call Set_All_Parameters_0() \n \n"];

If[SupersymmetricModel=!=False,
WriteString[spheno,"Qin = SetRenormalizationScale(1.0E3_dp**2)  \n"];,
WriteString[spheno,"Qin = SetRenormalizationScale(1.6E2_dp**2)  \n"];
];

WriteString[spheno,"kont = 0 \n"];
WriteString[spheno,"delta_Mass = 0.0001_dp \n"];
WriteString[spheno,"CalcTBD = .false. \n"];
WriteString[spheno, "Call ReadingData(kont) \n \n"];


subLowEnergyParameters={
ToExpression[SPhenoForm[hyperchargeCoupling]]-> ToExpression[SPhenoForm[hyperchargeCoupling]<>"MZ" ],
ToExpression[SPhenoForm[leftCoupling]]-> ToExpression[SPhenoForm[leftCoupling]<>"MZ" ],
ToExpression[SPhenoForm[VEVSM1]]-> ToExpression[SPhenoForm[VEVSM1]<>"MZ" ],
ToExpression[SPhenoForm[VEVSM2]]-> ToExpression[SPhenoForm[VEVSM2]<>"MZ" ],
ToExpression[SPhenoForm[VEVSM]]-> ToExpression[SPhenoForm[VEVSM]<>"MZ" ],
ToExpression[SPhenoForm[UpYukawa]]-> ToExpression[SPhenoForm[UpYukawa]<>"MZ" ],
ToExpression[SPhenoForm[DownYukawa]]-> ToExpression[SPhenoForm[DownYukawa]<>"MZ" ],
ToExpression[SPhenoForm[ElectronYukawa]]-> ToExpression[SPhenoForm[ElectronYukawa]<>"MZ" ]
};

temp1=Join[listVEVs,Complement[listAllParameters,ParametersToSolveTadpoles]];
temp2={};
For[i=1,i<=Length[temp1],
If[FreeQ[subLowEnergyParameters,temp1[[i]]],
temp2=Join[temp2,{temp1[[i]]}];,
temp2=Join[temp2,{temp1[[i]]/. subLowEnergyParameters}];
];
i++;];

If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,"If ((HighScaleModel.Eq.\"LOW\").and.(.not.SUSYrunningFromMZ)) Then ! No longer used by default \n "];
];
WriteString[spheno,"! Setting values \n "];
For[i=1,i<=Length[listVEVsIN],
If[MemberQ[ParametersToSolveTadpoles,listVEVs[[i]]]==False,
WriteString[spheno,StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>" = " <>SPhenoForm[listVEVsIN[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[HighScaleList],
If[MemberQ[ParametersToSolveTadpoles,HighScaleList[[i,2]]]==False,
WriteString[spheno,StringDrop[SPhenoForm[highScaleIn[[i]]],-2] <>" = " <>SPhenoForm[highScaleIn[[i]]]<>" \n "];
];
i++;];
For[i=1,i<=Length[LowScaleList],
If[MemberQ[ParametersToSolveTadpoles,LowScaleList[[i,2]]]==False,
WriteString[spheno,StringDrop[SPhenoForm[lowScaleIn[[i]]],-2] <>" = " <>SPhenoForm[lowScaleIn[[i]]]<>" \n "];
];
i++;];

For[i=1,i<=Length[BoundaryLowScaleInput],
Switch[Head[BoundaryLowScaleInput[[i,1]]],
re,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<> "))\n"];,
im,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <> ",dp))\n"];,
_,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1]]]<>" = " <>SPhenoForm[BoundaryLowScaleInput[[i,2]]]<>"\n"];
];
i++;];

If[SupersymmetricModel===False,
If[AddOHDM=!=True,
WriteString[spheno,"tanbetaMZ = tanbeta \n"];
];
];
WriteString[spheno,"\n \n ! Setting VEVs used for low energy constraints \n "];
For[i=1,i<=Length[listVEVsIN],
WriteString[spheno,StringDrop[SPhenoForm[listVEVsIN[[i]]],-2] <>"MZ = " <>StringDrop[SPhenoForm[listVEVsIN[[i]]],-2]<>" \n "];
i++;];

If[SupersymmetricModel===True,
 If[AddSMrunning=!=False && SPhenoOnlyForHM=!=True,
WriteString[spheno,"\n \n ! RGE running for gauge and Yukawa couplings from M_Z to M_SUSY \n "];
WriteString[spheno,"Qin=sqrt(getRenormalizationScale()) \n"];
WriteString[spheno,"If (SMrunningLowScaleInput) Then \n"];
If[DEFINITION[UseNonStandardYukwas]=!=True,
If[AddOHDM=!=True,
WriteString[spheno,"Call RunSM(Qin,deltaM,tanbeta,"<>SPhenoForm[hyperchargeCoupling]<>","<>SPhenoForm[leftCoupling]<>","<>SPhenoForm[strongCoupling]<>","<>SPhenoForm[UpYukawa]<>","<>SPhenoForm[DownYukawa]<>","<>SPhenoForm[ElectronYukawa]<>","<>SPhenoForm[VEVSM1]<>","<>SPhenoForm[VEVSM2]<>") \n"];,
WriteString[spheno,"Call RunSMohdm(Qin,deltaM, "<>SPhenoForm[hyperchargeCoupling]<>","<>SPhenoForm[leftCoupling]<>","<>SPhenoForm[strongCoupling]<>","<>SPhenoForm[UpYukawa]<>","<>SPhenoForm[DownYukawa]<>","<>SPhenoForm[ElectronYukawa]<>","<>SPhenoForm[VEVSM]<>") \n"];
];,
WriteString[spheno,"Call RunSMohdm(Qin,deltaM, "<>SPhenoForm[hyperchargeCoupling]<>","<>SPhenoForm[leftCoupling]<>","<>SPhenoForm[strongCoupling]<>",YuSM,YdSM,YeSM, vSM) \n"];
If[AddOHDM=!=True,
WriteString[spheno,"vd_aux =  vSM/Sqrt(1._dp+"<>SPhenoForm[TanBeta]<>"**2)  \n"];
WriteString[spheno,"vu_aux =  vd_aux*"<>SPhenoForm[TanBeta]<>"\n"];
];
For[i=1,i<=Length[DEFINITION[MoreEWvevs]],
WriteString[spheno,StringReplace[DEFINITION[MoreEWvevs][[i]],{"vev2"->"vSM**2"}] <>"\n"];
i++;];
For[i=1,i<=Length[DEFINITION[NonStandardYukawasRelations]],
WriteString[spheno,StringReplace[DEFINITION[NonStandardYukawasRelations][[i]],{"vd"->"vd_aux","vu"->"vu_aux","Y_u"->"YuSM","Y_d"->"YdSM","Y_l"->"YeSM"}] <>"\n"];
i++;];
];
WriteString[spheno,"End if \n"];
];,
WriteString[spheno,"If (SMrunningLowScaleInput) Then \n"];
WriteString[spheno,"  Qin=sqrt(getRenormalizationScale()) \n"];
WriteString[spheno,"  Call RunSMohdm(Qin,deltaM,g1SM,g2SM,g3SM,YuSM,YdSM,YeSM,vSM) \n"];
WriteString[spheno,"Else \n"];
WriteString[spheno,"   sinW2=1._dp-mW2/mZ2 \n"];
WriteString[spheno,"   vSM=1/Sqrt((G_F*Sqrt(2._dp)))\n"];
WriteString[spheno,"   g1SM=sqrt(4*Pi*Alpha_MZ/(1-sinW2)) \n"];
WriteString[spheno,"   g2SM=sqrt(4*Pi*Alpha_MZ/Sinw2 ) \n"];
WriteString[spheno,"   g3SM=sqrt(AlphaS_MZ*4*Pi) \n"];
WriteString[spheno,"   Do i1=1,3 \n"];
WriteString[spheno,"      YuSM(i1,i1)=sqrt(2._dp)*mf_u(i1)/vSM \n"];
WriteString[spheno,"      YeSM(i1,i1)=sqrt(2._dp)*mf_l(i1)/vSM \n"];
WriteString[spheno,"      YdSM(i1,i1)=sqrt(2._dp)*mf_d(i1)/vSM \n"];
WriteString[spheno,"    End Do \n"];
WriteString[spheno,"End if \n"];
];

If[SPhenoOnlyForHM=!=True,
WriteString[spheno,"\n ! Setting Boundary conditions \n "];
For[i=1,i<=Length[BoundaryLowScaleInput],
Switch[Head[BoundaryLowScaleInput[[i,1]]],
re,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <>",dp),Aimag("<>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<> "))\n"];,
im,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>" = Cmplx(Real(" <>SPhenoForm[BoundaryLowScaleInput[[i,1,1]]]<>",dp),Real("<> SPhenoForm[BoundaryLowScaleInput[[i,2]]]  <> ",dp))\n"];,
_,WriteString[spheno,SPhenoForm[BoundaryLowScaleInput[[i,1]]]<>" = " <>SPhenoForm[BoundaryLowScaleInput[[i,2]]]<>"\n"];
];
i++;];

];

If[SPhenoOnlyForHM===True,
For[i=1,i<=Length[subVEVnames],
If[getDimSPheno[subVEVnames[[i,1]]]==={1} || getDimSPheno[subVEVnames[[i,1]]]==={2},
If[Head[subVEVnames[[i,2]]]===Symbol,
WriteString[spheno,SPhenoForm[subVEVnames[[i,2]]] <>" = " <> SPhenoForm[subVEVnames[[i,1]]] <>"\n"];,
WriteString[spheno,SPhenoForm[subVEVnames[[i,2]]/.I->0] <>" = Real(" <> SPhenoForm[subVEVnames[[i,1]]] <>",dp) \n"];
WriteString[spheno,SPhenoForm[Coefficient[subVEVnames[[i,2]] /. I->ic,ic]] <>" = Aimag(" <> SPhenoForm[subVEVnames[[i,1]]] <>") \n"];
];,
For[j=1,j<=getDimSPheno[subVEVnames[[i,1]]/. A_[a_Pattern]->A][[1]],
If[Head[subVEVnames[[i,2]]]=!=Plus,
WriteString[spheno,SPhenoForm[subVEVnames[[i,2]] /. A_[a_]->A[j] /. A_[b_Integer]:>ToExpression[ToString[A]<>ToString[b]]] <>" = " <> SPhenoForm[subVEVnames[[i,1]] /. A_[a_]->A[j]] <>"\n"];,
WriteString[spheno,SPhenoForm[subVEVnames[[i,2]]/.I->0 /. A_[a_]->A[j]/. A_[b_Integer]:>ToExpression[ToString[A]<>ToString[b]]]<>" = Real(" <> SPhenoForm[subVEVnames[[i,1]]/. A_[a_]->A[j]] <>",dp) \n"];
WriteString[spheno,SPhenoForm[Coefficient[subVEVnames[[i,2]] /. I->ic,ic] /. A_[a_]->A[j]/. A_[b_Integer]:>ToExpression[ToString[A]<>ToString[b]]] <>" = Aimag(" <> SPhenoForm[subVEVnames[[i,1]]/. A_[a_]->A[j]] <>") \n"];
];
j++;];
];
i++;];
];

If[WriteCKMBasis===True,
WriteString[spheno,"\n\n\n"];
WriteString[spheno,"! Translate input form SCKM to electroweak basis \n"];
WriteString[spheno,"If (SwitchToSCKM) Then\n"];
WriteString[spheno,"Yd_ckm = "<>SPhenoForm[DownYukawa]<>"(1:3,1:3) \n"];
WriteString[spheno,"Yu_ckm = "<>SPhenoForm[UpYukawa]<>"(1:3,1:3) \n"];
WriteString[spheno,"Td_ckm = "<>SPhenoForm[TrilinearDown]<>"(1:3,1:3) \n"];
WriteString[spheno,"Tu_ckm = "<>SPhenoForm[TrilinearUp]<>"(1:3,1:3) \n"];
WriteString[spheno,"mq2_ckm = "<>SPhenoForm[SoftSquark]<>"(1:3,1:3) \n"];
WriteString[spheno,"md2_ckm = "<>SPhenoForm[SoftDown]<>"(1:3,1:3) \n"];
WriteString[spheno,"mu2_ckm = "<>SPhenoForm[SoftUp]<>"(1:3,1:3) \n"];

WriteString[spheno,"Call Switch_from_superCKM(Yd_ckm, Yu_ckm, Td_ckm, Tu_ckm, md2_ckm, mq2_ckm, mu2_ckm& \n"];
WriteString[spheno,"&, Td_out, Tu_out, md2_out, mq2_out, mu2_out,.True.) \n"];

WriteString[spheno,"If (InputValuefor"<>SPhenoForm[TrilinearDown] <>") "<>SPhenoForm[TrilinearDown] <>" = Td_out \n"];
WriteString[spheno,"If (InputValuefor"<>SPhenoForm[TrilinearUp] <>") "<>SPhenoForm[TrilinearUp] <>" = Tu_out \n"];
WriteString[spheno,"If (InputValuefor"<>SPhenoForm[SoftSquark] <>") "<>SPhenoForm[SoftSquark] <>" = mq2_out \n"];
WriteString[spheno,"If (InputValuefor"<>SPhenoForm[SoftDown] <>") "<>SPhenoForm[SoftDown] <>" = md2_out \n"];
WriteString[spheno,"If (InputValuefor"<>SPhenoForm[SoftUp] <>") "<>SPhenoForm[SoftUp] <>" = mu2_out \n"];
WriteString[spheno,"End If \n"];
WriteString[spheno,"\n\n\n"];
];

If[SPhenoOnlyForHM=!=True,
WriteTadpoleSolutionOnlyLow[spheno];,
WriteString[spheno,"\n\n ! Put here the equations for delta_vi  (as check, should all be zero!) \n\n"];
];

MakeCall["OneLoopMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},spheno];

WriteString[spheno,"\n If (SignOfMassChanged) Then  \n"];
WriteString[spheno," If (.Not.IgnoreNegativeMasses) Then \n"];
WriteString[spheno,"  Write(*,*) \" Stopping calculation because of negative mass squared.\" \n"];
WriteString[spheno,"  Call TerminateProgram \n"];
WriteString[spheno," Else \n"];
WriteString[spheno,"  SignOfMassChanged= .False. \n"];
WriteString[spheno,"  kont=0  \n"];
WriteString[spheno," End If \n"];
WriteString[spheno,"End If \n"];
WriteString[spheno,"If (SignOfMuChanged) Then \n"];
WriteString[spheno," If (.Not.IgnoreMuSignFlip) Then \n"];
WriteString[spheno,"  Write(*,*) \" Stopping calculation because of negative mass squared in tadpoles.\" \n"];
WriteString[spheno,"  Call TerminateProgram \n"];
WriteString[spheno," Else \n"];
WriteString[spheno,"  SignOfMuChanged= .False. \n"];
WriteString[spheno,"  kont=0 \n"];
WriteString[spheno," End If \n"];
WriteString[spheno,"End If \n\n"];

If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,"Else \n "];
MakeCall["CalculateSpectrum",Join[NewMassParameters,Join[listVEVs,listAllParameters ]],{"n_run","delta_mass","WriteOut","kont"},{"mGUT"},spheno];
WriteString[spheno,"End If \n "];
];

WriteString[spheno, "! Save correct Higgs masses for calculation of L -> 3 L' \n"];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[spheno,"MhhL = "<>SPhenoForm[SPhenoMass[HiggsBoson]]<>"\n"];
WriteString[spheno,"Mhh2L = MhhL**2 \n"];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[spheno,"MAhL = "<>SPhenoForm[SPhenoMass[PseudoScalar]]<>"\n"];
WriteString[spheno,"MAh2L = MAhL**2 \n \n"];
];

WriteSetDependentParameters[spheno];


WriteString[spheno,"If ((L_BR).And.(kont.Eq.0)) Then \n "];

If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,"sinW2=1._dp-mW2/mZ2 \n"];
WriteString[spheno,"vev=Sqrt(mZ2*(1._dp-sinW2)*SinW2/(pi*alpha_mZ))\n"];
If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[spheno,"vdMZ=vev/Sqrt(1._dp+tanbetaMZ**2)\n"];
WriteString[spheno,"vuMZ=tanbetaMZ*vdMZ \n"];
];,
WriteString[spheno,SPhenoForm[VEVSM]<>"MZ = vev\n"];
];
];

If[SPhenoOnlyForHM=!=True,
If[OnlyLowEnergySPheno=!=True,
(* MakeCall["CalculateBR",Join[Join[NewMassParameters,Join[Map[ToExpression[ToString[#]<>"MZ"]&,listVEVs],listAllParameters]],SPhenoWidthBR],{"CalcTBD","ratioWoM","epsI","deltaM","kont"},{},spheno];, *)
MakeCall["CalculateBR",Join[Join[NewMassParameters,Join[listVEVs/. {VEVSM1->vdMZ,VEVSM2->vuMZ},listAllParameters]],SPhenoWidthBR],{"CalcTBD","ratioWoM","epsI","deltaM","kont"},{},spheno];,
MakeCall["CalculateBR",Join[Join[NewMassParameters,Join[listVEVs,listAllParameters]],SPhenoWidthBR],{"CalcTBD","ratioWoM","epsI","deltaM","kont"},{},spheno];
];

If[getGen[HiggsBoson]>1,
MakeCall["HiggsCrossSections",{},{SPhenoForm[SPhenoMass[HiggsBoson]],"ratioGG", "ratioPP","rHB_S_"<>SPhenoForm[VectorW],"rHB_S_"<>SPhenoForm[VectorZ],"rHB_S_S_"<>SPhenoForm[TopQuark]<>"(:,3)","CS_Higgs_LHC","kont"},{},spheno];
];

If[(getGen[PseudoScalar]-getGenSPhenoStart[PseudoScalar]+1)>0 && (getGen[PseudoScalar]<99),
MakeCall["HiggsCrossSections",{},{SPhenoForm[SPhenoMass[PseudoScalar]],"ratioPGG", "ratioPPP","0._dp*rHB_S_"<>SPhenoForm[VectorW],"0._dp*rHB_S_"<>SPhenoForm[VectorZ],"rHB_P_S_"<>SPhenoForm[TopQuark]<>"(:,3)","CS_PHiggs_LHC","kont"},{},spheno];
];
];

WriteString[spheno,"End If \n \n "];



If[AddLowEnergyConstraint ===True && SPhenoOnlyForHM=!=True,

WriteString[spheno,"If (CalculateLowEnergy) then \n"];
MakeCall["CalculateLowEnergyConstraints",Join[listAllParametersAndVEVs,Transpose[ListOfLowEnergyNames][[1]]],{},{},spheno]; 
WriteString[spheno, SPhenoForm[SPhenoMass[VectorZ]]<>" = mz \n"];
WriteString[spheno, SPhenoForm[SPhenoMassSq[VectorZ]]<>" = mz2 \n"];
WriteString[spheno, SPhenoForm[SPhenoMass[VectorW]]<>" = mW \n"];
WriteString[spheno, SPhenoForm[SPhenoMassSq[VectorW]]<>" = mW2 \n"];

WriteString[spheno,"If (WriteParametersAtQ) Then \n"];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},spheno];
WriteString[spheno,"End If \n \n"];

If[FreeQ[massless,Neutrino] && SA`NeutrinoPresent ==True,
WriteString[spheno,SPhenoForm[SPhenoMass[Neutrino]]<>" = nuMasses  \n"];
If[SPhenoForm[NeutrinoMM]=!="Delta",WriteString[spheno,SPhenoForm[NeutrinoMM]<>" = nuMixing  \n"];];
];
WriteString[spheno,"End if \n \n"];
]; 

(*
If[SA`AddOneLoopDecay === True,
MakeCall["CalculateOneLoopDecays",Join[listVEVs,listAllParameters],{},{"epsI","deltaM","kont"},spheno];
];
*)

If[IncludeFineTuning===True,
WriteString[spheno,"If (HighScaleModel.ne.\"LOW\") Then \n "];
WriteString[spheno," If (calcFT) Then \n"];
MakeCall["FineTuning",listAllParametersAndVEVs, {},{"mGut","kont"},spheno];
WriteString[spheno," End If \n"];
WriteString[spheno,"End If \n"];
];


WriteString[spheno,"If ((FoundIterativeSolution).or.(WriteOutputForNonConvergence)) Then \n"];
WriteString[spheno,"If (OutputForMO) Then \n"];
MakeCall["RunningFermionMasses",Join[Join[listVEVs,listAllParameters]],SPhenoForm/@SA`SMfermionmasses ,{"kont"},spheno];
WriteString[spheno,"End if \n"];

WriteString[spheno,"Write(*,*) \"Writing output files\" \n"];

MakeCall["LesHouches_Out",Transpose[ListOfLowEnergyNames][[1]],{"67","11","kont","MGUT"},{"GenerationMixing"},spheno];
WriteString[spheno, "End if \n"];

WriteString[spheno,"Write(*,*) \"Finished!\" \n"];

WriteString[spheno, "Contains \n \n"];

If[WriteCKMBasis===True,
AppendSourceCode["SwitchFromSCKM.f90",spheno];
];

If[OnlyLowEnergySPheno=!=True,
GenerateCalculateSpectrum;
];
GenerateReadingData;

If[AddLowEnergyConstraint ===True && SPhenoOnlyForHM=!=True,
GenerateCalcLowEnergy; 
];

WriteString[spheno,"End Program SPheno"<>NameForModel<>" \n"];

Close[spheno];
];


GenerateReadingData:=Block[{},

Print["  Write 'ReadingData'"];

WriteString[spheno,"Subroutine ReadingData(kont)\n"];
WriteString[spheno,"Implicit None\n"];
WriteString[spheno,"Integer,Intent(out)::kont\n"];

WriteString[spheno,"Logical::file_exists\n"];

WriteString[spheno,"kont=-123456\n"];

WriteString[spheno,"Inquire(file=inputFileName,exist=file_exists)\n"];
WriteString[spheno,"If (file_exists) Then\n"];
WriteString[spheno,"kont=1\n"];

(*  WriteString[spheno,"Call LesHouches_Input(kont,HighScaleModel,Ecms,Pm,Pp,ISR,F_GMSB)\n"]; *)
 WriteString[spheno,"Call LesHouches_Input(kont,Ecms,Pm,Pp,ISR,F_GMSB)\n"]; 
(* WriteString[spheno,"Call LesHouches_Input(kont)\n"]; *)

WriteString[spheno,"LesHouches_Format= .True.\n"];
WriteString[spheno,"Else\n"];
WriteString[spheno,"Write(*,*)&\n"];
WriteString[spheno,"& \"File \",inputFileName,\" does not exist\"\n"];
WriteString[spheno,"Call TerminateProgram\n"];
WriteString[spheno,"End If\n"];

WriteString[spheno,"End Subroutine ReadingData\n\n \n"];


];




GenerateCalculateSpectrum:=Block[{i,j,temp},

Print["  Write 'CalculateSpectrum'"];


 MakeSubroutineTitle["CalculateSpectrum",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{"n_run","delta","WriteOut","kont"},{"mGUT"},spheno]; 

WriteString[spheno,"Implicit None \n"];
WriteString[spheno, "Integer, Intent(in) :: n_run \n"]; 
WriteString[spheno, "Integer, Intent(inout) :: kont \n"];
WriteString[spheno, "Logical, Intent(in) :: WriteOut \n"];
WriteString[spheno, "Real(dp), Intent(in) :: delta \n"]; 
WriteString[spheno, "Real(dp), Intent(inout) :: mGUT \n"]; 

MakeVariableList[listAllParameters,",Intent(inout)",spheno];
MakeVariableList[NewMassParameters,",Intent(inout)",spheno];
MakeVariableList[listVEVs,",Intent(inout)",spheno];

WriteString[spheno,"kont = 0 \n"];

If[Length[UseParameterAsGUTscale]>0,
If[FreeQ[MINPAR,UseParameterAsGUTscale[[1]]]===False,
If[Head[MINPAR[[1,1]]]=!=List,
temp=Select[Transpose[MINPAR][[2]],(FreeQ[UseParameterAsGUTscale,#]==False)&];
If[temp=!={},WriteString[spheno,"Call SetGUTscale("<>SPhenoForm[temp[[1]]]<>") \n"];];,
WriteString[spheno,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[MINPAR],
WriteString[spheno,"Case ("<>ToString[j]<>") \n"];
temp=Select[Transpose[MINPAR[[j]]][[2]],(FreeQ[UseParameterAsGUTscale,#]==False)&];
If[temp=!={},
WriteString[spheno,"  Call SetGUTscale("<>SPhenoForm[temp[[1]]]<>") \n"];,
WriteString[spheno,"  ! Free GUT scale \n"];
];
j++;];
WriteString[spheno,"End Select \n\n"];
];,
temp=Select[Transpose[EXTPAR][[2]],(FreeQ[UseParameterAsGUTscale,#]==False)&];
WriteString[spheno,"Call SetGUTscale("<>SPhenoForm[temp[[1]]]<>") \n"];];
];

If[Head[SetParametersAt]===List && SetParametersAt=!={},
WriteString[spheno,"If ((HighScaleModel.eq.\"LOW\").and.(Abs("<>ToString[SetParametersAt[[1]]]<>".gt.0_dp))) Call SetGUTscale(Abs("<>ToString[SetParametersAt[[1]]]<>") \n "];
];

MakeCall["FirstGuess",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},spheno];
WriteString[spheno,"!If (kont.ne.0) Call TerminateProgram \n \n"];

WriteString[spheno,"If (SPA_Convention) Call SetRGEScale(1.e3_dp**2) \n \n"];

MakeCall["Sugra",Join[NewMassParameters,listAllParameters], {"delta"},{"mGut","kont","WriteOut","n_run"},spheno];
WriteString[spheno,"If (kont.ne.0) Then \n"];
WriteString[spheno," Write(*,*) \"Error appeared in calculation of masses \"\n \n"];
WriteString[spheno," Call TerminateProgram \n"];
WriteString[spheno,"End If \n \n"];

WriteString[spheno,"End Subroutine CalculateSpectrum \n \n\n \n"];


];


GenerateCalcLowEnergy:=Block[{temp,i,j,ii,iiii,tlist,name,indlist,indvector,dimind,k,mfd,mfu,mfe},

(* tlist=Join[Complement[listAllParameters,ParametersToSolveTadpoles],listVEVs]; *)

(* Generate auxiliary variables 'PARinput' *)

tlist = NewMassParameters;

For[i=1,i<=Length[tlist],
name=ToExpression[SPhenoForm[tlist[[i]]]<>"input"];
pos=Position[SPhenoParameters,tlist[[i]]][[1,1]];
SPhenoParameters=Join[SPhenoParameters,{(SPhenoParameters[[pos]] /. tlist[[i]]->name)}];
If[FreeQ[realVar,tlist[[i]]]==False, realVar=Join[realVar,{name}];];
i++;
];

tlist = listAllParametersAndVEVs;
temp={};
For[i=1,i<=Length[tlist],
name=ToExpression[SPhenoForm[tlist[[i]]]<>"input"];
If[FreeQ[SPhenoParameters,name],
pos=Position[SPhenoParameters,tlist[[i]]][[1,1]];
SPhenoParameters=Join[SPhenoParameters,{(SPhenoParameters[[pos]] /. tlist[[i]]->name)}];
If[FreeQ[realVar,tlist[[i]]]==False,
realVar=Join[realVar,{name}];
];
];
temp=Join[temp,{name}];
i++;
];

Print["  Write 'CalculateLowEnergy'"];

MakeSubroutineTitle["CalculateLowEnergyConstraints",Join[temp,Transpose[ListOfLowEnergyNames][[1]]],{},{},spheno];



MakeVariableList[temp,",Intent(inout)",spheno];

MakeVariableList[NewMassParameters,"",spheno];
(* MakeVariableList[NewParametersFromTadpoles,"",spheno]; *)

MakeVariableList[listAllParametersAndVEVs,"",spheno];


MakeVariableList[Intersection[Flatten[{namesAll,namesZW}]],"",spheno];
MakeVariableList[Transpose[ListOfLowEnergyNames][[1]],",Intent(out)",spheno];
WriteString[spheno,"Complex(dp) :: c7,c7p,c8,c8p \n"];
WriteString[spheno,"Real(dp) :: ResultMuE(6), ResultTauMeson(3), ResultTemp(99) \n"];
WriteString[spheno,"Complex(dp), Dimension(3,3) :: "<> SPhenoForm[UpYukawa]<>"_save, "<>SPhenoForm[DownYukawa]<>"_save, "<>SPhenoForm[ElectronYukawa]<>"_save, CKMsave \n"];

If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",spheno];
];
If[UseStandardLowEnergy==True,
WriteString[spheno,"Complex(dp) :: cplFdcFdhhLeff(3,3,"<>ToString[getGenSPheno[HiggsBoson]]<>"), cplFdcFdhhReff(3,3,"<>ToString[getGenSPheno[HiggsBoson]]<>") \n"];
WriteString[spheno,"Complex(dp) ::  cplFdcFdAhLeff(3,3,"<>ToString[getGenSPheno[PseudoScalar]]<>"), cplFdcFdAhReff(3,3,"<>ToString[getGenSPheno[PseudoScalar]]<>"), cpl_CDSu_L(2,3,6), cpl_CDSu_R(2,3,6), mueEff  \n"];
WriteString[spheno,"Complex(dp) :: cplcHpmcFuFdL("<>ToString[getGenSPheno[ChargedHiggs]]<>",3,3), cplcHpmcFuFdR("<>ToString[getGenSPheno[ChargedHiggs]]<>",3,3),cpl_CNuSl_R(2,3,6),cpl_CNuSl_L(2,3,6) \n"];
WriteString[spheno,"Real(dp) :: vevSM(2), gauge(3), gD("<>ToString[numberAllwithVEVs]<>"), Qin,vev2,sinw2\n"];
WriteString[spheno,"Integer :: i1, i2, i3 \n"];

WriteString[spheno,"mueEff="<>SPhenoForm[mueEff]<>" \n\n"];
];

If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,"Real(dp) :: g1D("<>ToString[numberAllwithVEVs]<>"), tz, dt \n"];
]; 
WriteString[spheno,"Real(dp) ::Qin,vev2,sinw2, mzsave, scalein, scale_save, gSM(11),Qinsave, maxdiff =0._dp \n"];
WriteString[spheno, "Integer :: i1, i2, i3, gt1, gt2, gt3, gt4,iQTEST, iQFinal \n"];
WriteString[spheno, "Integer :: IndexArray4(99,4), IndexArray3(99,3), IndexArray2(99,2)   \n"];


If[Length[PreSARAHoperatorsLFV]>0,MakeVariableList[Flatten[Transpose[PreSARAHoperatorsLFV][[3]]],"",spheno];];
If[Length[PreSARAHoperatorsQFV]>0,MakeVariableList[ToExpression[ToString[#]<>"SM"]&/@Flatten[Transpose[PreSARAHoperatorsQFV][[3]]],"",spheno];];
If[Length[PreSARAHoperatorsQFV]>0,MakeVariableList[Flatten[Transpose[PreSARAHoperatorsQFV][[3]]],"",spheno];];
If[Length[PreSARAHoperatorsLFV]>0,MakeVariableList[ToExpression[ToString[#]<>"check"]&/@Flatten[Transpose[PreSARAHoperatorsLFV][[3]]],"",spheno];];
If[Length[PreSARAHoperatorsQFV]>0,MakeVariableList[ToExpression[ToString[#]<>"check"]&/@Flatten[Transpose[PreSARAHoperatorsQFV][[3]]],"",spheno];];

If[Length[WrappersLFV]>0,MakeVariableList[Flatten[Transpose[WrappersLFV][[3]]],"",spheno];];
If[Length[WrappersQFV]>0,MakeVariableList[ToExpression[ToString[#]<>"SM"]&/@Flatten[Transpose[WrappersQFV][[3]]],"",spheno];];
If[Length[WrappersQFV]>0,MakeVariableList[Flatten[Transpose[WrappersQFV][[3]]],"",spheno];];



WriteString[spheno,"Write(*,*) \"Calculating low energy constraints\" \n"];

If[OnlyLowEnergySPheno=!=True,
For[i=1,i<=Length[Gauge],
If[Gauge[[i,2,1]]==1,
WriteString[spheno,SPhenoForm[Gauge[[i,4]]]<> "input = "<>SPhenoForm[Simplify[1/GUTren[i]]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>"input \n"]; 
];
i++;];
];

For[i=1,i<=Length[SA`ListGaugeMixed2],
WriteString[spheno,SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<> "input = "<>SPhenoForm[1/GUTren[SA`ListGaugeMixed2[[i,1,1]],SA`ListGaugeMixed2[[i,1,2]]]]<>"*" <> SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<>"input \n"];
i++;];
WriteString[spheno,"\n\n"];

(* If[OnlyLowEnergySPheno=!=True, *)
WriteString[spheno,"!-------------------------------------\n"];
WriteString[spheno,"! running to 160 GeV for b -> so gamma\n"];
WriteString[spheno,"!-------------------------------------\n\n"];

WriteString[spheno,"Qin=sqrt(getRenormalizationScale()) \n"];
WriteString[spheno,"scale_save = Qin \n"];

MakeCall["RunSM_and_SUSY_RGEs",Join[Map[ToExpression[SPhenoForm[#]<>"input"]&,listAllParametersAndVEVs],listAllParametersAndVEVs],{"160._dp"},{"CKM_160", "sinW2_160", "Alpha_160","AlphaS_160",".false."},spheno];

For[i=1,i<=Length[NewNumericalDependences],
WriteString[spheno, SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
i++;];
For[iQFV=1,iQFV<= 2,

If[iQFV==1,
WriteString[spheno,"\n! ## All contributions ## \n\n"];,
WriteString[spheno,"\n! ## SM only ##\n\n"];
];


If[(getGen[BottomQuark]> 3 || getGen[TopQuark]> 3 || getGen[Electron]>3 )&& Length[PreSARAHoperatorsQFV]>0,
mfu=MassMatrix[TopQuark];
mfd=MassMatrix[BottomQuark];
mfe=MassMatrix[Electron];
mfu[[1;;3,1;;3]]=0;
mfd[[1;;3,1;;3]]=0;
mfe[[1;;3,1;;3]]=0;
mfu[[4;;getGen[TopQuark],4;;getGen[TopQuark]]]=0;
mfd[[4;;getGen[BottomQuark],4;;getGen[BottomQuark]]]=0;
mfe[[4;;getGen[Electron],4;;getGen[Electron]]]=0;
For[j=4,j<=getGen[BottomQuark],mfd[[j,j]]=0;j++;];
For[j=4,j<=getGen[TopQuark],mfu[[j,j]]=0;j++;];
For[j=4,j<=getGen[Electron],mfe[[j,j]]=0;j++;];
MixingQuarkParameters=Select[Select[Transpose[parameters][[1]],FreeQ[Flatten[{mfu,mfd,mfe}],#]==False&],FreeQ[{UpYukawa,DownYukawa,ElectronYukawa,hyperchargeCoupling,leftCoupling,strongCoupling,VEVSM,VEVSM1,VEVSM2},#]==True&];
If[iQFV==2,
For[j=1,j<=Length[MixingQuarkParameters],
If[FreeQ[listVEVs,MixingQuarkParameters[[j]]],
WriteString[spheno,SPhenoForm[MixingQuarkParameters[[j]]] <>" = 0._dp \n"];,
WriteString[spheno,SPhenoForm[MixingQuarkParameters[[j]]] <>" = 0.001_dp \n"];
];
j++;];
];
];



If[iQFV==1 || Length[MixingQuarkParameters]>0,
WriteTadpoleSolution[spheno];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},spheno];
WriteString[spheno," mf_d_160 = "<>ToString[SPhenoMass[BottomQuark]] <>"(1:3) \n"];
WriteString[spheno," mf_d2_160 = "<>ToString[SPhenoMass[BottomQuark]] <>"(1:3)**2 \n"];
WriteString[spheno," mf_u_160 = "<>ToString[SPhenoMass[TopQuark]] <>"(1:3) \n"];
WriteString[spheno," mf_u2_160 = "<>ToString[SPhenoMass[TopQuark]] <>"(1:3)**2 \n"];
WriteString[spheno," mf_l_160 = "<>ToString[SPhenoMass[Electron]] <>"(1:3) \n"];
WriteString[spheno," mf_l2_160 = "<>ToString[SPhenoMass[Electron]] <>"(1:3)**2 \n"];

WriteString[spheno,"If (WriteParametersAtQ) Then \n"];
WriteString[spheno,"! Write running parameters at Q=160 GeV in output file \n"];
For[i=1,i<=Length[listAllParametersAndVEVs],
WriteString[spheno,SPhenoForm[listAllParametersAndVEVs[[i]]] <>"input = "<>SPhenoForm[listAllParametersAndVEVs[[i]]]<>"\n"];
i++;];
WriteString[spheno,"End If \n \n"];

If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[HiggsBoson]]<>"= MhhL \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[HiggsBoson]]<>" = Mhh2L \n"];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[PseudoScalar]]<>"= MAhL \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[PseudoScalar]]<>" = MAh2L \n"];
];
SetGoldstoneMasses[spheno];

MakeCall["AllCouplings" , Join[parametersAll,namesAll],{},{},spheno];
];


If[iQFV==1,
WriteString[spheno,"iQFinal = 1 \n"];
WriteString[spheno,"If (MakeQtest) iQFinal=10 \n"];
WriteString[spheno,"Qinsave=GetRenormalizationScale() \n"];
WriteString[spheno,"Do iQTEST=1,iQFinal \n"];
WriteString[spheno,"maxdiff=0._dp \n"];
WriteString[spheno,"If (MakeQtest) Qin=SetRenormalizationScale(10.0_dp**iQTest) \n"];
];
For[i=1,i<=Length[PreSARAHoperatorsQFV],
If[PreSARAHoperatorsQFV[[i,1]]=!="dummy",
WriteString[spheno,"\n ! **** "<>ToString[PreSARAHoperatorsQFV[[i,1]]]<>" **** \n \n"];

For[j=1,j<=Length[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]]],
indlist={};
indvector="(";
dimInd=Length[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]][[1]]];
For[k=1,k<=dimInd,
indlist=Join[indlist,{ToExpression["gt"<>ToString[k]]}];
indvector=indvector<>"gt"<>ToString[k];
If[k<dimInd,
indvector=indvector<>",";,
indvector=indvector<>")"
];
k++;];
WriteString[spheno,"IndexArray"<>ToString[dimInd]<>"("<>ToString[j]<>",:) = (/"<>StringReplace[ToString[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]][[j]]],{"{"->"","}"->""," "->"","ALL"->"1"}]<>"/) \n"];
j++;];

WriteString[spheno,"Do i1=1,"<>ToString[Length[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]]] ]<>" \n"];
For[j=1,j<=Length[DeleteCases[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]][[1]],ALL]],
WriteString[spheno,"gt"<>ToString[j] <>" = IndexArray"<>ToString[dimInd]<>"(i1,"<>ToString[j]<>") \n"];
j++;];
If[Length[PreSARAHoperatorsQFV[[i,2]]]===3 && FreeQ[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]][[1]],ALL]==False,
WriteString[spheno," Do i2=1,"<>ToString[getGen[PreSARAHoperatorsQFV[[i,2,3]]]]<>" \n"];
WriteString[spheno,"  gt3=i2 \n"];,
If[Length[PreSARAHoperatorsQFV[[i,2]]]===3 ,
WriteString[spheno,"  gt3= 1 \n"];
indlist = Join[indlist,{gt3}];
];
];
If[iQFV==1,
MakeCall["Calculate"<>ToString[PreSARAHoperatorsQFV[[i,1]]],Flatten[{NeededMassesAllSaved[PreSARAHoperatorsQFV[[i,1]]],NeededCouplingsAllSaved[PreSARAHoperatorsQFV[[i,1]]]}],Join[ToString/@indlist,{".False."}],Table[{ToString[PreSARAHoperatorsQFV[[i,3,k]]]<>indvector},{k,1,Length[PreSARAHoperatorsQFV[[i,3]]]}],spheno];,
MakeCall["Calculate"<>ToString[PreSARAHoperatorsQFV[[i,1]]],Flatten[{NeededMassesAllSaved[PreSARAHoperatorsQFV[[i,1]]],NeededCouplingsAllSaved[PreSARAHoperatorsQFV[[i,1]]]}],Join[ToString/@indlist,{".true."}],Table[{ToString[PreSARAHoperatorsQFV[[i,3,k]]]<>"SM"<>indvector},{k,1,Length[PreSARAHoperatorsQFV[[i,3]]]}],spheno];
(*
If[getGen[BottomQuark]\[LessEqual] 3 && getGen[TopQuark]\[LessEqual] 3,
MakeCall["Calculate"<>ToString[PreSARAHoperatorsQFV[[i,1]]],Flatten[{NeededMassesAllSaved[PreSARAHoperatorsQFV[[i,1]]],NeededCouplingsAllSaved[PreSARAHoperatorsQFV[[i,1]]]}],Join[ToString/@indlist,{".true."}],Table[{ToString[PreSARAHoperatorsQFV[[i,3,k]]]<>"SM"<>indvector},{k,1,Length[PreSARAHoperatorsQFV[[i,3]]]}],spheno];,
For[iiii=1,iiii\[LessEqual] Length[PreSARAHoperatorsQFV[[i,3]]],
WriteString[spheno,ToString[PreSARAHoperatorsQFV[[i,3,iiii]]]<>"SM = 0._dp \n"];
iiii++;];
];
*)
];

If[Length[PreSARAHoperatorsQFV[[i,2]]]===3 && FreeQ[NeededCombinations[PreSARAHoperatorsQFV[[i,1]]][[1]],ALL]==False,WriteString[spheno," End Do  \n"];];
WriteString[spheno,"End do \n\n"];

WriteString[spheno,"\n"];
];
i++;];
If[iQFV==1,
WriteString[spheno,"If (MakeQTEST) Then  \n"];
For[ii=1,ii<=Length[PreSARAHoperatorsQFV],
For[k=1,k<=Length[PreSARAHoperatorsQFV[[ii,3]]],
WriteString[spheno,"where (Abs("<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check).ne.0._dp) "<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check = ("<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check-"<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]] <>")/"<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check\n"];
WriteString[spheno,"If(MaxVal(Abs("<> ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check)).gt.maxdiff) maxdiff=MaxVal(Abs("<> ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check))\n"];
WriteString[spheno,ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"check="<>ToString[PreSARAHoperatorsQFV[[ii,3,k]]]<>"\n"];
k++;];
ii++;];
WriteString[spheno,"If (iQTEST.gt.1) Write(*,*) \"Q=\",10.0_dp**iQTest,\" max change=\",maxdiff  \n"];
WriteString[spheno,"If (iQTEST.eq.10) Qin=SetRenormalizationScale(Qinsave) \n"];
WriteString[spheno,"End If  \n"];
WriteString[spheno,"End Do  \n"];
];
iQFV++;];

For[i=1,i<=Length[WrappersQFV],
WriteString[spheno,"\n ! ***** Combine operators for "<>ToString[WrappersQFV[[i,1]]]<>"\n"];
For[j=1,j<=Length[SumContributionsOperators[WrappersQFV[[i,1]]]],
WriteString[spheno,ToString[SumContributionsOperators[WrappersQFV[[i,1]]][[j,1]]]<>" = "<>ToString[SumContributionsOperators[WrappersQFV[[i,1]]][[j,2]]]<>"\n"];
If[Head[SumContributionsOperators[WrappersQFV[[i,1]]][[j,2]]]===Plus,
WriteString[spheno,ToString[SumContributionsOperators[WrappersQFV[[i,1]]][[j,1]]]<>"SM = "<>ToString[Plus@@(ToExpression[ToString[#]<>"SM"]&/@(List@@SumContributionsOperators[WrappersQFV[[i,1]]][[j,2]]))]<>"\n"];,
WriteString[spheno,ToString[SumContributionsOperators[WrappersQFV[[i,1]]][[j,1]]]<>"SM = "<>ToString[SumContributionsOperators[WrappersQFV[[i,1]]][[j,2]]]<>"SM \n"];
];
j++;];

If[Head[NormalizationOperators[WrappersQFV[[i,1]]]]===List,
For[j=1,j<=Length[NormalizationOperators[WrappersQFV[[i,1]]]],
WriteString[spheno,NormalizationOperators[WrappersQFV[[i,1]]][[j]]<>"\n"];
j++;];
];

i++;];

For[i=1,i<=Length[PreSARAHobservablesQFV],
WriteString[spheno,"\n ! **** "<>ToString[PreSARAHobservablesQFV[[i,1]]]<>" **** \n \n"];
MakeCall["Calculate_"<>ToString[PreSARAHobservablesQFV[[i,1]]],{},ToString/@PreSARAHobservablesQFV[[i,4]],ToString/@PreSARAHobservablesQFV[[i,2]],spheno];

For[iiii=1,iiii<=Length[PreSARAHobservablesQFV[[i,2]]],
WriteString[spheno,"If("<>ToString[PreSARAHobservablesQFV[[i,2,iiii]]]<>".ne."<>ToString[PreSARAHobservablesQFV[[i,2,iiii]]]<>") "<>ToString[PreSARAHobservablesQFV[[i,2,iiii]]] <>" = 0._dp \n"];
iiii++;];
i++;];

If[SkipFlavorKit=!=True,
For[i=1,i<=Length[FLHA`WilsonCoefficients],
WriteString[spheno,ToString[FLHA`WilsonCoefficients[[i,5]]]<>" = "<>SPhenoForm[FLHA`WilsonCoefficients[[i,6]]]<>"\n"];
i++;];
];


If[IncludeOldObservables===True,
(* q \[Rule]  q' gamma *)
WriteString[spheno,"\n! *****  b -> s gamma ***** \n\n"];

If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,ToString[SPhenoMass[BottomQuark]] <>"(1:3) = mf_d_mz \n"];
WriteString[spheno,ToString[SPhenoMassSq[BottomQuark]] <>"(1:3) = mf_d_mz**2 \n"];
];

pos=Position[LowEnergyConstraintsParameterList,BToQGamma];
masses=Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings=Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];
MakeCall["BToQGamma",Flatten[{masses,couplings}],{"2",SPhenoForm[leftCoupling],SPhenoForm[DownMatrixL],SPhenoForm[UpMatrixL]},{"BRBtoSGamma","i_scheme=0","NNLO_SM_in=3.15_dp"},spheno];
WriteString[spheno,"BRBtoSGamma = BRBtoSGamma*1.e-4 \n\n"];


If[OnlyLowEnergySPheno=!=True,
WriteString[spheno,ToString[SPhenoMass[BottomQuark]] <>"(1:3) = mf_d \n"];
WriteString[spheno,ToString[SPhenoMassSq[BottomQuark]] <>"(1:3) = mf_d**2 \n"];
];

(* B0s \[Rule] l l *)

WriteString[spheno,"\n! ***** B0s -> l l ***** \n\n"];

(*arguments: inState1(bottom), inState2(strange or down), outState3, outState4 *)
MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","2","1","1"},{"GBsEE","BRBsEE","BRBsEESM"},spheno];
MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","2","2","2"},{"GBsMuMu","BRBsMuMu","BRBsMuMuSM"},spheno];
MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","2","2","1"},{"GBsMuE","BRBsMuE","BRBsMuESM"},spheno];
(*MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","2","3","3"},{"GBsTauTau","BRBsTauTau"},spheno];*)

MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","1","1","1"},{"GBdEE","BRBdEE","BRBdEESM"},spheno];
MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","1","2","2"},{"GBdMuMU","BRBdMuMu","BRBdMuMuSM"},spheno];
MakeCall["BrB0LLp",Flatten[{NeededMassesB0LLp,NeededCouplingsB0LLp}],{"3","1","3","3"},{"GBdTauTau","BRBdTauTau","BRBdTauTauSM"},spheno];
];

WriteString[spheno, "CKM = CKMsave \n"];

(* If[OnlyLowEnergySPheno=!=True, *)
WriteString[spheno,"!-------------------------------------\n"];
WriteString[spheno,"! running to M_Z \n"];
WriteString[spheno,"!-------------------------------------\n\n"];

(*
MakeCall["ParametersToG"<>ToString[numberAllwithVEVs],Map[ToExpression[SPhenoForm[#]<>"input"]&,listAllParametersAndVEVs],{},{"g1D"},spheno];
WriteString[spheno,"Qin=scale_save \n"];

For[i=1,i\[LessEqual]Length[Gauge],
If[Gauge[[i,2,1]]\[Equal]1,
WriteString[spheno,SPhenoForm[Gauge[[i,4]]]<> "input = "<>SPhenoForm[Simplify[GUTren[i]]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>"input \n"]; 
];
i++;];

For[i=1,i\[LessEqual]Length[SA`ListGaugeMixed2],
WriteString[spheno,SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<> "input = "<>SPhenoForm[GUTren[SA`ListGaugeMixed2[[i,1,1]],SA`ListGaugeMixed2[[i,1,2]]]]<>"*" <> SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<>"input \n"];
i++;];
WriteString[spheno,"\n\n"];

WriteString[spheno,"If (RunningSUSYparametersLowEnergy) Then \n"];
WriteString[spheno,"tz=Log(mZ/Qin) \n"];
WriteString[spheno,"dt=tz/100._dp \n"];
WriteString[spheno,"Call odeint(g1D,"<>ToString[numberAllwithVEVs]<>",0._dp,tz,deltaM,dt,0._dp,rge"<>ToString[numberAllwithVEVs]<>",kont)\n\n"];
WriteString[spheno,"End if  \n\n"];
MakeCall["GToParameters"<>ToString[numberAllwithVEVs],listAllParametersAndVEVs,{"g1D"},{},spheno];
WriteString[spheno,"scalein = SetRenormalizationScale(MZ2) \n"];
For[i=1,i\[LessEqual]Length[Gauge],
If[Gauge[[i,2,1]]\[Equal]1,
WriteString[spheno,SPhenoForm[Gauge[[i,4]]]<> " = "<>SPhenoForm[Simplify[GUTren[i]]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>" \n"]; 
];
i++;];

For[i=1,i\[LessEqual]Length[SA`ListGaugeMixed2],
WriteString[spheno,SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<> " = "<>SPhenoForm[GUTren[SA`ListGaugeMixed2[[i,1,1]],SA`ListGaugeMixed2[[i,1,2]]]]<>"*" <> SPhenoForm[SA`ListGaugeMixed2[[i,2,2]]]<>" \n"];
i++;];
WriteString[spheno,"\n\n"];

];

For[i=1,i\[LessEqual]Length[NewNumericalDependences],
WriteString[spheno, SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
i++;];

If[AddSMrunning=!=False, 
WriteString[spheno, "! Running SM parameters \n"];
If[AddOHDM=!=True,
WriteString[spheno,"Call RunSM(sqrt(mz2),deltaM,TanBeta,"<>SPhenoForm[hyperchargeCoupling]<>","<>SPhenoForm[leftCoupling]<>","<>SPhenoForm[strongCoupling]<>","<>SPhenoForm[UpYukawa]<>","<>SPhenoForm[DownYukawa]<>","<>SPhenoForm[ElectronYukawa]<>","<>SPhenoForm[VEVSM1]<>","<>SPhenoForm[VEVSM2]<>") \n"];,
WriteString[spheno,"Call RunSMohdm(sqrt(mz2),deltaM, "<>SPhenoForm[hyperchargeCoupling]<>","<>SPhenoForm[leftCoupling]<>","<>SPhenoForm[strongCoupling]<>","<>SPhenoForm[UpYukawa]<>","<>SPhenoForm[DownYukawa]<>","<>SPhenoForm[ElectronYukawa]<>","<>SPhenoForm[VEVSM]<>") \n"];
];

WriteString[spheno, "If (.not.GenerationMixing) Then \n"];
WriteString[spheno, SPhenoForm[UpYukawa]<> " =Transpose(Matmul(Transpose(CKM),Transpose("<>SPhenoForm[UpYukawa]<>"))) \n"];
WriteString[spheno, "End If \n"];

*)

MakeCall["RunSM_and_SUSY_RGEs",Join[Map[ToExpression[SPhenoForm[#]<>"input"]&,listAllParametersAndVEVs],listAllParametersAndVEVs],{"mz"},{"CKM_MZ", "sinW2_MZ", "Alpha_MZ","AlphaS_MZ",".true."},spheno];
(* ]; *)

WriteTadpoleSolution[spheno];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},spheno];
WriteString[spheno, "mzsave  = sqrt(mz2) \n"];
If[OnlyLowEnergySPheno=!=True,
If[AuxiliaryHyperchargeCoupling, WriteString[spheno,SPhenoForm[hyperchargeCoupling] <>" = " <>SPhenoForm[ExpressionAuxHypercharge]<>"\n"];];
If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[spheno,"mZ2 = 1._dp/4._dp*("<>SPhenoForm[hyperchargeCoupling]<>"**2 + "<>SPhenoForm[leftCoupling]<> "**2)*("
SPhenoForm[VEVSM1]<>"**2 + "<>SPhenoForm[VEVSM2]<>"**2) \n"];
];,
WriteString[spheno,"mZ2 = 1._dp/4._dp*("<>SPhenoForm[hyperchargeCoupling]<>"**2 + "<>SPhenoForm[leftCoupling]<> "**2)*("
SPhenoForm[VEVSM]<>"**2) \n"];
];
WriteString[spheno,"mZ = sqrt(mZ2) \n"];
];
(* SetPoleMasses[spheno]; *)
WriteString[spheno," mf_d_mz = "<>ToString[SPhenoMass[BottomQuark]] <>"(1:3) \n"];
WriteString[spheno," mf_d2_mz = "<>ToString[SPhenoMass[BottomQuark]] <>"(1:3)**2 \n"];
WriteString[spheno," mf_u_mz = "<>ToString[SPhenoMass[TopQuark]] <>"(1:3) \n"];
WriteString[spheno," mf_u2_mz = "<>ToString[SPhenoMass[TopQuark]] <>"(1:3)**2 \n"];
WriteString[spheno," mf_l_MZ = "<>ToString[SPhenoMass[Electron]] <>"(1:3) \n"];
WriteString[spheno," mf_l2_MZ = "<>ToString[SPhenoMass[Electron]] <>"(1:3)**2 \n"];

MakeCall["AllCouplings" , Join[parametersAll,namesAll],{},{},spheno];


If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[spheno,"Mhh_s = "<>SPhenoForm[SPhenoMass[HiggsBoson]]<>" \n"];
WriteString[spheno,"Mhh2_s  = "<>SPhenoForm[SPhenoMassSq[HiggsBoson]]<>"   \n"];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[spheno,"MAh_s = "<>SPhenoForm[SPhenoMass[PseudoScalar]]<>" \n"];
WriteString[spheno,"MAh2_s  = "<>SPhenoForm[SPhenoMassSq[PseudoScalar]]<>"   \n"];
];

If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[HiggsBoson]]<>"= MhhL \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[HiggsBoson]]<>" = Mhh2L \n"];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[PseudoScalar]]<>"= MAhL \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[PseudoScalar]]<>" = MAh2L \n"];
];

If[IncludeOldObservables===True,
pos=Position[LowEnergyConstraintsParameterList,OneLeptonToThreeLeptons];
masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];

MakeCall["BR1LeptonTo3Leptons",Flatten[{masses,couplings}],{"2","1"},{"BRMu3e"},spheno];
MakeCall["BR1LeptonTo3Leptons",Flatten[{masses,couplings}],{"3","1"},{"BRTau3e"},spheno];
MakeCall["BR1LeptonTo3Leptons",Flatten[{masses,couplings}],{"3","2"},{"BRTau3Mu"},spheno];


WriteString[spheno,"\n! *****  mu -> e conversion & tau -> mue + meson ***** \n\n"];

pos=Position[LowEnergyConstraintsParameterList,LLpHadron];
masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];

MakeCall["BrLLpHadron",Flatten[{masses,couplings}],{"2","1"},{"ResultMuE"},spheno];
WriteString[spheno,"MuEAl = ResultMuE(1) \n"];
WriteString[spheno,"MuETi = ResultMuE(2) \n"];
WriteString[spheno,"MuESr = ResultMuE(3) \n"];
WriteString[spheno,"MuESb = ResultMuE(4) \n"];
WriteString[spheno,"MuEAu = ResultMuE(5) \n"];
WriteString[spheno,"MuEPb = ResultMuE(6) \n"];

MakeCall["BrLLpHadron",Flatten[{masses,couplings}],{"3","1"},{"ResultTauMeson"},spheno];
WriteString[spheno,"TauEPi0 = ResultTauMeson(1) \n"];
WriteString[spheno,"TauEEta = ResultTauMeson(2) \n"];
WriteString[spheno,"TauEEtap = ResultTauMeson(3) \n"];

MakeCall["BrLLpHadron",Flatten[{masses,couplings}],{"3","2"},{"ResultTauMeson"},spheno];
WriteString[spheno,"TauMuPi0 = ResultTauMeson(1) \n"];
WriteString[spheno,"TauMuEta = ResultTauMeson(2) \n"];
WriteString[spheno,"TauMuEtap = ResultTauMeson(3) \n"];
];

WriteString[spheno,"iQFinal = 1 \n"];
WriteString[spheno,"If (MakeQtest) iQFinal=10 \n"];
WriteString[spheno,"Qinsave=GetRenormalizationScale() \n"];
WriteString[spheno,"Do iQTEST=1,iQFinal \n"];
WriteString[spheno,"maxdiff=0._dp \n"];
WriteString[spheno,"If (MakeQtest) Qin=SetRenormalizationScale(10.0_dp**iQTest) \n"];

For[i=1,i<=Length[PreSARAHoperatorsLFV],
If[PreSARAHoperatorsLFV[[i,1]]=!="dummy",
WriteString[spheno,"\n ! **** "<>ToString[PreSARAHoperatorsLFV[[i,1]]]<>" **** \n \n"];

For[j=1,j<=Length[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]]],
indlist={};
indvector="(";
dimInd=Length[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]][[1]]];

For[k=1,k<=dimInd,
indlist=Join[indlist,{ToExpression["gt"<>ToString[k]]}];
indvector=indvector<>"gt"<>ToString[k];
If[k<dimInd,indvector=indvector<>",";,indvector=indvector<>")"];
k++;];

WriteString[spheno,"IndexArray"<>ToString[dimInd]<>"("<>ToString[j]<>",:) = (/"<>StringReplace[ToString[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]][[j]]],{"{"->"","}"->""," "->"","ALL"->"1"}]<>"/) \n"];
j++;];

WriteString[spheno,"Do i1=1,"<>ToString[Length[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]]] ]<>" \n"];
For[j=1,j<=Length[DeleteCases[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]][[1]],ALL]],
WriteString[spheno,"gt"<>ToString[j] <>" = IndexArray"<>ToString[dimInd]<>"(i1,"<>ToString[j]<>") \n"];
j++;];

If[Length[PreSARAHoperatorsLFV[[i,2]]]===3 && FreeQ[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]][[1]],ALL]==False,
WriteString[spheno," Do i2=1,"<>ToString[getGen[PreSARAHoperatorsLFV[[i,2,3]]]]<>" \n"];
WriteString[spheno,"  gt3=i2 \n"];,
If[Length[PreSARAHoperatorsLFV[[i,2]]]===3 ,
WriteString[spheno,"  gt3= 1 \n"];
indlist = Join[indlist,{gt3}];
];
];

MakeCall["Calculate"<>ToString[PreSARAHoperatorsLFV[[i,1]]],Flatten[{NeededMassesAllSaved[PreSARAHoperatorsLFV[[i,1]]],NeededCouplingsAllSaved[PreSARAHoperatorsLFV[[i,1]]]}],Join[ToString/@indlist,{".False."}],Table[{ToString[PreSARAHoperatorsLFV[[i,3,k]]]<>indvector},{k,1,Length[PreSARAHoperatorsLFV[[i,3]]]}],spheno];

WriteString[spheno,"End Do \n"];
If[Length[PreSARAHoperatorsLFV[[i,2]]]===3 && FreeQ[NeededCombinations[PreSARAHoperatorsLFV[[i,1]]][[1]],ALL]==False,
WriteString[spheno," End Do \n"];
];
WriteString[spheno,"\n"];
];
i++;];

WriteString[spheno,"If (MakeQTEST) Then  \n"];
For[ii=1,ii<=Length[PreSARAHoperatorsLFV],
For[k=1,k<=Length[PreSARAHoperatorsLFV[[ii,3]]],
WriteString[spheno,"where (Abs("<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check).ne.0._dp) "<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check = ("<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check-"<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]] <>")/"<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check\n"];
WriteString[spheno,"If(MaxVal(Abs("<> ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check)).gt.maxdiff) maxdiff=MaxVal(Abs("<> ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check))\n"];
WriteString[spheno,ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"check="<>ToString[PreSARAHoperatorsLFV[[ii,3,k]]]<>"\n"];
k++;];
ii++;];
WriteString[spheno,"If (iQTEST.gt.1) Write(*,*) \"Q=\",10.0_dp**iQTest,\" max change=\",maxdiff  \n"];
WriteString[spheno,"If (iQTEST.eq.10) Qin=SetRenormalizationScale(Qinsave) \n"];
WriteString[spheno,"End If  \n"];
WriteString[spheno,"End Do  \n"];

For[i=1,i<=Length[WrappersLFV],
WriteString[spheno,"\n ! ***** Combine operators for "<>ToString[WrappersLFV[[i,1]]]<>"\n"];
For[j=1,j<=Length[SumContributionsOperators[WrappersLFV[[i,1]]]],
WriteString[spheno,ToString[SumContributionsOperators[WrappersLFV[[i,1]]][[j,1]]]<>" = "<>ToString[SumContributionsOperators[WrappersLFV[[i,1]]][[j,2]]]<>"\n"];
j++;];

If[Head[NormalizationOperators[WrappersLFV[[i,1]]]]===List,
For[j=1,j<=Length[NormalizationOperators[WrappersLFV[[i,1]]]],
WriteString[spheno,NormalizationOperators[WrappersLFV[[i,1]]][[j]]<>"\n"];
j++;];
];
i++;];

For[i=1,i<=Length[PreSARAHobservablesLFV],
WriteString[spheno,"\n ! **** "<>ToString[PreSARAHobservablesLFV[[i,1]]]<>" **** \n \n"];
MakeCall["Calculate_"<>ToString[PreSARAHobservablesLFV[[i,1]]],{},ToString/@PreSARAHobservablesLFV[[i,4]],ToString/@PreSARAHobservablesLFV[[i,2]],spheno];
i++;];


If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[HiggsBoson]]<>"= Mhh_s \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[HiggsBoson]]<>" = Mhh2_s \n"];
];
If[FreeQ[ParticleDefinitions[SPheno`Eigenstates],"Pseudo-Scalar Higgs"]===False,
WriteString[spheno,SPhenoForm[SPhenoMass[PseudoScalar]]<>"= MAh_s \n"];
WriteString[spheno,SPhenoForm[SPhenoMassSq[PseudoScalar]]<>" = MAh2_s \n"];
];

If[IncludeOldObservables===True,
(* l \[Rule] l' gamma *)
WriteString[spheno,"\n! *****  l -> l' gamma ***** \n\n"];

MakeCall["BrLgammaLp",Flatten[{NeededMassesLLp,NeededCouplingsLLp}],{"2","1"},{"GMuEgamma","BRMuEgamma"},spheno];
MakeCall["BrLgammaLp",Flatten[{NeededMassesLLp,NeededCouplingsLLp}],{"3","1"},{"GTauEgamma","BRTauEgamma"},spheno];
MakeCall["BrLgammaLp",Flatten[{NeededMassesLLp,NeededCouplingsLLp}],{"3","2"},{"GTauMugamma","BRTauMugamma"},spheno];

(* Z \[Rule] l l' *)

WriteString[spheno,"\n! *****  Z -> l l' ***** \n\n"];

MakeCall["BrZLLp",Flatten[{NeededMassesZLLp,NeededCouplingsZLLp}],{"2","1"},{"GZMuE","BRZMuE"},spheno];
MakeCall["BrZLLp",Flatten[{NeededMassesZLLp,NeededCouplingsZLLp}],{"3","1"},{"GZTauE","BRZTauE"},spheno];
MakeCall["BrZLLp",Flatten[{NeededMassesZLLp,NeededCouplingsZLLp}],{"3","2"},{"GZTauMu","BRZTauMu"},spheno];
];

(* G minus 2 *)

WriteString[spheno,"\n! *****  G minus 2 ***** \n\n"];

pos=Position[LowEnergyConstraintsParameterList,Gminus2];
masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];

MakeCall["Gminus2",Flatten[{masses,couplings}],{"1"},{"ae"},spheno];
MakeCall["Gminus2",Flatten[{masses,couplings}],{"2"},{"amu"},spheno];
MakeCall["Gminus2",Flatten[{masses,couplings}],{"3"},{"atau"},spheno];

(* Lepton EDM *)

WriteString[spheno,"\n! *****  Lepton EDM ***** \n\n"];

pos=Position[LowEnergyConstraintsParameterList,LeptonEDM];
masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];

MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"1"},{"EDMe"},spheno];
MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"2"},{"EDMmu"},spheno];
MakeCall["LeptonEDM",Flatten[{masses,couplings}],{"3"},{"EDMtau"},spheno];


(* Delta Rho *)

WriteString[spheno,"\n! *****  delta Rho ***** \n\n"];

If[OnlyLowEnergySPheno=!=True || AddSMrunning=!=False,
If[AuxiliaryHyperchargeCoupling===True, 
WriteString[spheno,SPhenoForm[hyperchargeCoupling] <>" = " <>SPhenoForm[ExpressionAuxHypercharge] <>"\n"];,
WriteString[spheno,"sinW2=0.22290_dp \n"];
WriteString[spheno, SPhenoForm[Weinberg]<>" = asin(sqrt(sinW2)) \n"];
WriteString[spheno,SPhenoForm[leftCoupling]<>"=Sqrt(4._dp*Sqrt2*G_F*mW2) \n"];
WriteString[spheno,SPhenoForm[hyperchargeCoupling]<>"="<>SPhenoForm[leftCoupling]<>"*Sqrt(sinW2/(1._dp-sinW2)) \n"];
];
If[AddOHDM=!=True,
If[FreeQ[parameters,VEVSM1]===False && FreeQ[parameters,VEVSM2]===False,
WriteString[spheno,"mW2=(1._dp-sinW2)*mz2 + "<>SPhenoForm[Simplify[-Vertex[{VectorW,conj[VectorW]}][[2,1]]-(-Vertex[{VectorZ,VectorZ}][[2,1]] )(1-Sin[ThetaW]^2) /. ThetaW->ArcSin[Sqrt[hyperchargeCoupling^2/(hyperchargeCoupling^2+leftCoupling^2)]],{hyperchargeCoupling>0,leftCoupling>0}]/.sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]]<>"\n"];
WriteString[spheno,"vev2=Sqrt(mZ2*(1._dp-sinW2)*SinW2/(pi*alpha)) +"<> SPhenoForm[Simplify[-Vertex[{VectorZ,VectorZ}][[2,1]] -1/4 (VEVSM1^2+VEVSM2^2)(leftCoupling Cos[Weinberg]+hyperchargeCoupling Sin[Weinberg])^2]/.sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]]<>" \n"];
WriteString[spheno,SPhenoForm[VEVSM1]<>"=vev2/Sqrt(1._dp+TanBeta**2) \n"];
WriteString[spheno,SPhenoForm[VEVSM2]<>"=TanBeta*"<>SPhenoForm[VEVSM1]<>" \n"];
];,

WriteString[spheno,"mW2=(1._dp-sinW2)*mz2 + "<>SPhenoForm[Simplify[-Vertex[{VectorW,conj[VectorW]}][[2,1]]-(-Vertex[{VectorZ,VectorZ}][[2,1]] )(1-Sin[ThetaW]^2) /. ThetaW->ArcSin[Sqrt[hyperchargeCoupling^2/(hyperchargeCoupling^2+leftCoupling^2)]],{hyperchargeCoupling>0,leftCoupling>0}]/.sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]]<>"\n"];
WriteString[spheno,"vev2=Sqrt(mZ2*(1._dp-sinW2)*SinW2/(pi*alpha)) +"<> SPhenoForm[Simplify[-Vertex[{VectorZ,VectorZ}][[2,1]] -1/4 (VEVSM^2)(leftCoupling Cos[Weinberg]+hyperchargeCoupling Sin[Weinberg])^2]/.sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}]]<>" \n"];
WriteString[spheno,SPhenoForm[VEVSM]<>"=vev2 \n"];
];
];

WriteTadpoleSolution[spheno];
MakeCall["TreeMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"GenerationMixing","kont"},spheno];
SetPoleMasses[spheno];

MakeCall["CouplingsForVectorBosons" , Join[parametersZW,namesZW],{},{},spheno];

pos=Position[LowEnergyConstraintsParameterList,DeltaRho];
masses = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[2]];
couplings = Extract[LowEnergyConstraintsParameterList,pos[[1,1]]][[3]];

MakeCall["DeltaRho",Flatten[{masses,couplings}],{},{"dRho"},spheno];


(* Neutrino Masses *)

If[FreeQ[massless,Neutrino],
WriteTadpoleSolution[spheno];
WriteString[spheno,"CalculateOneLoopMassesSave = CalculateOneLoopMasses \n"];
WriteString[spheno,"CalculateOneLoopMasses = .true. \n"];
MakeCall["OneLoopMasses",Join[NewMassParameters,Join[listVEVs,listAllParameters]],{},{"kont"},spheno];
WriteString[spheno,"CalculateOneLoopMasses = CalculateOneLoopMassesSave \n"];
WriteString[spheno,"nuMasses = "<>SPhenoForm[SPhenoMass[Neutrino]]<>" \n"];
If[SPhenoForm[NeutrinoMM]=!="Delta",WriteString[spheno,"nuMixing = "<>SPhenoForm[NeutrinoMM]<>" \n"];];
SetPoleMasses[spheno];
];


WriteString[spheno,"If (WriteParametersAtQ) Then \n"];
WriteString[spheno,"scalein = SetRenormalizationScale(160._dp**2) \n"];
WriteString[spheno,"Else \n"];
WriteString[spheno,"scalein = SetRenormalizationScale(scale_save**2) \n"];
WriteString[spheno,"End if \n"];
WriteString[spheno, "mz2 = mzsave**2 \n"];
WriteString[spheno, "mz = mzsave \n"];

If[OnlyLowEnergySPheno=!=True,
For[i=1,i<=Length[Gauge],
If[Gauge[[i,2,1]]==1,
WriteString[spheno,SPhenoForm[Gauge[[i,4]]]<> "input = "<>SPhenoForm[Simplify[GUTren[i]]]<>"*" <> SPhenoForm[Gauge[[i,4]]]<>"input \n"]; 
];
i++;];
];

WriteString[spheno,"End subroutine CalculateLowEnergyConstraints \n \n \n"];

];

WriteSetDependentParameters[file_]:=Block[{i},
For[i=1,i<=Length[subDependencesSPheno],
If[FreeQ[NewNumericalDependences,subDependencesSPheno[[i,1]]],
WriteString[file,SPhenoForm[subDependencesSPheno[[i,1]]]<>" = "<>SPhenoForm[subDependencesSPheno[[i,2]]]<>"\n"];
];
i++;];
];
