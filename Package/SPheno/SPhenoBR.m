(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



GenerateSPhenoBR[Eigenstates_]:=Block[{i},
(*
Print["--------------------------------------"];
Print["Writing Branching Ratios "];
Print["--------------------------------------"];
*)

Print["  Writing branching ratios."];

sphenoBR=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"BranchingRatios_"<>ModelName<>".f90"]];

WriteCopyRight[sphenoBR];


WriteString[sphenoBR, "Module BranchingRatios_"<>ModelName<>" \n \n"];
WriteString[sphenoBR, "Use Control \n"];
WriteString[sphenoBR, "Use Couplings_"<>ModelName<>" \n"];
WriteString[sphenoBR, "Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoBR, "Use LoopCouplings_"<>ModelName<>" \n"];
For[i=1,i<=Length[ListDecayParticles3B],
WriteString[sphenoBR, "Use "<>SPhenoForm[ListDecayParticles3B[[i,1]]] <>"3Decays_"<>ModelName<>" \n"];
i++;];
WriteString[sphenoBR, "Use SUSYDecays_"<>ModelName<>" \n \n"];

WriteString[sphenoBR, "Contains \n \n"];


WriteSPhenoBR[Eigenstates];

WriteString[sphenoBR, "End Module BranchingRatios_"<>ModelName<>" \n "];
Close[sphenoBR];

];


WriteSPhenoBR[Eigenstates_]:=Block[{i},
MakeSubroutineTitle["CalculateBR",Join[Join[NewMassParameters,Join[listVEVs,listAllParameters]],SPhenoWidthBR],{"CTBD","fac3","epsI","deltaM","kont"},{},sphenoBR];

WriteString[sphenoBR,"Real(dp), Intent(in) :: epsI, deltaM, fac3 \n"];
WriteString[sphenoBR,"Integer, Intent(inout) :: kont \n"];
WriteString[sphenoBR,"Logical, Intent(in) :: CTBD \n"];

MakeVariableList[listAllParameters,",Intent(in)",sphenoBR];
MakeVariableList[NewMassParameters,",Intent(in)",sphenoBR];
MakeVariableList[listVEVs,",Intent(in)",sphenoBR];
MakeVariableList[SPhenoWidthBR,",Intent(inout)",sphenoBR];
(* MakeVariableList[namesAll,"",sphenoBR]; *)
If[NewNumericalDependences=!={},
MakeVariableList[Transpose[NewNumericalDependences ][[1]],"",sphenoBR];
];
MakeVariableList[{cplHiggsPP,cplHiggsGG,cplPseudoHiggsPP,cplPseudoHiggsGG, cplHiggsZZvirt, cplHiggsWWvirt},"",sphenoBR];
If[getGen[PseudoScalar]<99 && FreeQ[ListDecayParticles,PseudoScalar],
If[getGen[PseudoScalar]===1,
WriteString[sphenoBR,"Real(dp) :: "<>ToString[SPhenoWidth[PseudoScalar]]<>" \n"];,
WriteString[sphenoBR,"Real(dp) ::  "<>ToString[SPhenoWidth[PseudoScalar]]<>"("<>ToString[getGen[PseudoScalar]]<>") \n"];
];
(* i++; *)
];

(*
MakeVariableList[NeededRatiosLoopCouplings,"",sphenoBR];
MakeVariableList[NeededRatiosLoopCouplingsPseudo,"",sphenoBR];
*)

MakeVariableList[All3BodyWidths,"",sphenoBR];
WriteString[sphenoBR,"Complex(dp) :: coup \n"];
WriteString[sphenoBR,"Real(dp) :: vev \n"];

(* WriteString[sphenoBR,"Real(dp) :: "<>ToString[SPhenoWidth[VectorZ]]<>","<>ToString[SPhenoWidth[VectorW]]<>" \n"]; *)

MakeVariableList[SPhenoWidthVP,"",sphenoBR];

WriteString[sphenoBR, "Iname = Iname + 1 \n"];
WriteString[sphenoBR, "NameOfUnit(Iname) = 'CalculateBR'\n \n"];

WriteString[sphenoBR,"Write(*,*) \"Calculating branching ratios and decay widths\" \n"];

For[i=1,i<=Length[NewNumericalDependences],
WriteString[sphenoBR, SPhenoForm[NewNumericalDependences[[i,1]]] <> " = " <> SPhenoForm[NewNumericalDependences[[i,2]]] <> "\n"];
i++;];


WriteString[sphenoBR,ToString[SPhenoWidth[VectorW]]<>" = gamW \n"];
WriteString[sphenoBR,ToString[SPhenoWidth[VectorZ]]<>" = gamZ \n"];


For[i=1,i<=Length[savedDecayInfos],
WriteString[sphenoBR,"gP"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];
WriteString[sphenoBR,"gT"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];
WriteString[sphenoBR,"BR"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];

If[FreeQ[Transpose[ListDecayParticles3B][[1]],savedDecayInfos[[i,1]]]==True || FreeQ[BR2and3,savedDecayInfos[[i,1]]]==True,

MakeCall[ToString[savedDecayInfos[[i,1]]]<>"TwoBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs}],{"-1","DeltaM"},{"gP"<>ToString[savedDecayInfos[[i,1]]],"gT"<>ToString[savedDecayInfos[[i,1]]],"BR"<>ToString[savedDecayInfos[[i,1]]]},sphenoBR]; 

If[FreeQ[GoldstoneGhost,savedDecayInfos[[i,1]]]==False,
WriteString[sphenoBR,"! Set Goldstone Widhts \n"];
pos = Position[GoldstoneGhost,savedDecayInfos[[i,1]]];
For[k=1,k<=Length[pos],
If[FreeQ[ListDecayParticles,GoldstoneGhost[[pos[[k,1]],2]]/. A_[{b__}]->A]==False,
If[Head[GoldstoneGhost[[pos[[k,1]],2]]]===Symbol,
WriteString[sphenoBR,SPhenoWidth[GoldstoneGhost[[pos[[k,1]],2]],1]<>"="<>SPhenoWidth[GoldstoneGhost[[pos[[k,1]],1]],i] <>"\n" ];,
WriteString[sphenoBR,SPhenoWidth[GoldstoneGhost[[pos[[k,1]],2,0]],GoldstoneGhost[[pos[[k,1]],2,1,1]]]<>"="<>SPhenoWidth[GoldstoneGhost[[pos[[k,1]],1]],i] <>"\n" ];
];
];
k++;];
WriteString[sphenoBR,"\n\n"];
];,

pos=Position[BR2and3,savedDecayInfos[[i,1]]][[1,1]];
length2B = "(:,1:"<>ToString[Extract[BR2and3,pos][[2]]]<>")";
length3B = "(:,"<>ToString[Extract[BR2and3,pos][[2]]+1] <>":"<>ToString[Extract[BR2and3,pos][[3]]] <>")";


(* WriteString[sphenoBR,"If (.Not.CTBD) Then \n"]; *)

MakeCall[ToString[savedDecayInfos[[i,1]]]<>"TwoBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs}],{"-1", "DeltaM"},{"gP"<>ToString[savedDecayInfos[[i,1]]]<>length2B,"gT"<>ToString[savedDecayInfos[[i,1]]],"BR"<>ToString[savedDecayInfos[[i,1]]]<>length2B},sphenoBR];


(*
If[getType[savedDecayInfos[[i,1]]]===F,
WriteString[sphenoBR,"If (Enable3BDecaysF) Then \n"];,
WriteString[sphenoBR,"If (Enable3BDecaysS) Then \n"];
];
If[getGenSPheno[savedDecayInfos[[i,1]]]>1,
WriteString[sphenoBR,"If (MaxVal(gT"<>ToString[savedDecayInfos[[i,1]]]<>").Lt.MaxVal(fac3*Abs("<>ToString[SPhenoMass[savedDecayInfos[[i,1]]]]<>"))) Then \n"];,
WriteString[sphenoBR,"If (gT"<>ToString[savedDecayInfos[[i,1]]]<>".Lt.fac3*Abs("<>ToString[SPhenoMass[savedDecayInfos[[i,1]]]]<>")) Then \n"];
];

pos=Position[Transpose[ListDecayParticles3B][[1]],savedDecayInfos[[i,1]]][[1,1]];

MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".False.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR];


WriteString[sphenoBR,"Else \n"];

MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".True.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR];

WriteString[sphenoBR,"End If \n \n"];
WriteString[sphenoBR,"End If \n"];

WriteString[sphenoBR,"Else \n"];


MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".False.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR]; 

WriteString[sphenoBR,"End If \n"];
*)

WriteString[sphenoBR,"Do i1=1,"<>ToString[getGenSPheno[savedDecayInfos[[i,1]]]] <>"\n"];
WriteString[sphenoBR,SPhenoWidth[savedDecayInfos[[i,1]],i1]<>" =Sum("<>ToString[SPhenoPartialWidth[savedDecayInfos[[i,1]]]]<>"(i1,:)) \n"];
WriteString[sphenoBR,"If ("<>SPhenoWidth[savedDecayInfos[[i,1]],i1]<>".Gt.0._dp) "<>ToString[SPhenoBR[savedDecayInfos[[i,1]]]]<>"(i1,: ) ="<>ToString[SPhenoPartialWidth[savedDecayInfos[[i,1]]]] <>"(i1,:)/"<> ToString[SPhenoWidth[savedDecayInfos[[i,1]],i1]]<>" \n"];
WriteString[sphenoBR,"End Do \n \n\n"];


];
i++;];


For[i=1,i<=Length[savedDecayInfos],
(*
WriteString[sphenoBR,"gP"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];
WriteString[sphenoBR,"gT"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];
WriteString[sphenoBR,"BR"<>ToString[savedDecayInfos[[i,1]]]<>" = 0._dp \n"];
*)
If[FreeQ[Transpose[ListDecayParticles3B][[1]],savedDecayInfos[[i,1]]]==True || FreeQ[BR2and3,savedDecayInfos[[i,1]]]==True,
WriteString[sphenoBR,"! No 3-body decays for "<>SPhenoForm[savedDecayInfos[[i,1]]]<>"  \n"];
(*
MakeCall[ToString[savedDecayInfos[[i,1]]]<>"TwoBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs}],{"-1","DeltaM"},{"gP"<>ToString[savedDecayInfos[[i,1]]],"gT"<>ToString[savedDecayInfos[[i,1]]],"BR"<>ToString[savedDecayInfos[[i,1]]]},sphenoBR]; 

If[FreeQ[GoldstoneGhost,savedDecayInfos[[i,1]]]\[Equal]False,
WriteString[sphenoBR,"! Set Goldstone Widhts \n"];
pos = Position[GoldstoneGhost,savedDecayInfos[[i,1]]];
For[k=1,k\[LessEqual]Length[pos],
If[FreeQ[ListDecayParticles,GoldstoneGhost[[pos[[k,1]],2]]/. A_[{b__}]\[Rule]A]\[Equal]False,
If[Head[GoldstoneGhost[[pos[[k,1]],2]]]===Symbol,
WriteString[sphenoBR,SPhenoWidth[GoldstoneGhost[[pos[[k,1]],2]],1]<>"="<>SPhenoWidth[GoldstoneGhost[[pos[[k,1]],1]],i] <>"\n" ];,
WriteString[sphenoBR,SPhenoWidth[GoldstoneGhost[[pos[[k,1]],2,0]],GoldstoneGhost[[pos[[k,1]],2,1,1]]]<>"="<>SPhenoWidth[GoldstoneGhost[[pos[[k,1]],1]],i] <>"\n" ];
];
];
k++;];
WriteString[sphenoBR,"\n\n"];
]; *),

pos=Position[BR2and3,savedDecayInfos[[i,1]]][[1,1]];
length2B = "(:,1:"<>ToString[Extract[BR2and3,pos][[2]]]<>")";
length3B = "(:,"<>ToString[Extract[BR2and3,pos][[2]]+1] <>":"<>ToString[Extract[BR2and3,pos][[3]]] <>")";


WriteString[sphenoBR,"If (.Not.CTBD) Then \n"];

(*
MakeCall[ToString[savedDecayInfos[[i,1]]]<>"TwoBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs}],{"-1", "DeltaM"},{"gP"<>ToString[savedDecayInfos[[i,1]]]<>length2B,"gT"<>ToString[savedDecayInfos[[i,1]]],"BR"<>ToString[savedDecayInfos[[i,1]]]<>length2B},sphenoBR];
*)

If[getType[savedDecayInfos[[i,1]]]===F,
WriteString[sphenoBR,"If (Enable3BDecaysF) Then \n"];,
WriteString[sphenoBR,"If (Enable3BDecaysS) Then \n"];
];
If[getGenSPheno[savedDecayInfos[[i,1]]]>1,
WriteString[sphenoBR,"If (MaxVal(gT"<>ToString[savedDecayInfos[[i,1]]]<>").Lt.MaxVal(fac3*Abs("<>ToString[SPhenoMass[savedDecayInfos[[i,1]]]]<>"))) Then \n"];,
WriteString[sphenoBR,"If (gT"<>ToString[savedDecayInfos[[i,1]]]<>".Lt.fac3*Abs("<>ToString[SPhenoMass[savedDecayInfos[[i,1]]]]<>")) Then \n"];
];

pos=Position[Transpose[ListDecayParticles3B][[1]],savedDecayInfos[[i,1]]][[1,1]];

MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".False.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR];


WriteString[sphenoBR,"Else \n"];

MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".True.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR];

WriteString[sphenoBR,"End If \n \n"];
WriteString[sphenoBR,"End If \n"];

WriteString[sphenoBR,"Else \n"];


MakeCall[ToString[savedDecayInfos3Body[[pos,1]]]<>"ThreeBodyDecay",Flatten[{NewMassParameters,listAllParametersAndVEVs,savedDecayInfos3Body[[pos,4]],savedDecayInfos3Body[[pos,5]]}],{"-1"},{"epsI", "deltaM",".False.","gT"<>ToString[savedDecayInfos3Body[[pos,1]]],"gP"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B,"BR"<>ToString[savedDecayInfos3Body[[pos,1]]]<>length3B},sphenoBR]; 

WriteString[sphenoBR,"End If \n"];


WriteString[sphenoBR,"Do i1=1,"<>ToString[getGenSPheno[savedDecayInfos[[i,1]]]] <>"\n"];
WriteString[sphenoBR,SPhenoWidth[savedDecayInfos[[i,1]],i1]<>" =Sum("<>ToString[SPhenoPartialWidth[savedDecayInfos[[i,1]]]]<>"(i1,:)) \n"];
WriteString[sphenoBR,"If ("<>SPhenoWidth[savedDecayInfos[[i,1]],i1]<>".Gt.0._dp) "<>ToString[SPhenoBR[savedDecayInfos[[i,1]]]]<>"(i1,: ) ="<>ToString[SPhenoPartialWidth[savedDecayInfos[[i,1]]]] <>"(i1,:)/"<> ToString[SPhenoWidth[savedDecayInfos[[i,1]],i1]]<>" \n"];
WriteString[sphenoBR,"End Do \n \n\n"];



];
i++;];


WriteString[sphenoBR,"Iname = Iname - 1 \n \n"];

WriteString[sphenoBR,"End Subroutine CalculateBR \n"];

];
