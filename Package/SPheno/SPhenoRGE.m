(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
GenerateSPhenoRGEs:=Block[{i, currentRegime,readRegime},
(* $sarahCurrentSPhenoDir=ToFileName[{$sarahCurrentOutputDir,"SPheno"}]; *)
(*CreateDirectory[$sarahCurrentSPhenoDir];*)
Print[StyleForm["Write RGEs","Section",FontSize->12]];
sphenoRGE=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"RGEs_"<>ModelName<>".f90"]];

SPhenoParameters=Join[SPhenoParameters,{{Tr1,{gaugenr},{AnzahlGauge}}}];
SPhenoParameters=Join[SPhenoParameters,{{Tr2,{gaugenr},{AnzahlGauge}}}];
SPhenoParameters=Join[SPhenoParameters,{{Tr2U1,{gaugenr,gaugenr},{AnzahlGauge,AnzahlGauge}}}];
SPhenoParameters=Join[SPhenoParameters,{{Tr3,{gaugenr},{AnzahlGauge}}}];

listAllParameters = {};
listBeta1Loop = {};
listBeta2Loop = {};

If[ThreeIndexParametersInvolved===True,
BetaLijklSave=BetaLijkl;
BetaYijkSave=BetaYijk;
BetaTijkSave=BetaTijk;
BetaMuijSave=BetaMuij;
BetaBijSave=BetaBij;
BetaMiSave=BetaMi;
BetaDGiSave=BetaDGi;
BetaFIiSave=BetaFIi;
Betam2ijSave=Betam2ij;
BetaGaugeSave=BetaGauge;
BetaVEVSave=BetaVEV;
TraceAbbrSave=TraceAbbr;
GijSave=Gij;

BetaLijkl=BetaLijkl3I;
BetaYijk=BetaYijk3I;
BetaTijk=BetaTijk3I;
BetaMuij=BetaMuij3I;
BetaBij=BetaBij3I;
BetaMi=BetaMi3I;
BetaFIi=BetaFIi3I;
BetaDGi=BetaDGi3I;
Betam2ij=Betam2ij3I;
BetaGauge=BetaGauge3I;
BetaVEV=BetaVEV3I;
TraceAbbr=TraceAbbr3I;
Gij=Gij3I;
];

If[Length[BetaGauge]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaGauge][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaGauge][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaGauge][[3]]];
];
If[Length[BetaLijkl]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaLijkl][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaLijkl][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaLijkl][[3]]];
];
If[Length[BetaYijk]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaYijk][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaYijk][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaYijk][[3]]];
];
If[Length[BetaMi]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaMi][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaMi][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaMi][[3]]];
];
If[Length[BetaTijk]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaTijk][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaTijk][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaTijk][[3]]];
];
If[Length[Betam2ij]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[Betam2ij][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[Betam2ij][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[Betam2ij][[3]]];
];
If[Length[BetaMuij]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaMuij][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaMuij][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaMuij][[3]]];
];
If[Length[BetaMFij]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaMFij][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaMFij][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaMFij][[3]]];
];
If[Length[BetaRijk]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaRijk][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaRijk][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaRijk][[3]]];
];
If[Length[BetaBij]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaBij][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaBij][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaBij][[3]]];
];
If[Length[BetaWijkl]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaWijkl][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaWijkl][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaWijkl][[3]]];
];
If[Length[BetaQijkl]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaQijkl][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaQijkl][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaQijkl][[3]]];
];
If[Length[BetaLi]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaLi][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaLi][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaLi][[3]]];
];
If[Length[BetaLSi]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaLSi][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaLSi][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaLSi][[3]]];
];
If[Length[BetaDGi]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaDGi][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaDGi][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaDGi][[3]]];
];

If[Length[BetaFIi]!= 0,
listAllParameters =Join[listAllParameters ,Transpose[BetaFIi][[1]]];
listBeta1Loop  = Join[listBeta1Loop ,Transpose[BetaFIi][[2]]];
listBeta2Loop  = Join[listBeta2Loop ,Transpose[BetaFIi][[3]]];
];




listBeta1LoopTemp={};
listBeta2LoopTemp={};
listAllParametersTemp=Join[lowScaleNames,highScaleNames];

For[i=1,i<=Length[listAllParametersTemp],
pos=Position[listAllParameters,listAllParametersTemp[[i]]][[1,1]];
listBeta1LoopTemp=Join[listBeta1LoopTemp,{listBeta1Loop[[pos]]}];
listBeta2LoopTemp=Join[listBeta2LoopTemp,{listBeta2Loop[[pos]]}];
i++;];

listAllParameters=listAllParametersTemp;
listBeta1Loop=listBeta1LoopTemp;
listBeta2Loop=listBeta2LoopTemp;

If[IntermediateScale =!=True,
WriteRGEsHeader;
SubNr="";,
SubNr="R"<>ToString[RegimeNr];
];

(* RGEs for Gauge and Yukawa Couplings *)



list1LoopLow={};
list2LoopLow={};

For[i=1,i<=Length[listAllParameters],
If[FreeQ[lowScaleNames,listAllParameters[[i]]]==False,
list1LoopLow = Join[list1LoopLow,{listBeta1Loop[[i]]}];
list2LoopLow= Join[list2LoopLow,{listBeta2Loop[[i]]}];
];
i++;];



(*
Print["-----------------------------------"];
Print["Write RGEs for Low Scale Parameters"];
Print["-----------------------------------"];
*)

DynamicRGEbeta[numberLow]="";
Print["  Processing RGEs running up: ",Dynamic[DynamicRGEup]," ",Dynamic[DynamicRGEbeta[numberLow]]];

DynamicRGEup="Generating abbreviations";
subSPhenoMatTr={};
GenerateSPhenoAbbr[list1LoopLow,list2LoopLow];

numberLow=GetNumberParameters[lowScaleNames];

DynamicRGEup="Writing GToParameters";
WriteGToParameters[lowScaleNames,numberLow];
DynamicRGEup="Writing ParametersToG";
WriteParametersToG[lowScaleNames,numberLow];


If[FreeQ[list1LoopLow,Tr1]==False,
subSPhenoMatTr={};
DynamicRGEup="Generating abbreviations";
GenerateSPhenoAbbr[Join[list1LoopLow,Transpose[TraceAbbr[[1]]/.{}->{{{},{}}}][[2]]/.{{}}->{}],Join[list2LoopLow,Transpose[TraceAbbr[[2]]/.{}->{{{},{}}}][[2]]/.{{}}->{} ]];
DynamicRGEup="Writing Beta-Functions";
WriteSPhenoRGE[lowScaleNames,list1LoopLow,list2LoopLow,{},TraceAbbr,numberLow];,
DynamicRGEup="Writing Beta-Functions";
WriteSPhenoRGE[lowScaleNames,list1LoopLow,list2LoopLow,{},{},numberLow];
];




If[AllRGEsRunning===False,

(*
Print["-------------------------------"];
Print["Write RGEs for all Parameters"];
Print["-------------------------------"];
*)
DynamicRGEbeta[numberAll]="";
Print["  Processing RGEs running down: ",Dynamic[DynamicRGEdown]," ",Dynamic[DynamicRGEbeta[numberAll]]];
(* All RGEs  *)

subSPhenoMatTr={};
If[Head[TraceAbbr]===List,
DynamicRGEdown="Generating abbreviations";
GenerateSPhenoAbbr[Join[listBeta1Loop,Transpose[TraceAbbr[[1]]/.{}->{{{},{}}}][[2]]]/.{{}}->{},Join[listBeta2Loop,Transpose[TraceAbbr[[2]] /.{}->{{{},{}}}][[2]]/.{{}}->{} ]];, 
DynamicRGEdown="Generating abbreviations";
GenerateSPhenoAbbr[listBeta1Loop/.{{}}->{},listBeta2Loop/.{{}}->{} ];
];

numberAll = GetNumberParameters[listAllParameters];

DynamicRGEup="Writing GToParameters";
WriteGToParameters[listAllParameters,numberAll];
DynamicRGEup="Writing ParametersToG";
WriteParametersToG[listAllParameters,numberAll];

DynamicRGEdown="Writing Beta-Functions";
WriteSPhenoRGE[listAllParameters,listBeta1Loop ,listBeta2Loop ,{},If[Head[TraceAbbr]===List,TraceAbbr,{}], numberAll];,

numberAll = numberLow;



];




(* If[Length[NeededAnaDimsForVEVs]>0 ||Length[BetaVEV]>0, *)
If[Length[BetaVEV]>0,
(*
Print["-------------------------------"];
Print["Write RGEs including VEVs      "];
Print["-------------------------------"];
*)



subSPhenoMatTr={};
listAllParametersAndVEVs=listAllParameters;
(* listAllParametersAndVEVs = Join[listAllParameters,listVEVs]; *)
listBeta1LoopVEVs = listBeta1Loop;
listBeta2LoopVEVs = listBeta2Loop;


For[i=1,i<=(*Length[NeededAnaDimsForVEVs]*)Length[BetaVEV],
(* listAllParametersAndVEVs =Join[listAllParametersAndVEVs,{NeededAnaDimsForVEVs[[i,2]]}]; *)
listAllParametersAndVEVs =Join[listAllParametersAndVEVs,{BetaVEV[[i,1]]}];
listBeta1LoopVEVs = Join[listBeta1LoopVEVs,{BetaVEV[[i,2]]}];
listBeta2LoopVEVs = Join[listBeta2LoopVEVs,{BetaVEV[[i,3]]}];
i++;];

 numberAllwithVEVs = numberAll +GetNumberParameters[Transpose[BetaVEV][[1]]/. A_[i1]->A];

DynamicRGEbeta[numberAllwithVEVs]="";
Print["  Processing RGEs running including VEVs: ",Dynamic[DynamicRGEall]," ",Dynamic[DynamicRGEbeta[numberAllwithVEVs]]];

If[RGEsForVEVs=!=False,
DynamicRGEall="Generating abbreviations";
If[Head[TraceAbbr]===List,
GenerateSPhenoAbbr[Join[listBeta1LoopVEVs,Transpose[TraceAbbr[[1]]/.{}->{{{},{}}}][[2]]/.{{}}->{}],Join[listBeta2LoopVEVs,Transpose[TraceAbbr[[2]]/.{}->{{{},{}}}][[2]]/.{{}}->{} ]];,
GenerateSPhenoAbbr[listBeta1LoopVEVs/.{{}}->{},listBeta2LoopVEVs/.{{}}->{} ];
];
DynamicRGEall="Writing GToParameters";
WriteGToParameters[listAllParametersAndVEVs,numberAllwithVEVs ];
DynamicRGEall="Writing ParametersToG";
WriteParametersToG[listAllParametersAndVEVs,numberAllwithVEVs ];

DynamicRGEall="Writing Beta-Functions";
WriteSPhenoRGE[listAllParametersAndVEVs,listBeta1LoopVEVs,listBeta2LoopVEVs ,{},If[Head[TraceAbbr]===List,TraceAbbr,{}], numberAllwithVEVs];
]; ,
numberAllwithVEVs = numberAll;
listAllParametersAndVEVs = listAllParameters; 
(* numberAllwithVEVs=numberAll+GetNumberParameters[listVEVs/. A_[i1]\[Rule]A]; *)
];


If[IntermediateScale =!= True && Head[RegimeNr]===Integer,
currentRegime = "Regime-"<>ToString[RegimeNr];
For[i=1,i<RegimeNr,
readRegime = "Regime-"<>ToString[i];
AppendSourceCode[ToFileName[StringReplace[$sarahCurrentSPhenoDir,{currentRegime->readRegime,ToString[EigenstateName]->ToString[ListOfRegimeEigenstates[[i]]]}],"RGEs_"<>ModelName<>".f90"],sphenoRGE];
i++;];
];



If[WriteSPhenoAnaDim==True,
If[Length[BetaGauge]!= 0,
listAllAnaDims =Transpose[Gij][[1]] /. A_[{a__}][{b__}]->A /. A_[{a__}]->A;
listAnaDim1Loop  =Transpose[Gij][[2]];
listAnaDim2Loop  = Transpose[Gij][[3]];
];

GenerateSPhenoAbbr[listAnaDim1Loop,listAnaDim2Loop];

numberAnaDim = Sum[getDimSPheno[listAllAnaDims[[i,1]]],{i,1,Length[listAllAnaDims]}];

temp=listAllAnaDims;
listAllAnaDims={};

For[i=1,i<=Length[temp],
name=ToExpression["Gamma"<>ToString[temp[[i,1]]]<>ToString[temp[[i,2]]]];
If[getDimSPheno[temp[[i,1]]]>1,
SPhenoParameters=Join[SPhenoParameters,{{name,{generation,generation},{getDimSPheno[temp[[i,1]]],getDimSPheno[temp[[i,1]]]}}}];,
SPhenoParameters=Join[SPhenoParameters,{{name,{},{1}}}];
];
listAllAnaDims=Join[listAllAnaDims,{name}];
i++;];

(*
WriteGToParameters[listAllAnaDims,numberAnaDim];
WriteParametersToG[listAllAnaDims,numberAnaDim]; 
*)

If[FreeQ[list1LoopLow,Tr1]==False,
WriteSPhenoRGE[listAllAnaDims,listAnaDim1Loop,listAnaDim2Loop,{},TraceAbbr,numberAnaDim];,
WriteSPhenoRGE[listAllAnaDims,listAnaDim1Loop,listAnaDim2Loop,{},{},numberAnaDim];
];

];


If[IntermediateScale =!=True,
(* AppendSourceCode["RGE10_SM.f90",sphenoRGE]; *)
(* WriteKronecker; *)


WriteString[sphenoRGE, "End Module RGEs_"<>ModelName<>" \n \n"];
];




Close[sphenoRGE];
];







(* ::Input::Initialization:: *)
GetNumberParameters[x_]:=Block[{i,temp,dim},
temp=0;
For[i=1,i<=Length[x],
If[MemberQ[realVar,x[[i]]]==True,
temp += Apply[Times,getDimParameters[x[[i]]]];,
temp +=2* Apply[Times,getDimParameters[x[[i]]]];
];
i++;];
Return[temp];
];


(* ::Input::Initialization:: *)
WriteRGEsHeader :=Block[{i, generationsUnitMatrix, i1, i2},
WriteCopyRight[sphenoRGE];

WriteString[sphenoRGE, "Module RGEs_"<>ModelName<>" \n \n"];
WriteString[sphenoRGE, "Use Control \n"];
WriteString[sphenoRGE, "Use Settings \n"];
WriteString[sphenoRGE, "Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoRGE, "Use Mathematics \n \n"];


(* WriteString[sphenoRGE, "Logical,Save::TwoLoopRGE=.True.\n"]; *)
WriteString[sphenoRGE, "Logical,Private,Save::OnlyDiagonal\n\n"];

(*
WriteString[sphenoRGE, "Interface Chop2 \n"];
WriteString[sphenoRGE, "Module Procedure Chop2_CN,Chop2_CV,Chop2_CM,Chop2_CT \n"];
WriteString[sphenoRGE, "End Interface \n"];
*)


For[i=1,i<=Length[ThresholdParticles],
WriteString[sphenoRGE,"Real(dp) :: NumberGenerations" <> SPhenoForm[ThresholdParticles[[i]]]<>" = 0._dp \n"];
i++];

If[Length[ThresholdParticles]>0,
WriteString[sphenoRGE,"Integer, save :: ThresholdCrossed = 1 \n"];
];

 generationsUnitMatrix ={};

For[i=1,i<=Length[listAllParameters],
dim=getDimSPheno[listAllParameters[[i]]];
If[Length[dim]==2,
If[dim[[1]]==dim[[2]] && dim[[1]]!=2,
 generationsUnitMatrix = Join[ generationsUnitMatrix,{dim[[1]]}];
];
];
i++;];
 generationsUnitMatrix = Intersection[generationsUnitMatrix];

For[i=1,i<=Length[generationsUnitMatrix],
dim = generationsUnitMatrix[[i]];
WriteString[sphenoRGE, "Real(dp),Parameter::id"<>ToString[dim]<>"R("<>ToString[dim]<>","<>ToString[dim]<>")=& \n"];
WriteString[sphenoRGE, "   & Reshape(Source=(/& \n"];
WriteString[sphenoRGE, "   & "];
For[i1=1,i1<=dim,
For[i2=1,i2<=dim,
If[i2==i1,
If[i2===dim,
WriteString[sphenoRGE,"1"];,
WriteString[sphenoRGE,"1,"];
];,
WriteString[sphenoRGE,"0,"];
];
i2++;];
WriteString[sphenoRGE,"& \n &"];
i1++;];
WriteString[sphenoRGE, "/),shape=(/"<>ToString[dim]<>","<>ToString[dim]<>"/)) \n"];

i++;];




WriteString[sphenoRGE, "Contains \n\n\n"];

(*
WriteString[sphenoRGE, "Subroutine Chop2_CN(z) \n"];
WriteString[sphenoRGE, "implicit none \n"];
WriteString[sphenoRGE, "Complex(dp),Intent(inout)::z \n"];
WriteString[sphenoRGE, "Real(dp)::re,im \n"];
WriteString[sphenoRGE, "Real(dp),Parameter::eps=100._dp*Epsilon(1._dp) \n"];
WriteString[sphenoRGE, "re=Real(z,dp) \n"];
WriteString[sphenoRGE, "im=Aimag(z) \n"];
WriteString[sphenoRGE, "If ((Abs(re).Lt.max1).or.(Abs(re/im)).lt.1.0E-12_dp)) re=0._dp \n"];
WriteString[sphenoRGE, "If ((Abs(im).Lt.max1).or.(Abs(im/re)).lt.1.0E-12_dp)) im=0._dp \n"];
WriteString[sphenoRGE, "z=Cmplx(re,im,dp) \n"];
WriteString[sphenoRGE, "End Subroutine Chop2_CN \n\n"];

WriteString[sphenoRGE, "Subroutine Chop2_CV(vec) \n"];
WriteString[sphenoRGE, "Implicit None \n"];
WriteString[sphenoRGE, "Complex(dp),Intent(inout)::vec(:) \n"];
WriteString[sphenoRGE, "Integer::len,i1 \n"];
WriteString[sphenoRGE, "Real(dp)::re,im,max1 \n"];
WriteString[sphenoRGE, "Real(dp),Parameter::eps=100._dp*Epsilon(1._dp) \n"];
WriteString[sphenoRGE, "max1=eps*Maxval(Abs(vec)) \n"];
WriteString[sphenoRGE, "len=Size(vec) \n"];
WriteString[sphenoRGE, "Do i1=1,len \n"];
WriteString[sphenoRGE, "re=Real(vec(i1),dp) \n"];
WriteString[sphenoRGE, "im=Aimag(vec(i1)) \n"];
WriteString[sphenoRGE, "If ((Abs(re).Lt.max1).or.(Abs(re/im)).lt.1.0E-12_dp)) re=0._dp \n"];
WriteString[sphenoRGE, "If ((Abs(im).Lt.max1).or.(Abs(im/re)).lt.1.0E-12_dp)) im=0._dp \n"];
WriteString[sphenoRGE, "vec(i1)=Cmplx(re,im,dp) \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Subroutine Chop2_CV \n\n"];

WriteString[sphenoRGE, "Subroutine Chop2_CM(mat) \n"];
WriteString[sphenoRGE, "Implicit None \n"];
WriteString[sphenoRGE, "Complex(dp),Intent(inout)::mat(:,:) \n"];
WriteString[sphenoRGE, "Integer::len,i1,i2 \n"];
WriteString[sphenoRGE, "Real(dp)::re,im,max1 \n"];
WriteString[sphenoRGE, "Real(dp),Parameter::eps=100._dp*Epsilon(1._dp) \n"];
WriteString[sphenoRGE, "max1=eps*Maxval(Abs(mat)) \n"];
WriteString[sphenoRGE, "len=Size(mat,dim=1) \n"];
WriteString[sphenoRGE, "Do i1=1,len \n"];
WriteString[sphenoRGE, "Do i2=1,len \n"];
WriteString[sphenoRGE, "re=Real(mat(i1,i2),dp) \n"];
WriteString[sphenoRGE, "im=Aimag(mat(i1,i2)) \n"];
WriteString[sphenoRGE, "If ((Abs(re).Lt.max1).or.(Abs(re/im)).lt.1.0E-12_dp)) re=0._dp \n"];
WriteString[sphenoRGE, "If ((Abs(im).Lt.max1).or.(Abs(im/re)).lt.1.0E-12_dp)) im=0._dp \n"];
WriteString[sphenoRGE, "mat(i1,i2)=Cmplx(re,im,dp) \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Subroutine Chop2_CM \n\n"];

WriteString[sphenoRGE, "Subroutine Chop2_CT(mat) \n"];
WriteString[sphenoRGE, "Implicit None \n"];
WriteString[sphenoRGE, "Complex(dp),Intent(inout)::mat(:,:,:) \n"];
WriteString[sphenoRGE, "Integer::len,i1,i2,i3 \n"];
WriteString[sphenoRGE, "Real(dp)::re,im,max1 \n"];
WriteString[sphenoRGE, "Real(dp),Parameter::eps=100._dp*Epsilon(1._dp) \n"];
WriteString[sphenoRGE, "max1=eps*Maxval(Abs(mat)) \n"];
WriteString[sphenoRGE, "len=Size(mat,dim=1) \n"];
WriteString[sphenoRGE, "Do i1=1,len \n"];
WriteString[sphenoRGE, "Do i2=1,len \n"];
WriteString[sphenoRGE, "Do i3=1,len \n"];
WriteString[sphenoRGE, "re=Real(mat(i1,i2,i3),dp) \n"];
WriteString[sphenoRGE, "im=Aimag(mat(i1,i2,i3)) \n"];
WriteString[sphenoRGE, "If ((Abs(re).Lt.max1).or.(Abs(re/im)).lt.1.0E-12_dp)) re=0._dp \n"];
WriteString[sphenoRGE, "If ((Abs(im).Lt.max1).or.(Abs(im/re)).lt.1.0E-12_dp)) im=0._dp \n"];
WriteString[sphenoRGE, "mat(i1,i2,i3)=Cmplx(re,im,dp) \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Do \n"];
WriteString[sphenoRGE, "End Subroutine Chop2_CT \n\n"];
 *)

];


(* ::Input::Initialization:: *)
WriteGToParameters[parameterList_, numberParameters_] :=Block[{i,i1,i2},

(* Print["Write Function GToParameters"]; *)

MakeSubroutineTitle["GToParameters"<>ToString[numberParameters]<>SubNr,parameterList, {"g"},{},sphenoRGE];


WriteString[sphenoRGE,"Implicit None \n"];
WriteString[sphenoRGE, "Real(dp), Intent(in) :: g("<>ToString[numberParameters]<>") \n"];
MakeVariableList[parameterList,",Intent(out)",sphenoRGE];
WriteString[sphenoRGE, "Integer i1, i2, i3, i4, SumI \n \n"];


WriteString[sphenoRGE, "Iname = Iname +1 \n"];
WriteString[sphenoRGE, "NameOfUnit(Iname) = 'GToParameters"<>ToString[numberParameters]<> "' \n \n"];

entryNr=1;

For[i=1,i<=Length[parameterList],
openDo=0;
If[getDimParameters[parameterList[[i]]]=!={1} && getDimParameters[parameterList[[i]]]=!={},
dimP=getDimParameters[parameterList[[i]]];
For[k=1,k<=Length[dimP],
WriteString[sphenoRGE, "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]]<>"\n"];
openDo++;
k++;];

Switch[Length[dimP],
1,WriteString[sphenoRGE,"SumI = (i1-1) \n"];,
2,WriteString[sphenoRGE,"SumI = (i2-1) + (i1-1)*"<>ToString[dimP[[2]]]<> "\n"];,
3,WriteString[sphenoRGE,"SumI = (i3-1) + (i2-1)*"<>ToString[dimP[[3]]]<>" + (i1-1)*"<>ToString[dimP[[3]]*dimP[[2]]]<> "\n"];,
4,WriteString[sphenoRGE,"SumI = (i4-1) + (i3-1)*"<>ToString[dimP[[4]]]<>" + (i2-1)*"<>ToString[dimP[[4]]*dimP[[3]]]<>" + (i1-1)*"<>ToString[dimP[[4]]*dimP[[2]]*dimP[[3]]]<> "\n"];
];
If[MemberQ[realVar,parameterList[[i]]]==False,
WriteString[sphenoRGE, "SumI = SumI*2 \n"];
WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
Switch[Length[dimP],
1,WriteString[sphenoRGE,"(i1)"];,
2,WriteString[sphenoRGE,"(i1,i2)"];,
3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
];
WriteString[sphenoRGE," = Cmplx( g(SumI+" <>ToString[entryNr] <>"), g(SumI+"<>ToString[entryNr+1] <>"), dp) \n"];
entryNr += 2*Apply[Times,dimP];,

WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
Switch[Length[dimP],
1,WriteString[sphenoRGE,"(i1)"];,
2,WriteString[sphenoRGE,"(i1,i2)"];,
3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
];
WriteString[sphenoRGE," =  g(SumI+" <>ToString[entryNr] <>") \n"];
entryNr +=Apply[Times,dimP];
];

For[k=1,k<=openDo,
WriteString[sphenoRGE, "End Do \n "];
k++;];
WriteString[sphenoRGE, "\n"];,

If[MemberQ[realVar,parameterList[[i]]]==False,
WriteString[sphenoRGE,SPhenoForm[parameterList[[i]]]<>"= Cmplx(g("<>ToString[entryNr]<>"),g("<>ToString[entryNr+1]<>"),dp) \n"];
entryNr=entryNr+2;,
WriteString[sphenoRGE,SPhenoForm[parameterList[[i]]]<>"= g("<>ToString[entryNr]<>") \n"];
entryNr++;
];

];

i++;];

WriteString[sphenoRGE,"Do i1=1,"<>ToString[numberParameters] <>" \n"];
WriteString[sphenoRGE,"If (g(i1).ne.g(i1)) Then \n"];
WriteString[sphenoRGE," Write(*,*) \"NaN appearing in \",NameOfUnit(Iname) \n"];
WriteString[sphenoRGE," Write(*,*) \"At position \", i1 \n"];
WriteString[sphenoRGE," Call TerminateProgram \n"];
WriteString[sphenoRGE,"End if \n"];
WriteString[sphenoRGE,"End do \n"];



WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
WriteString[sphenoRGE, "End Subroutine GToParameters"<> ToString[numberParameters]<>SubNr<>"\n\n"];

];


WriteParametersToG[parameterList_, numberParameters_] :=Block[{i,i1,i2},

(* Print["Write Function ParametersToG"]; *)

MakeSubroutineTitle["ParametersToG"<>ToString[numberParameters]<>SubNr,parameterList, {},{"g"}, sphenoRGE];

WriteString[sphenoRGE,"Implicit None \n"];
WriteString[sphenoRGE, "Real(dp), Intent(out) :: g("<>ToString[numberParameters]<>") \n"];


MakeVariableList[parameterList,", Intent(in)",sphenoRGE];
WriteString[sphenoRGE, "Integer i1, i2, i3, i4, SumI \n \n"];


WriteString[sphenoRGE, "Iname = Iname +1 \n"];
WriteString[sphenoRGE, "NameOfUnit(Iname) = 'ParametersToG"<>ToString[numberParameters]<> "' \n \n"];

entryNr=1;

For[i=1,i<=Length[parameterList],
openDo=0;
If[getDimParameters[parameterList[[i]]]=!={1} && getDimParameters[parameterList[[i]]]=!={},
dimP=getDimParameters[parameterList[[i]]];
For[k=1,k<=Length[dimP],
WriteString[sphenoRGE, "Do i"<>ToString[k]<>" = 1,"<>ToString[dimP[[k]]] <>"\n"];
openDo++;
k++;];

Switch[Length[dimP],
1,WriteString[sphenoRGE,"SumI = (i1-1) \n"];,
2,WriteString[sphenoRGE,"SumI = (i2-1) + (i1-1)*"<>ToString[dimP[[2]]]<> "\n"];,
3,WriteString[sphenoRGE,"SumI = (i3-1) + (i2-1)*"<>ToString[dimP[[3]]]<>" + (i1-1)*"<>ToString[dimP[[3]]*dimP[[2]]]<> "\n"];,
4,WriteString[sphenoRGE,"SumI = (i4-1) + (i3-1)*"<>ToString[dimP[[4]]]<>" + (i2-1)*"<>ToString[dimP[[4]]*dimP[[3]]]<>" + (i1-1)*"<>ToString[dimP[[4]]*dimP[[2]]*dimP[[3]]]<> "\n"];
];
If[MemberQ[realVar,parameterList[[i]]]==False,
WriteString[sphenoRGE, "SumI = SumI*2 \n"];

WriteString[sphenoRGE,"g(SumI+" <>ToString[entryNr] <>") = Real("];
WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
Switch[Length[dimP],
1,WriteString[sphenoRGE,"(i1)"];,
2,WriteString[sphenoRGE,"(i1,i2)"];,
3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
];
WriteString[sphenoRGE,", dp) \n"];

WriteString[sphenoRGE,"g(SumI+" <>ToString[entryNr+1] <>") = Aimag("];
WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
Switch[Length[dimP],
1,WriteString[sphenoRGE,"(i1)"];,
2,WriteString[sphenoRGE,"(i1,i2)"];,
3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
];

WriteString[sphenoRGE,") \n"];


entryNr += 2*Apply[Times,dimP]; ,

WriteString[sphenoRGE,"g(SumI+" <>ToString[entryNr] <>") = "];
WriteString[sphenoRGE, SPhenoForm[parameterList[[i]]]];
Switch[Length[dimP],
1,WriteString[sphenoRGE,"(i1)"];,
2,WriteString[sphenoRGE,"(i1,i2)"];,
3,WriteString[sphenoRGE,"(i1,i2,i3)"];,
4,WriteString[sphenoRGE,"(i1,i2,i3,i4)"];
];
WriteString[sphenoRGE," \n"];
entryNr +=Apply[Times,dimP];
];

For[k=1,k<=openDo,
WriteString[sphenoRGE, "End Do \n"];
k++;];
WriteString[sphenoRGE, "\n"];,

If[MemberQ[realVar,parameterList[[i]]]==False,
WriteString[sphenoRGE,"g("<>ToString[entryNr]<>") = Real("<> SPhenoForm[parameterList[[i]]]<>",dp)  \n"];
WriteString[sphenoRGE,"g("<>ToString[entryNr+1]<>") = Aimag("<> SPhenoForm[parameterList[[i]]]<>")  \n"];
entryNr=entryNr+2;,
WriteString[sphenoRGE,"g("<>ToString[entryNr]<>") = "<> SPhenoForm[parameterList[[i]]]<>"  \n"];
entryNr++;
];

];

i++;];



WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
WriteString[sphenoRGE, "End Subroutine ParametersToG" <> ToString[numberParameters]<>SubNr<>"\n\n"];

];





(* ::Input::Initialization:: *)
WriteSPhenoRGE[listParameters_, OneLoop_, TwoLoop_, AddInvolvedParameters_,spuren_,nr_]:=Block[{i,i1,i2},

(* Print["Write RGE Function"]; *)


WriteString[sphenoRGE,"Subroutine rge"<>ToString[nr]<>SubNr<>"(len, T, GY, F) \n"];
WriteString[sphenoRGE,"Implicit None \n"];

WriteString[sphenoRGE, "Integer, Intent(in) :: len \n"];
WriteString[sphenoRGE, "Real(dp), Intent(in) :: T, GY(len) \n"];
WriteString[sphenoRGE, "Real(dp), Intent(out) :: F(len) \n"];
WriteString[sphenoRGE, "Integer :: i1,i2,i3,i4 \n"];
WriteString[sphenoRGE, "Integer :: j1,j2,j3,j4,j5,j6,j7 \n"];
WriteString[sphenoRGE, "Real(dp) :: q \n"];


ComplexOut="";
RealOut="";

For[i=1,i<=Length[listParameters],
NewString="";
NewDim=AddDim[listParameters[[i]]];
NewDimAdj=AddDimAdj[listParameters[[i]]];
NewString =SPhenoForm[listParameters[[i]]]<>NewDim<>","<>"beta"<>SPhenoForm[listParameters[[i]]]<>"1"<>NewDim<>","<>"beta"<>SPhenoForm[listParameters[[i]]]<>"2"<>NewDim<>","<>"D"<>SPhenoForm[listParameters[[i]]]<>NewDim<>",";

If[Length[getDimParameters[listParameters[[i]]]]==2 && Adj[listParameters[[i]]]=!= listParameters[[i]],
NewString  = NewString <> "adj"<>SPhenoForm[listParameters[[i]]]<>NewDimAdj<>",";
];

If[MemberQ[realVar,listParameters[[i]]]==False,
ComplexOut = ComplexOut<> NewString;,
RealOut = RealOut<> NewString;
];

i++;];

If[RealOut=!="",
WriteString[sphenoRGE, FortranLineBreak[RealOut = "Real(dp) :: "<>StringDrop[RealOut,-1]]<>"\n"];
];

If[ComplexOut=!="",
WriteString[sphenoRGE, FortranLineBreak["Complex(dp) :: "<>StringDrop[ComplexOut,-1]]<>"\n"];
];

If[spuren=!={},
WriteString[sphenoRGE, "Real(dp) :: Tr1("<>ToString[AnzahlGauge] <>"),Tr2("<>ToString[AnzahlGauge] <>"),Tr3("<>ToString[AnzahlGauge] <>") \n"];
WriteString[sphenoRGE, "Real(dp) :: Tr2U1("<>ToString[AnzahlGauge] <>","<>ToString[AnzahlGauge] <>") \n"];
If[FreeQ[spuren,Tr4]===False,
WriteString[sphenoRGE, "Real(dp) :: Tr4("<>ToString[AnzahlGauge] <>","<>ToString[AnzahlGauge] <>") \n"];
];
];

If[Length[listAbsolute]>0,
NewString="";
For[i=1,i<=Length[listAbsolute],
NewString  = NewString <> "Abs"<>SPhenoForm[listAbsolute[[i]]]<>",";
i++;];
WriteString[sphenoRGE, FortranLineBreak[RealOut = "Real(dp) :: "<>StringDrop[NewString,-1]]<>"\n"];
];

listMatrizen1=Flatten[{listMat2[[1]],listMat3[[1]],listMat4[[1]],listMat5[[1]],listMat6[[1]]},1];
listMatrizen2=Flatten[{listMat2[[2]],listMat3[[2]],listMat4[[2]],listMat5[[2]],listMat6[[2]]},1];

If[listMatrizen1=!={},
MakeVariableList[Transpose[listMatrizen1][[2]],"",sphenoRGE];
];
If[listMatrizen2=!={},
MakeVariableList[Transpose[listMatrizen2][[2]],"",sphenoRGE];
];

If[listTr[[1]]=!={},
MakeVariableList[Transpose[listTr[[1]]][[2]],"",sphenoRGE];
];

If[listTr[[2]]=!={},
MakeVariableList[Transpose[listTr[[2]]][[2]],"",sphenoRGE];
];

If[listScalarProducts[[1]]=!={},
MakeVariableList[Transpose[listScalarProducts[[1]]][[2]],"",sphenoRGE];
];

If[listScalarProducts[[2]]=!={},
MakeVariableList[Transpose[listScalarProducts[[2]]][[2]],"",sphenoRGE];
];

If[listPow[[1]]=!={},
MakeVariableList[Transpose[listPow[[1]]][[2]],"",sphenoRGE];
];

If[listPow[[2]]=!={},
MakeVariableList[Transpose[listPow[[2]]][[2]],"",sphenoRGE];
];

If[listDy[[1]]=!={},
MakeVariableList[Transpose[listDy[[1]]][[4]],"",sphenoRGE];
];

If[listDy[[2]]=!={},
MakeVariableList[Transpose[listDy[[2]]][[4]],"",sphenoRGE];
];

If[ThreeIndexParametersInvolved===True,
For[i=1,i<=Length[threeIndexParameter],
If[FreeQ[listParameters,threeIndexParameter[[i]]]==False,
dim = getDimParameters[threeIndexParameter[[i]]];
For[j=1,j<=dim[[3]],
If[FreeQ[realVar,threeIndexParameter[[i]]],
WriteString[sphenoRGE, "Complex(dp) :: "<>SPhenoForm[threeIndexParameter[[i]][j]]<>"("<>ToString[dim[[1]]]<>","<>ToString[dim[[2]]]<>"), adj"<>SPhenoForm[threeIndexParameter[[i]][j]]<>"("<>ToString[dim[[2]]]<>","<>ToString[dim[[1]]]<>") \n"];,
WriteString[sphenoRGE, "Real(dp) :: "<>SPhenoForm[threeIndexParameter[[i]][j]]<>"("<>ToString[dim[[1]]]<>","<>ToString[dim[[2]]]<>")  \n"];
];
j++;];
];
i++;];
];


WriteString[sphenoRGE, "Iname = Iname +1 \n"];
WriteString[sphenoRGE, "NameOfUnit(Iname) = 'rge"<> ToString[nr]<>"' \n \n"];
WriteString[sphenoRGE, "OnlyDiagonal = .Not.GenerationMixing \n"];
WriteString[sphenoRGE, "q = t \n \n"];

MakeCall["GToParameters"<>ToString[nr]<>SubNr,listParameters,{"gy"},{},sphenoRGE];

If[Length[Thresholds]>0,
AddThresholdsToRGEs[listParameters];
];

If[ThreeIndexParametersInvolved===True,
For[i=1,i<=Length[threeIndexParameter],
If[FreeQ[listParameters,threeIndexParameter[[i]]]==False && FreeQ[realVar,threeIndexParameter[[i]]]==True,
dim = getDimParameters[threeIndexParameter[[i]]];
For[j=1,j<=dim[[3]],
WriteString[sphenoRGE, SPhenoForm[threeIndexParameter[[i]][j]]<>"="<> SPhenoForm[threeIndexParameter[[i]]]<>"(:,:,"<>ToString[j]<>")"<>" \n"];
WriteString[sphenoRGE,"Call Adjungate("<> SPhenoForm[threeIndexParameter[[i]][j]]<>",adj"<> SPhenoForm[threeIndexParameter[[i]][j]]<>") \n"];
j++;];
];
i++;];
UseMatMul2=False;
];


If[DeleteCases[DeleteCases[DeleteCases[Intersection[DeleteCases[getDimSPheno/@listParameters,{}]],{3,3}],{3}],{1}]=!={},
UseMatMul2=False; 
];

subAdj={};

For[i=1,i<=Length[listAbsolute],
WriteString[sphenoRGE,"Abs"<>SPhenoForm[listAbsolute[[i]]]<>" = Conjg("<>SPhenoForm[listAbsolute[[i]]]<>")*"<>SPhenoForm[listAbsolute[[i]]]<>"\n"];
i++;];

For[i=1,i<=Length[listParameters],
If[Length[getDimParameters[listParameters[[i]]]]==2  && Adj[listParameters[[i]]]=!=listParameters[[i]] &&  FreeQ[realVar,listParameters[[i]]],
WriteString[sphenoRGE,"Call Adjungate("<>SPhenoForm[listParameters[[i]]]<>",adj"<>SPhenoForm[listParameters[[i]]]<>")\n"];
subAdj = Join[subAdj,{Adj[ToExpression[SPhenoForm[listParameters[[i]]]]]-> ToExpression["adj"<>SPhenoForm[listParameters[[i]]]]}];
subAdj = Join[subAdj,{Adj[listParameters[[i]]]-> ToExpression["adj"<>SPhenoForm[listParameters[[i]]]]}];
(* subAdj = Join[subAdj,{listParameters[[i]]\[Rule] ToExpression[SPhenoForm[listParameters[[i]]]]}]; *)
];
i++;];

For[i=1,i<=Length[listMatrizen1],
If[Length[getDimSPheno[listMatrizen1[[i,1,1]]]]==1 &&  Length[getDimSPheno[listMatrizen1[[i,1,2]]]]==1,
If[FreeQ[realVar,listMatrizen1[[i,1,1]]/. Tp[x_]->x],
WriteString[sphenoRGE," "<>ToString[listMatrizen1[[i,2]]]<> " = Dot_Product(Conjg(" <>SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>"),"<>SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];,
WriteString[sphenoRGE," "<>ToString[listMatrizen1[[i,2]]]<> " = Dot_Product(" <>SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];
];,
If[UseMatMul2===True,
WriteString[sphenoRGE," "<>ToString[listMatrizen1[[i,2]]]<> " = Matmul2(" <>SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>",OnlyDiagonal) \n"];,
WriteString[sphenoRGE," "<>ToString[listMatrizen1[[i,2]]]<> " = Matmul(" <>SPhenoForm[listMatrizen1[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen1[[i,1,2]]/.subAdj]  <>") \n"];
];
];
If[listMatrizen1[[i,3]]==True && Length[getDimSPheno[listMatrizen1[[i,2]]]]>0,
WriteString[sphenoRGE,"Forall(i2=1:"<>ToString[getDimSPheno[listMatrizen1[[i,2]]][[1]]] <>")  "<>ToString[listMatrizen1[[i,2]]]<>"(i2,i2) =  Real("<>ToString[listMatrizen1[[i,2]]]<>"(i2,i2),dp) \n"];
];
i++;];

For[i=1,i<=Length[listTr[[1]]],
If[FreeQ[realVar,listTr[[1,i,1]]],
If[listTr[[1,i,3]]===False,
WriteString[sphenoRGE," "<>ToString[listTr[[1,i,2]]]<> " = cTrace(" <>ToString[listTr[[1,i,1]]]  <>") \n"];,
WriteString[sphenoRGE," "<>ToString[listTr[[1,i,2]]]<> " = Real(cTrace(" <>ToString[listTr[[1,i,1]]]  <>"),dp) \n"];
];,
WriteString[sphenoRGE," "<>ToString[listTr[[1,i,2]]]<> " = Trace(" <>ToString[listTr[[1,i,1]]]  <>") \n"];
];
i++;];

For[i=1,i<=Length[listScalarProducts[[1]]],
If[FreeQ[realVar,listScalarProducts[[1,i,1,1]]/. Tp[x_]->x],
WriteString[sphenoRGE," "<>ToString[listScalarProducts[[1,i,2]]]<> " = DOT_PRODUCT(Conjg(" <>SPhenoForm[listScalarProducts[[1,i,1,1]]]  <>")," <>SPhenoForm[listScalarProducts[[1,i,1,2]]]<>") \n"];,
WriteString[sphenoRGE," "<>ToString[listScalarProducts[[1,i,2]]]<> " = DOT_PRODUCT(" <>SPhenoForm[listScalarProducts[[1,i,1,1]]]  <>"," <>SPhenoForm[listScalarProducts[[1,i,1,2]]]<>") \n"];
];
i++;];

For[i=1,i<=Length[listPow[[1]]],
WriteString[sphenoRGE," "<>ToString[listPow[[1,i,2]]]<> " =" <>SPhenoForm[listPow[[1,i,1]]]  <>" \n"];
i++;];
(* needed for mu-nu-SSM (and other models), because of the way Mathematica replace conj[k]k^2 *)
For[i=1,i<=Length[listPow[[2]]],
WriteString[sphenoRGE," "<>ToString[listPow[[2,i,2]]]<> " =" <>SPhenoForm[listPow[[2,i,1]]]  <>" \n"];
i++;];



For[i=1,i<=Length[listDy[[1]]],
WriteString[sphenoRGE,"Do i1=1,"<>ToString[getDimSPheno[listDy[[1,i,4]]][[1]]] <>"\n"];
WriteString[sphenoRGE,"  Do i2=1,"<>ToString[getDimSPheno[listDy[[1,i,4]]][[2]]] <>"\n"];
(* WriteString[sphenoRGE, SPhenoForm[listDy[[1,i,4]]]<>"(i1,i2) = "<>SPhenoForm[listDy[[1,i,2]]]<>"(i1)*"<>SPhenoForm[listDy[[1,i,3]]]<>"(i2) \n"]; *)
WriteString[sphenoRGE, SPhenoForm[listDy[[1,i,4]]]<>"(i1,i2) = "<>SPhenoForm[listDy[[1,i,1]]]<>" \n"];
WriteString[sphenoRGE,"  End Do \n"];
WriteString[sphenoRGE,"End Do \n"];
i++;];


WriteString[sphenoRGE, "\n\n"];
WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];

For[i=1,i<=Length[listMatrizen2],
If[Length[getDimSPheno[listMatrizen2[[i,1,1]]]]==1 &&  Length[getDimSPheno[listMatrizen2[[i,1,2]]]]==1,
If[FreeQ[realVar,listMatrizen2[[i,1,1]] /. Tp[x_]->x],
WriteString[sphenoRGE," "<>ToString[listMatrizen2[[i,2]]]<> " = Dot_Product(Conjg(" <>SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>"),"<>SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];,
WriteString[sphenoRGE," "<>ToString[listMatrizen2[[i,2]]]<> " = Dot_Product(" <>SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];
];,
If[UseMatMul2===True,
WriteString[sphenoRGE," "<>ToString[listMatrizen2[[i,2]]]<> " = Matmul2(" <>SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>",OnlyDiagonal) \n"];,
WriteString[sphenoRGE," "<>ToString[listMatrizen2[[i,2]]]<> " = Matmul(" <>SPhenoForm[listMatrizen2[[i,1,1]]/.subAdj]  <>","<>SPhenoForm[listMatrizen2[[i,1,2]]/.subAdj]  <>") \n"];
];
 ];
If[listMatrizen2[[i,3]]==True && Length[getDimSPheno[listMatrizen2[[i,2]]]]>0,
WriteString[sphenoRGE,"Forall(i2=1:"<>ToString[getDimSPheno[listMatrizen2[[i,2]]][[1]]] <>")  "<>ToString[listMatrizen2[[i,2]]]<>"(i2,i2) =  Real("<>ToString[listMatrizen2[[i,2]]]<>"(i2,i2),dp) \n"];
];
i++;];

For[i=1,i<=Length[listTrace[[2]]],
If[FreeQ[realVar,listTr[[2,i,1]]],
If[listTr[[2,i,3]]===False,
WriteString[sphenoRGE," "<>ToString[listTr[[2,i,2]]]<> " = cTrace(" <>ToString[listTr[[2,i,1]]]  <>")\n"];,
WriteString[sphenoRGE," "<>ToString[listTr[[2,i,2]]]<> " = Real(cTrace(" <>ToString[listTr[[2,i,1]]]  <>"),dp)  \n"];
];,
WriteString[sphenoRGE," "<>ToString[listTr[[2,i,2]]]<> " = Trace(" <>ToString[listTr[[2,i,1]]]  <>") \n"];
];
i++;];

For[i=1,i<=Length[listScalarProducts[[2]]],
If[FreeQ[realVar,listScalarProducts[[2,i,1,1]]/. Tp[x_]->x],
WriteString[sphenoRGE," "<>ToString[listScalarProducts[[2,i,2]]]<> " = DOT_PRODUCT(Conjg(" <>SPhenoForm[listScalarProducts[[2,i,1,1]]]  <>")," <>SPhenoForm[listScalarProducts[[2,i,1,2]]]<>") \n"];,
WriteString[sphenoRGE," "<>ToString[listScalarProducts[[2,i,2]]]<> " = DOT_PRODUCT(" <>SPhenoForm[listScalarProducts[[2,i,1,1]]]  <>"," <>SPhenoForm[listScalarProducts[[2,i,1,2]]]<>") \n"];
];
i++;];


For[i=1,i<=Length[listPow[[2]]],
WriteString[sphenoRGE," "<>ToString[listPow[[2,i,2]]]<> " =" <>SPhenoForm[listPow[[2,i,1]]]  <>" \n"];
i++;];


For[i=1,i<=Length[listDy[[2]]],
WriteString[sphenoRGE,"Do i1=1,"<>ToString[getDimSPheno[listDy[[2,i,4]]][[1]]] <>"\n"];
WriteString[sphenoRGE,"  Do i2=1,"<>ToString[getDimSPheno[listDy[[2,i,4]]][[2]]] <>"\n"];
(* WriteString[sphenoRGE, SPhenoForm[listDy[[1,i,4]]]<>"(i1,i2) = "<>SPhenoForm[listDy[[2,i,2]]]<>"(i1)*"<>SPhenoForm[listDy[[2,i,3]]]<>"(i2) \n"]; *)
WriteString[sphenoRGE, SPhenoForm[listDy[[2,i,4]]]<>"(i1,i2) = "<>SPhenoForm[listDy[[2,i,1]]]<>" \n"];
WriteString[sphenoRGE,"  End Do \n"];
WriteString[sphenoRGE,"End Do \n"];
i++;];



WriteString[sphenoRGE, "End If \n \n \n"];

(*
Print[spuren];
spuren = spuren //. subSPhenoMatTr;
Print[spuren];
*)

If[spuren=!={},
For[i=1, i<=Length[spuren[[1]]],
If[FreeQ[spuren[[1]],sum],
string = StringReplace[ToString[spuren[[1,i,1]]],{"["->"(","]"->")"}]<>" = " <>SPhenoForm[Simplify[Expand[spuren[[1,i,2]]//. subSPhenoMatTr]] ];
WriteString[sphenoRGE, FortranLineBreak[string,99] <>"\n\n"];,
MakeSPhenoCoupling[Expand[spuren[[1,i,2]]] //. subSPhenoMatTr,StringReplace[ToString[spuren[[1,i,1]]],{"["->"(","]"->")"}],sphenoRGE]; 
];
i++;];

WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];

For[i=1, i<=Length[spuren[[2]]],
If[FreeQ[spuren[[1]],sum],
(*string = StringReplace[ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}]<>" = " <>SPhenoForm[Expand[spuren[[2,i,2]]] //. subSPhenoMatTr ]; *)
string = StringReplace[ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}]<>" = " <>SPhenoForm[spuren[[2,i,2]] //. subSPhenoMatTr ];
WriteString[sphenoRGE, FortranLineBreak[string,99] <>"\n\n"];,
MakeSPhenoCoupling[Expand[spuren[[2,i,2]]] //. subSPhenoMatTr,StringReplace[ToString[spuren[[2,i,1]]],{"["->"(","]"->")"}],sphenoRGE];
];
i++;];

WriteString[sphenoRGE, "End If \n \n \n"];
];


For[i=1,i<=Length[listParameters],
DynamicRGEbeta[nr]="("<>ToString[i]<>"/"<>ToString[Length[listParameters]]<>")";

If[listDy==={{},{}},
WriteBetaFunction[listParameters[[i]],OneLoop[[i]] //. subSPhenoMatTr ,TwoLoop[[i]] //. subSPhenoMatTr, False];,
If[Length[Expand[OneLoop[[i]]] //. subSPhenoMatTr]<20,
WriteBetaFunction[listParameters[[i]],Simplify[Expand[OneLoop[[i]]] //. subSPhenoMatTr] ,Simplify[Expand[TwoLoop[[i]]] //. subSPhenoMatTr], False];,
WriteBetaFunction[listParameters[[i]],Expand[OneLoop[[i]]] //. subSPhenoMatTr ,Expand[TwoLoop[[i]]] //. subSPhenoMatTr, False];
];
];
i++;];
DynamicRGEbeta[nr]="(All Done)";




CallString  = "Call ParametersToG"<>ToString[nr]<>SubNr<>"(";

If[Length[Thresholds]>0,
AddThresholdsToRGEsD[listParameters];
];



For[i=1,i<=Length[listParameters],
CallString = CallString<>"D"<>SPhenoForm[listParameters[[i]]]<>",";
i++;];

CallString = CallString <>"f)";

WriteString[sphenoRGE,FortranLineBreak[CallString,1]<>"\n\n"];

WriteString[sphenoRGE, "Iname = Iname - 1 \n \n"];
WriteString[sphenoRGE, "End Subroutine rge"<>ToString[nr]<>SubNr<>"  \n\n"];

];


(* ::Input::Initialization:: *)
WriteBetaFunction[name_,OneLoop_,TwoLoop_,WriteSums_]:=Block[{i,dim,i1,i2, i3, j55,j1,j2,sign},

WriteString[sphenoRGE,"!-------------------- \n"];
WriteString[sphenoRGE,"! "<>SPhenoForm[name]<>" \n"];
WriteString[sphenoRGE,"!-------------------- \n \n"];

WriteMatrixMul=False;

If[FreeQ[TwoLoop,sum] &&  FreeQ[OneLoop,sum],
If[WriteSums==True,
OpenDoName[name,sphenoRGE];
String1Loop = "beta" <>SPhenoForm[name]<>"1" <>IndexString<>" = " <>SPhenoForm[OneLoop /. Kronecker[a__]->0];
WriteString[sphenoRGE, FortranLineBreak[String1Loop] <>"\n"];

If[FreeQ[OneLoop,Kronecker]==False,
WriteString[sphenoRGE,"\n"];
kronecker = Intersection[Cases[OneLoop, x:Kronecker[a_,b_],3]];
For[i=1,i<=Length[kronecker],
WriteString[sphenoRGE, "If ("<>ToString[kronecker[[i,1]]]<>".eq."<> ToString[kronecker[[i,2]]]<>") Then \n"];
String1Loop = "beta" <>SPhenoForm[name]<>"1" <>IndexString<>" = beta" <>SPhenoForm[name]<>"1" <>IndexString<>"+(" <>SPhenoForm[Coefficient[OneLoop,kronecker[[i]]]]<>")";
WriteString[sphenoRGE, FortranLineBreak[String1Loop] <>"\n"];
WriteString[sphenoRGE,"End If \n"];
i++];
];
CloseDoes[sphenoRGE];,

If[ThreeIndexParametersInvolved===True && (FreeQ[OneLoop,a_[i1,b_Integer]]==False || FreeQ[OneLoop,a_[b_Integer,i1]]==False ),
dim = getDimSPheno[name];
Switch[Length[getDimSPheno[name]],
3,
	For[j55=1,j55<=dim[[3]],
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1,i2,"<>ToString[j55]<>")"; 
	String1Loop = SPhenoForm[Coefficient[OneLoop,Kronecker[j55,i3]]];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead,String1Loop,99] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];
	j55++;];
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	WriteString[sphenoRGE,"Do i3 = 1,"<>ToString[dim[[3]]]<>"\n"];
	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1,i2,i3)"; 
	String1Loop =SPhenoForm[OneLoop/.Kronecker[__]->0];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead,String1Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];,
2,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"1 = 0._dp \n"];
	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1,i2)"; 
	String1Loop = SPhenoForm[OneLoop /. Kronecker[a__]->0];
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	If[FreeQ[ListSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"Do i2 = i1,"<>ToString[dim[[2]]]<>"\n"];,
	If[FreeQ[ListAntiSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"Do i2 = i1+1,"<>ToString[dim[[2]]]<>"\n"];,
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	];
	];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99] <>"\n"];

	For[j1=1,j1<=dim[[1]],
	If[Coefficient[OneLoop, Kronecker[j1,i1]]=!=0,
	WriteString[sphenoRGE,"If ("<>ToString[j1]<>".eq.i1) Then \n"];
	String1Loop = SPhenoForm[Coefficient[OneLoop, Kronecker[j1,i1]]];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	j1++;];
	For[j1=1,j1<=dim[[2]],
	If[(Coefficient[OneLoop, Kronecker[j1,i2]] /. Kronecker[a_,i1]->0)=!=0,
	WriteString[sphenoRGE,"If ("<>ToString[j1]<>".eq.i2) Then \n"];
	String1Loop = SPhenoForm[Coefficient[OneLoop, Kronecker[j1,i2]] /. Kronecker[a_,i1]->0];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead,String1Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	j1++;];

	If[Coefficient[OneLoop, Kronecker[i1,i2]]=!=0,
	WriteString[sphenoRGE,"If (i2.eq.i1) Then \n"];
	String1Loop =SPhenoForm[Coefficient[OneLoop, Kronecker[i1,i2]]];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	
	If[(FreeQ[ListSymmetricParameters,name]==False || FreeQ[ListAntiSymmetricParameters,name]==False),
	If[FreeQ[ListSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"1(i2,i1) = beta" <>SPhenoForm[name]<>"1(i1,i2) \n"];,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"1(i2,i1) = - beta" <>SPhenoForm[name]<>"1(i1,i2) \n"];
	];
	];
	
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];,
1,
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	String1LoopHead ="beta" <>SPhenoForm[name]<>"1(i1)"; 
	String1Loop = SPhenoForm[OneLoop ];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead,String1Loop,99] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];,
_,
	String1LoopHead ="beta" <>SPhenoForm[name]; 
	String1Loop = SPhenoForm[OneLoop];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead,String1Loop,99] <>"\n"];
		];,
dim = getDimSPheno[name];
Switch[Length[getDimSPheno[name]],
3,
	(* For[j55=1,j55\[LessEqual]dim[[3]],
	String1LoopHead = "beta" <>SPhenoForm[name]<>"1(:,:,"<>ToString[j55]<>")";
	String1Loop =  SPhenoForm[Coefficient[OneLoop,Kronecker[j55,i3]] /. Kronecker[a__]\[Rule]ToExpression["id"<>ToString[getDimSPheno[name][[1]]]<>"R"] /. a_[i1,i2]\[Rule]a /. a_[i1]\[Rule]a /. a_[i2,i1]\[Rule]Transpose[a]];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99] <>"\n"]; 
	j55++;]; *)
	WriteString[sphenoRGE,"Do i1=1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do   i2=1,"<>ToString[dim[[2]]]<>"\n"];
	WriteString[sphenoRGE,"Do    i3=1,"<>ToString[dim[[3]]]<>"\n"];
	String1LoopHead = "beta" <>SPhenoForm[name]<>"1(i1,i2,i3)";
	String1Loop =  SPhenoForm[OneLoop];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99] <>"\n"]; 
	WriteString[sphenoRGE,"End     Do\n"];
	WriteString[sphenoRGE,"End   Do\n"];
	WriteString[sphenoRGE,"End Do\n"];,

2,
	String1Loop = "beta" <>SPhenoForm[name]<>"1  = " <>SPhenoForm[OneLoop /. Kronecker[a__]->ToExpression["id"<>ToString[getDimSPheno[name][[1]]]<>"R"] /. a_[i1,i2]->a /. a_[i1]->a/. a_[i2,i1]->Transpose[a]];
	WriteString[sphenoRGE, FortranLineBreak[String1Loop,99] <>"\n"];,
_,
	String1Loop = "beta" <>SPhenoForm[name]<>"1  = " <>SPhenoForm[OneLoop  /. a_[i1,i2]->a /. a_[i1]->a /. a_[i2,i1]->Transpose[a]];
	WriteString[sphenoRGE, FortranLineBreak[String1Loop,99] <>"\n"];
];

];
];,

OpenDoName2[name,sphenoRGE];
MakeSPhenoCoupling[OneLoop,"beta" <>SPhenoForm[name]<>"1" <>IndexString,sphenoRGE];
CloseDoes2[sphenoRGE];


];

WriteString[sphenoRGE, "\n \n \n"];

WriteString[sphenoRGE, "If (TwoLoopRGE) Then \n"];

If[FreeQ[TwoLoop,sum] &&  FreeQ[OneLoop,sum],
If[WriteSums==True,
OpenDoName[name,sphenoRGE];
WriteString[sphenoRGE, FortranLineBreak[ "beta" <>SPhenoForm[name]<>"2" <>IndexString,SPhenoForm[TwoLoop /. Kronecker[a__]->0],0] <>"\n"];

If[FreeQ[OneLoop,Kronecker]==False,
WriteString[sphenoRGE,"\n"];
kronecker = Intersection[Cases[OneLoop, x:Kronecker[a_,b_],3]];
For[i=1,i<=Length[kronecker],
WriteString[sphenoRGE, "If ("<>ToString[kronecker[[i,1]]]<>".eq."<> ToString[kronecker[[i,2]]]<>") Then \n"];
String2Loop = "beta" <>SPhenoForm[name]<>"2" <>IndexString<>" = beta" <>SPhenoForm[name]<>"2" <>IndexString<>"+(" <>SPhenoForm[Coefficient[TwoLoop,kronecker[[i]]]]<>")";
WriteString[sphenoRGE, FortranLineBreak[String2Loop] <>"\n"]; 
WriteString[sphenoRGE,"End If \n"];
i++];
];
CloseDoes[sphenoRGE];,

If[ThreeIndexParametersInvolved===True && (FreeQ[OneLoop,a_[i1,b_Integer]]==False || FreeQ[OneLoop,a_[b_Integer,i1]]==False ),
dim = getDimSPheno[name];
Switch[Length[getDimSPheno[name]],
3,
	 For[j55=1,j55<=dim[[3]],
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	String2LoopHead ="beta" <>SPhenoForm[name]<>"2(i1,i2,"<>ToString[j55]<>")"; 
	String2Loop = SPhenoForm[Coefficient[TwoLoop,Kronecker[j55,i3]] ];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];
	j55++;];
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	WriteString[sphenoRGE,"Do i3 = 1,"<>ToString[dim[[3]]]<>"\n"];
	String2LoopHead ="beta" <>SPhenoForm[name]<>"2(i1,i2,i3)"; 
	String2Loop =SPhenoForm[TwoLoop/.Kronecker[__]->0];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"]; ,
2,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"2 = 0._dp \n"];
	String2LoopHead ="beta" <>SPhenoForm[name]<>"2(i1,i2)"; 
	String2Loop = SPhenoForm[TwoLoop /. Kronecker[a__]->0];
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	If[FreeQ[ListSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"Do i2 = i1,"<>ToString[dim[[2]]]<>"\n"];,
	If[FreeQ[ListAntiSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"Do i2 = i1+1,"<>ToString[dim[[2]]]<>"\n"];,
	WriteString[sphenoRGE,"Do i2 = 1,"<>ToString[dim[[2]]]<>"\n"];
	];
	];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];
	If[Coefficient[TwoLoop, Kronecker[i1,i2]]=!=0,
	WriteString[sphenoRGE,"If (i2.eq.i1) Then \n"];
	String2Loop = SPhenoForm[Coefficient[TwoLoop, Kronecker[i1,i2]] ];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	
	For[j1=1,j1<=dim[[1]],
	If[Coefficient[TwoLoop, Kronecker[j1,i1]]=!=0,
	WriteString[sphenoRGE,"If ("<>ToString[j1]<>".eq.i1) Then \n"];
	String2Loop = SPhenoForm[Coefficient[TwoLoop, Kronecker[j1,i1]]];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	j1++;];
	For[j1=1,j1<=dim[[2]],
	If[(Coefficient[TwoLoop, Kronecker[j1,i2]] /. Kronecker[a_,i1]->0)=!=0,
	WriteString[sphenoRGE,"If ("<>ToString[j1]<>".eq.i2) Then \n"];
	String2Loop = SPhenoForm[Coefficient[TwoLoop, Kronecker[j1,i2]] /. Kronecker[a_,i1]->0];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead, String2Loop,99,True] <>"\n"];
	WriteString[sphenoRGE,"End If \n"];
	];
	j1++;];

	If[(FreeQ[ListSymmetricParameters,name]==False || FreeQ[ListAntiSymmetricParameters,name]==False),
	If[FreeQ[ListSymmetricParameters,name]==False,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"2(i2,i1) = beta" <>SPhenoForm[name]<>"2(i1,i2) \n"];,
	WriteString[sphenoRGE,"beta" <>SPhenoForm[name]<>"2(i2,i1) = - beta" <>SPhenoForm[name]<>"2(i1,i2) \n"];
	];
	];
	WriteString[sphenoRGE,"End Do\n"];
	WriteString[sphenoRGE,"End Do\n"];,
1,
	WriteString[sphenoRGE,"Do i1 = 1,"<>ToString[dim[[1]]]<>"\n"];
	String2LoopHead = "beta" <>SPhenoForm[name]<>"2(i1)";
	String2Loop = SPhenoForm[TwoLoop ];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead, String2Loop,99] <>"\n"];
	WriteString[sphenoRGE,"End Do\n"];,
_,
	String2LoopHead ="beta" <>SPhenoForm[name]<>"2"; 
	String2Loop = SPhenoForm[TwoLoop ];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead, String2Loop,99] <>"\n"];
		];,
dim = getDimSPheno[name];
Switch[Length[getDimSPheno[name]],
3,
(*	
For[j55=1,j55\[LessEqual]dim[[3]],
	String2LoopHead = "beta" <>SPhenoForm[name]<>"2(:,:,"<>ToString[j55]<>")" ;
	String2Loop = SPhenoForm[Coefficient[TwoLoop,Kronecker[j55,i3]]   /. Kronecker[a__]\[Rule]ToExpression["id"<>ToString[getDimSPheno[name][[1]]]<>"R"]/. a_[i1,i2]\[Rule]a /. a_[i1]\[Rule]a  /. a_[i2,i1]\[Rule]Transpose[a]];
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead, String2Loop,99] <>"\n"];
	j55++;]; *)
	WriteString[sphenoRGE,"Do i1=1,"<>ToString[dim[[1]]]<>"\n"];
	WriteString[sphenoRGE,"Do   i2=1,"<>ToString[dim[[2]]]<>"\n"];
	WriteString[sphenoRGE,"Do    i3=1,"<>ToString[dim[[3]]]<>"\n"];
	String1LoopHead = "beta" <>SPhenoForm[name]<>"2(i1,i2,i3)";
	String1Loop =  SPhenoForm[TwoLoop];
	WriteString[sphenoRGE, FortranLineBreak[String1LoopHead, String1Loop,99] <>"\n"]; 
	WriteString[sphenoRGE,"End     Do\n"];
	WriteString[sphenoRGE,"End   Do\n"];
	WriteString[sphenoRGE,"End Do\n"];,
2,
	String2Loop =   SPhenoForm[TwoLoop   /. Kronecker[a__]->ToExpression["id"<>ToString[getDimSPheno[name][[1]]]<>"R"]/. a_[i1,i2]->a /. a_[i1]->a/. a_[i2,i1]->Transpose[a]];
	String2LoopHead = "beta" <>SPhenoForm[name]<>"2";
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];,
_,
	String2Loop = SPhenoForm[TwoLoop /. a_[i1,i2]->a /. a_[i1]->a];
	String2LoopHead = "beta" <>SPhenoForm[name]<>"2";
	WriteString[sphenoRGE, FortranLineBreak[String2LoopHead,String2Loop,99] <>"\n"];
];

];
];,

OpenDoName2[name,sphenoRGE];
MakeSPhenoCoupling[TwoLoop,"beta" <>SPhenoForm[name]<>"2" <>IndexString,sphenoRGE];
CloseDoes2[sphenoRGE];

];




WriteString[sphenoRGE,"\n \n"];

WriteString[sphenoRGE,"D"<>SPhenoForm[name] <> " = oo16pi2*( beta" <>SPhenoForm[name]<>"1 + oo16pi2 * beta" <>SPhenoForm[name]<>"2 ) \n"]; 

WriteString[sphenoRGE,"\n \n"];
WriteString[sphenoRGE, "Else \n"];
WriteString[sphenoRGE,"D"<>SPhenoForm[name] <> " = oo16pi2* beta" <>SPhenoForm[name]<>"1 \n"]; 
WriteString[sphenoRGE, "End If \n \n \n"];
If[Length[getDimSPheno[name]]<3 && FreeQ[realVar,name],
WriteString[sphenoRGE,"Call Chop(D"<>SPhenoForm[name]<>") \n\n"];
];

If[FreeQ[SA`KineticMixingParameters,name]==False,
WriteString[sphenoRGE,"If (.not.KineticMixing) D"<>SPhenoForm[name]<>"  = 0._dp \n"];
];

If[FreeQ[Transpose[Betam2ij][[1]],name]==False && Length[getDimSPheno[name]]==2 && FreeQ[listSMoff,name],
WriteString[sphenoRGE,"Forall(i1=1:"<>ToString[getDimSPheno[name][[1]]] <>") D"<>SPhenoForm[name] <> "(i1,i1) =  Real(D"<>SPhenoForm[name] <> "(i1,i1),dp) \n"]; 
If[FreeQ[realVar,name],
WriteString[sphenoRGE,"D"<>SPhenoForm[name] <> " = 0.5_dp*(D"<>SPhenoForm[name] <>"+ Conjg(Transpose(D"<>SPhenoForm[name] <>")) ) \n"]; ,
WriteString[sphenoRGE,"D"<>SPhenoForm[name] <> " = 0.5_dp*(D"<>SPhenoForm[name] <>"+ Transpose(D"<>SPhenoForm[name] <>") ) \n"]; 
];
];



];


(* ::Input::Initialization:: *)
GenerateSPhenoAbbr[list1L_,list2L_]:=Block[{i,j,k, temp1L, temp2L},



If[FreeQ[list1L,MatMul]==False || FreeQ[list2L,MatMul]==False,
listMatMul={Join[Union[Cases[list1L,MatMul[a__][b___],99]],Union[Cases[list1L,MatMul[a__],99]]], Join[Union[Cases[list2L,MatMul[a__][b___],99]], Union[Cases[list2L,MatMul[a__],99]]]};

listMatMul = DeleteCases[DeleteCases[DeleteCases[listMatMul,i1,3],i2,3],i3,3]/.List[]->List[nix] /. A_[]->A /. MatMul[a__][b__]->MatMul[a]/.{nix}->{};
listTrace ={Union[Cases[list1L,trace[a__],99]],Union[Cases[list2L,trace[a__],99]]};

listScalarProd={Union[Cases[list1L,ScalarProd[a__],99]],Union[Cases[list2L,ScalarProd[a__],99]]};

listMatMul[[1]]=Join[listMatMul[[1]], MatMul /@ listTrace[[1]] /. MatMul[trace[a__]]->MatMul[a]];
listMatMul[[2]]=Join[listMatMul[[2]], MatMul /@ listTrace[[2]] /. MatMul[trace[a__]]->MatMul[a]];


For[k=1,k<=2,
listMatMulNew=listMatMul[[k]];
For[i=1,i<=Length[listMatMul[[k]]],
newEntry=listMatMul[[k,i]];
checkmatmulfailed=False;
For[j=1,j<= Length[listMatMul[[k,i]]]-2,
newEntry = Delete[newEntry,1];
If[CheckMatMul[newEntry]==True,
listMatMulNew = Join[listMatMulNew,{newEntry}];,
checkmatmulfailed=True;
];
j++;];
If[checkmatmulfailed==True,
newEntry=listMatMul[[k,i]];
For[j=1,j<= Length[listMatMul[[k,i]]]-2,
newEntry = Delete[newEntry,-1];
If[CheckMatMul[newEntry]==True,
listMatMulNew = Join[listMatMulNew,{newEntry}];
];
j++;];
];
i++;];
listMatMul[[k]] = listMatMulNew;
k++;];



listMatMul[[1]]=Intersection[listMatMul[[1]]];
listMatMul[[2]]=Intersection[listMatMul[[2]]];


listMatMul[[2]] = Complement[listMatMul[[2]], listMatMul[[1]]];
listTrace[[2]] = Complement[listTrace[[2]], listTrace[[1]]];
listScalarProd[[2]] = Complement[listScalarProd[[2]], listScalarProd[[1]]];,

listMatMul={{},{}};
listTrace={{},{}};
listScalarProd={{},{}};

];


listMat2={{},{}};
listMat3={{},{}};
listMat4={{},{}};
listMat5={{},{}};
listMat6={{},{}};

listTr={{},{}};

listPowers={Intersection[Cases[list1L,x_Power,10]],Intersection[Cases[list2L,x_Power,10]]};
listPowers[[1]] = DeleteCases[listPowers[[1]],x_?NotFreeQj];
listPowers[[2]] = DeleteCases[listPowers[[2]],x_?NotFreeQj];
listPowers[[2]] = Complement[listPowers[[2]], listPowers[[1]]];

listPowers= DeleteCases[listPowers,x_MatMul^c_,10];


temp1L =Expand[list1L]//. a_[i1,i2]->0;
temp2L = Expand[list2L] //. a_[i1,i2]->0;
listDyade1=Flatten[{Cases[temp1L,x_[___,i1,___] y_[___,i2,___],5],Cases[temp1L,d_ x_[___,i1,___] y_[___,i2,___],5],Cases[temp1L,x_[___,i1,___] conj[y_[___,i2,___]],5],Cases[temp1L,d_ x_[___,i1,___] conj[y_[___,i2,___]],5],Cases[temp1L,conj[x_[___,i1,___]] y_[___,i2,___],5],Cases[temp1L,d_ conj[x_[___,i1,___]] y_[___,i2,___],5],Cases[temp1L,conj[x_[___,i1,___]] conj[y_[___,i2,___]],5],Cases[temp1L,d_ conj[x_[___,i1,___]] conj[y_[___,i2,___]],5]} /. Kronecker[i1,i2]->0/. Kronecker[i2,i1]->0  /.Kronecker[___,i1,___]->0 /. Kronecker[___,i2,___]->0 /.Kronecker[a___,i3,b___]->1/. Kronecker->ID3R ]; (*/.Kronecker[___,i1,___]\[Rule]0 /. Kronecker[___,i2,___]\[Rule]0*)
listDyade2=Flatten[{Cases[temp2L,x_[___,i1,___] y_[___,i2,___],5],Cases[temp2L,d_ x_[___,i1,___] y_[___,i2,___],5],Cases[temp2L,x_[___,i1,___] conj[y_[___,i2,___]],5],Cases[temp2L,d_ x_[___,i1,___] conj[y_[___,i2,___]],5],Cases[temp2L,conj[x_[___,i1,___]] y_[___,i2,___],5],Cases[temp2L,d_ conj[x_[___,i1,___]] y_[___,i2,___],5],Cases[temp2L,conj[x_[___,i1,___]] conj[y_[___,i2,___]],5],Cases[temp2L,d_ conj[x_[___,i1,___]] conj[y_[___,i2,___]],5]} /. Kronecker[i1,i2]->0/. Kronecker[i2,i1]->0  /.Kronecker[___,i1,___]->0 /. Kronecker[___,i2,___]->0/.Kronecker[a___,i3,b___]->1 /. Kronecker->ID3R ]; (*/.Kronecker[___,i1,___]\[Rule]0 /. Kronecker[___,i2,___]\[Rule]0 *) 
listDyade1 = Select[DeleteCases[listDyade1,0,5],(FreeQ[#,i3]==True)&];
listDyade2 = Select[DeleteCases[listDyade2,0,5],(FreeQ[#,i3]==True)&];
(* listDyade = DeleteCases[DeleteCases[{listDyade1,listDyade2},0,5],x_?((FreeQ[#,i3]\[Equal]False)&),6] /. {{}}\[Rule]{{},{}};  *)
listDyade = {listDyade1,listDyade2}; 
listDyade[[1]]=Intersection[(Select[#,(FreeQ[#,i1]==False || FreeQ[#,i2]==False)&])&/@listDyade[[1]]];
listDyade[[2]]=Intersection[(Select[#,(FreeQ[#,i1]==False || FreeQ[#,i2]==False)&])&/@listDyade[[2]]];
listDyade[[2]] = Complement[listDyade[[2]], listDyade[[1]]];
listDy = {{},{}};

listPow={{},{}};

listAbsolute={};
For[j=1,j<=Length[listAllParameters],
If[FreeQ[realVar,listAllParameters[[j]]],
If[FreeQ[list1L,listAllParameters[[j]]*conj[listAllParameters[[j]]]]==False,
listAbsolute=Join[listAbsolute,{listAllParameters[[j]]}];
subSPhenoMatTr = Join[subSPhenoMatTr,{listAllParameters[[j]]*conj[listAllParameters[[j]]]->ToExpression["Abs"<>SPhenoForm[listAllParameters[[j]]]]}];,
If[FreeQ[list2L,listAllParameters[[j]]*conj[listAllParameters[[j]]]]==False,
listAbsolute=Join[listAbsolute,{listAllParameters[[j]]}];
subSPhenoMatTr = Join[subSPhenoMatTr,{listAllParameters[[j]]*conj[listAllParameters[[j]]]->ToExpression["Abs"<>SPhenoForm[listAllParameters[[j]]]]}];
];
];
];
j++;];

Clear[k,i,j];

listScalarProducts={{},{}};

For[k=1,k<=2,
For[j=1,j<=Length[listMatMul[[k]]],
NewString="";
For[i=1,i<=Length[listMatMul[[k,j]]],
Switch[Head[listMatMul[[k,j,i]]],
Adj,
	NewString = NewString <>"adj"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
Tp, 
	NewString = NewString <>"Tp"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
conj,
	NewString = NewString <>"C"<>SPhenoForm[First[listMatMul[[k,j,i]]]];,
_,
	NewString = NewString <>SPhenoForm[listMatMul[[k,j,i]]];
];

i++;];
subSPhenoMatTr = Join[subSPhenoMatTr,{listMatMul[[k,j]]->ToExpression[NewString]}];
AddToParameters[listMatMul[[k,j]]];

If[Reverse[Tp/@Conj/@(listMatMul[[k,j]]/.conj->Conj)]===(listMatMul[[k,j]]/.conj->Conj),
hermitian=True;,
hermitian=False;
];


Switch[Length[listMatMul[[k,j]]],
2,listMat2[[k]] = Join[listMat2[[k]],{{Apply[List,listMatMul[[k,j]]],ToExpression[NewString],hermitian}}];,
3,listMat3[[k]] = Join[listMat3[[k]],{{Apply[List,listMatMul[[k,j]]],ToExpression[NewString],hermitian}}];,
4,listMat4[[k]] = Join[listMat4[[k]],{{Apply[List,listMatMul[[k,j]]],ToExpression[NewString],hermitian}}];,
5,listMat5[[k]] = Join[listMat5[[k]],{{Apply[List,listMatMul[[k,j]]],ToExpression[NewString],hermitian}}];,
6,listMat6[[k]] = Join[listMat6[[k]],{{Apply[List,listMatMul[[k,j]]],ToExpression[NewString],hermitian}}];
];
j++;];


For[j=1,j<=Length[listTrace[[k]]],
NewString="Tr";
For[i=1,i<=Length[listTrace[[k,j]]],
Switch[Head[listTrace[[k,j,i]]],
Adj,
	NewString = NewString <>"adj"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
Tp, 
	NewString = NewString <>"Tp"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
conj,
	NewString = NewString <>"C"<>SPhenoForm[First[listTrace[[k,j,i]]]];,
_,
	NewString = NewString <>SPhenoForm[listTrace[[k,j,i]]];
];
i++;];
subSPhenoMatTr = Join[subSPhenoMatTr,{listTrace[[k,j]]->ToExpression[NewString]}];
SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{},{1}}}];

If[Reverse[Tp/@Conj/@(listTrace[[k,j]]/.conj->Conj)]===(listTrace[[k,j]]/.conj->Conj),
hermitian=True;,
hermitian=False;
];

 listTr[[k]] = Join[listTr[[k]],{{Apply[MatMul,listTrace[[k,j]]] //. subSPhenoMatTr,ToExpression[NewString],hermitian}}];
j++;];


For[i=1,i<=Length[listMat3[[k]]],
If[CheckMatMul[MatMul[listMat3[[k,i,1,2]],listMat3[[k,i,1,3]]]]==True,
listMat3[[k,i,1]]={listMat3[[k,i,1,1]],(MatMul[listMat3[[k,i,1,2]],listMat3[[k,i,1,3]]] //. subSPhenoMatTr)};,
If[CheckMatMul[MatMul[listMat3[[k,i,1,1]],listMat3[[k,i,1,2]]]]==True,
listMat3[[k,i,1]]={(MatMul[listMat3[[k,i,1,1]],listMat3[[k,i,1,2]]] //. subSPhenoMatTr),listMat3[[k,i,1,3]]};
];
];
i++;];
For[i=1,i<=Length[listMat4[[k]]],
If[CheckMatMul[MatMul[listMat4[[k,i,1,2]],listMat4[[k,i,1,3]],listMat4[[k,i,1,4]]]]==True,
listMat4[[k,i,1]]={listMat4[[k,i,1,1]],(MatMul[listMat4[[k,i,1,2]],listMat4[[k,i,1,3]],listMat4[[k,i,1,4]]] //. subSPhenoMatTr)};,
If[CheckMatMul[MatMul[listMat4[[k,i,1,1]],listMat4[[k,i,1,2]],listMat4[[k,i,1,3]]]]==True,
listMat4[[k,i,1]]={(MatMul[listMat4[[k,i,1,1]],listMat4[[k,i,1,2]],listMat4[[k,i,1,3]]] //. subSPhenoMatTr),listMat4[[k,i,1,1]]};,
If[CheckMatMul[MatMul[listMat4[[k,i,1,1]],listMat4[[k,i,1,2]]]]==True && CheckMatMul[MatMul[listMat4[[k,i,1,3]],listMat4[[k,i,1,4]]]]==True,
listMat4[[k,i,1]]={(MatMul[listMat4[[k,i,1,1]],listMat4[[k,i,1,2]]] //. subSPhenoMatTr),(MatMul[listMat4[[k,i,1,3]],listMat4[[k,i,1,4]]] //. subSPhenoMatTr)};
];
];
];
i++;];
For[i=1,i<=Length[listMat5[[k]]],
If[CheckMatMul[MatMul[listMat5[[k,i,1,2]],listMat5[[k,i,1,3]],listMat5[[k,i,1,4]],listMat5[[k,i,1,5]]]]==True,
listMat5[[k,i,1]]={listMat5[[k,i,1,1]],(MatMul[listMat5[[k,i,1,2]],listMat5[[k,i,1,3]],listMat5[[k,i,1,4]],listMat5[[k,i,1,5]]] //. subSPhenoMatTr)};,
If[CheckMatMul[MatMul[listMat5[[k,i,1,1]],listMat5[[k,i,1,2]],listMat5[[k,i,1,3]],listMat5[[k,i,1,4]]]]==True,
listMat5[[k,i,1]]={(MatMul[listMat5[[k,i,1,1]],listMat5[[k,i,1,2]],listMat5[[k,i,1,3]],listMat5[[k,i,1,4]]] //. subSPhenoMatTr),listMat5[[k,i,1,5]]};
];
];
i++;];
For[i=1,i<=Length[listMat6[[k]]],
If[CheckMatMul[MatMul[listMat6[[k,i,1,2]],listMat6[[k,i,1,3]],listMat6[[k,i,1,4]],listMat6[[k,i,1,5]],listMat6[[k,i,1,6]]]]==True,
listMat6[[k,i,1]]={listMat6[[k,i,1,1]],(MatMul[listMat6[[k,i,1,2]],listMat6[[k,i,1,3]],listMat6[[k,i,1,4]],listMat6[[k,i,1,5]],listMat6[[k,i,1,6]]] //. subSPhenoMatTr)};,
If[CheckMatMul[MatMul[listMat6[[k,i,1,1]],listMat6[[k,i,1,2]],listMat6[[k,i,1,3]],listMat6[[k,i,1,4]],listMat6[[k,i,1,5]]]]==True,
listMat6[[k,i,1]]={(MatMul[listMat6[[k,i,1,1]],listMat6[[k,i,1,2]],listMat6[[k,i,1,3]],listMat6[[k,i,1,4]],listMat6[[k,i,1,5]]] //. subSPhenoMatTr),listMat6[[k,i,1,6]]};
];
];
i++;];

listDyade[[k]] = listDyade[[k]] //. subSPhenoMatTr;

For[j=1,j<=Length[listDyade[[k]]],
namePart1=Cases[listDyade[[k,j]] //.conj->Conj,x_[___,i1,___],5][[1]]/. A_[]->A//.Conj->conj/. conj[A_[a__]]:>ToExpression["C"<>SPhenoForm[A]<>ToString/@{a}]/. A_[a__]:>ToExpression[SPhenoForm[A]<>ToString/@{a}];
namePart2 = Cases[listDyade[[k,j]]//.conj->Conj,x_[___,i2,___],5][[1]]/. A_[]->A //.Conj->conj/. conj[A_[a__]]:>ToExpression["C"<>SPhenoForm[A]<>ToString/@{a}]/. A_[a__]:>ToExpression[SPhenoForm[A]<>ToString/@{a}];
NewString="Dy"<>SPhenoForm[namePart1]<>SPhenoForm[namePart2];
subSPhenoMatTr = Join[subSPhenoMatTr,{listDyade[[k,j]]->ToExpression[NewString][i1,i2]}];
SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{gen,gen},{getDimSPheno[Cases[listDyade[[k,j]],x_[___,i1,___],5][[1,0]]][[1]],getDimSPheno[Cases[listDyade[[k,j]],x_[___,i2,___],5][[1,0]]][[1]]}}}];
listDy[[k]] =  Join[listDy[[k]],{{listDyade[[k,j]] ,Cases[listDyade[[k,j]],x_[___,i1,___],5][[1,0]],Cases[listDyade[[k,j]],x_[___,i2,___],5][[1,0]],ToExpression[NewString]}}];
j++;];


For[j=1,j<=Length[listScalarProd[[k]]],
NewString=StringReplace["SP"<>SPhenoForm[listScalarProd[[k,j,1]] /.subSPhenoMatTr]<>"xx"<>SPhenoForm[listScalarProd[[k,j,2]]/.subSPhenoMatTr],{" "->"","Conjg"->"C","("->"",")"->""}];
listScalarProducts[[k]]=Join[listScalarProducts[[k]],{{listScalarProd[[k,j]]//. subSPhenoMatTr,ToExpression[NewString] }}];
realVar = Join[realVar,{ToExpression[NewString]}];
SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{},{1}}}];
subSPhenoMatTr = Join[subSPhenoMatTr,{listScalarProd[[k,j]]->ToExpression[NewString]}];
j++;];

For[j=1,j<=Length[listPowers[[k]]],
If[FreeQ[FullForm[listPowers[[k,j]]],Plus],
If[Head[listPowers[[k,j,1]]]===Rational,
NewString=ToString[Numerator[listPowers[[k,j,1]]]]<>"ov"<>ToString[Denominator[listPowers[[k,j,1]]]];,
If[Head[listPowers[[k,j,1]]]===conj,
NewString="C"<>SPhenoForm[listPowers[[k,j,1,1]] /.subSPhenoMatTr];,
NewString=SPhenoForm[listPowers[[k,j,1]] /.subSPhenoMatTr];
];
];
If[Head[listPowers[[k,j,2]]]===Integer,
NewString = NewString <>"p"<>ToString[listPowers[[k,j,2]]];,
If[listPowers[[k,j,2]]<0,
NewString ="ooSqrt"<>NewString;,
NewString ="sqrt"<>NewString;
];
];
NewString = StringReplace[NewString,{"*"->""," "->"","+"->"p","-"->"m","("->"",")"->""}];
listPow[[k]] = Join[listPow[[k]],{{listPowers[[k,j]] /.subSPhenoMatTr,ToExpression[NewString]}}];
SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{},{1}}}];
subSPhenoMatTr = Join[subSPhenoMatTr,{listPowers[[k,j]]->ToExpression[NewString]}];
If[FreeQ[realVar,listPowers[[k,j,1]]]==False,
realVar = Join[realVar,{ToExpression[NewString]}];
];
];
j++;]; 




k++;];

subSPhenoMatTr = subSPhenoMatTr /. ID3R->Kronecker;

];

NotFreeQj[x_]:=If[FreeQ[x,j1]&& FreeQ[x,j2]&& FreeQ[x,j3]&& FreeQ[x,j4]&& FreeQ[x,j5], Return[False];,Return[True]];


AddToParameters[matmul_]:=Block[{i,len,dims},len=Length[matmul];
dims=(getDimSPhenoRev/@matmul//.{MatMul[a___,{x1_,x2_},{y1_,y2_}]->MatMul[a,{x1,y2}],MatMul[a___,{x1_,x2_},{y1_}]->MatMul[a,{x1}],MatMul[{x1_},{y1_}]->MatMul[{}],MatMul[a___,{x1_},{y1_,y2_}]->MatMul[a,{y2}]})[[1]];

Switch[Length[dims],
0,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
1,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{generation},dims}}];,
2,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{generation,generation},dims}}];
];
];

getDimSPhenoRev[x_Adj]:=Reverse[getDimSPheno[x]];
getDimSPhenoRev[x_Tp]:=Reverse[getDimSPheno[x]];
getDimSPhenoRev[x_]:=getDimSPheno[x]/;(Head[x]=!=Adj&&Head[x]=!=Tp)

(*
AddToParameters[matmul_]:=Block[{i,len,dims},
len=Length[matmul];
dims=getDimSPheno[matmul[[len]]];
For[i=1,i \[LessEqual]len-1,
If[Length[dims]\[Equal]2,
If[Head[matmul[[len]]] ===Tp|| Head[matmul[[len]]] === Adj ,
dims={First[dims]};,
dims={Last[dims]};
];,
dims={};
];
dimsT=getDimSPheno[matmul[[len-i]]];
If[Length[dimsT]\[Equal]2 ,
If[Head[matmul[[len-i]]] ===Tp|| Head[matmul[[len-i]]] === Adj ,
dims=Join[{dimsT[[2]]},dims];,
dims=Join[{First[dimsT]},dims];
];
];
i++;
];
Switch[Length[dims],
0,SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
1,SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{generation},dims}}];,
2,SPhenoParameters = Join[SPhenoParameters,{{ToExpression[NewString],{generation,generation},dims}}];
];
];



AddToParameters[matmul_]:=Block[{i,len,dims},
len=Length[matmul];
dims=getDimSPheno[matmul[[len]]];
If[Length[dims]\[Equal]2,
If[Head[matmul[[len]]]===Tp||Head[matmul[[len]]]===Adj,
dims={First[dims]};,
dims={Last[dims]};];,
dims={};];

dimsT=getDimSPheno[matmul[[1]]];
If[Length[dimsT]\[Equal]2,
If[Head[matmul[[1]]]===Tp||Head[matmul[[1]]]===Adj,
dims=Join[{dimsT[[2]]},dims];,
dims=Join[{First[dimsT]},dims];];
];

Switch[Length[dims],
0,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{},dims}}];,
1,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{generation},dims}}];,
2,SPhenoParameters=Join[SPhenoParameters,{{ToExpression[NewString],{generation,generation},dims}}];
];
];
*)

WriteKronecker:=Block[{},
WriteString[sphenoRGE,"Real(dp) Function Kronecker(t1,t2) Result(d) \n"];
WriteString[sphenoRGE,"Implicit None\n"];
WriteString[sphenoRGE,"Integer,Intent(in)::t1,t2\n"];
WriteString[sphenoRGE,"If(t1.eq.t2) Then\n"];
WriteString[sphenoRGE,"d=1.\n"];
WriteString[sphenoRGE,"Else\n"];
WriteString[sphenoRGE,"d=0.\n"];
WriteString[sphenoRGE,"End If\n"];
WriteString[sphenoRGE,"End Function Kronecker\n \n"];
];

AddThresholdsToRGEs[list_]:=Block[{i,j,nr},

For[nr=1,nr<=Length[ThresholdInvolvedCouplings],
WriteString[sphenoRGE, "If (ThresholdCrossed.lt."<>ToString[nr]<>") Then \n"];
For[i=1,i<=Length[ThresholdInvolvedCouplings[[nr]]],
If[MemberQ[list,ThresholdInvolvedCouplings[[nr,i,1]]],
If[ThresholdInvolvedCouplings[[nr,i,2]]===ALL,
ind="";,
Switch[ThresholdInvolvedCouplings[[nr,i,3]],
3, 
  Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1,ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:,:)";,
2,ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]]<>",:)";,
3,ind = "(:,:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
2, 
Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:)";,
2, ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];
];
WriteString[sphenoRGE,SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>ind<>" = 0._dp \n"];
];
i++;];
WriteString[sphenoRGE,"End if \n\n"];
nr++;];

];

AddThresholdsToRGEsD[list_]:=Block[{i,j,nr},

For[nr=1,nr<=Length[ThresholdInvolvedCouplings],
WriteString[sphenoRGE, "If (ThresholdCrossed.lt."<>ToString[nr]<>") Then \n"];
For[i=1,i<=Length[ThresholdInvolvedCouplings[[nr]]],
If[MemberQ[list,ThresholdInvolvedCouplings[[nr,i,1]]],
If[ThresholdInvolvedCouplings[[nr,i,2]]===ALL,
ind="";,
Switch[ThresholdInvolvedCouplings[[nr,i,3]],
3, 
  Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1,ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:,:)";,
2,ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]]<>",:)";,
3,ind = "(:,:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
2, 
Switch[ThresholdInvolvedCouplings[[nr,i,2]],
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>",:)";,
2, ind = "(:,"<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];,
1, ind = "("<>ToString[ThresholdInvolvedCouplings[[nr,i,4]]] <>")";
];
];
WriteString[sphenoRGE,"D"<>SPhenoForm[ThresholdInvolvedCouplings[[nr,i,1]]]<>ind<>" = 0._dp \n"];
];
i++;];
WriteString[sphenoRGE,"End if \n\n"];
nr++;];

];


CheckMatMul[in_]:=Block[{temp,i,j,temp1={},temp2={},res=True},temp=List@@in;
For[i=1,i<Length[in],If[Head[in[[i]]]===Tp||Head[in[[i]]]===Adj,dim1=getDimSPheno[in[[i]]][[1]];,dim1=getDimSPheno[in[[i]]][[-1]];];
If[Head[in[[i+1]]]===Tp||Head[in[[i+1]]]===Adj,dim2=getDimSPheno[in[[i+1]]][[-1]];,dim2=getDimSPheno[in[[i+1]]][[1]];];
If[dim1=!=dim2,res=False;];
i++;];
Return[res];];
