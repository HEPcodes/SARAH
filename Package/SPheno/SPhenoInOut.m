(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



InitInputOutput:=Block[{i},
LowScaleList={};
HighScaleList={};
MakePDGList;
tempList = Transpose[BetaGauge][[1]];
AddParametersToList[tempList];

(*
If[Length[listWtriOne]\[NotEqual] 0, tempList=Transpose[Transpose[listWtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]]; AddParametersToList[tempList]; ];
If[Length[listWbiOne]\[NotEqual] 0,tempList=Transpose[Transpose[listWbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[listAtriOne]\[NotEqual] 0,tempList=Transpose[Transpose[listAtriOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[listAbiOne]\[NotEqual] 0,tempList=Transpose[Transpose[listAbiOne/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[listAone]\[NotEqual] 0,tempList=Transpose[Transpose[listAone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[listWone]\[NotEqual] 0,tempList=Transpose[Transpose[listWone/. Delta[a__]\[Rule]1 /. epsTensor[a__]\[Rule]1 /. InvMat[a__][b__]\[Rule]1][[2]]][[2]];AddParametersToList[tempList];];
*)
If[Length[BetaLijkl]!= 0, tempList=Transpose[BetaLijkl][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1 /. {i1->gen1,i2->gen2,i3->gen3,i4->gen4}; AddParametersToList[tempList]; ];
If[Length[BetaYijk]!= 0, tempList=Transpose[BetaYijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1/. {i1->gen1,i2->gen2,i3->gen3,i4->gen4}; AddParametersToList[tempList]; ];
If[Length[BetaMuij]!= 0,tempList=Transpose[BetaMuij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1/. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};AddParametersToList[tempList];];
If[Length[BetaTijk]!= 0,tempList=Transpose[BetaTijk][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1/. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};AddParametersToList[tempList];];
If[Length[BetaBij]!= 0,tempList=Transpose[BetaBij][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1/. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};AddParametersToList[tempList];];
If[Length[listAone]!= 0,tempList=Transpose[Transpose[listAone/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[BetaLi]!= 0,tempList=Transpose[BetaLi][[1]]/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1/. {i1->gen1,i2->gen2,i3->gen3,i4->gen4};AddParametersToList[tempList];];
If[Length[listSM]!= 0,tempList=Transpose[listSM][[2]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;AddParametersToList[tempList];];
If[Length[listGM]!= 0,tempList=Transpose[listGM][[2]] /. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1;AddParametersToList[tempList];];
If[Length[listW4]!= 0,tempList=Transpose[Transpose[listW4One/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];AddParametersToList[tempList];];
If[Length[listA4]!= 0,tempList=Transpose[Transpose[listA4One/. Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1][[2]]][[2]];AddParametersToList[tempList];];


If[SupersymmetricModel=!=False,
AddParametersToList[AdditionalParametersLagrange];
];

If[SA`DiracGauginoMassTerms=!={},
AddParametersToList[SA`DiracGauginoMassTerms];
];

If[AddFIU1=!={},
AddParametersToList[Transpose[BetaFIi][[1]]];
];

(*
If[NonSUSYModel===True,
AddParametersToList[Transpose[Transpose[SA`ListGaugeMixedAll][[2]]][[2]]];
];
*)
ListAllInputParameters=Join[LowScaleList,HighScaleList];

lowScaleNames={};
lowScaleIn={};
lowScaleMZ={};
lowScaleGUT={};
highScaleNames={};
highScaleIn={};
highScaleMZ={};
highScaleGUT={};


 For[i=1,i<=Length[LowScaleList],
lowScaleNames = Join[lowScaleNames,{LowScaleList[[i,1]]}];
newEntry=Extract[SPhenoParameters,Position[SPhenoParameters,LowScaleList[[i,1]]][[1,1]]];
lowScaleIn = Join[lowScaleIn,{ToExpression[SPhenoForm[LowScaleList[[i,1]]]<>"IN"]}];
lowScaleMZ = Join[lowScaleMZ,{ToExpression[SPhenoForm[LowScaleList[[i,1]]]<>"MZ"]}];
lowScaleGUT = Join[lowScaleGUT,{ToExpression[SPhenoForm[LowScaleList[[i,1]]]<>"GUT"]}];

SPhenoParameters=Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] -> lowScaleIn[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] -> lowScaleMZ[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {lowScaleNames[[i]] -> lowScaleGUT[[i]]}}];

If[conj[lowScaleNames[[i]]]===lowScaleNames[[i]],
realVar=Join[realVar,{lowScaleIn[[i]], lowScaleMZ[[i]], lowScaleGUT[[i]]}];
];
i++;];


For[i=1,i<=Length[HighScaleList],
highScaleNames = Join[highScaleNames,{HighScaleList[[i,1]]}];
newEntry=Extract[SPhenoParameters,Position[SPhenoParameters,HighScaleList[[i,1]]][[1,1]]];
highScaleIn = Join[highScaleIn,{ToExpression[SPhenoForm[HighScaleList[[i,1]]]<>"IN"]}];
highScaleMZ = Join[highScaleMZ,{ToExpression[SPhenoForm[HighScaleList[[i,1]]]<>"MZ"]}];
highScaleGUT = Join[highScaleGUT,{ToExpression[SPhenoForm[HighScaleList[[i,1]]]<>"GUT"]}];

SPhenoParameters=Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] -> highScaleIn[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] -> highScaleMZ[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {highScaleNames[[i]] -> highScaleGUT[[i]]}}];

If[conj[highScaleNames[[i]]]===highScaleNames[[i]],
realVar=Join[realVar,{highScaleIn[[i]], highScaleMZ[[i]], highScaleGUT[[i]]}];
];
i++;]; 

nrLowScale=GetNumberParameters[lowScaleNames];
nrHighScale=GetNumberParameters[highScaleNames];

nrComplete = nrLowScale + nrHighScale;

listVEVs={};

For[i=1,i<=Length[Particles[Current]],
If[Particles[Current][[i,4]]===VEV,
listVEVs=Join[listVEVs,{Particles[Current][[i,1]]}];
];
i++;];

listVEVs=Sort[listVEVs,(Position[getBasisToVEV[#1],getScalarToVEV[#1]][[1,1]]<Position[getBasisToVEV[#2],getScalarToVEV[#2]][[1,1]])&];

listVEVsIN={};
listVEVsStable={};
For[i=1,i<=Length[listVEVs],
newEntry=Extract[SPhenoParameters,Position[SPhenoParameters,listVEVs[[i]]][[1,1]]];
listVEVsIN = Join[listVEVsIN,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"IN"]}];
listVEVsStable = Join[listVEVsStable,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"Fix"]}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {listVEVs[[i]] -> listVEVsIN[[i]]}}];
SPhenoParameters=Join[SPhenoParameters,{newEntry /. {listVEVs[[i]] -> listVEVsStable[[i]]}}];
If[conj[listVEVs[[i]]]===listVEVs[[i]],
realVar = Join[realVar,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"IN"]}];
realVar = Join[realVar,{ToExpression[SPhenoForm[listVEVs[[i]]]<>"Fix"]}];
];
i++;];

 (*
If[NonSUSYModel\[Equal]True,
listAllParameters = LowScaleParameter;
listAllParametersAndVEVs = Join[LowScaleParameter,listVEVs];
]; *)
listAllParametersAndVEVs = Join[LowScaleParameter,listVEVs];

ListAllInputParameters=Join[ListAllInputParameters,Replace[DeleteCases[DeleteCases[DeleteCases[listVEVs,VEVSM],VEVSM1],VEVSM2] , a_Symbol:>{a,getDimParameter[a],a,TrueQ[a===conj[a]]} ,{1}]/. {1}->{}];

];

AddParametersToList[list_]:=Block[{i},
For[i=1,i<=Length[list],
par=DeleteCases[DeleteCases[DeleteCases[DeleteCases[list[[i]],gen1,3],gen2,3],gen3,3],gen4,3] /. XX_[]->XX;
dim = getDimParameters[par];
If[NonSUSYModel=!=True,
If[FreeQ[LowScaleParameter,par]==True,
If[FreeQ[HighScaleParameter,par]==True,
If[FreeQ[AdditionalParametersLagrange,par],
Print[par, " not defined in SPheno File"];
Interrupt[];
];,
pos=Position[HighScaleParameter,par][[1]];
HighScaleList = Join[HighScaleList,{{par,dim,Extract[HighScaleParameter,pos],TrueQ[conj[par]==par]}}];
];,
pos=Position[LowScaleParameter,par][[1]];
LowScaleList = Join[LowScaleList,{{par,dim,Extract[LowScaleParameter,pos],TrueQ[conj[par]==par]}}];
];,
If[FreeQ[parameters ,par/. A_[i1,b___]->A]==False,
LowScaleParameter = Join[LowScaleParameter,{par}];
LowScaleList = Join[LowScaleList,{{par,dim,par,TrueQ[conj[par]==par]}}];
];
];
i++;];
];


GenerateInOut:=Block[{i1,i2,i3,i4},

(*
Print["-----------------------------------"];
Print["Write Input-Output Routines"];
Print["-----------------------------------"];
*)

Print[StyleForm["Write I/O routines","Section",FontSize->12]];

sphenoInOut=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"InputOutput_"<>ModelName<>".f90"]];

WriteCopyRight[sphenoInOut];

If[SupersymmetricModel=!=True,
StringScaleOut="Renormalization Scale";,
StringScaleOut="SUSY Scale";
];

WriteString[sphenoInOut,"Module InputOutput_"<>ModelName<>" \n \n"];
WriteString[sphenoInOut,"Use Control \n"];
WriteString[sphenoInOut,"!Use Experiment \n"];
WriteString[sphenoInOut,"Use Model_Data_"<>ModelName<>" \n"];
WriteString[sphenoInOut,"Use LoopFunctions \n"];
If[NonSUSYModel,
WriteString[sphenoInOut,"Use StandardModel \n"];
WriteString[sphenoInOut,"Use LoopCouplings_"<>ModelName<>" \n \n"];,
WriteString[sphenoInOut,"Use SugraRuns_"<>ModelName<>" \n \n"];
];
If[SupersymmetricModel=!=False,
WriteString[sphenoInOut,"Use EffPotFunctions \n"];
];

WriteString[sphenoInOut,"Logical,Save::LesHouches_Format\n"];
WriteString[sphenoInOut,"Character(len=8),Save,Private::versionSARAH=\""<>SA`Version<>"\"\n"];
WriteString[sphenoInOut,"Integer,Private::i_cpv=0\n"];
WriteString[sphenoInOut,"Integer,Save,Private::in_kont(2)\n"];
WriteString[sphenoInOut,"Logical,Save::Add_Rparity= .False. \n"];
WriteString[sphenoInOut,"Logical,Save::Write_HiggsBounds= .False. \n"];
WriteString[sphenoInOut,"Character(len=40),Private::sp_info\n\n"];
WriteString[sphenoInOut,"Logical,Private::l_RP_Pythia= .False. \n"];
WriteString[sphenoInOut,"Logical,Save,Private::Use_Flavour_States= .False. \n"];
WriteString[sphenoInOut,"Real(dp),Save,Private::BrMin=1.e-4_dp \n"];
WriteString[sphenoInOut,"Real(dp),Save,Private::SigMin=1.e-4_dp \n"];

WriteString[sphenoInOut,"Character(len=60)::inputFileName,outputFileName \n"];


WriteString[sphenoInOut,"Contains \n \n"];

GenerateMixedLHBlock;

GenerateLesHouchesIn;
GenerateLesHouchesOut;

If[SPhenoOnlyForHM=!=True,
WriteWHIZARDout;

If[SPhenoHiggsBoundsIncluded===True,
WriteHiggsBounds;
];
];

AppendSourceCode["ReadRoutines.f90",sphenoInOut];
If[IncludeFlavorKit=!=True || SkipFlavorKit===True,
AppendSourceCode["ReadFLHA.f90",sphenoInOut];,
WriteFLHAroutines;
];
WriteReadInFunctions;
If[NonSUSYModel=!=True,
AppendSourceCode["SwitchToSCKM.f90",sphenoInOut];
];

AppendSourceCode["SLHA1converter.f90",sphenoInOut];



WriteString[sphenoInOut,"End Module InputOutput_"<>ModelName<>" \n \n"];
Close[sphenoInOut];
];



GenerateLesHouchesIn:=Block[{},

Print["  Writing input routines"];

 WriteString[sphenoInOut,"Subroutine LesHouches_Input(kont, Ecms, Pm, Pp, l_ISR, Fgmsb) \n \n"]; 

WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer, Intent(out) :: kont\n"]; 
 WriteString[sphenoInOut,"Real(dp), Intent(out) :: Fgmsb, Ecms(:), Pm(:), Pp(:)\n"]; 
WriteString[sphenoInOut,"Logical, Intent(out) :: l_ISR(:)\n"]; 

WriteString[sphenoInOut,"Character(len=80) :: read_line\n"];
WriteString[sphenoInOut,"Integer :: i_mod=-1, i_sm=-1, i_par=-1, set_mod_par(25)=-1 &\n"];
WriteString[sphenoInOut,"& , i1, p_max, p_act, i_sp, i_model=-1, i_particles=-1\n"];
WriteString[sphenoInOut,"Real(dp) :: wert, Abs_Mu2, cosb2, cos2b, sinb2, RG0(3,3) &\n"];
WriteString[sphenoInOut," & , mat_D(3,3), R2(2,2), s12,s13,s23,c12,c13,c23\n"];
WriteString[sphenoInOut,"Logical :: check, calc_ferm, check_alpha(2)\n"];
WriteString[sphenoInOut,"Complex(dp) :: lam_vS\n"];
WriteString[sphenoInOut,"Logical, Save :: l_open = .True. \n \n"];
	
WriteString[sphenoInOut,"Iname = Iname + 1\n"];
WriteString[sphenoInOut,"NameOfUnit(Iname) = \"LesHouches_Input\" \n\n"];
	
WriteString[sphenoInOut,"check_alpha = .False. ! used to check consistency of alpha(mZ) calculation\n"];
WriteString[sphenoInOut,"in_kont = 0\n\n"];

WriteString[sphenoInOut,"Call InitializeStandardModel \n"];
WriteString[sphenoInOut,"Call InitializeLoopFunctions \n \n"];

WriteString[sphenoInOut,"i_mod = -1\n"];
WriteString[sphenoInOut,"i_sm = -1\n"];
WriteString[sphenoInOut,"i_par = -1\n"];
WriteString[sphenoInOut,"set_mod_par = -1 \n\n"];

WriteString[sphenoInOut,"ErrorLevel = -1\n"];
WriteString[sphenoInOut,"GenerationMixing=.False.\n"];
WriteString[sphenoInOut,"If (l_open) Then\n"];
WriteString[sphenoInOut,"   Open(ErrCan,file=\"Messages.out\",status=\"unknown\")\n"];
WriteString[sphenoInOut,"   Open(11,file=\"SPheno.out\",status=\"unknown\")\n"];
WriteString[sphenoInOut,"   l_open = .False.\n"];
WriteString[sphenoInOut,"End If \n\n"];


WriteString[sphenoInOut,"Call Set_All_Parameters_0()\n\n"];
WriteString[sphenoInOut,"lam_vs = 0._dp\n"];
WriteString[sphenoInOut,"sp_info = \" \"\n"];

WriteString[sphenoInOut,"HighScaleModel=\"SARAH_Generated_Model\" \n"];

WriteString[sphenoInOut,"TwoLoopRGE = .True.\n"];
WriteString[sphenoInOut,"Fgmsb = 1.e12_dp\n"];
WriteString[sphenoInOut,"m32 = 1.e20_dp \n \n"];

WriteString[sphenoInOut,"kont = 0\n"];
WriteString[sphenoInOut,"Open(99,file=inputFileName,status=\"old\",err=200)\n \n"];


WriteString[sphenoInOut,"Do \n"];
WriteString[sphenoInOut,"  Read(99,\"(a80)\",End=200,err=200) read_line \n"];

WriteString[sphenoInOut,"  If (read_line(1:1).Eq.\"#\") Cycle \n"];
WriteString[sphenoInOut,"  If (read_line.Eq.\" \") Cycle \n"];

WriteString[sphenoInOut,"  Call PutUpperCase(read_line) \n"];
WriteString[sphenoInOut,"  If (read_line(1:5).Eq.\"BLOCK\") Then  \n"];
WriteString[sphenoInOut,"    If (read_line(7:12).Eq.\"MODSEL\") Then  \n"];
WriteString[sphenoInOut,"      kont = 0  \n"];
WriteString[sphenoInOut,"     Call Read_MODSEL(99,i_particles,i_model,i_cpv,kont)  \n"];
WriteString[sphenoInOut," CKMcomplex = CKM \n"];
WriteString[sphenoInOut," If (i_cpv.Eq.0) Then \n"];
WriteString[sphenoInOut," s12=lam_wolf \n"];
WriteString[sphenoInOut," s23=s12**2*A_wolf \n"];
WriteString[sphenoInOut," s13=s23*lam_wolf*Sqrt(eta_wolf**2+rho_wolf**2) \n"];
WriteString[sphenoInOut," c12=Sqrt(1._dp-s12*s12) \n"];
WriteString[sphenoInOut," c23=Sqrt(1._dp-s23*s23) \n"];
WriteString[sphenoInOut," c13=Sqrt(1._dp-s13*s13) \n"];
WriteString[sphenoInOut," CKM(1,1)=c12*c13 \n"];
WriteString[sphenoInOut," CKM(1,2)=s12*c13 \n"];
WriteString[sphenoInOut," CKM(1,3)=s13 \n"];
WriteString[sphenoInOut," CKM(2,1)=-s12*c23-c12*s23*s13 \n"];
WriteString[sphenoInOut," CKM(2,2)=c12*c23-s12*s23*s13 \n"];
WriteString[sphenoInOut," CKM(2,3)=s23*c13 \n"];
WriteString[sphenoInOut," CKM(3,1)=s12*s23-c12*c23*s13 \n"];
WriteString[sphenoInOut," CKM(3,2)=-c12*s23-s12*c23*s13 \n"];
WriteString[sphenoInOut," CKM(3,3)=c23*c13 \n"];
WriteString[sphenoInOut," End If \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:14).Eq.\"SMINPUTS\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_SMinput(99)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:12).Eq.\"VCKMIN\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_CKM(99,i_cpv)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:12).Eq.\"FCONST\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_FCONST(99)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:11).Eq.\"FMASS\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_FMASS(99)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:11).Eq.\"FLIFE\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_FLIFE(99)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:17).Eq.\"SPHENOINPUT\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_SPhenoInput(99)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:12).Eq.\"MINPAR\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_MINPAR(99,0,i_model,set_mod_par,kont)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:14).Eq.\"IMMINPAR\") Then  \n"];
WriteString[sphenoInOut,"       If (i_cpv.Lt.2) Then \n"];
WriteString[sphenoInOut,"       Call Warn_CPV(i_cpv,\"IMMINPAR\") \n"];
WriteString[sphenoInOut,"       End If \n"];
WriteString[sphenoInOut,"    Call Read_MINPAR(99,1,i_model,set_mod_par,kont)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:12).Eq.\"EXTPAR\") Then  \n"];
WriteString[sphenoInOut,"     Call Read_EXTPAR(99,0,i_model,set_mod_par,kont)  \n"];
WriteString[sphenoInOut,"    Else If (read_line(7:14).Eq.\"IMEXTPAR\") Then  \n"];
WriteString[sphenoInOut,"       If (i_cpv.Lt.2) Then \n"];
WriteString[sphenoInOut,"       Call Warn_CPV(i_cpv,\"IMEXTPAR\") \n"];
WriteString[sphenoInOut,"       End If \n"];
WriteString[sphenoInOut,"    Call Read_EXTPAR(99,1,i_model,set_mod_par,kont)  \n"];


WriteReadInRoutines[ListAllInputParameters /.{ {1}->{} } ];

If[Head[AdditionalParametersLagrange]===List && AdditionalParametersLagrange=!={},
WriteReadInRoutines[Select[Table[{AdditionalParametersLagrange[[i]],getDimSPheno[AdditionalParametersLagrange[[i]]],AdditionalParametersLagrange[[i]],conj[AdditionalParametersLagrange[[i]]]===AdditionalParametersLagrange[[i]]},{i,1,Length[AdditionalParametersLagrange]}],(#[[2]]=!={} && #[[2]]=!={1})&]];
];

If[Head[RegimeNr]===Integer,
temp = {};
For[i=1,i<=Length[listParametersOtherRegimes],
temp = Join[temp,{{listParametersOtherRegimes[[i]],getDimSPheno[listParametersOtherRegimes[[i]]],listParametersOtherRegimes[[i]],TrueQ[listParametersOtherRegimes[[i]]===conj[listParametersOtherRegimes[[i]]]]}}];
i++;];
WriteReadInRoutines[temp /.{ {1}->{} }];
];



WriteString[sphenoInOut,"End if \n"];

WriteString[sphenoInOut,"End If \n"];

WriteString[sphenoInOut,"End Do \n"];


WriteString[sphenoInOut,"200 Close(99) \n"];


WriteString[sphenoInOut,"gmZ = gamZ * mZ\n"];
WriteString[sphenoInOut,"gmZ2 = gmZ**2\n"];
WriteString[sphenoInOut,"mW2 = mZ2 * (0.5_dp + Sqrt(0.25_dp-Alpha_Mz*pi / (sqrt2*G_F*mZ2))) / 0.987_dp\n"];
WriteString[sphenoInOut,"mW = Sqrt(mW2) \n"];
WriteString[sphenoInOut,"mW_SM = MW \n"];
WriteString[sphenoInOut,"gamW = 2.06_dp \n"];
WriteString[sphenoInOut,"gamW2 = gamW**2\n"];
WriteString[sphenoInOut,"gmW = gamW * mW\n"];
WriteString[sphenoInOut,"gmW2 = gmW**2\n"];

If[SupersymmetricModel===True,
WriteString[sphenoInOut,"Alpha_mZ = Alpha_MSbar(mZ, mW)\n"];
WriteString[sphenoInOut,"If (calc_ferm) Call CalculateRunningMasses(mf_l,mf_d,mf_u&\n"];
WriteString[sphenoInOut,"&,Q_light_quarks,alpha_mZ,alphas_mZ,mZ&\n"];
WriteString[sphenoInOut,"&,mf_l_mZ,mf_d_mZ,mf_u_mZ,kont)\n\n\n"];
];




WriteString[sphenoInOut,"Iname=Iname-1\n"];
WriteString[sphenoInOut,"Contains\n"];

GenerateReadMINPAR;
GenerateReadEXTPAR;

AppendSourceCode["ReadMODSEL.f90",sphenoInOut]; 
AppendSourceCode["ReadSMINPUT.f90",sphenoInOut];
AppendSourceCode["ReadCKM.f90",sphenoInOut];
AppendSourceCode["ReadSPINFO.f90",sphenoInOut];
AppendSourceCode["ReadSPheno_start.f90",sphenoInOut];
If[FlagLoopContributions===True,WriteCheckFieldsLoop;];
AppendSourceCode["ReadSPheno_end.f90",sphenoInOut];
WriteString[sphenoInOut,"End Subroutine LesHouches_Input \n \n \n \n"];

];



(* GenerateReadMINPAR:=GenerateReadRoutine["MINPAR",Table[{i,MINPAR[[i]]},{i,1,Length[MINPAR]}]]; *)
GenerateReadMINPAR:=GenerateReadRoutine["MINPAR",MINPAR];
GenerateReadEXTPAR:=GenerateReadRoutine["EXTPAR",EXTPAR];

WriteCheckFieldsLoop :=Block[{i},
For[i=1,i<=Length[PART[F]],
WriteString[sphenoInOut,"Case("<>ToString[1100+i]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) "<>SPhenoIncludeLoop[PART[F][[i,1]]]<>"= .False. \n"];
i++;];
For[i=1,i<=Length[PART[S]],
WriteString[sphenoInOut,"Case("<>ToString[1200+i]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) "<>SPhenoIncludeLoop[PART[S][[i,1]]]<>"= .False. \n"];
i++;];
For[i=1,i<=Length[PART[V]],
WriteString[sphenoInOut,"Case("<>ToString[1300+i]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) "<>SPhenoIncludeLoop[PART[V][[i,1]]]<>"= .False. \n"];
i++;];
For[i=1,i<=Length[PART[G]],
WriteString[sphenoInOut,"Case("<>ToString[1400+i]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) "<>SPhenoIncludeLoop[PART[G][[i,1]]]<>"= .False. \n"];
i++;];
WriteString[sphenoInOut,"Case("<>ToString[1500]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) IncludeWave = .False. \n"];
WriteString[sphenoInOut,"Case("<>ToString[1501]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) IncludePenguins = .False. \n"];
WriteString[sphenoInOut,"Case("<>ToString[1502]<>") \n"];
WriteString[sphenoInOut,"   If (wert.ne.1) IncludeBoxes = .False. \n"];


];


GenerateReadRoutine[name_,list_]:=Block[{i},

WriteString[sphenoInOut,"Subroutine Read_"<>name<>"(io,i_c,i_model,set_mod_par,kont) \n"];
WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer,Intent(in)::io,i_c,i_model \n"];
WriteString[sphenoInOut,"Integer,Intent(inout)::kont,set_mod_par(:) \n"];

WriteString[sphenoInOut,"Integer::i_par \n"];
WriteString[sphenoInOut,"Real(dp)::wert \n"];
WriteString[sphenoInOut,"Character(len=80)::read_line \n"];


WriteString[sphenoInOut,"Do \n"];
WriteString[sphenoInOut,"Read(io,*,End=200) read_line \n"];
WriteString[sphenoInOut,"If (read_line(1:1).Eq.\"#\") Cycle! this loop \n"];
WriteString[sphenoInOut,"Backspace(io)! resetting to the beginning of the line \n"];
WriteString[sphenoInOut,"If ((read_line(1:1).Eq.\"B\").Or.(read_line(1:1).Eq.\"b\")) Exit! this loop \n"];

WriteString[sphenoInOut,"Read(io,*) i_par,wert!,read_line \n"];
If[Head[list]===List,
If[Head[list[[1,1]]]=!=List,
WriteString[sphenoInOut,"If (i_par.Eq."<>ToString[list[[1,1]]]<>") Then \n"];
For[i=1,i<=Length[list],
If[FreeQ[realVar,list[[i,2]]],
WriteString[sphenoInOut,"If (i_c.Eq.0) "<>SPhenoForm[list[[i,2]]]<>"= Cmplx(wert,Aimag("<>SPhenoForm[list[[i,2]]]<>"),dp) \n"];
WriteString[sphenoInOut,"If (i_c.Eq.1) "<>SPhenoForm[list[[i,2]]]<>"= Cmplx(Real("<>SPhenoForm[list[[i,2]]]<>",dp),wert,dp) \n"];,
WriteString[sphenoInOut,SPhenoForm[list[[i,2]]]<>"= wert \n"];
];
If[FreeQ[highScaleIn,list[[i,2]]]==False || FreeQ[lowScaleIn,list[[i,2]]]==False,
WriteString[sphenoInOut,"InputValuefor"<>StringDrop[SPhenoForm[list[[i,2]]],-2] <> "= .True. \n"];
]; 
If[i!= Length[list],
WriteString[sphenoInOut,"Else If (i_par.Eq."<>ToString[list[[i+1,1]]]<>") Then \n"];
];
i++;
];

WriteString[sphenoInOut,"Else\n"];
WriteString[sphenoInOut,"Write(ErrCan,*) \"Error in routine \"//NameOfUnit(Iname)\n"];
WriteString[sphenoInOut,"If (i_c.Eq.0) Write(ErrCan,*) \"Unknown entry for Block "<>name<>" \",i_par\n"];WriteString[sphenoInOut,"If (i_c.Eq.1) Write(ErrCan,*) \"Unknown entry for Block IM"<>name<>" \",i_par\n"];
WriteString[sphenoInOut,"If (i_c.Eq.0) Write(*,*) \"Unknown entry for Block "<>name<>" \",i_par\n"];WriteString[sphenoInOut,"If (i_c.Eq.1) Write(*,*) \"Unknown entry for Block IM"<>name<>" \",i_par\n"];

WriteString[sphenoInOut,"Call AddError(304)\n"];
WriteString[sphenoInOut,"If (ErrorLevel.Eq.2) Call TerminateProgram\n"];
WriteString[sphenoInOut,"End If\n"];
WriteString[sphenoInOut,"End Do! i_par\n"];,
WriteString[sphenoInOut,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[list],
WriteString[sphenoInOut,"Case ("<>ToString[j]<>") \n"];
WriteString[sphenoInOut,"If (i_par.Eq."<>ToString[list[[j,1,1]]]<>") Then \n"];
For[i=1,i<=Length[list[[j]]],
If[FreeQ[realVar,list[[j,i,2]]],
WriteString[sphenoInOut,"If (i_c.Eq.0) "<>SPhenoForm[list[[j,i,2]]]<>"= Cmplx(wert,Aimag("<>SPhenoForm[list[[j,i,2]]]<>"),dp) \n"];
WriteString[sphenoInOut,"If (i_c.Eq.1) "<>SPhenoForm[list[[j,i,2]]]<>"= Cmplx(Real("<>SPhenoForm[list[[j,i,2]]]<>",dp),wert,dp) \n"];,
WriteString[sphenoInOut,SPhenoForm[list[[j,i,2]]]<>"= wert \n"];
];
If[FreeQ[highScaleIn,list[[j,i,2]]]==False || FreeQ[lowScaleIn,list[[j,i,2]]]==False,
WriteString[sphenoInOut,"InputValuefor"<>StringDrop[SPhenoForm[list[[j,i,2]]],-2] <> "= .True. \n"];
]; 
If[i!= Length[list[[j]]],
WriteString[sphenoInOut,"Else If (i_par.Eq."<>ToString[list[[j,i+1,1]]]<>") Then \n"];
];
i++;
];

WriteString[sphenoInOut,"Else\n"];
WriteString[sphenoInOut,"Write(ErrCan,*) \"Error in routine \"//NameOfUnit(Iname)\n"];
WriteString[sphenoInOut,"If (i_c.Eq.0) Write(ErrCan,*) \"Unknown entry for Block "<>name<>" \",i_par\n"];WriteString[sphenoInOut,"If (i_c.Eq.1) Write(ErrCan,*) \"Unknown entry for Block IM"<>name<>" \",i_par\n"];
WriteString[sphenoInOut,"If (i_c.Eq.0) Write(*,*) \"Unknown entry for Block "<>name<>" \",i_par\n"];WriteString[sphenoInOut,"If (i_c.Eq.1) Write(*,*) \"Unknown entry for Block IM"<>name<>" \",i_par\n"];

WriteString[sphenoInOut,"Call AddError(304)\n"];
WriteString[sphenoInOut,"If (ErrorLevel.Eq.2) Call TerminateProgram\n"];
WriteString[sphenoInOut,"End If\n"];
j++;];
WriteString[sphenoInOut,"End Select \n\n"];
WriteString[sphenoInOut,"End Do! i_par\n"];
];,
WriteString[sphenoInOut,"End Do! i_par\n"];
];


WriteString[sphenoInOut,"200 Return\n"];

WriteString[sphenoInOut,"End Subroutine Read_"<>name<>" \n \n \n"];
];




GenerateLesHouchesOut:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},

Print["  Writing output routines"];

MakeSubroutineTitle["LesHouches_Out",Transpose[ListOfLowEnergyNames][[1]],{"io_L","io","kont","M_GUT"},{"GenerationMixing","f_name"},sphenoInOut];


WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer, Intent(in) :: io_L, io, kont\n"];
MakeVariableList[Transpose[ListOfLowEnergyNames][[1]],",Intent(in)",sphenoInOut];
WriteString[sphenoInOut,"Real(dp), Intent(in) :: M_GUT\n"];
WriteString[sphenoInOut,"Character(len=8)::Datum \n"];
WriteString[sphenoInOut,"Character(len=10)::Zeit \n"];
WriteString[sphenoInOut,"Logical,Intent(in)::GenerationMixing \n"];
WriteString[sphenoInOut,"Logical,Save::l_open= .True. \n"];
WriteString[sphenoInOut,"Integer,Parameter::n_max=500 \n"];
WriteString[sphenoInOut,"Integer :: i1, i2 \n"];
WriteString[sphenoInOut,"Logical :: WriteNextBlock \n"];
WriteString[sphenoInOut,"Character(len=30),Dimension(n_max)::Fnames,Lnames \n"];
WriteString[sphenoInOut,"Character(len=*),Intent(in),Optional::f_name\n"];
WriteString[sphenoInOut,"Real(dp) :: Q, MassLSP(2), facPP, facGG, facPZ \n"];

WriteInOutSCKM;


WriteString[sphenoInOut,"Q=Sqrt(GetRenormalizationScale())\n"];
WriteString[sphenoInOut,"Call Date_and_time(datum,zeit)\n"];
WriteString[sphenoInOut,"If (l_open) Then\n"];
WriteString[sphenoInOut,"If (Present(f_name)) Then\n"];
WriteString[sphenoInOut,"Open(io_L,file=Trim(f_name),status=\"unknown\")\n"];
WriteString[sphenoInOut,"Else\n"];
WriteString[sphenoInOut,"Open(io_L,file=outputFileName,status=\"unknown\")\n"];
WriteString[sphenoInOut,"End If\n"];
WriteString[sphenoInOut,"l_open= .False.\n"];
WriteString[sphenoInOut,"End If\n"];


tempMa=Intersection[SA`LoopMassesParticle,MajoranaPart];
ListMassMixingMat=Table[{ListTree[[i,1]],ListTree[[i,2]]},{i,1,Length[ListTree]}] //. {x___,{a_,{b_,c_}},y___}->{x,{a,b},{a,c},y};

If[tempMa=!={},
WriteString[sphenoInOut, "If (.Not.RotateNegativeFermionMasses) Then \n"];
For[i=1,i<=Length[tempMa],
pos = Position[ListMassMixingMat,SPhenoForm[SPhenoMass[tempMa[[i]]]]][[1,1]];
WriteString[sphenoInOut,"Do i1=1,"<>ToString[getGenSPheno[tempMa[[i]]]] <>"\n"];
WriteString[sphenoInOut, "  If (MaxVal(Abs(AImag("<>SPhenoForm[ListMassMixingMat[[pos]][[2]]]<>"(i1,:)))).gt.MaxVal(Abs(Real("<>SPhenoForm[ListMassMixingMat[[pos]][[2]]]<>"(i1,:),dp)))) Then \n"];
WriteString[sphenoInOut,ListMassMixingMat[[pos]][[1]] <>"(i1) = - "<>ListMassMixingMat[[pos]][[1]]<>"(i1) \n"];
WriteString[sphenoInOut,SPhenoForm[ListMassMixingMat[[pos]][[2]]] <>"(i1,:) = -(0._dp,1._dp)*"<>SPhenoForm[ListMassMixingMat[[pos]][[2]]]<>"(i1,:) \n"];
WriteString[sphenoInOut,"  End If \n"];
WriteString[sphenoInOut,"End Do \n"];
i++;];
WriteString[sphenoInOut, "End If \n \n"];
];


WriteInOutSpcHead;
WriteInOutParameters;

WriteInOutMasses;
WriteInOutRotMatrices;


WriteString[sphenoInOut,"Write(io_L,100) \"Block SPheno # SPheno internal parameters \" \n"];
AppendSourceCode["WriteSPheno.f90",sphenoInOut];

If[SupersymmetricModel=!=False,

WriteString[sphenoInOut,"SELECT CASE (TwoLoopMethod)\n"];
WriteString[sphenoInOut,"CASE ( 1 ) \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,1.,\"# Two-Loop Method: purely numerical \" \n"];
WriteString[sphenoInOut,"CASE ( 2 ) \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,2.,\"# Two-Loop Method: semi-analytical \" \n"];
WriteString[sphenoInOut,"CASE ( 3 ) \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,3.,\"# Two-Loop Method: diagrammatic \" \n"];
WriteString[sphenoInOut,"CASE ( 8 ) \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,8.,\"# Two-Loop Method: MSSM+ alpha_s alpha_t routines \" \n"];
WriteString[sphenoInOut,"CASE ( 9 ) \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,9.,\"# Two-Loop Method: MSSM+ routines \" \n"];
WriteString[sphenoInOut,"CASE DEFAULT \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,0.,\"# Two-Loop Method: no two loop calculation \" \n"];
WriteString[sphenoInOut,"END SELECT \n"];

(*
WriteString[sphenoInOut,"If (CalculateMSSM2Loop) Then \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,9.,\"# Two-Loop Method: MSSM routines\" \n"];
WriteString[sphenoInOut,"Else \n"];
WriteString[sphenoInOut,"If (PurelyNumericalEffPot) Then \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,1.,\"# Two-Loop Method: purely numerical \" \n"];
WriteString[sphenoInOut,"Else \n"];
WriteString[sphenoInOut," Write(io_L,102) 8,2.,\"# Two-Loop Method: semi-analytical \" \n"];
WriteString[sphenoInOut,"End if\n"];
WriteString[sphenoInOut,"End if \n"];
*)

WriteString[sphenoInOut,"If (GaugelessLimit) Then \n"];
WriteString[sphenoInOut," Write(io_L,102) 9,1.,\"# Gauge-less limit\" \n"];
WriteString[sphenoInOut,"Else \n"];
WriteString[sphenoInOut," Write(io_L,102) 9,0.,\"# Gauge-less limit\" \n"];
WriteString[sphenoInOut,"End if \n"];

WriteString[sphenoInOut,"Write(io_L,102) 400,hstep_pn,\"# Step-size for purely-numerical methode for 2-loop calculation\" \n"];
WriteString[sphenoInOut,"Write(io_L,102) 401,hstep_sa,\"# Step-size for semi-analytical methode for 2-loop calculation\" \n"];
WriteString[sphenoInOut,"Write(io_L,102) 410,err2L,\"# indicative error in numerical derivation\" \n"];
];
WriteString[sphenoInOut, "\n \n"];


If[SPhenoOnlyForHM=!=True,
WriteString[sphenoInOut, "If(Write_WHIZARD) Call WriteWHIZARD \n \n"];
If[SPhenoHiggsBoundsIncluded===True,
WriteString[sphenoInOut, "If(Write_HiggsBounds) Call WriteHiggsBounds"];
WriteString[sphenoInOut, "\n \n"];
];
];

If[SPhenoOnlyForHM=!=True,
If[getGen[HiggsBoson]>1,WriteInOutHiggsObservables;];
WriteInOutLowEnergyObservables;
If[IncludeFineTuning===True,WriteInOutFT;];
WriteInOutDecays;
];

WriteString[sphenoInOut,"99 Format(1x,i5,3x,a) \n"];
WriteString[sphenoInOut,"100 Format(a) \n"];
WriteString[sphenoInOut,"101 Format(2x,i3,2x,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"1010 Format(2x,i6,2x,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"102 Format(1x,i9,3x,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"103 Format(a13,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"104 Format(i4,2x,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"105 Format(1x,2i3,3x,1P,e16.8,3x,a) \n"];
WriteString[sphenoInOut,"106 Format(a,1P,e16.8,2x,a) \n"];
WriteString[sphenoInOut,"107 Format(2i3,3x,1P,e16.8,3x,a) \n"];
WriteString[sphenoInOut,"127 Format(3i3,3x,1P,e16.8,3x,a) \n"];
WriteString[sphenoInOut,"117 Format(i3,i8,3x,1P,e16.8,3x,a) \n"];
WriteString[sphenoInOut,"118 Format(i3,i10,3x,1P,a) \n"];
WriteString[sphenoInOut,"119 Format(i3,i10,3x,1P,3x,e16.8,a) \n"];
WriteString[sphenoInOut,"120 Format(i3,i10,3x,1P,3x,e16.8,a,i2,a,i2,a) \n"];
WriteString[sphenoInOut,"121 Format(i10,3x,i10,3x,i10,3x,e16.8,a) \n"];
WriteString[sphenoInOut,"122 Format(i10,i10,3x,1P,3x,e16.8,a,i2,a,i2,a) \n"];
WriteString[sphenoInOut,"108 Format(9x,1P,E16.8,0P,3x,a) \n"];
WriteString[sphenoInOut,"109 Format(1x,3i3,3x,1P,e16.8,3x,a) \n"];
WriteString[sphenoInOut,"110 Format(3x,2i3,3x,\"# \",a) \n"];
WriteString[sphenoInOut,"200 Format(\"DECAY\",1x,I9,3x,1P,E16.8,0P,3x,\"# \",a) \n"];
WriteString[sphenoInOut,"201 Format(3x,1P,e16.8,0p,3x,I2,3x,2(i10,1x),2x,\"# BR(\",a) \n"];
WriteString[sphenoInOut,"202 Format(3x,1P,e16.8,0p,3x,I2,3x,3(i10,1x),2x,\"# BR(\",a) \n"];
WriteString[sphenoInOut,"222 Format(1x,a8,1x,a4,3x,a2,3x,a1,3x,E16.8,3x,a) \n"];
WriteString[sphenoInOut,"4711 Format(3x,1P,e16.8,0p,3x,I2,3x,2(i10,1x),2x,\" # \",A)\n"];
WriteString[sphenoInOut,"4712 Format(\"XS 11 -11 \",F7.1,\" \",F5.2,\" \",F5.2,\" \",A)\n\n"];
WriteString[sphenoInOut,"5410 Format(a25,1p,e16.7) \n"];
WriteString[sphenoInOut,"5411 Format(a25,1p,\"(\",e16.7,\",\",e16.7,\")\") \n"];
WriteString[sphenoInOut,"1101 Format(1P,2x,e16.8,2x,e16.8,0P,5x,i4,5x,3i10,a) \n"];
WriteString[sphenoInOut,"1102 Format(1P,2x,e16.8,0P,5x,i4,5x,3i10,a) \n"];
WriteString[sphenoInOut,"1103 Format(1P,2x,e16.8,0P,5x,i4,5x,4i10,a) \n"];

WriteString[sphenoInOut,"End Subroutine LesHouches_Out \n \n \n"];

];





MakePDGList[Eigenstates_]:=Block[{i,def,field},
PDGList={};
RParityList = {};
def=ParticleDefinitions[Eigenstates];
For[i=1,i<=Length[def],
If[UsePDGIX===True,
readPDG=PDG.IX /. def[[i,2]];,
readPDG=PDG /. def[[i,2]];
];
(* readRP=RParity /. def[[i,2]]; *)
readRP=getRParity[def[[i,1]],Eigenstates];
If[getGenSPheno[def[[i,1]]]=!=99,
If[Length[readPDG]=!=getGenSPheno[def[[i,1]]],
currentPDG=Table[0,{getGenSPheno[def[[i,1]]]}];,
currentPDG = readPDG;
];
PDGList=Join[PDGList,{{def[[i,1]],currentPDG,SPhenoPDG[def[[i,1]]]}}];
RParityList=Join[RParityList,{{def[[i,1]],readRP}}];
SPhenoParameters=Join[SPhenoParameters,{{SPhenoPDG[def[[i,1]]],{generation},{getGenSPheno[def[[i,1]]]}}}];
];
i++;];


field=Flatten[{Transpose[PART[F]][[1]],Transpose[PART[S]][[1]],Transpose[PART[V]][[1]]}];

noPDG=Select[field,(FreeQ[PDGList,#])&];

For[i=1,i<=Length[noPDG],
Message[SPheno::noPDG,noPDG[[i]]];
i++;];

];

AddParametersFromOtherRegimes := Block[{i,j,k, saveName, inName},
listParametersOtherRegimes={};
listParametersOtherRegimesSave={};
listParametersOtherRegimesGUT={};
listsaveMasses = Table[{},{RegimeNr-1}];
For[i=1,i<RegimeNr,
For[j=1,j<=Length[DimensionsOtherRegimes[[i]]],
If[FreeQ[SPhenoParameters,DimensionsOtherRegimes[[i,j,1]]],
saveName = ToExpression[SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"SAVE"];
inName = ToExpression[SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"IN"];
GutName = ToExpression[SPhenoForm[DimensionsOtherRegimes[[i,j,1]]]<>"GUT"];
Switch[Length[DimensionsOtherRegimes[[i,j,2]]],
0, SPhenoParameters=Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,1]],{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{inName,{},{}}}];
SPhenoParameters=Join[SPhenoParameters,{{GutName,{},{}}}];,
1, SPhenoParameters=Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,1]],{generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{inName,{generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{GutName,{generation},DimensionsOtherRegimes[[i,j,2]]}}];,
2, SPhenoParameters=Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,1]],{generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{inName,{generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{GutName,{generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];,
3, SPhenoParameters=Join[SPhenoParameters,{{DimensionsOtherRegimes[[i,j,1]],{generation,generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{generation,generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{inName,{generation,generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
SPhenoParameters=Join[SPhenoParameters,{{GutName,{generation,generation,generation},DimensionsOtherRegimes[[i,j,2]]}}];
];
listParametersOtherRegimes=Join[listParametersOtherRegimes,{DimensionsOtherRegimes[[i,j,1]]}];
listParametersOtherRegimesSave=Join[listParametersOtherRegimesSave,{saveName}];
If[i==1,
listParametersOtherRegimesGUT=Join[listParametersOtherRegimesGUT,{GutName}];
];
highScaleIn=Join[highScaleIn,{inName}];
If[FreeQ[realVar,DimensionsOtherRegimes[[i,j,1]]]==False,
realVar = Join[realVar,{inName,saveName,GutName}];
];
];
j++;];
i++;];

For[i=1,i<RegimeNr,
For[j=1,j<=Length[GenerationsOfHeavyFieldsAllRegimes[[i]]],
saveName =ToExpression[ToString[SPhenoMass[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>"SAVE"];
inName =ToExpression[ToString[SPhenoMass[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>"IN"];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{generation},{GenerationsOfHeavyFieldsAllRegimes[[i,j,3]]}}}];
realVar=Join[realVar,{saveName}];
listsaveMasses[[i]]  = Join[listsaveMasses[[i]],{saveName}];
saveName =ToExpression[ToString[SPhenoMassSq[GenerationsOfHeavyFieldsAllRegimes[[i,j,1]]]]<>"SAVE"];
SPhenoParameters=Join[SPhenoParameters,{{saveName,{generation},{GenerationsOfHeavyFieldsAllRegimes[[i,j,3]]}}}];
realVar=Join[realVar,{saveName}];
listsaveMasses [[i]] = Join[listsaveMasses[[i]] ,{saveName}];
j++;];
i++;];


];



WriteOutputBlock[name_,dimensions_,thresholdscale_,scalename_]:=Block[{i,i1,i2,i3,nameString,Qscale},
pos = Position[Transpose[ParameterDefinitions][[1]],name];
If[pos=!={},
BlockName=LesHouches /. Extract[ParameterDefinitions,pos[[1,1]]][[2]];
If[BlockName===LesHouches || BlockName===None,
BlockName =SPhenoForm[name];
];,
BlockName =SPhenoForm[name];
];

If[thresholdscale === GUTSCALE,
Qscale="M_GUT";
nameString=SPhenoForm[name]<>"(";,
If[thresholdscale ===0,
Qscale = "Q";
nameString=SPhenoForm[name]<>"(";,
If[thresholdscale<100,
Qscale = SPhenoForm[Thresholds[[thresholdscale,1]]];
nameString=SPhenoForm[name]<>"_save"<>"("<>ToString[thresholdscale]<>",";,
Qscale = SPhenoForm[ThresholdScales[[thresholdscale-100]]];
nameString=SPhenoForm[name]<>"(";
];
];
];

If[conj[name]===name,
WriteString[sphenoInOut,"Write(io_L,106) \"Block "<> ToString[BlockName] <>" Q=\","<>Qscale<>",\"# ("<>scalename<>")\" \n"];
WriteBlockEntries[nameString, dimensions,"",""];,
WriteString[sphenoInOut,"Write(io_L,106) \"Block "<> ToString[BlockName] <>" Q=\","<>Qscale<>",\"# ("<>scalename<>")\" \n"];
WriteBlockEntries[nameString, dimensions,"Real(",",dp)"];

If[thresholdscale<100 && thresholdscale=!=0 && thresholdscale =!=GUTSCALE,
WriteString[sphenoInOut,"If (MaxVal(Abs(AImag("<>SPhenoForm[name]<>"_save))).gt.0._dp) Then \n"];,
WriteString[sphenoInOut,"If (MaxVal(Abs(AImag("<>SPhenoForm[name]<>"))).gt.0._dp) Then \n"];
];

WriteString[sphenoInOut,"Write(io_L,106) \"Block IM"<> ToString[BlockName] <>" Q=\","<>Qscale<>",\"# ("<>scalename<>")\" \n"];
WriteBlockEntries[nameString, dimensions,"Aimag(",")"];
WriteString[sphenoInOut,"End If \n\n"];
];
];



WriteBlockEntries[name_, dimensions_,begin_,end_]:=Block[{i,i1,i2,i3},
Switch[Length[dimensions],
1,
	For[i1=1,i1<=dimensions[[1]],
	WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[i1]<>","<>begin<>name<>ToString[i1]<>")"<>end<>", \"# "<>begin<>name<>ToString[i1]<>") "<>end<>"\" \n"];
	i1++;];,
2,
	For[i1=1,i1<=dimensions[[1]],
	For[i2=1,i2<=dimensions[[2]],
	WriteString[sphenoInOut,"Write(io_L,107)"<>ToString[i1]<>","<>ToString[i2]<>","<> begin<>name<>ToString[i1]<>","<>ToString[i2]<>")"<>end<>", \"# "<>begin<>name<>ToString[i1]<>","<>ToString[i2]<>")"<>end<>"\" \n"];
	i2++;];
	i1++;];,
3,
	For[i1=1,i1<=dimensions[[1]],
	For[i2=1,i2<=dimensions[[2]],
	For[i3=1,i3<=dimensions[[3]],
	WriteString[sphenoInOut,"Write(io_L,127) "<>ToString[i1]<>","<>ToString[i2]<>","<>ToString[i3]<>","<>begin<>name<>ToString[i1]<>","<>ToString[i2]<>","<>ToString[i3]<>")"<>end<>", \"# "<>begin<>name<>ToString[i1]<>","<>ToString[i2]<>","<>ToString[i3]<>")"<>end<>"\" \n"];
	i3++;];
	i2++;];
	i1++;];
];

];


WriteReadInRoutines[list_]:=Block[{i},
For[i=1,i<=Length[list],
If[FreeQ[CombindedBlock,list[[i,1]]],
Switch[Length[list[[i,2]]],
0,
	If[list[[i,4]]==True,
	func="ReadScalarR(99,"<>SPhenoForm[list[[i,1]]]<>"IN, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
	func="ReadScalarC(99,"<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	func2="ReadScalarC(99,"<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	];,
1,
	If[list[[i,4]]==True,
	func="ReadVectorR(99,"<>ToString[list[[i,2,1]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
	func="ReadVectorC(99,"<>ToString[list[[i,2,1]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	func2="ReadVectorC(99,"<>ToString[list[[i,2,1]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	];,

2,
	If[list[[i,4]]==True,
	func="ReadMatrixR(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,2]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
	func="ReadMatrixC(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,2]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	func2="ReadMatrixC(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,1]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	];,

3,
	If[list[[i,4]]==True,
	func="ReadTensorR(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";,
	func="ReadTensorC(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,0, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	func2="ReadTensorC(99,"<>ToString[list[[i,2,1]]]<>","<>ToString[list[[i,2,2]]]<>","<>ToString[list[[i,2,3]]]<>","<>SPhenoForm[list[[i,1]]]<>"IN,1, \""<>SPhenoForm[list[[i,1]]]<>"IN\",kont)\n";
	];
];


WriteString[sphenoInOut,"   Else If (read_line(7:"<>ToString[8+StringLength[LHBlockName[list[[i,3]]]]]<>").Eq.\""<>ToUpperCase[LHBlockName[list[[i,3]]]]<>"IN\") Then \n"];
WriteString[sphenoInOut,"InputValuefor"<>SPhenoForm[list[[i,1]]] <> "= .True. \n"];
WriteString[sphenoInOut,"    Call "<>func<>"\n \n"];

If[list[[i,4]]==False,
WriteString[sphenoInOut,"   Else If (read_line(7:"<>ToString[10+StringLength[SPhenoForm[list[[i,3]]]]]<>").Eq.\"IM"<>ToUpperCase[SPhenoForm[list[[i,3]]]]<>"IN\") Then \n"];
WriteString[sphenoInOut,"     If (i_cpv.Lt.2) Then  \n"];
WriteString[sphenoInOut,"       Call Warn_CPV(i_cpv,\"IM"<>SPhenoForm[list[[i,3]]]<>"\") \n"];
WriteString[sphenoInOut,"       Cycle \n"];
WriteString[sphenoInOut,"     End If \n"];
WriteString[sphenoInOut,"    Call "<>func2<>"\n \n"];
];
];
i++;];

For[i=1,i<=Length[CombindedBlock],
WriteString[sphenoInOut,"   Else If (read_line(7:"<>ToString[8+StringLength[SPhenoForm[CombindedBlock[[i,1]]]]]<>").Eq.\""<>ToUpperCase[SPhenoForm[CombindedBlock[[i,1]]]]<>"IN\") Then \n"];
WriteString[sphenoInOut,"    Call Read_"<>SPhenoForm[CombindedBlock[[i,1]]]<>"IN(99,0,i_model,set_mod_par,kont) \n \n"];
i++;];

];


GenerateMixedLHBlock:=Block[{i,temp,ParticlePhasesTEMP},
CombindedBlock={};
NewLHoutputBlocks={};
MixedBlockNr=1;

ListAllInputParametersTEMP = ListAllInputParameters;

For[i=1,i<=Length[listVEVs],
ListAllInputParametersTEMP = Join[ListAllInputParametersTEMP,{{listVEVs[[i]],(getDimSPheno[listVEVs[[i]]] /. {1}->{}),listVEVs[[i]],True}}];
i++;];

ParticlePhasesTEMP = Intersection[Table[ParticlePhases[[i,2]],{i,1,Length[ParticlePhases]}]];

For[i=1,i<=Length[ParticlePhasesTEMP],
ListAllInputParametersTEMP = Join[ListAllInputParametersTEMP,{{ParticlePhasesTEMP[[i]],(getDimSPheno[ParticlePhasesTEMP[[i]]] /. {1}->{}),ParticlePhasesTEMP[[i]],False}}];
i++;];

ListAllInputParametersTEMP=Join[ListAllInputParametersTEMP,Table[{AdditionalParametersLagrange[[i]],getDimSPheno[AdditionalParametersLagrange[[i]]],AdditionalParametersLagrange[[i]],conj[AdditionalParametersLagrange[[i]]]===AdditionalParametersLagrange[[i]]},{i,1,Length[AdditionalParametersLagrange]}]];

For[i=1,i<=Length[ListAllInputParametersTEMP],
If[Length[ListAllInputParametersTEMP[[i,2]]]==0,
pos = Position[Transpose[ParameterDefinitions][[1]],ListAllInputParametersTEMP[[i,1]]];

If[pos=!={},
BlockName=ToExpression[LHBlockName[ListAllInputParametersTEMP[[i,1]]]];
If[BlockName =!=NONE,
If[BlockName===LesHouches || BlockName ===None,
pos2=Position[CombindedBlock,MixedBlock];
If[pos2=!={},
CombindedBlock[[pos2[[1,1]]]] = Join[CombindedBlock[[pos2[[1,1]]]],{{ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}];,
CombindedBlock = Join[CombindedBlock,{{MixedBlock,{ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}}];
];
MixedBlockNr++;,
BlockNameNr = LHPos[ListAllInputParametersTEMP[[i,1]]];
pos2=Position[CombindedBlock,BlockName];
If[pos2=!={},
CombindedBlock[[pos2[[1,1]]]] = Join[CombindedBlock[[pos2[[1,1]]]],{{ListAllInputParametersTEMP[[i,1]],BlockNameNr}}];,
CombindedBlock = Join[CombindedBlock,{{BlockName,{ListAllInputParametersTEMP[[i,1]],BlockNameNr}}}];
];
];
];,
pos2=Position[CombindedBlock,MixedBlock];
If[pos2=!={},
CombindedBlock[[pos2[[1,1]]]] = Join[CombindedBlock[[pos2[[1,1]]]],{{ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}];,
CombindedBlock = Join[CombindedBlock,{{MixedBlock,{ListAllInputParametersTEMP[[i,1]],MixedBlockNr}}}];
];
MixedBlockNr++;
];
];
i++;];

For[i=1,i<=Length[UnfixedCharges],
pos2=Position[CombindedBlock,LHBlockName[UnfixedCharges[[i]]]];
If[pos2=!={},
CombindedBlock[[pos2[[1,1]]]] = Join[CombindedBlock[[pos2[[1,1]]]],{{UnfixedCharges[[i]],LHPos[UnfixedCharges[[i]]]}}];,
CombindedBlock = Join[CombindedBlock,{{LHBlockName[UnfixedCharges[[i]]],{UnfixedCharges[[i]],LHPos[UnfixedCharges[[i]]]}}}];
];
i++;];

CBsave = temp ;
subNumAdd = {};

For[i=1,i<=Length[subDependencesSPheno],
If[FreeQ[parameters,subDependencesSPheno[[i,1]]]==False && FreeQ[ListAllInputParameters,subDependencesSPheno[[i,1]]] && FreeQ[listVEVs,subDependencesSPheno[[i,1]]],
BlockName = ToExpression[LHBlockName[subDependencesSPheno[[i,1]]]];
BlockNameNr = LHPos[subDependencesSPheno[[i,1]]];

If[BlockName=!=LesHouches && BlockName=!=None && BlockName =!= NONE, 
If[(getDimSPheno[subDependencesSPheno[[i,1]]]/.{1}->{})==={} ,
pos2=Position[CombindedBlock,BlockName];
If[pos2=!={},
CombindedBlock[[pos2[[1,1]]]] = Join[CombindedBlock[[pos2[[1,1]]]],{{subDependencesSPheno[[i,1]],BlockNameNr}}];,
CombindedBlock = Join[CombindedBlock,{{BlockName,{subDependencesSPheno[[i,1]],BlockNameNr}}}];
];,
NewLHoutputBlocks = Join[NewLHoutputBlocks,{subDependencesSPheno[[i,1]]}];
];
subNumAdd = Join[subNumAdd,{subDependencesSPheno[[i]]}];
];
];
i++;];

 temp={};

For[i=1,i<=Length[CombindedBlock],
If[Length[CombindedBlock[[i]]]==2,
temp = Join[temp,{CombindedBlock[[i]]}];,
temp = Join[temp, { {CombindedBlock[[i,1]],(Sort[Drop[CombindedBlock[[i]],1],(#1[[2]]<#2[[2]])&])}}];
];
i++;];
temp2={};
(* treeleveltad=Select[CombindedBlock,Intersection[SA`ListParametersFromTadpoles1L,Table[#[[2,j]],{j,1,Length[#[[2]]]}]]=!={}&]; *)
 treeleveltad=Select[CombindedBlock,Intersection[SA`ListParametersFromTadpoles1L,Table[#[[j,1]],{j,2,Length[#]}]]=!={}&];
For[i=1,i<=Length[treeleveltad],
temp2=Join[temp2,{Join[{ToExpression["TREE"<>ToString[treeleveltad[[i,1]]]]},DeleteCases[Drop[treeleveltad[[i]],1],x_?(FreeQ[SA`ListParametersFromTadpoles1L,#[[1]],{1}]&)]]}];
i++;];
treeleveltad=temp2;

temp2={};
(* treeleveltadpolesLOW=Select[CombindedBlock,Intersection[SA`ListParametersFromTadpoles1Llow,Table[#[[2,j]],{j,1,Length[#[[2]]]}]]=!={}&]; *)
treeleveltadpolesLOW=Select[CombindedBlock,Intersection[SA`ListParametersFromTadpoles1Llow,Table[#[[j,1]],{j,2,Length[#]}]]=!={}&];
For[i=1,i<=Length[treeleveltadpolesLOW],
temp2=Join[temp2,{Join[{ToExpression["TREE"<>ToString[treeleveltadpolesLOW[[i,1]]]]},DeleteCases[Drop[treeleveltadpolesLOW[[i]],1],x_?(FreeQ[SA`ListParametersFromTadpoles1Llow,#[[1]],{1}]&)]]}];
i++;];
treeleveltadpolesLOW=temp2;

];


WriteReadInFunctions:=Block[{i,j,temp,temp2},
For[i=1,i<=Length[CombindedBlock],
temp={};
temp2=Drop[CombindedBlock[[i]],1];
For[j=1,j<=Length[temp2],
If[FreeQ[listVEVs,temp2[[j,1]]]==False || FreeQ[ListAllInputParameters,temp2[[j,1]]]==False,
temp=Join[temp,{{temp2[[j,2]],ToExpression[SPhenoForm[temp2[[j,1]]]<>"IN"]}}];
];
j++;];
If[temp==={},temp=CONSTANT;];
GenerateReadRoutine[SPhenoForm[CombindedBlock[[i,1]]]<>"IN",temp];
i++;];
];

WriteWHIZARDout:=Block[{i,j,k},

ListMassMixingMat=Table[{ListTree[[i,1]],ListTree[[i,2]]},{i,1,Length[ListTree]}] //. {x___,{a_,{b_,c_}},y___}->{x,{a,b},{a,c},y};

WriteString[sphenoInOut,"Subroutine WriteWHIZARD \n"];
WriteString[sphenoInOut,"   Open(123,file=\"WHIZARD.par."<>ModelName<>"\",status=\"unknown\")\n"];


WriteString[sphenoInOut,"Write(123,*) \"# Couplings and VEVs\" \n \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];

For[i=1,i<=Length[ListAllInputParametersTEMP],
If[MemberQ[SA`ParNeed,ListAllInputParametersTEMP[[i,1]]],
If[FreeQ[ThresholdCouplings,ListAllInputParametersTEMP[[i,1]]] && FreeQ[listParametersOtherRegimes,ListAllInputParametersTEMP[[i,1]]],
If[Length[ListAllInputParametersTEMP[[i,2]]]>0 ,
If[FreeQ[realVar,ListAllInputParametersTEMP[[i,1]]],
WriteBlockEntriesWHIZARD[ListAllInputParametersTEMP[[i,1]],ListAllInputParametersTEMP[[i,2]],"_r","Real(",",dp)"];
WriteBlockEntriesWHIZARD[ListAllInputParametersTEMP[[i,1]],ListAllInputParametersTEMP[[i,2]],"_i","AImag(",")"];,
WriteBlockEntriesWHIZARD[ListAllInputParametersTEMP[[i,1]],ListAllInputParametersTEMP[[i,2]],"","",""];
];,
If[FreeQ[realVar,ListAllInputParametersTEMP[[i,1]]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]] <>"_r = \",Real("<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>",dp) \n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]] <>"_i = \",AImag("<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>") \n"];,
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]] <>"= \","<>SPhenoForm[ListAllInputParametersTEMP[[i,1]]]<>"\n"];
];
];
];
];
i++;];

WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"\n \n \n Write(123,*) \"# Dependent parameters \" \n \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];

For[i=1,i<=Length[subNumAdd],
If[MemberQ[SA`ParNeed,subNumAdd[[i,1]]],
If[FreeQ[realVar,subNumAdd[[i,1]]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"_r = \",Real("<>SPhenoForm[subNumAdd[[i,2]]]<>",dp) \n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"_i = \",AImag("<>SPhenoForm[subNumAdd[[i,2]]]<>") \n"];,
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[subNumAdd[[i,1]]] <>"= \","<>SPhenoForm[subNumAdd[[i,2]]]<>"\n"];
];
];
i++;];


WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"\n \n \n Write(123,*) \"# Necessary MINPAR parameters \" \n \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];


If[Head[MINPAR[[1,1]]]=!=List,
For[i=1,i<=Length[MINPAR],
If[FreeQ[parameters,MINPAR[[i,2]]]==False,
If[FreeQ[realVar,MINPAR[[i,2]]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[i,2]]] <>"_r = \",Real("<>SPhenoForm[MINPAR[[i,2]]]<>",dp) \n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[i,2]]] <>"_i = \",AImag("<>SPhenoForm[MINPAR[[i,2]]]<>") \n"];,
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[i,2]]] <>"= \","<>SPhenoForm[MINPAR[[i,2]]]<>"\n"];
];
];
i++;];,
WriteString[sphenoInOut,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[MINPAR],
WriteString[sphenoInOut,"Case ("<>ToString[j]<>") \n"];
For[i=1,i<=Length[MINPAR[[j]]],
If[FreeQ[parameters,MINPAR[[j,i,2]]]==False,
If[FreeQ[realVar,MINPAR[[j,i,2]]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[j,i,2]]] <>"_r = \",Real("<>SPhenoForm[MINPAR[[j,i,2]]]<>",dp) \n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[j,i,2]]] <>"_i = \",AImag("<>SPhenoForm[MINPAR[[j,i,2]]]<>") \n"];,
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[MINPAR[[j,i,2]]] <>"= \","<>SPhenoForm[MINPAR[[j,i,2]]]<>"\n"];
];
];
i++;];
j++;];
WriteString[sphenoInOut,"End Select \n\n"];
];


WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"\n \n \n Write(123,*) \"# Masses of particles\" \n \n"]; 
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];


For[i=1,i<=Length[PDGList],
For[j=1,j<=Length[PDGList[[i,2]]],
If[PDGList[[i,2,j]]=!=0 &&FreeQ[massless,PDGList[[i,1]]] && getMassW[PDGList[[i,1]],j,1] =!= 0 && FreeQ[subNumDependences/.{(a_->b_)->a},Mass[PDGList[[i,1]]]],
WriteString[sphenoInOut,"Write(123,*) \""<>ToString[getMassW[PDGList[[i,1]],j,1]] <>"= \", Abs("<>SPhenoMass[PDGList[[i,1]],j] <>") \n"];
];
j++;];
i++;];

WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"\n \n \n Write(123,*) \"# Widths of particles\" \n \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];


For[i=1,i<=Length[savedDecayInfos],
particle=savedDecayInfos[[i,1]];
For[j=1,j<=getGenSPheno[particle],
If[FreeQ[GoldstoneGhost,particle[{j}]] && getWidthW[particle,j,1] =!= 0,
WriteString[sphenoInOut,"Write(123,*) \""<>ToString[getWidthW[particle,j,1]]<>" = \","<>SPhenoWidth[particle,j]  <>"\n"];
];
j++;];
i++;];


WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];
WriteString[sphenoInOut,"\n \n \n Write(123,*) \"# Mixing matrices\" \n \n"];
WriteString[sphenoInOut,"Write(123,*) \"\" \n"];

For[i=1,i<=Length[ListMassMixingMat],
If[FreeQ[SA`ParNeed,ListMassMixingMat[[i,2]]]==False,
If[FreeQ[realVar,ListMassMixingMat[[i,2]]],
For[j=1,j<=getDimSPheno[ToExpression[ListMassMixingMat[[i,1]]]][[1]],
WriteString[sphenoInOut,"If ("<>ListMassMixingMat[[i,1]]<>"("<>ToString[j]<>").Gt.0._dp) Then \n"];
For[k=1,k<=getDimSPheno[ToExpression[ListMassMixingMat[[i,1]]]][[1]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMassMixingMat[[i,2]]] <>ToString[j]<>ToString[k]<>"_r = \", Real("<>SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>",dp)\n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMassMixingMat[[i,2]]] <>ToString[j]<>ToString[k]<>"_i = \", AImag("<>SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>")\n"];
k++;];
WriteString[sphenoInOut,"Else \n"];
For[k=1,k<=getDimSPheno[ToExpression[ListMassMixingMat[[i,1]]]][[1]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMassMixingMat[[i,2]]] <>ToString[j]<>ToString[k]<>"_i = \", Real("<>SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>",dp)\n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMassMixingMat[[i,2]]] <>ToString[j]<>ToString[k]<>"_r = \", -AImag("<>SPhenoForm[ListMassMixingMat[[i,2]][j,k]]<>")\n"];
k++;];
WriteString[sphenoInOut,"End if \n"];
j++;];,
WriteBlockEntriesWHIZARD[ListMixingMat[[i,1]],getDimParameters[ListMixingMat[[i,1]]],"","",""];
];
];
i++;];

For[i=1,i<=Length[ListMixingMat],
If[FreeQ[ListMassMixingMat,ListMixingMat[[i,1]]],
If[FreeQ[realVar,ListMixingMat[[i,1]]],
For[j=1,j<=getDimSPheno[ToExpression[ListMixingMat[[i,1]]]][[1]],
For[k=1,k<=getDimSPheno[ToExpression[ListMixingMat[[i,1]]]][[1]],
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMixingMat[[i,1]]] <>ToString[j]<>ToString[k]<>"_r = \", Real("<>SPhenoForm[ListMixingMat[[i,1]][j,k]]<>",dp)\n"];
WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[ListMixingMat[[i,1]]] <>ToString[j]<>ToString[k]<>"_i = \", AImag("<>SPhenoForm[ListMixingMat[[i,1]][j,k]]<>")\n"];
k++;];
j++;];,
WriteBlockEntriesWHIZARD[ListMixingMat[[i,1]],getDimParameters[ListMixingMat[[i,1]]],"","",""];
];
];
i++;];

WriteString[sphenoInOut,"    Close(123) \n"];
WriteString[sphenoInOut,"End Subroutine WriteWHIZARD \n"];
];


WriteBlockEntriesWHIZARD[name_, dimensions_,nameSuff_,pre_,post_]:=Block[{i,i1,i2,i3},


Switch[Length[dimensions],
1,
	For[i1=1,i1<=dimensions[[1]],
	WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>nameSuff<>"= \","<>pre<>SPhenoForm[name[i1]]<>post<>"\n"];
	i1++;];,
2,
	For[i1=1,i1<=dimensions[[1]],
	For[i2=1,i2<=dimensions[[2]],
	WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>ToString[i2]<>nameSuff<>"= \","<>pre<>SPhenoForm[name[i1,i2]]<>post<>"\n"];
	i2++;];
	i1++;];,
3,
	For[i1=1,i1<=dimensions[[1]],
	For[i2=1,i2<=dimensions[[2]],
	For[i3=1,i3<=dimensions[[3]],
	WriteString[sphenoInOut,"Write(123,*) \""<>SPhenoForm[name] <>ToString[i1]<>ToString[i2]<>ToString[i3]<>nameSuff<>"= \","<>pre<>SPhenoForm[name[i1,i2,i3]]<>post<>"\n"];
	i3++;];
	i2++;];
	i1++;];
];


];

CheckSCKM:=Block[{},
SLHA1Possible = False;
WriteCKMBasis=False;
If[SupersymmetricModel===True,
If[Select[{"Softbreaking right Down-Squark Mass","Softbreaking right Up-Squark Mass","Trilinear-Up-Coupling","Trilinear-Down-Coupling","Up-Yukawa-Coupling","Down-Yukawa-Coupling","Down-Squark-Mixing-Matrix","Up-Squark-Mixing-Matrix","Softbreaking left Squark Mass"},(FreeQ[ParameterDefinitions,#])& ] =!= {} || Select[{DownSquarkMM,UpSquarkMM,SoftSquark,SoftUp,SoftDown,TrilinearUp,TrilinearDown,DownYukawa,UpYukawa},(FreeQ[parameters,#])& ] =!= {} || NonSUSYModel===True,
WriteCKMBasis=False;
SLHA1Possible = False;,
WriteCKMBasis=True;
If[getGen[TopSquark]==6 && getGen[BottomSquark]==6 && getGen[Sneutrino]==3 && getGen[Selectron]==6,
SLHA1Possible = True;,
SLHA1Possible = False;
];
];
];
];

WriteInOutSCKM:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},
SLHA1Possible = False;
WriteCKMBasis=False;
If[SupersymmetricModel===True,
If[Select[{"Softbreaking right Down-Squark Mass","Softbreaking right Up-Squark Mass","Trilinear-Up-Coupling","Trilinear-Down-Coupling","Up-Yukawa-Coupling","Down-Yukawa-Coupling","Down-Squark-Mixing-Matrix","Up-Squark-Mixing-Matrix","Softbreaking left Squark Mass"},(FreeQ[ParameterDefinitions,#])& ] =!= {} || Select[{DownSquarkMM,UpSquarkMM,SoftSquark,SoftUp,SoftDown,TrilinearUp,TrilinearDown,DownYukawa,UpYukawa},(FreeQ[parameters,#])& ] =!= {} || NonSUSYModel===True,
WriteCKMBasis=False;
SLHA1Possible = False;,
WriteCKMBasis=True;
If[getGen[TopSquark]==6 && getGen[BottomSquark]==6 && getGen[Sneutrino]==3 && getGen[Selectron]==6,
SLHA1Possible = True;,
SLHA1Possible = False;
];
];

If[WriteCKMBasis,
WriteString[sphenoInOut,"Complex(dp) :: CKM_Q(3,3), "<>SPhenoForm[DownSquarkMM]<>"_ckm(6,6),"<>SPhenoForm[UpSquarkMM]<>"_ckm(6,6), &  \n"];
WriteString[sphenoInOut," & "<>SPhenoForm[SoftSquark]<>"_ckm(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[SoftUp]<>"_ckm(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[SoftDown]<>"_ckm(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[TrilinearUp]<>"_ckm(3,3), &  \n"];
WriteString[sphenoInOut," &"<>SPhenoForm[TrilinearDown]<>"_ckm(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[DownYukawa]<>"_ckm(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[UpYukawa]<>"_ckm(3,3) \n"];
];

If[Select[{"Lepton-Yukawa-Coupling","Sneutrino Mixing-Matrix","Slepton-Mixing-Matrix","Trilinear-Lepton-Coupling","Softbreaking left Slepton Mass","Softbreaking right Slepton Mass"},(FreeQ[ParameterDefinitions,#])& ] =!= {} || Select[{SleptonMM,SneutrinoMM,SoftLeftLepton,SoftRightLepton,TrilinearLepton,ElectronYukawa},(FreeQ[parameters,#])& ] =!= {},
WritePMNSBasis=False;,
WritePMNSBasis=True;
];

If[WritePMNSBasis,
WriteString[sphenoInOut,"Complex(dp) :: PMNS_Q(3,3), "<>SPhenoForm[SleptonMM]<>"_pmns(6,6),"<>SPhenoForm[SneutrinoMM]<>"_pmns(3,3), &  \n"];
WriteString[sphenoInOut," & "<>SPhenoForm[SoftLeftLepton]<>"_pmns(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[SoftRightLepton]<>"_pmns(3,3), "];
WriteString[sphenoInOut," "<>SPhenoForm[TrilinearLepton]<>"_pmns(3,3), &  \n"];
WriteString[sphenoInOut," "<>SPhenoForm[ElectronYukawa]<>"_pmns(3,3) \n"];
];
];

WriteString[sphenoInOut,"Integer :: CurrentPDG2(2), CurrentPDG3(3), PDGlsp(2) \n"];
WriteString[sphenoInOut,"Integer::ierr,i_errors(1100),gt1,gt2,gt3,icount\n"];
MakeVariableList[Transpose[PDGList][[3]],"",sphenoInOut];
For[i=1,i<=Length[PDGList],
If[getGenSPheno[PDGList[[i,1]]]>1,
WriteString[sphenoInOut,"Character(len=30),Dimension("<>ToString[Length[PDGList[[i,2]]]]<>"):: NameParticle"<>ToString[PDGList[[i,1]]]<>"\n"];,
WriteString[sphenoInOut,"Character(len=30) :: NameParticle"<>ToString[PDGList[[i,1]]]<>"\n"];
];
i++;
];
WriteString[sphenoInOut,"Complex(dp) :: Zbottom(2,2), Ztop(2,2), Ztau(2,2) \n"];

WriteString[sphenoInOut,"\n \n \n ! ----------- Set names and PDGs -------- \n \n"];
For[i=1,i<=Length[PDGList],
For[j=1,j<=getGenSPheno[PDGList[[i,1]]],
WriteString[sphenoInOut,SPhenoPDG[PDGList[[i,1]],j]<>"="<>ToString[PDGList[[i,2,j]]]<>"\n"];
If[getGenSPheno[PDGList[[i,1]]] > 1,
WriteString[sphenoInOut,SPhenoNameArray[PDGList[[i,1]],j]<>"=\""<>ToString[PDGList[[i,1]]]<>"_" <>ToString[j] <>"\"\n"];,
WriteString[sphenoInOut,SPhenoNameArray[PDGList[[i,1]],j]<>"=\""<>ToString[PDGList[[i,1]]] <>"\"\n"];
];
j++;];
i++;];

If[SLHA1Possible ===False,
WriteString[sphenoInOut,"\n \n \n ! ----------- Use SLHA 1 conventions if demanded -------- \n \n"];
WriteString[sphenoInOut,"If(WriteSLHA1) Write(*,*) \"SLHA 1 output for given model not possible\" \n"];,
WriteString[sphenoInOut, "If(WriteSLHA1) Then \n"];

(*
WriteString[sphenoInOut,"Call SLHA1converter("
<>SPhenoForm[SPhenoMass[BottomSquark]]<>","<>SPhenoForm[SPhenoMassSq[BottomSquark]]<>","
<>SPhenoForm[SPhenoMass[TopSquark]]<>","<>SPhenoForm[SPhenoMassSq[TopSquark]]<>","
<>SPhenoForm[SPhenoMass[Selectron]]<>","<>SPhenoForm[SPhenoMassSq[Selectron]]<>","
<>SPhenoForm[SPhenoMass[Sneutrino]]<>","<>SPhenoForm[SPhenoMassSq[Sneutrino]]<>", "];
WriteString[sphenoInOut,SPhenoForm[SPhenoWidth[BottomSquark]]<>","<>SPhenoForm[SPhenoWidth[TopSquark]]<>","<>SPhenoForm[SPhenoWidth[Selectron]]<>","SPhenoForm[SPhenoWidth[Sneutrino]]<>","<>SPhenoForm[SPhenoBR[BottomSquark]]<>","<>SPhenoForm[SPhenoBR[TopSquark]]<>","<>SPhenoForm[SPhenoBR[Selectron]]<>","<>SPhenoForm[SPhenoBR[Sneutrino]]<>", & \n"];
WriteString[sphenoInOut,"  & "<>ToString[getDimSPheno[SPhenoBR[BottomSquark]][[2]]]<>","<>ToString[getDimSPheno[SPhenoBR[TopSquark]][[2]]]<>","<>ToString[getDimSPheno[SPhenoBR[Selectron]][[2]]]<>","<>ToString[getDimSPheno[SPhenoBR[Sneutrino]][[2]]]<>","];
WriteString[sphenoInOut,SPhenoForm[DownSquarkMM]<>","<>SPhenoForm[UpSquarkMM]<>","<>SPhenoForm[SleptonMM]<>","<>SPhenoForm[SneutrinoMM]<>",Ztop,Zbottom,Ztau, "];WriteString[sphenoInOut, "PDG"<>SPhenoForm[BottomSquark]<>", PDG"<>SPhenoForm[TopSquark]<>", PDG"<>SPhenoForm[Selectron]<>", PDG"<>SPhenoForm[Sneutrino]<>", NameParticle"<>SPhenoForm[BottomSquark]<>", NameParticle"<>SPhenoForm[TopSquark]<>", NameParticle"<>SPhenoForm[Selectron]<>", NameParticle"<>SPhenoForm[Sneutrino]<>") \n"];
*)


WriteString[sphenoInOut,"Call SLHA1converter("
<>SPhenoForm[SPhenoMass[BottomSquark]]<>","<>SPhenoForm[SPhenoMassSq[BottomSquark]]<>","
<>SPhenoForm[SPhenoMass[TopSquark]]<>","<>SPhenoForm[SPhenoMassSq[TopSquark]]<>","
<>SPhenoForm[SPhenoMass[Selectron]]<>","<>SPhenoForm[SPhenoMassSq[Selectron]]<>","
<>SPhenoForm[SPhenoMass[Sneutrino]]<>","<>SPhenoForm[SPhenoMassSq[Sneutrino]]<>", & \n"];
WriteString[sphenoInOut,"& "<>SPhenoForm[DownSquarkMM]<>","<>SPhenoForm[UpSquarkMM]<>","<>SPhenoForm[SleptonMM]<>","<>SPhenoForm[SneutrinoMM]<>",Ztop,Zbottom,Ztau, "];WriteString[sphenoInOut, "PDG"<>SPhenoForm[BottomSquark]<>", PDG"<>SPhenoForm[TopSquark]<>", PDG"<>SPhenoForm[Selectron]<>", PDG"<>SPhenoForm[Sneutrino]<>", & \n & NameParticle"<>SPhenoForm[BottomSquark]<>", NameParticle"<>SPhenoForm[TopSquark]<>", NameParticle"<>SPhenoForm[Selectron]<>", NameParticle"<>SPhenoForm[Sneutrino]<>") \n"];

WriteString[sphenoInOut,"End If \n"];
];
 
];

WriteInOutSpcHead:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},

WriteString[sphenoInOut,"Write(io_L,100) \"# SUSY Les Houches Accord 2 - "<>Modelname<>" Spectrum + Decays + Flavor Observables\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# SPheno module generated by SARAH\" \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# ----------------------------------------------------------------------\" \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# SPheno \"//version \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   W. Porod, Comput. Phys. Commun. 153 (2003) 275-315, hep-ph/0301101\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   W. Porod, F.Staub, Comput.Phys.Commun.183 (2012) 2458-2469, arXiv:1104.1573\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# SARAH: \"//versionSARAH \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   F. Staub; arXiv:0806.0538 (online manual)\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   F. Staub; Comput. Phys. Commun. 181 (2010) 1077-1086; arXiv:0909.2863\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   F. Staub; Comput. Phys. Commun. 182 (2011)  808-833; arXiv:1002.0840\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   F. Staub; Comput. Phys. Commun. 184 (2013)  1792-1809; arXiv:1207.0906\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   F. Staub; Comput. Phys. Commun. 185 (2014)  1773-1790; arXiv:1309.7223 \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# Including the calculation of flavor observables based on the FlavorKit \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   W. Porod, F. Staub, A. Vicente; Eur.Phys.J. C74 (2014) 8, 2992; arXiv:1405.1434 \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# Two-loop masss corrections to Higgs fields based on \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   M. D. Goodsell, K. Nickel, F. Staub; arXiv:1411.0675 \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   M. D. Goodsell, K. Nickel, F. Staub; arXiv:1503.03098\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#  \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# in case of problems send email to florian.staub@cern.ch and goodsell@lpthe.jussieu.fr\ \"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# ----------------------------------------------------------------------\" \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"# Created: \"//Datum(7:8)//\".\"//Datum(5:6)//\".\"//Datum(1:4)&\n"];
WriteString[sphenoInOut,"&//\",  \"//Zeit(1:2)//\":\"//Zeit(3:4)\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block SPINFO         # Program information\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"     1   SPhenoSARAH      # spectrum calculator\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"     2   \"//version//\"    # version number of SPheno\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"     9   \"//versionSARAH//\"    # version number of SARAH\"\n"];
WriteString[sphenoInOut,"Call GetError(i_errors)\n"];
WriteString[sphenoInOut,"If ((i_errors(1)+i_errors(3)+i_errors(5)+i_errors(7)+i_errors(8)& \n"];
WriteString[sphenoInOut,"&+i_errors(10)+i_errors(12)+Sum(i_errors(14:19))).Gt.0)&\n"];
WriteString[sphenoInOut,"& Write(io_L,100)&\n"];
WriteString[sphenoInOut,"& \"     3               # potential numerical problem, check file Messages.out\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block MODSEL  # Input parameters\"\n"];
If[NonSUSYModel=!=True,
WriteString[sphenoInOut,"If (HighScaleModel.Eq.\"LOW\") Then \n "];
WriteString[sphenoInOut,"Write(io_L,110)  1,0, \" "<> StringScaleOut <>" input\"\n"];
WriteString[sphenoInOut,"Else  \n "];
];
WriteString[sphenoInOut,"Write(io_L,110)  1, 1, \" GUT scale input\"\n"];
If[NonSUSYModel=!=True,WriteString[sphenoInOut,"End If  \n "]; ];
WriteString[sphenoInOut,"Write(io_L,110) 2, BoundaryCondition, \" Boundary conditions \"\n"];
WriteString[sphenoInOut,"If (i_cpv.Gt.0) Write(io_L,110) 5,i_cpv,\" switching on CP violation\"\n"];
If[SLHA1Possible==True, WriteString[sphenoInOut, "If (.not.WriteSLHA1) Then \n"]; ];
WriteString[sphenoInOut,"If (GenerationMixing) Write(io_L,110) &\n"];
WriteString[sphenoInOut,"&     6,1, \" switching on flavour violation\" \n"];
If[SLHA1Possible,WriteString[sphenoInOut,"End if \n"];];
];

WriteInOutParameters:=Block[{i,i1,i2,i3,i4,kk,k, stringrep,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2,suffix},
WriteString[sphenoInOut,"Write(io_L,100) \"Block MINPAR  # Input parameters\"\n"];
If[Head[MINPAR[[1,1]]]=!=List,
For[i=1,i<=Length[MINPAR],
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[MINPAR[[i,1]]]<>", Real("<>SPhenoForm[MINPAR[[i,2]]]<>",dp) ,\"# "<>SPhenoForm[MINPAR[[i,2]]]<>"\"\n"];
i++;];
WriteString[sphenoInOut,"WriteNextBlock = .False. \n"];
For[i=1,i<=Length[MINPAR],
If[FreeQ[realVar,MINPAR[[i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[MINPAR[[i,2]]]<>")).gt.0._dp) WriteNextBlock = .True. \n"];
];
i++;];


WriteString[sphenoInOut,"If(WriteNextBlock) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block IMMINPAR  # Input parameters\"\n"];
For[i=1,i<=Length[MINPAR],
If[FreeQ[realVar,MINPAR[[i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[MINPAR[[i,2]]]<>")).gt.0._dp) Then \n"];
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[MINPAR[[i,1]]]<>", Aimag("<>SPhenoForm[MINPAR[[i,2]]]<>") ,\"# "<>SPhenoForm[MINPAR[[i,2]]]<>"\"\n"];
WriteString[sphenoInOut, "End if \n"];
];
i++;];
WriteString[sphenoInOut, "End if \n"];,

WriteString[sphenoInOut,"Select Case(BoundaryCondition) \n"];
For[j=1,j<=Length[MINPAR],
WriteString[sphenoInOut,"Case ("<>ToString[j]<>") \n"];
For[i=1,i<=Length[MINPAR[[j]]],
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[MINPAR[[j,i,1]]]<>", Real("<>SPhenoForm[MINPAR[[j,i,2]]]<>",dp) ,\"# "<>SPhenoForm[MINPAR[[j,i,2]]]<>"\"\n"];
i++;];
WriteString[sphenoInOut,"WriteNextBlock = .False. \n"];
For[i=1,i<=Length[MINPAR[[j]]],
If[FreeQ[realVar,MINPAR[[j,i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[MINPAR[[j,i,2]]]<>")).gt.0._dp) WriteNextBlock = .True. \n"];
];
i++;];


WriteString[sphenoInOut,"If(WriteNextBlock) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block IMMINPAR  # Input parameters\"\n"];
For[i=1,i<=Length[MINPAR[[j]]],
If[FreeQ[realVar,MINPAR[[j,i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[MINPAR[[j,i,2]]]<>")).gt.0._dp) Then \n"];
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[MINPAR[[j,i,1]]]<>", Aimag("<>SPhenoForm[MINPAR[[j,i,2]]]<>") ,\"# "<>SPhenoForm[MINPAR[[j,i,2]]]<>"\"\n"];
WriteString[sphenoInOut, "End if \n"];
];
i++;];
WriteString[sphenoInOut, "End if \n"];
j++;];
WriteString[sphenoInOut,"End Select \n\n"];
];

If[Head[EXTPAR]===List,

WriteString[sphenoInOut,"WriteNextBlock = .false. \n"];
For[i=1,i<=Length[EXTPAR],
If[FreeQ[realVar,EXTPAR[[i,2]]],
WriteString[sphenoInOut,"If (Abs(Real("<>SPhenoForm[EXTPAR[[i,2]]]<>",dp)).gt.0._dp) WriteNextBlock = .True. \n"];
];
i++;];

WriteString[sphenoInOut,"If(WriteNextBlock) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block EXTPAR  # Input parameters\"\n"];
For[i=1,i<=Length[EXTPAR],
WriteString[sphenoInOut,"If (Abs(Real("<>SPhenoForm[EXTPAR[[i,2]]]<>",dp)).gt.0._dp) Then \n"];
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[EXTPAR[[i,1]]]<>", Real("<>SPhenoForm[EXTPAR[[i,2]]]<>",dp) ,\"# "<>SPhenoForm[EXTPAR[[i,2]]]<>"\"\n"];
WriteString[sphenoInOut,"End if \n"];
i++;];
WriteString[sphenoInOut, "End if \n"];

WriteString[sphenoInOut,"WriteNextBlock = .false. \n"];
For[i=1,i<=Length[EXTPAR],
If[FreeQ[realVar,EXTPAR[[i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[EXTPAR[[i,2]]]<>")).gt.0._dp) WriteNextBlock = .True. \n"];
];
i++;];

WriteString[sphenoInOut,"If(WriteNextBlock) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block IMEXTPAR  # Input parameters\"\n"];
For[i=1,i<=Length[EXTPAR],
If[FreeQ[realVar,EXTPAR[[i,2]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[EXTPAR[[i,2]]]<>")).gt.0._dp) Then \n"];
WriteString[sphenoInOut,"Write(io_L,101) "<>ToString[EXTPAR[[i,1]]]<>", Aimag("<>SPhenoForm[EXTPAR[[i,2]]]<>") ,\"# "<>SPhenoForm[EXTPAR[[i,2]]]<>"\"\n"];
WriteString[sphenoInOut, "End if \n"];
];
i++;];
WriteString[sphenoInOut, "End if \n"];
];

WriteString[sphenoInOut,"Write(io_L,106) \"Block gaugeGUT Q=\",m_GUT,\"# (GUT scale)\" \n"];

If[Head[RegimeNr]=!=Integer,
For[i=1,i<=AnzahlGauge,
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[i]<>","<>SPhenoForm[Gauge[[i,4]]]<>"GUT, \"# "<>ToString[Gauge[[i,4]]]<>"(Q)^DRbar\" \n"];
i++;];,

For[i=1,i<=Length[GaugeCouplingsAllRegimes[[1]]],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[i]<>","<>SPhenoForm[GaugeCouplingsAllRegimes[[1,i]]]<>"GUT, \"# "<>ToString[GaugeCouplingsAllRegimes[[1,i]]]<>"(Q)^DRbar\" \n"];
i++;];
];

WriteString[sphenoInOut,"Write(io_L,100) \"Block SMINPUTS  # SM parameters\"\n"];
If[SupersymmetricModel===True,
WriteString[sphenoInOut,"Write(io_L,102) 1,1._dp/alpha_MSbar(mZ,mW),\"# alpha_em^-1(MZ)^MSbar\"\n"]; 
];
WriteString[sphenoInOut,"Write(io_L,102) 2,G_F,\"# G_mu [GeV^-2]\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 3,alphaS_MZ,\"# alpha_s(MZ)^MSbar\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 4,mZ,\"# m_Z(pole)\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 5,mf_d(3),\"# m_b(m_b), MSbar\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 6,mf_u(3),\"# m_t(pole)\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 7,mf_l(3),\"# m_tau(pole)\"\n \n"];

If[NonSUSYModel=!=True,
WriteString[sphenoInOut,"If (SwitchToSCKM) Then\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block VCKMIN  # CKM matrix, Wolfenstein parameterization\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 1,lam_wolf,\"# lambda\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 2,A_wolf,\"# A\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 3,rho_wolf,\"# rho bar\"\n"];
WriteString[sphenoInOut,"Write(io_L,102) 4,eta_wolf,\"# eta bar\"\n"];

If[FreeQ[ParameterDefinitions,"CKM Matrix"],
If[WriteCKMBasis,
WriteString[sphenoInOut,ToString[UpSquarkMM]<>"_ckm = "<>ToString[UpSquarkMM]<>"(1:6,1:6) \n"];
WriteString[sphenoInOut,ToString[DownSquarkMM]<>"_ckm = "<>ToString[DownSquarkMM]<>"(1:6,1:6) \n"];
];

If[WriteCKMBasis,
WriteString[sphenoInOut,"Call Switch_to_superCKM("<>SPhenoForm[DownYukawa]<>"(1:3,1:3),"<>SPhenoForm[UpYukawa]<>"(1:3,1:3),"<>SPhenoForm[TrilinearDown]<>"(1:3,1:3),"<>SPhenoForm[TrilinearUp]<>"(1:3,1:3),"<>SPhenoForm[SoftDown]<>"(1:3,1:3),"<>SPhenoForm[SoftSquark]<>"(1:3,1:3),"<>SPhenoForm[SoftUp]<>"(1:3,1:3) &\n"];
WriteString[sphenoInOut,"&,"<>SPhenoForm[TrilinearDown]<>"_ckm,"<>SPhenoForm[TrilinearUp]<>"_ckm,"<>SPhenoForm[SoftDown]<>"_ckm,"<>SPhenoForm[SoftSquark]<>"_ckm,"<>SPhenoForm[SoftUp]<>"_ckm, .False.&\n"];
WriteString[sphenoInOut,"&,"<>SPhenoForm[DownSquarkMM]<>"_ckm,"<>SPhenoForm[UpSquarkMM]<>"_ckm,"<>SPhenoForm[DownSquarkMM]<>","<>SPhenoForm[UpSquarkMM]<>",CKM_Q,"<>SPhenoForm[DownYukawa]<>"_ckm,"<>SPhenoForm[UpYukawa]<>"_ckm)\n"];
];

If[FreeQ[massless,Neutrino] && SA`NeutrinoPresent ==True &&  SPhenoForm[NeutrinoMM]=!="Delta",
stringNeutrinoMM = SPhenoForm[NeutrinoMM]<>"(1:3,1:3)";,
stringNeutrinoMM = "id3C";
];

If[WritePMNSBasis,
WriteString[sphenoInOut,ToString[SleptonMM]<>"_pmns = "<>ToString[SleptonMM]<>"(1:6,1:6) \n"];
WriteString[sphenoInOut,ToString[SneutrinoMM]<>"_pmns = "<>ToString[SneutrinoMM]<>"(1:3,1:3) \n"];

WriteString[sphenoInOut,"Call Switch_to_superPMNS(Transpose("<>SPhenoForm[ElectronYukawa]<>"(1:3,1:3)),"<>stringNeutrinoMM<>","<>SPhenoForm[TrilinearLepton]<>"(1:3,1:3),"<>SPhenoForm[SoftLeftLepton]<>"(1:3,1:3),"<>SPhenoForm[SoftRightLepton]<>"(1:3,1:3) &\n"];
WriteString[sphenoInOut,"&,"<>SPhenoForm[TrilinearLepton]<>"_pmns,"<>SPhenoForm[SoftLeftLepton]<>"_pmns,"<>SPhenoForm[SoftRightLepton]<>"_pmns,"<>".False.&\n"];
WriteString[sphenoInOut,"&,"<>SPhenoForm[SleptonMM]<>"_pmns,"<>SPhenoForm[SneutrinoMM]<>"_pmns,"<>SPhenoForm[SleptonMM]<>","<>SPhenoForm[SneutrinoMM]<>",PMNS_Q,"<>SPhenoForm[ElectronYukawa]<>"_pmns)\n"];
];

If[WriteCKMBasis,
WriteString[sphenoInOut, SPhenoForm[DownYukawa]<>"(1:3,1:3)=" <> SPhenoForm[DownYukawa]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[UpYukawa]<>"(1:3,1:3)=" <> SPhenoForm[UpYukawa]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[TrilinearDown]<>"(1:3,1:3)=" <> SPhenoForm[TrilinearDown]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[TrilinearUp]<>"(1:3,1:3)=" <> SPhenoForm[TrilinearUp]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[SoftDown]<>"(1:3,1:3)=" <> SPhenoForm[SoftDown]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[SoftUp]<>"(1:3,1:3)=" <> SPhenoForm[SoftUp]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[SoftSquark]<>"(1:3,1:3)=" <> SPhenoForm[SoftSquark]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[UpSquarkMM]<>"(1:6,1:6)=" <> SPhenoForm[UpSquarkMM]<>"_ckm \n"];
WriteString[sphenoInOut, SPhenoForm[DownSquarkMM]<>"(1:6,1:6)=" <> SPhenoForm[DownSquarkMM]<>"_ckm \n"];
];
If[WritePMNSBasis,
WriteString[sphenoInOut, SPhenoForm[ElectronYukawa]<>"(1:3,1:3)=" <> SPhenoForm[ElectronYukawa]<>"_pmns \n"];
WriteString[sphenoInOut, SPhenoForm[TrilinearLepton]<>"(1:3,1:3)=" <> SPhenoForm[TrilinearLepton]<>"_pmns \n"];
WriteString[sphenoInOut, SPhenoForm[SoftLeftLepton]<>"(1:3,1:3)=" <> SPhenoForm[SoftLeftLepton]<>"_pmns \n"];
WriteString[sphenoInOut, SPhenoForm[SoftRightLepton]<>"(1:3,1:3)=" <> SPhenoForm[SoftRightLepton]<>"_pmns \n"];
WriteString[sphenoInOut, SPhenoForm[SleptonMM]<>"(1:6,1:6)=" <> SPhenoForm[SleptonMM]<>"_pmns \n"];
WriteString[sphenoInOut, SPhenoForm[SneutrinoMM]<>"(1:3,1:3)=" <> SPhenoForm[SneutrinoMM]<>"_pmns \n"];
];

If[WriteCKMBasis,
WriteString[sphenoInOut,"Write(io_L,106) \"Block VCKM Q=\",Q,\"# Re(CKM) at the "<> StringScaleOut <>"\" \n"];
WriteString[sphenoInOut,"Do i1=1,3\n"];
WriteString[sphenoInOut,"Do i2=1,3\n"];
WriteString[sphenoInOut,"Write(io_L,107) i1,i2,Real(CKM_Q(i1,i2),dp),\"# Re(V_\"//Bu(i1)//Bu(i2)//\")\"\n"];
WriteString[sphenoInOut,"End Do\n"];
WriteString[sphenoInOut,"End Do\n"];
WriteString[sphenoInOut,"If (Maxval(Abs(Aimag(CKM_Q))).Gt.0._dp) Then\n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block IMVCKM Q=\",Q,\"# Im(CKM) at the "<> StringScaleOut <>"\" \n"];
WriteString[sphenoInOut,"Do i1=1,3\n"];
WriteString[sphenoInOut,"Do i2=1,3\n"];
WriteString[sphenoInOut,"Write(io_L,107) i1,i2,Aimag(CKM_Q(i1,i2)),\"# Im(V_\"//Bu(i1)//Bu(i2)//\")\"\n"];
WriteString[sphenoInOut,"End Do\n"];
WriteString[sphenoInOut,"End Do\n"];
WriteString[sphenoInOut,"End If\n"];
];
];
WriteString[sphenoInOut,"End If \n \n \n"];
];

For[kk=1,kk<=3,
Switch[kk,
1,
	CombindedBlockSave=CombindedBlock;
	suffix="";
	fin=1;,
2,
	CombindedBlock=treeleveltadpolesLOW;
	WriteString[sphenoInOut,"If (WriteTreeLevelTadpoleParameters) Then \n"];
	WriteString[sphenoInOut,"If (HighScaleModel.Eq.\"LOW\") Then \n"];
	suffix="Tree";
	fin=2;,
3,
	CombindedBlock=treeleveltad;
	WriteString[sphenoInOut,"Else \n"];
	suffix="Tree";
	fin=2;
];

For[kkk=1,kkk<=fin,
If[kkk==2,suffix="1L"; stringrep={"IMLOOP"->"LOOPIM","TREE"->"LOOP"},stringrep={"IMTREE"->"TREEIM"}];
For[i=1,i<=Length[CombindedBlock],
WriteString[sphenoInOut,"WriteNextBlock = .false. \n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block "<> StringReplace[ToString[CombindedBlock[[i,1]]],stringrep] <>" Q=\",Q,\"# ("<> StringScaleOut <>")\" \n"];
For[j=2,j<=Length[CombindedBlock[[i]]],
If[FreeQ[ThresholdCouplings,CombindedBlock[[i,j,1]]] && FreeQ[listParametersOtherRegimes,CombindedBlock[[i,j,1]]],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Real("<>SPhenoForm[ CombindedBlock[[i,j,1]] /. subNumAdd]<>suffix<>",dp), \"# "<>SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
If[FreeQ[realVar,CombindedBlock[[i,j,1]]],
WriteString[sphenoInOut,"If (Abs(Aimag("<>SPhenoForm[CombindedBlock[[i,j,1]]]<>suffix<>")).gt.0._dp) WriteNextBlock = .True. \n"];
];
];
j++;];

WriteString[sphenoInOut,"If(WriteNextBlock) Then \n"];
WriteString[sphenoInOut,StringReplace["Write(io_L,106) \"Block IM"<> StringReplace[ToString[CombindedBlock[[i,1]]],stringrep] <>" Q=\",Q,\"# ("<> StringScaleOut <>")\" \n",stringrep]];
For[j=2,j<=Length[CombindedBlock[[i]]],
If[FreeQ[ThresholdCouplings,CombindedBlock[[i,j,1]]] && FreeQ[listParametersOtherRegimes,CombindedBlock[[i,j,1]]],
If[FreeQ[realVar,CombindedBlock[[i,j,1]]],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Aimag("<>SPhenoForm[ CombindedBlock[[i,j,1]] /. subNumAdd]<>suffix<>"), \"# "<>SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
];
];
j++;];
WriteString[sphenoInOut, "End if \n"];

If[SLHA1Possible==True && CombindedBlock[[i,1]]===MSOFT && kk ==1,
WriteString[sphenoInOut, "If (WriteSLHA1) Then \n"];
WriteString[sphenoInOut,"Write(io_L,104)  31,  Real(sqrt("<>SPhenoForm[SoftLeftLepton]<>"(1,1)),dp), \" # mL(1,1) \" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  32,  Real(sqrt("<>SPhenoForm[SoftLeftLepton]<>"(2,2)),dp), \" # mL(2,2)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  33,  Real(sqrt("<>SPhenoForm[SoftLeftLepton]<>"(3,3)),dp), \" # mL(3,3)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  34,  Real(sqrt("<>SPhenoForm[SoftRightLepton]<>"(1,1)),dp), \" # mE(1,1)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  35,  Real(sqrt("<>SPhenoForm[SoftRightLepton]<>"(2,2)),dp), \" # mE(2,2)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  36,  Real(sqrt("<>SPhenoForm[SoftRightLepton]<>"(3,3)),dp), \" # mE(3,3)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  41,  Real(sqrt("<>SPhenoForm[SoftSquark]<>"(1,1)),dp), \" # mQ(1,1)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  42,  Real(sqrt("<>SPhenoForm[SoftSquark]<>"(2,2)),dp), \" # mQ(2,2)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  43,  Real(sqrt("<>SPhenoForm[SoftSquark]<>"(3,3)),dp), \" # mq(3,3)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  44,  Real(sqrt("<>SPhenoForm[SoftUp]<>"(1,1)),dp), \" # mU(1,1)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  45,  Real(sqrt("<>SPhenoForm[SoftUp]<>"(2,2)),dp), \" # mU(2,2)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  46,  Real(sqrt("<>SPhenoForm[SoftUp]<>"(3,3)),dp), \" # mU(3,3)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  47,  Real(sqrt("<>SPhenoForm[SoftDown]<>"(1,1)),dp), \" # mD(1,1)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  48,  Real(sqrt("<>SPhenoForm[SoftDown]<>"(2,2)),dp), \" # mD(2,2)\" \n"];
WriteString[sphenoInOut,"Write(io_L,104)  49,  Real(sqrt("<>SPhenoForm[SoftDown]<>"(3,3)),dp), \" # mD(3,3)\" \n"];
WriteString[sphenoInOut, "End if \n"];
];
i++;];
kkk++;];
Switch[kk,
3,
	CombindedBlock=CombindedBlockSave;
	WriteString[sphenoInOut,"End if \n"];
	WriteString[sphenoInOut,"End if \n"];
	suffix="";
];
kk++;];


For[i2=1,i2<=Length[ThresholdInvolvedCouplings],
For[i=1,i<=Length[CombindedBlock],
If[Intersection[Transpose[ThresholdInvolvedCouplings[[i2]]][[1]],Transpose[Delete[CombindedBlock[[i]],1]][[1]]]=!={},
WriteString[sphenoInOut,"Write(io_L,106) \"Block "<> ToString[CombindedBlock[[i,1]]] <>" Q=\","<>SPhenoForm[Thresholds[[i2,1]]]<>",\"# ("<>ToString[i2] <>". Threshold Scale)\" \n"];
For[j=2,j<=Length[CombindedBlock[[i]]],
If[FreeQ[ThresholdInvolvedCouplings[[i2]],CombindedBlock[[i,j,1]]]==False,
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Real("<>SPhenoForm[ CombindedBlock[[i,j,1]]]<>"_SAVE("<>ToString[i2]<>"),dp), \"# "<>SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
];
j++;];
];
i++;];
i2++;];

For[i=1,i<=Length[ListAllInputParameters],
If[Length[ListAllInputParameters[[i,2]]]>0 && FreeQ[ThresholdCouplings,ListAllInputParameters[[i,1]]] && FreeQ[listParametersOtherRegimes,ListAllInputParameters[[i,1]]],
WriteOutputBlock[ListAllInputParameters[[i,1]],ListAllInputParameters[[i,2]],0,StringScaleOut];
];
i++;];

For[i=1,i<=Length[AdditionalParametersLagrange],
If[getDimSPheno[AdditionalParametersLagrange[[i]]]=!={} && getDimSPheno[AdditionalParametersLagrange[[i]]]=!={1} &&  FreeQ[ThresholdCouplings,AdditionalParametersLagrange[[i]]] && FreeQ[listParametersOtherRegimes,AdditionalParametersLagrange[[i]]],
WriteOutputBlock[AdditionalParametersLagrange[[i]],getDimSPheno[AdditionalParametersLagrange[[i]]],0,StringScaleOut];
];
i++;];

If[SLHA1Possible==True,
WriteString[sphenoInOut, "If (WriteSLHA1) Then \n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block AU Q=\",Q,\" # \" \n "];
WriteString[sphenoInOut,"Write(io_L,107) 1, 1, Real("<>SPhenoForm[TrilinearUp]<>"(1,1),dp)/Real("<>SPhenoForm[UpYukawa]<>"(1,1),dp),\"# Tu(1,1)/Yu(1,1) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 2, 2, Real("<>SPhenoForm[TrilinearUp]<>"(2,2),dp)/Real("<>SPhenoForm[UpYukawa]<>"(2,2),dp),\"# Tu(2,2)/Yu(2,2) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 3, 3, Real("<>SPhenoForm[TrilinearUp]<>"(3,3),dp)/Real("<>SPhenoForm[UpYukawa]<>"(3,3),dp),\"# Tu(3,3)/Yu(3,3) \" \n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block AD Q=\",Q,\" # \" \n "];
WriteString[sphenoInOut,"Write(io_L,107) 1, 1, Real("<>SPhenoForm[TrilinearDown]<>"(1,1),dp)/Real("<>SPhenoForm[DownYukawa]<>"(1,1),dp),\"# Td(1,1)/Yd(1,1) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 2, 2, Real("<>SPhenoForm[TrilinearDown]<>"(2,2),dp)/Real("<>SPhenoForm[DownYukawa]<>"(2,2),dp),\"# Td(2,2)/Yd(2,2) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 3, 3, Real("<>SPhenoForm[TrilinearDown]<>"(3,3),dp)/Real("<>SPhenoForm[DownYukawa]<>"(3,3),dp),\"# Td(3,3)/Yd(3,3) \" \n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block AE Q=\",Q,\" # \" \n "];
WriteString[sphenoInOut,"Write(io_L,107) 1, 1, Real("<>SPhenoForm[TrilinearLepton]<>"(1,1),dp)/Real("<>SPhenoForm[ElectronYukawa]<>"(1,1),dp),\"# Te(1,1)/Ye(1,1) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 2, 2, Real("<>SPhenoForm[TrilinearLepton]<>"(2,2),dp)/Real("<>SPhenoForm[ElectronYukawa]<>"(2,2),dp),\"# Te(2,2)/Ye(2,2) \" \n"];
WriteString[sphenoInOut,"Write(io_L,107) 3, 3, Real("<>SPhenoForm[TrilinearLepton]<>"(3,3),dp)/Real("<>SPhenoForm[ElectronYukawa]<>"(3,3),dp),\"# Te(3,3)/Ye(3,3) \" \n"];
WriteString[sphenoInOut, "End if \n"];
];

If[Head[RegimeNr]=!=Integer,
WriteString[sphenoInOut,"If (WriteGUTvalues) Then \n"];

For[i=1,i<=Length[CombindedBlock],
If[Select[Transpose[Drop[CombindedBlock[[i]],1]][[1]],((FreeQ[ListAllInputParameters,#]==False && FreeQ[listVEVs,#]==True)&)]=!={},
WriteString[sphenoInOut,"Write(io_L,106) \"Block "<> ToString[CombindedBlock[[i,1]]] <>"GUT Q=\",M_GUT,\"# (GUT scale)\" \n"];
For[j=2,j<=Length[CombindedBlock[[i]]],
If[FreeQ[ThresholdCouplings,CombindedBlock[[i,j,1]]] && FreeQ[listVEVs,CombindedBlock[[i,j,1]]] && FreeQ[listParametersOtherRegimes,CombindedBlock[[i,j,1]]] && FreeQ[ListAllInputParameters,CombindedBlock[[i,j,1]]]==False,
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[CombindedBlock[[i,j,2]]]<>",Real("<>SPhenoForm[ CombindedBlock[[i,j,1]] /. subNumAdd]<>"GUT"<>",dp), \"# "<>SPhenoForm[CombindedBlock[[i,j,1]]]<>"\" \n"];
];
j++;];
];
i++;];

For[i=1,i<=Length[ListAllInputParameters],
If[Length[ListAllInputParameters[[i,2]]]>0 && FreeQ[ThresholdCouplings,ListAllInputParameters[[i,1]]] && FreeQ[listVEVs,ListAllInputParameters[[i,1]]]&& FreeQ[listParametersOtherRegimes,ListAllInputParameters[[i,1]]],
WriteOutputBlock[ToExpression[SPhenoForm[ListAllInputParameters[[i,1]]]<>"GUT"],ListAllInputParameters[[i,2]],GUTSCALE,"GUT Scale"];
];
i++;];
WriteString[sphenoInOut, "End if \n \n"];
];

For[i=1,i<=Length[NewLHoutputBlocks],
WriteOutputBlock[NewLHoutputBlocks[[i]],getDimSPheno[NewLHoutputBlocks[[i]]],0,StringScaleOut];
i++;
];

For[i1=1,i1<=Length[Thresholds],
For[i=1,i<=Length[ListAllInputParameters],
If[Length[ListAllInputParameters[[i,2]]]>0 && FreeQ[ThresholdInvolvedCouplings[[i1]],ListAllInputParameters[[i,1]]]==False,
WriteOutputBlock[ListAllInputParameters[[i,1]],ListAllInputParameters[[i,2]],i1,ToString[i1]<>". Threshold Scale"];
];
i++;];
i1++;];

If[Head[RegimeNr]===Integer,
For[i=1,i<RegimeNr,
combinded={};
For[j=1,j<=Length[DimensionsOtherRegimes[[i]]],
If[FreeQ[listParametersOtherRegimes,DimensionsOtherRegimes[[i,j,1]]]==False &&  FreeQ[ListVEVsAllRegimes,DimensionsOtherRegimes[[i,j,1]]]==True,
If[Length[DimensionsOtherRegimes[[i,j,2]]]>0 && DimensionsOtherRegimes[[i,j,2]] =!={1},
WriteOutputBlock[DimensionsOtherRegimes[[i,j,1]],DimensionsOtherRegimes[[i,j,2]],100+i,ToString[i]<>". Threshold Scale"];,
combinded = Join[combinded,{DimensionsOtherRegimes[[i,j]]}];
];
];
j++;];
If[combinded=!={},
WriteString[sphenoInOut,"Write(io_L,106) \"Block HighScaleParameters"<>ToString[i]<>" Q = \","<>SPhenoForm[ThresholdScales[[i]]] <>",\" # \"\n"];
For[j=1,j<=Length[combinded],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[j]<>",Real("<>SPhenoForm[combinded[[j,1]]]<>",dp), \"# "<>ToString[combinded[[j,1]]]  <>" \"  \n"];
j++;];
];
i++;];
ParameterDefinitions=ParameterDefinitionsSave;
];

If[SPhenoOnlyForHM===True,
WriteString[sphenoInOut,"Write(io_L,106) \"Block deltaTi # \" \n"];
For[i=1,i<=Length[SA`VEVsHOMreal]+Length[SA`VEVsHOMcomplex],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[i]<>", Real(deltaTi("<>ToString[i]<>"),dp), \"# "<>ToString[Join[SA`VEVsHOMreal,SA`VEVsHOMcomplex][[i]]]  <>" \"  \n"];
i++;];
WriteString[sphenoInOut,"If (MaxVal(Abs(Aimag(deltaTi))).gt.1E-8) Then \n"];
WriteString[sphenoInOut,"Write(io_L,106) \"Block deltaTiIM # \" \n"];
For[i=1,i<=Length[SA`VEVsHOMreal]+Length[SA`VEVsHOMcomplex],
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[i]<>", Aimag(deltaTi("<>ToString[i]<>")), \"# "<>ToString[Join[SA`VEVsHOMreal,SA`VEVsHOMcomplex][[i]]]  <>" \"  \n"];
i++;];
WriteString[sphenoInOut,"End if \n"];
];


If[Length[AdditionalVariablesSPheno]>0,
WriteString[sphenoInOut,"Write(io_L,106) \"Block AddPars Q=1.0000E00 # Additional parameters not appearing elsewhere; scale Q just a dummy\" \n"];
For[j=1,j<=Length[AdditionalVariablesSPheno],
If[Depth[AdditionalVariablesSPheno[[j]]]<2,
WriteString[sphenoInOut,"Write(io_L,104) "<>ToString[j]<>", Abs("<>SPhenoForm[AdditionalVariablesSPheno[[j]]]<>"), \"# "<>ToString[AdditionalVariablesSPheno[[j]]]  <>" \"  \n"];
];
j++;];
]; 


If[Length[AdditionalVariablesSPheno]>0,
For[j=1,j<=Length[AdditionalVariablesSPheno],
If[Depth[AdditionalVariablesSPheno[[j]]]>1,
WriteOutputBlock[AdditionalVariablesSPheno[[j,0]],List@@AdditionalVariablesSPheno[[j]],0,"  "];
];
j++;];
];
];

WriteInOutMasses:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},
WriteString[sphenoInOut,"MassLSP = 100000._dp \n"];

WriteString[sphenoInOut,"Write(io_L,100) \"Block MASS  # Mass spectrum\"\n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#   PDG code      mass          particle\" \n"];

For[i=1,i<=Length[PDGList],
For[i1=1,i1<=Length[PDGList[[i,2]]],
If[PDGList[[i,2,i1]]=!=0 && FreeQ[massless,PDGList[[i,1]]]==True,
If[Length[PDGList[[i,2]]]>1,
(* WriteString[sphenoInOut," Write(io_L,102) "<>ToString[Abs[PDGList[[i,2,i1]]]]<>","<>SPhenoMass[PDGList[[i,1]],i1]<>",\"# "<> ToString[PDGList[[i,1]]]<>"_"<>ToString[i1] <>"\" \n"]; *)
WriteString[sphenoInOut," Write(io_L,102) INT(Abs("<>SPhenoPDG[PDGList[[i,1]],i1]<>")),"<>SPhenoMass[PDGList[[i,1]],i1]<>",\"# \"//Trim("<> SPhenoNameArray[PDGList[[i,1]],i1] <>")// \"\" \n"];
If[RParityList[[i,2]]===-1,
WriteString[sphenoInOut, "If (MassLSP(1).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")) Then \n"];
WriteString[sphenoInOut ,"PDGLSP(2) = PDGLSP(1) \n"];
WriteString[sphenoInOut ,"PDGLSP(1) = "<>ToString[Abs[PDGList[[i,2,i1]]]] <>" \n"];
WriteString[sphenoInOut ,"MassLSP(2) = MassLSP(1) \n"];
WriteString[sphenoInOut ,"MassLSP(1) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")\n"];
WriteString[sphenoInOut ,"Else \n"];
WriteString[sphenoInOut, "If (MassLSP(2).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")) Then \n"];
WriteString[sphenoInOut ,"PDGLSP(2) = "<>ToString[PDGList[[i,2,i1]]] <>" \n"];
WriteString[sphenoInOut ,"MassLSP(2) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")\n"];
WriteString[sphenoInOut, "End if \n"];
WriteString[sphenoInOut, "End if \n"];
];,

WriteString[sphenoInOut," Write(io_L,102) "<>ToString[Abs[PDGList[[i,2,i1]]]]<>","<>SPhenoMass[PDGList[[i,1]],i1]<>",\"# "<> ToString[PDGList[[i,1]]] <>"\" \n"]; 
If[RParityList[[i,2]]===-1,
WriteString[sphenoInOut, "If (MassLSP(1).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")) Then \n"];
WriteString[sphenoInOut ,"PDGLSP(2) = PDGLSP(1) \n"];
WriteString[sphenoInOut ,"PDGLSP(1) = "<>ToString[Abs[PDGList[[i,2,i1]]]] <>" \n"];
WriteString[sphenoInOut ,"MassLSP(2) = MassLSP(1) \n"];
WriteString[sphenoInOut ,"MassLSP(1) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")\n"];
WriteString[sphenoInOut ,"Else \n"];
WriteString[sphenoInOut, "If (MassLSP(2).gt.Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")) Then \n"];
WriteString[sphenoInOut ,"PDGLSP(2) = "<>ToString[Abs[PDGList[[i,2,i1]]]] <>" \n"];
WriteString[sphenoInOut ,"MassLSP(2) = Abs("<>SPhenoMass[PDGList[[i,1]],i1]<> ")\n"];
WriteString[sphenoInOut, "End if \n"];
WriteString[sphenoInOut, "End if \n"];
];


];
]; 
i1++;];
i++;];

WriteString[sphenoInOut,"\n \n"];


If[FreeQ[Global,RParity]==False,
	WriteString[sphenoInOut,"Write(io_L,100) \"Block LSP  # LSP and NLSP\"\n"];
	WriteString[sphenoInOut," Write(io_L,118) 1, Abs(PDGLSP(1)), \"# LSP \" \n"]; 
	WriteString[sphenoInOut," Write(io_L,118) 2, Abs(PDGLSP(2)),\"# NLSP \" \n"]; 
];
];

WriteInOutRotMatrices:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},


For[i=1,i<=Length[ListMixingMat],
If[SLHA1Possible==True && FreeQ[{DownSquarkMM,UpSquarkMM,SleptonMM,SneutrinoMM},ListMixingMat[[i,1]]]==False,
WriteString[sphenoInOut,"If (.not.WriteSLHA1) Then \n"];
];
WriteOutputBlock[ListMixingMat[[i,1]],getDimParameters[ListMixingMat[[i,1]]],0,""];
If[SLHA1Possible==True && FreeQ[{DownSquarkMM,UpSquarkMM,SleptonMM,SneutrinoMM},ListMixingMat[[i,1]]]==False,
WriteString[sphenoInOut,"End if \n"];
];
i++;];

If[SLHA1Possible==True ,
WriteString[sphenoInOut, "If (WriteSLHA1) Then \n"];
WriteString[sphenoInOut, "Write(io_L,106) \"Block stopmix Q=\",Q,\"# \" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 1, Real(Ztop(1,1),dp),\"# Real(Zstop(1,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 2, Real(Ztop(1,2),dp),\"# Real(Zstop(2,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 1, Real(Ztop(2,1),dp),\"# Real(Zstop(1,2),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 2, Real(Ztop(2,2),dp),\"# Real(Zstop(2,2),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,106) \"Block sbotmix Q=\",Q,\"#  \"\n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 1, Real(Zbottom(1,1),dp),\"# Real(Zsbottom(1,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 2, Real(Zbottom(1,2),dp),\"# Real(Zsbottom(2,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 1, Real(Zbottom(2,1),dp),\"# Real(Zsbottom(1,2),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 2, Real(Zbottom(2,2),dp),\"# Real(Zsbottom(2,2),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,106) \"Block staumix Q=\",Q,\"# \" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 1, Real(Ztau(1,1),dp),\"# Real(Zstau(1,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 1, 2, Real(Ztau(1,2),dp),\"# Real(Zstau(2,1),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 1, Real(Ztau(2,1),dp),\"# Real(Zstau(1,2),dp)\" \n"];
WriteString[sphenoInOut, "Write(io_L,107) 2, 2, Real(Ztau(2,2),dp),\"# Real(Zstau(2,2),dp)\" \n"];
WriteString[sphenoInOut, "End if \n"];
];

];

WriteInOutDecays:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},

For[i=1,i<=Length[savedDecayInfos],
WriteString[sphenoInOut, "\n \n !-------------------------------\n"];
WriteString[sphenoInOut, "!" <>ToString[savedDecayInfos[[i,1]]]<>"\n"];
WriteString[sphenoInOut, "!-------------------------------\n \n"];
particle=savedDecayInfos[[i,1]];
For[j=1,j<=getGenSPheno[particle],
If[FreeQ[GoldstoneGhost,particle[{j}]],
WriteString[sphenoInOut,"If("<>SPhenoWidth[particle,j] <>".gt.MinWidth) Then \n"]; 
If[getPDG[particle,j]<0,
sign=-1;
sign2="-";
p0=AntiField[particle];
StringPT0="^*";,
sign=1;
sign2="";
p0=particle;
StringPT0="";];
(* WriteString[sphenoInOut,"Write(io_L,200) "<>ToString[sign*getPDG[particle,j]]<>","<>SPhenoWidth[particle,j]<>","<>"Trim(\""<>ToString[getBlank[particle ]]<>"_"<>ToString[j]<>"\") \n"]; *)
WriteString[sphenoInOut,"Write(io_L,200) "<>sign2<>"INT("<>SPhenoPDG[particle,j]<>"),"<>SPhenoWidth[particle,j]<>","<>"Trim("<>SPhenoNameArray[particle,j]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"#    BR                NDA      ID1      ID2\" \n"];
WriteString[sphenoInOut, "icount = 1 \n"];
For[k=1,k<=Length[savedDecayInfos[[i,4]]],

pt1=savedDecayInfos[[i,4,k,1]];
pt2=savedDecayInfos[[i,4,k,2]];
t1=getType[pt1];
t2=getType[pt2];
		   Which[
t1=== F && t2=== F,p1=pt1;p2=pt2;,
t1=== S && t2=== S,p1=pt1;p2=pt2;,
t1=== F && t2=== S,p1=pt1;p2=pt2;,
t1=== S && t2=== F,p1=pt2;p2=pt1;,
t1=== F && t2=== V,p1=pt1;p2=pt2;,
t1=== V && t2=== F,p1=pt2;p2=pt1;,
t1=== V && t2=== S,p1=pt2;p2=pt1;,
t1=== S && t2=== V,p1=pt1;p2=pt2;,
t1=== V && t2=== V,p1=pt2;p2=pt1;
];

If[sign<0,p1=AntiField[p1];p2=AntiField[p2];];

If[getGenSPheno[p1]>1,
WriteString[sphenoInOut,"Do gt1= "<>ToString[getGenSPhenoStart[p1]] <> ", "<>ToString[getGenSPheno[p1]] <> "\n"];
];
If[getGenSPheno[p2]>1,
If[p1===p2,
WriteString[sphenoInOut,"  Do gt2= gt1, "<>ToString[getGenSPheno[p2]] <> "\n"];,
WriteString[sphenoInOut,"  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ", "<>ToString[getGenSPheno[p2]] <> "\n"];
];
];

WriteString[sphenoInOut,"If ("<>SPhenoBR[particle,j,icount]<>".Gt.BrMin) Then \n"];

If[p1 ===VectorW && p2 === VectorW,
StringPT1="\"^* \"";
StringPT1s="\" \"";
WriteString[sphenoInOut,"CurrentPDG2(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];
StringPT2="\"_virt \"";
StringPT2s="\"^*_virt \"";
WriteString[sphenoInOut,"CurrentPDG2(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];


WriteString[sphenoInOut,"Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>",2,CurrentPDG2, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//\")\"\n"];
(*
WriteString[sphenoInOut,"Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>"/2._dp,2,-CurrentPDG2, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>"//\")\"\n"];
*),

If[Head[p1]=== bar || Head[p1]=== conj,
StringPT1="\"^* \"";
StringPT1s="\" \"";
WriteString[sphenoInOut,"CurrentPDG2(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];,
StringPT1="\" \"";
StringPT1s="\"^* \"";
WriteString[sphenoInOut,"CurrentPDG2(1) = " <>SPhenoPDG[p1,gt1] <>" \n"];
];

If[Head[p2]=== bar || Head[p2]=== conj,
StringPT2="\"^* \"";
StringPT2s="\" \"";
WriteString[sphenoInOut,"CurrentPDG2(2) = -" <>SPhenoPDG[p2,gt2] <>" \n"];,
StringPT2="\" \"";
StringPT2s="\"^* \"";
WriteString[sphenoInOut,"CurrentPDG2(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];
];



If[AntiField[particle]===particle && (AntiField[p1]=!=p1 || AntiField[p2]=!=p2) && AntiField[p1]=!=p2,
WriteString[sphenoInOut,"Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>"/2._dp,2,CurrentPDG2, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//\")\"\n"];
WriteString[sphenoInOut,"Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>"/2._dp,2,-CurrentPDG2, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[particle,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>"//\")\"\n"];,
WriteString[sphenoInOut,"Write(io_L,201) "<>SPhenoBR[particle,j,icount]<>",2,CurrentPDG2, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//\")\"\n"];
];
];

If[getElectricCharge[p1]===0 &&getType[p1]=!=V && getType[p2]=!=V && p1=!=HiggsBoson && p2 =!= HiggsBosoon && p1 =!= PseudoScalar && p2 =!=PseudoScalar && FreeQ[ListDecayParticles,p1]==False && FreeQ[ListDecayParticles,p2]==False,
If[particle===HiggsBoson ,
WriteString[sphenoInOut,"If ((("<>SPhenoWidth[p1,gt1]<>".le.WidthToBeInvisible).and.("<>SPhenoWidth[p2,gt2]<>".le.WidthToBeInvisible)).OR. & \n"];
 WriteString[sphenoInOut," & ((WidthToBeInvisible.le.-1._dp).And.(CurrentPDG2(1).eq.PDGLSP(1)).And.(CurrentPDG2(2).eq.PDGLSP(1)))) Then \n"];
If[getGenSPheno[particle]>0,
WriteString[sphenoInOut, "  BRinvH("<>ToString[j]<>") = BRinvH("<>ToString[j]<>")+"<>SPhenoBR[particle,j,icount]<>" \n"];
];
WriteString[sphenoInOut, "End if \n"];,
If[particle===PseudoScalar,
WriteString[sphenoInOut,"If ((("<>SPhenoWidth[p1,gt1]<>".le.WidthToBeInvisible).and.("<>SPhenoWidth[p2,gt2]<>".le.WidthToBeInvisible)).OR. & \n"];
 WriteString[sphenoInOut," & ((WidthToBeInvisible.le.-1._dp).And.(CurrentPDG2(1).eq.PDGLSP(1)).And.(CurrentPDG2(2).eq.PDGLSP(1)))) Then \n"];
If[getGenSPheno[particle]>0,
WriteString[sphenoInOut, "  BRinvA("<>ToString[j]<>") = BRinvA("<>ToString[j]<>")+"<>SPhenoBR[particle,j,icount]<>" \n"];
];
WriteString[sphenoInOut, "End if \n"];
];
];
];

WriteString[sphenoInOut,"End if \n"];

WriteString[sphenoInOut, "icount = icount +1 \n"];


If[getGenSPheno[p1]>1,WriteString[sphenoInOut,"  End Do \n"];];
If[getGenSPheno[p2]>1, WriteString[sphenoInOut,"End Do \n \n"];];

k++;];


If[FreeQ[Transpose[ListDecayParticles3B][[1]],particle]==False,
pos=Position[BR2and3,particle][[1,1]];
length3B = "("<>ToString[j]<>","<>ToString[Extract[BR2and3,pos][[2]]+1] <>":"<>ToString[Extract[BR2and3,pos][[3]]] <>")";

WriteString[sphenoInOut, "If (Maxval("<>ToString[SPhenoBR[particle]]<>length3B<>").Gt.BRmin) Then \n"];
WriteString[sphenoInOut, "Write(io_L,100) \"#    BR                NDA      ID1      ID2       ID3\" \n"];
WriteString[sphenoInOut, "End If \n"];

pos = Position[Transpose[savedDecayInfos3Body][[1]],particle][[1,1]];

For[k=1,k<=Length[savedDecayInfos3Body[[pos,6]]],
finalparticles=List @@savedDecayInfos3Body[[pos,6,k,1]];
p1=finalparticles[[1]];
p2=finalparticles[[2]];
p3=finalparticles[[3]];

If[sign<0,p1=AntiField[p1];p2=AntiField[p2]; p3=AntiField[p3];];

(*
If[getGenSPheno[p1]>1,
WriteString[sphenoInOut,"Do gt1= "<>ToString[getGenSPhenoStart[p1]] <> ", "<>ToString[getGenSPheno[p1]] <> "\n"];
];
If[getGenSPheno[p2]>1,
WriteString[sphenoInOut,"  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ", "<>ToString[getGenSPheno[p2]] <> "\n"];
];
If[getGenSPheno[p3]>1,
WriteString[sphenoInOut,"  Do gt3="<>ToString[getGenSPhenoStart[p3]] <> ", "<>ToString[getGenSPheno[p3]] <> "\n"];
];
*)

(*
If[getGenSPheno[p1]>1,
WriteString[sphenoInOut,"Do gt1= 1, "<>ToString[getGenSPheno[p1]] <> "\n"];
];
If[getGenSPheno[p2]>1,
WriteString[sphenoInOut,"  Do gt2= 1, "<>ToString[getGenSPheno[p2]] <> "\n"];
];
If[getGenSPheno[p3]>1,
WriteString[sphenoInOut,"  Do gt3= 1, "<>ToString[getGenSPheno[p3]] <> "\n"];
];
*)

If[getGenSPheno[p1]>1,
WriteString[sphenoInOut,"Do gt1="<>ToString[getGenSPhenoStart[p1]] <> ","<>ToString[getGenSPheno[p1]] <> "\n"];
];
If[getGenSPheno[p2]>1,
If[p2===p1,
WriteString[sphenoInOut,"  Do gt2=gt1,"<>ToString[getGenSPheno[p2]] <> "\n"];,
WriteString[sphenoInOut,"  Do gt2="<>ToString[getGenSPhenoStart[p2]] <> ","<>ToString[getGenSPheno[p2]] <> "\n"];
];
];
If[getGenSPheno[p3]>1,
If[p3===p2,
WriteString[sphenoInOut,"    Do gt3=gt2,"<>ToString[getGenSPheno[p3]] <> "\n"];,
If[p3===p1,
WriteString[sphenoInOut,"    Do gt3=gt1,"<>ToString[getGenSPheno[p3]] <> "\n"];,
WriteString[sphenoInOut,"    Do gt3="<>ToString[getGenSPhenoStart[p3]] <> ","<>ToString[getGenSPheno[p3]] <> "\n"];
];
];
];


WriteString[sphenoInOut,"If ("<>SPhenoBR[particle,j,icount]<>".Gt.BrMin) Then \n"];
If[Head[p1]=== bar || Head[p1]=== conj,
StringPT1="\"^* \"";
StringPT1s="\" \"";
WriteString[sphenoInOut,"CurrentPDG3(1) = -" <>SPhenoPDG[p1,gt1] <>" \n"];,
StringPT1="\" \"";
StringPT1s="\"^* \"";
WriteString[sphenoInOut,"CurrentPDG3(1) = " <>SPhenoPDG[p1,gt1] <>" \n"];
];

If[Head[p2]=== bar || Head[p2]=== conj,
StringPT2="\"^* \"";
StringPT2s="\" \"";
WriteString[sphenoInOut,"CurrentPDG3(2) = -" <>SPhenoPDG[p2,gt2] <>" \n"];,
StringPT2="\" \"";
StringPT2s="\"^* \"";
WriteString[sphenoInOut,"CurrentPDG3(2) = " <>SPhenoPDG[p2,gt2] <>" \n"];
];

If[Head[p3]=== bar || Head[p3]=== conj,
StringPT3="\"^* \"";
StringPT3s="\" \"";
WriteString[sphenoInOut,"CurrentPDG3(3) = -" <>SPhenoPDG[p3,gt3] <>" \n"];,
StringPT3="\" \"";
StringPT3s="\"^* \"";
WriteString[sphenoInOut,"CurrentPDG3(3) = " <>SPhenoPDG[p3,gt3] <>" \n"];
];
		
If[AntiField[particle]===particle && C[p1,p2,p3]=!=AntiField/@C[p1,p2,p3],
WriteString[sphenoInOut,"Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>"/2._dp,3,CurrentPDG3, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//Trim("<>SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3<>"//\")\"\n"];
WriteString[sphenoInOut,"Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>"/2._dp,3,-CurrentPDG3, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1s<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2s<>"//Trim("<>SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3s<>"//\")\"\n"];,

WriteString[sphenoInOut,"Write(io_L,202) "<>SPhenoBR[particle,j,icount]<>",3,CurrentPDG3, & \n "];
WriteString[sphenoInOut,"& Trim("<>SPhenoNameArray[p0,j]<>")//\""<>StringPT0<>" -> \"//Trim("<>SPhenoNameArray[getBlank[p1],gt1]<>")//"<>StringPT1<>"//Trim("<>SPhenoNameArray[getBlank[p2],gt2]<>")//"<>StringPT2<>"//Trim("<>SPhenoNameArray[getBlank[p3],gt3]<>")//"<>StringPT3<>"//\")\"\n"];
];


WriteString[sphenoInOut,"End if \n"];

WriteString[sphenoInOut, "icount = icount +1 \n"];
If[getGenSPheno[p1]>1,WriteString[sphenoInOut,"  End Do \n"];];
If[getGenSPheno[p2]>1, WriteString[sphenoInOut,"End Do \n \n"];];
If[getGenSPheno[p3]>1, WriteString[sphenoInOut,"End Do \n \n"];];

k++;];
];
WriteString[sphenoInOut,"End if \n"];
];
j++;]; 
i++;];
];

WriteInOutHiggsObservables:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},

Clear[i1];

WriteString[sphenoInOut, "\n \n"];
WriteString[sphenoInOut,"If (L_BR) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block HiggsLHC7 # Higgs production cross section at LHC7 [pb] \" \n"];
WriteString[sphenoInOut,"Do i1="<>ToString[getGenSPhenoStart[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>"\n"];
WriteString[sphenoInOut, "CurrentPDG2(1) = Abs("<>SPhenoPDG[HiggsBoson,i1]<>") \n"];
WriteString[sphenoInOut,"If (CS_Higgs_LHC(1,i1,1).gt.0._dp) Write(io_L,119) 1, CurrentPDG2(1), CS_Higgs_LHC(1,i1,1), \" # Gluon fusion \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(1,i1,2).gt.0._dp) Write(io_L,119) 2, CurrentPDG2(1), CS_Higgs_LHC(1,i1,2), \" # Vector boson fusion \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(1,i1,3).gt.0._dp) Write(io_L,119) 3, CurrentPDG2(1), CS_Higgs_LHC(1,i1,3), \" # W-H production \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(1,i1,4).gt.0._dp) Write(io_L,119) 4, CurrentPDG2(1), CS_Higgs_LHC(1,i1,4), \" # Z-H production \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(1,i1,5).gt.0._dp) Write(io_L,119) 5, CurrentPDG2(1), CS_Higgs_LHC(1,i1,5), \" # t-t-H production \" \n"]; 
WriteString[sphenoInOut,"End Do \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block HiggsLHC8 # Higgs production cross section at LHC8 [pb] \" \n"];
WriteString[sphenoInOut,"Do i1="<>ToString[getGenSPhenoStart[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>"\n"];
WriteString[sphenoInOut, "CurrentPDG2(1) = Abs("<>SPhenoPDG[HiggsBoson,i1]<>") \n"];
WriteString[sphenoInOut,"If (CS_Higgs_LHC(2,i1,1).gt.0._dp) Write(io_L,119) 1, CurrentPDG2(1), CS_Higgs_LHC(2,i1,1), \" # Gluon fusion \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(2,i1,2).gt.0._dp) Write(io_L,119) 2, CurrentPDG2(1), CS_Higgs_LHC(2,i1,2), \" # Vector boson fusion \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(2,i1,3).gt.0._dp) Write(io_L,119) 3, CurrentPDG2(1), CS_Higgs_LHC(2,i1,3), \" # W-H production \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(2,i1,4).gt.0._dp) Write(io_L,119) 4, CurrentPDG2(1), CS_Higgs_LHC(2,i1,4), \" # Z-H production \" \n"]; 
WriteString[sphenoInOut,"If (CS_Higgs_LHC(2,i1,5).gt.0._dp) Write(io_L,119) 5, CurrentPDG2(1), CS_Higgs_LHC(2,i1,5), \" # t-t-H production \" \n"]; 
WriteString[sphenoInOut,"End Do \n"];

WriteString[sphenoInOut,"If (WriteEffHiggsCouplingRatios) Then \n"];
WriteString[sphenoInOut, "Write(io_L,100) \"Block HiggsBoundsInputHiggsCouplingsFermions # \" \n"];
For[i=getGenSPhenoStart[HiggsBoson],i<=getGen[HiggsBoson],
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[BottomQuark,i,3]<>","<>SPhenoRatioHBP[BottomQuark,i,3]<>", 3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[BottomQuark,3]]]<>","<>ToString[Abs[getPDG[BottomQuark,3]]]<> ", \" # h_"<>ToString[i]<>" b b coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[BottomQuark,i,2]<>","<>SPhenoRatioHBP[BottomQuark,i,2]<>", 3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[BottomQuark,2]]]<>","<>ToString[Abs[getPDG[BottomQuark,2]]]<> ", \" # h_"<>ToString[i]<>" s s coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[TopQuark,i,3]<>","<>SPhenoRatioHBP[TopQuark,i,3]<>", 3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[TopQuark,3]]]<>","<>ToString[Abs[getPDG[TopQuark,3]]]<> ", \" # h_"<>ToString[i]<>" t t coupling  \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[TopQuark,i,2]<>","<>SPhenoRatioHBP[TopQuark,i,2]<>",3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[TopQuark,2]]]<>","<>ToString[Abs[getPDG[TopQuark,2]]]<> ", \" # h_"<>ToString[i]<>" c c coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[Electron,i,3]<>","<>SPhenoRatioHBP[Electron,i,3]<>", 3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[Electron,3]]]<>","<>ToString[Abs[getPDG[Electron,3]]]<> ", \" # h_"<>ToString[i]<>" tau tau coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioHBS[Electron,i,2]<>","<>SPhenoRatioHBP[Electron,i,2]<>", 3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[Electron,2]]]<>","<>ToString[Abs[getPDG[Electron,2]]]<> ", \" # h_"<>ToString[i]<>" mu mu coupling  \" \n"];
i++;];
If[getGen[PseudoScalar]<99,
For[i=getGenSPhenoStart[PseudoScalar],i<=getGen[PseudoScalar],
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[BottomQuark,i,3]<>","<>SPhenoRatioPseudoHBP[BottomQuark,i,3]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[BottomQuark,3]]]<>","<>ToString[Abs[getPDG[BottomQuark,3]]]<> ", \" # A_"<>ToString[i]<>" b b coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[BottomQuark,i,2]<>","<>SPhenoRatioPseudoHBP[BottomQuark,i,2]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[BottomQuark,2]]]<>","<>ToString[Abs[getPDG[BottomQuark,2]]]<> ", \" # A_"<>ToString[i]<>" s s coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[TopQuark,i,3]<>","<>SPhenoRatioPseudoHBP[TopQuark,i,3]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[TopQuark,3]]]<>","<>ToString[Abs[getPDG[TopQuark,3]]]<> ", \" # A_"<>ToString[i]<>" t t coupling \"  \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[TopQuark,i,2]<>","<>SPhenoRatioPseudoHBP[TopQuark,i,2]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[TopQuark,2]]]<>","<>ToString[Abs[getPDG[TopQuark,2]]]<> ", \" # A_"<>ToString[i]<>" c c coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[Electron,i,3]<>","<>SPhenoRatioPseudoHBP[Electron,i,3]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[Electron,3]]]<>","<>ToString[Abs[getPDG[Electron,3]]]<> ", \" # A_"<>ToString[i]<>" tau tau coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1101) "<>SPhenoRatioPseudoHBS[Electron,i,2]<>","<>SPhenoRatioPseudoHBP[Electron,i,2]<>", 3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[Electron,2]]]<>","<>ToString[Abs[getPDG[Electron,2]]]<> ", \" # A_"<>ToString[i]<>" mu mu coupling \" \n"];
i++;];
];
WriteString[sphenoInOut, "Write(io_L,100) \"Block HiggsBoundsInputHiggsCouplingsBosons # \" \n"];
For[i=getGenSPhenoStart[HiggsBoson],i<=getGen[HiggsBoson],
WriteString[sphenoInOut,"Write(io_L,1102) "<>SPhenoRatioHB[VectorW,i,3]<>","<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[Abs[getPDG[VectorW,1]]]<>","<>ToString[Abs[getPDG[VectorW,1]]]<> ", \" # h_"<>ToString[i]<>" W W coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1102) "<>SPhenoRatioHB[VectorZ,i,3]<>","<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorZ,1]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # h_"<>ToString[i]<>" Z Z coupling  \" \n"];
WriteString[sphenoInOut,"Write(io_L,1102) 0._dp ,"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorZ,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # h_"<>ToString[i]<>" Z gamma coupling \" \n"];
If[getGen[HiggsBoson]>1,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPP("<>ToString[i]<>"),dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorP,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # h_"<>ToString[i]<>" gamma gamma coupling \" \n"];,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPP,dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorP,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # h gamma gamma coupling \" \n"];
];
If[getGen[HiggsBoson]>1,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioGG("<>ToString[i]<>"),dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<> ", \" # h_"<>ToString[i]<>" g g coupling \" \n"];,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioGG,dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<> ", \" # h_"<>ToString[i]<>" g g coupling \" \n"];
];
WriteString[sphenoInOut,"Write(io_L,1103) 0._dp,"<>"4 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # h_"<>ToString[i]<>" g g Z coupling \" \n"];
i++;];
If[getGen[PseudoScalar]<99,
For[i=getGenSPhenoStart[PseudoScalar],i<=getGen[PseudoScalar],
WriteString[sphenoInOut,"Write(io_L,1102) "<>SPhenoRatioPseudoHB[VectorW,i,3]<>","<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[Abs[getPDG[VectorW,1]]]<>","<>ToString[Abs[getPDG[VectorW,1]]]<> ", \" # A_"<>ToString[i]<>" W W coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1102) "<>SPhenoRatioPseudoHB[VectorZ,i,3]<>","<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorZ,1]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # A_"<>ToString[i]<>" Z Z coupling \" \n"];
WriteString[sphenoInOut,"Write(io_L,1102) 0._dp ,"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorZ,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # A_"<>ToString[i]<>" Z gamma coupling \" \n"];
If[getGen[HiggsBoson]>1,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPPP("<>ToString[i]<>"),dp),"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorP,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # A_"<>ToString[i]<>" gamma gamma coupling \" \n"];,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPPP,dp),"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorP,1]]<>","<>ToString[getPDG[VectorP,1]]<> ", \" # A_"<>ToString[i]<>" gamma gamma coupling \" \n"];
];
If[getGen[HiggsBoson]>1,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPGG("<>ToString[i]<>"),dp),"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<> ", \" # A_"<>ToString[i]<>" g g coupling \" \n"];,
WriteString[sphenoInOut,"Write(io_L,1102) Real(ratioPGG,dp),"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<> ", \" # A_"<>ToString[i]<>" g g coupling \" \n"];
];
WriteString[sphenoInOut,"Write(io_L,1103) 0._dp,"<>"4 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorG,1]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # A_"<>ToString[i]<>" g g Z coupling \" \n"];
i++;];
];
For[i=getGenSPhenoStart[HiggsBoson],i<=getGen[HiggsBoson],
For[j=getGenSPhenoStart[HiggsBoson],j<=getGen[HiggsBoson],
WriteString[sphenoInOut,"Write(io_L,1102) Real(CPL_H_H_Z("<>ToString[i]<>","<>ToString[j]<>"), dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[HiggsBoson,j]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # h_"<>ToString[i]<>" h_"<>ToString[j]<> " Z coupling  \"\n"];
j++;];
If[getGen[PseudoScalar]<99,
For[j=getGenSPhenoStart[PseudoScalar],j<=getGen[PseudoScalar],
WriteString[sphenoInOut,"Write(io_L,1102) Real(CPL_A_H_Z("<>ToString[j]<>","<>ToString[i]<>"), dp),"<>"3 ,"<>ToString[getPDG[HiggsBoson,i]]<>","<>ToString[getPDG[PseudoScalar,j]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # h_"<>ToString[i]<>" A_"<>ToString[j]<> " Z coupling \" \n"];
j++;];
j++;];
i++;];
If[getGen[PseudoScalar]<99,
For[i=getGenSPhenoStart[PseudoScalar],i<=getGen[PseudoScalar],
For[j=getGenSPhenoStart[PseudoScalar],j<=getGen[PseudoScalar],
WriteString[sphenoInOut,"Write(io_L,1102) Real(CPL_A_A_Z("<>ToString[j]<>","<>ToString[i]<>"), dp),"<>"3 ,"<>ToString[getPDG[PseudoScalar,i]]<>","<>ToString[getPDG[PseudoScalar,j]]<>","<>ToString[getPDG[VectorZ,1]]<> ", \" # A_"<>ToString[i]<>" A_"<>ToString[j]<> " Z coupling \" \n"];
j++;];
i++;];
];
WriteString[sphenoInOut,"End If \n"];
Clear[i1,i2,i3];
WriteString[sphenoInOut, "\n \n"];


WriteString[sphenoInOut, "If (WriteHiggsDiphotonLoopContributions) Then \n"];
WriteString[sphenoInOut,"Write(io_L,100) \"Block HPPloops # Loop contributions to H-Photon-Photon coupling \" \n"];
WriteString[sphenoInOut,"Do i1="<>ToString[getGenSPhenoStart[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>"\n"];
WriteString[sphenoInOut, "CurrentPDG2(1) = Abs("<>SPhenoPDG[HiggsBoson,i1]<>") \n"];
For[i=1,i<=Length[ParticlesToPhotonAndHiggs],
WriteString[sphenoInOut,"Do i2="<>ToString[getGenSPhenoStart[ParticlesToPhotonAndHiggs[[i,1]]]]<>","<>ToString[ getGen[ParticlesToPhotonAndHiggs[[i,1]]]] <>"\n"];
WriteString[sphenoInOut, "CurrentPDG2(2) = Abs("<>SPhenoPDG[ParticlesToPhotonAndHiggs[[i,1]],i2]<>") \n"];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,dim="(";,dim=""];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1,dim=dim<>"i2";
If[getGen[HiggsBoson]>1,dim=dim<>",";];
];
If[getGen[HiggsBoson]>1,dim=dim<>"i1";];
If[getGen[ParticlesToPhotonAndHiggs[[i,1]]]>1 || getGen[HiggsBoson]>1,dim=dim<>")";];
WriteString[sphenoInOut,"Write(io_L,122) CurrentPDG2(1), CurrentPDG2(2), HPPloop"<>SPhenoForm[ParticlesToPhotonAndHiggs[[i,1]]]<>dim<>", \" # h(\",i1,\")-"<>SPhenoForm[ParticlesToPhotonAndHiggs[[i,1]]]<>"(\",i2,\")-loop \" \n"]; 
WriteString[sphenoInOut,"End do \n"];
i++;];
WriteString[sphenoInOut,"End Do \n"];
WriteString[sphenoInOut,"End if \n"];

WriteString[sphenoInOut, "\n \n"];

WriteString[sphenoInOut,"Write(io_L,100) \"Block EFFHIGGSCOUPLINGS # values of loop-induced couplings \" \n"];
WriteString[sphenoInOut,"facPP = Alpha*Sqrt(2._dp*G_F/sqrt(2._dp))/(2._dp*Pi) \n"];
WriteString[sphenoInOut,"facGG = AlphaS_MZ*Sqrt(2._dp*G_F/sqrt(2._dp))/(Sqrt(2._dp)*2._dp*Pi)\n"];
WriteString[sphenoInOut,"facPZ = 0._dp \n"];
If[getGen[HiggsBososn]>1,addGen="(i1)";,addGEN="";];
WriteString[sphenoInOut,"Do i1="<>ToString[getGenSPhenoStart[HiggsBoson]]<>","<>ToString[getGen[HiggsBoson]]<>"\n"];
WriteString[sphenoInOut, "CurrentPDG3(1) = Abs("<>SPhenoPDG[HiggsBoson,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), Abs(CoupHPP"<>addGen<>")*facPP, \" # H-Photon-Photon \" \n"]; 
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorG,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorG,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), Abs(CoupHGG"<>addGen<>")*facGG, \" # H-Gluon-Gluon \" \n"]; 
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorZ,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), 0._dp, \" # H-Photon-Z (not yet calculated by SPheno) \" \n"]; 
WriteString[sphenoInOut,"End Do \n"];
If[getGen[PseudoScalar]<99,
If[getGen[PseudoScalar]>1,addGen="(i1)";,addGen="";];
WriteString[sphenoInOut,"Do i1="<>ToString[getGenSPhenoStart[PseudoScalar]]<>","<>ToString[getGen[PseudoScalar]]<>"\n"];
WriteString[sphenoInOut, "CurrentPDG3(1) = Abs("<>SPhenoPDG[PseudoScalar,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), Abs(CoupAPP"<>addGen<>")*facPP, \" # A-Photon-Photon \" \n"]; 
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorG,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorG,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), Abs(CoupAGG"<>addGen<>")*facGG, \" # A-Gluon-Gluon \" \n"]; 
WriteString[sphenoInOut, "CurrentPDG3(2) = Abs("<>SPhenoPDG[VectorP,i1]<>") \n"];
WriteString[sphenoInOut, "CurrentPDG3(3) = Abs("<>SPhenoPDG[VectorZ,i1]<>") \n"];
WriteString[sphenoInOut,"Write(io_L,121) CurrentPDG3(1), CurrentPDG3(2), CurrentPDG3(3), 0._dp, \" # A-Photon-Z (not yet calculated by SPheno) \" \n"]; 
WriteString[sphenoInOut,"End Do \n"];
];
WriteString[sphenoInOut,"End If \n"];


WriteString[sphenoInOut, "\n \n"];
];

WriteInOutFT:=Block[{i},
WriteString[sphenoInOut,"Write(io_L,100) \"Block FineTuning #  \" \n"];
(*
WriteString[sphenoInOut,"Write(io_L,1010) 0, MaxVal(FineTuningResults),  \"#  Overall FT \"  \n"];
For[i=1,i\[LessEqual]Length[FineTuningParameters],
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[i]<>", FineTuningResults("<>ToString[i] <>"),  \"# "<>ToString[FineTuningParameters[[i,1]]] <>"\" \n"];
i++;];

WriteString[sphenoInOut,"Write(io_L,100) \"Block FineTuningAllVEVs #  \" \n"];
*)
WriteString[sphenoInOut,"Write(io_L,1010) 0, MaxVal(FineTuningResultsAllVEVs),  \"#  Overall FT \"  \n"];
For[i=1,i<=Length[FineTuningParameters],
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[i]<>", FineTuningResultsAllVEVs("<>ToString[i] <>"),  \"# "<>ToString[FineTuningParameters[[i,1]]] <>"\" \n"];
i++;];

WriteString[sphenoInOut, "\n \n"];
];

WriteInOutLowEnergyObservables:=Block[{i,i1,i2,i3,i4,tempMa,pos,sign,p1,p2,p3, t1, t2, pt1, pt2},

WriteString[sphenoInOut,"Write(io_L,100) \"Block SPhenoLowEnergy # low energy observables \" \n"];

For[i=1,i<=Length[ListOfLowEnergyNames],
If[ListOfLowEnergyNames[[i,2]]=!=0 && FreeQ[PreSARAHobservablesQFV,ListOfLowEnergyNames[[i,1]]]===True && FreeQ[PreSARAHobservablesLFV,ListOfLowEnergyNames[[i,1]]]===True,
If[FreeQ[realVar,ListOfLowEnergyNames[[i,1]]] ,
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>",Abs("<>ToString[ListOfLowEnergyNames[[i,1]]] <>"),  \"# "<>ToString[ListOfLowEnergyNames[[i,3]]] <>"\" \n"];,
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>","<>ToString[ListOfLowEnergyNames[[i,1]]] <>",  \"# "<>ToString[ListOfLowEnergyNames[[i,3]]] <>"\" \n"];
];
];
i++;];

If[IncludeFlavorKit===True,
WriteString[sphenoInOut,"Write(io_L,100) \"Block FlavorKitQFV # quark flavor violating observables \" \n"];
For[i=1,i<=Length[ListOfLowEnergyNames],
If[ListOfLowEnergyNames[[i,2]]=!=0 && FreeQ[PreSARAHobservablesQFV,ListOfLowEnergyNames[[i,1]]]===False,
If[FreeQ[realVar,ListOfLowEnergyNames[[i,1]]],
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>",Abs("<>ToString[ListOfLowEnergyNames[[i,1]]] <>"),  \"# "<>ListOfLowEnergyNames[[i,3]] <>"\" \n"];,
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>","<>ToString[ListOfLowEnergyNames[[i,1]]] <>",  \"# "<>ListOfLowEnergyNames[[i,3]] <>"\" \n"];
];
];
i++;];

WriteString[sphenoInOut,"Write(io_L,100) \"Block FlavorKitLFV # lepton flavor violating observables \" \n"];
For[i=1,i<=Length[ListOfLowEnergyNames],
If[ListOfLowEnergyNames[[i,2]]=!=0 && FreeQ[PreSARAHobservablesLFV,ListOfLowEnergyNames[[i,1]]]===False,
If[FreeQ[realVar,ListOfLowEnergyNames[[i,1]]],
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>",Abs("<>ToString[ListOfLowEnergyNames[[i,1]]] <>"),  \"# "<>ListOfLowEnergyNames[[i,3]]<>"\" \n"];,
WriteString[sphenoInOut,"Write(io_L,1010) "<>ToString[ListOfLowEnergyNames[[i,2]]]<>","<>ToString[ListOfLowEnergyNames[[i,1]]] <>",  \"# "<>ListOfLowEnergyNames[[i,3]]<>"\" \n"];
];
];
i++;];
];
WriteString[sphenoInOut, "\n \n"];

WriteString[sphenoInOut,"Write(io_L,100) \"Block FWCOEF Q=  1.60000000E+02  # Wilson coefficients at scale Q \" \n"];
For[i=1,i<=Length[FLHA`WilsonCoefficients],
WriteString[sphenoInOut,"Write(io_L,222) \""<>FLHA`WilsonCoefficients[[i,1]]<>"\" , \""<>FLHA`WilsonCoefficients[[i,2]]<>"\" , \""<>FLHA`WilsonCoefficients[[i,3]]<>"\", \""<>FLHA`WilsonCoefficients[[i,4]]<>"\", Real("<>ToString[FLHA`WilsonCoefficients[[i,5]]]<>",dp),  \" # "<>ToString[FLHA`WilsonCoefficients[[i,5]]]<>"\"  \n"];
i++;];

WriteString[sphenoInOut,"Write(io_L,100) \"Block IMFWCOEF Q=  1.60000000E+02  # Im(Wilson coefficients) at scale Q \" \n"];
For[i=1,i<=Length[FLHA`WilsonCoefficients],
WriteString[sphenoInOut,"Write(io_L,222) \""<>FLHA`WilsonCoefficients[[i,1]]<>"\" , \""<>FLHA`WilsonCoefficients[[i,2]]<>"\" , \""<>FLHA`WilsonCoefficients[[i,3]]<>"\", \""<>FLHA`WilsonCoefficients[[i,4]]<>"\", Aimag("<>ToString[FLHA`WilsonCoefficients[[i,5]]]<>"),  \" # "<>ToString[FLHA`WilsonCoefficients[[i,5]]]<>"\"  \n"];
i++;];

];


WriteFLHAroutines:=Block[{i,j,blocks,res,temp},
Get[ToFileName[{$sarahDir,"FlavorKit"},"hadronic_parameters.m"]];

WriteString[sphenoInOut,"Subroutine Read_FLIFE(io) \n"];
WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer,Intent(in)::io \n"];
WriteString[sphenoInOut,"Real(dp)::r_mod,wert \n"];
WriteString[sphenoInOut,"Integer::i_mod,i_test,i_rp \n"];
WriteString[sphenoInOut,"Character(len=80)::read_line \n"];
WriteString[sphenoInOut,"Do \n"];
WriteString[sphenoInOut,"Read(io,*) read_line \n"];
WriteString[sphenoInOut,"If (read_line(1:1).Eq.\"#\") Cycle! this loop \n"];
WriteString[sphenoInOut,"Backspace(io)! resetting to the beginning of the line\n"];
WriteString[sphenoInOut,"If ((read_line(1:1).Eq.\"B\").Or.(read_line(1:1).Eq.\"b\")) Exit! this loop \n"];
WriteString[sphenoInOut,"Read(io,*) i_test,wert!,read_line \n"];
For[i=1,i<=Length[FLHA`MASSandLIFETIME],
WriteString[sphenoInOut,"  "<>If[i===1," ","Else "]<>"if (i_test.Eq."<>ToString[FLHA`MASSandLIFETIME[[i,1]]]<>") Then \n"];
WriteString[sphenoInOut,"    "<>FLHA`MASSandLIFETIME[[i,2,1]] <>" =wert \n"];
i++;];
WriteString[sphenoInOut,"End If \n"];
WriteString[sphenoInOut,"End Do! i_mod \n"];
WriteString[sphenoInOut,"End Subroutine Read_FLIFE \n\n\n"];




WriteString[sphenoInOut,"Subroutine Read_FMASS(io) \n"];
WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer,Intent(in)::io \n"];
WriteString[sphenoInOut,"Real(dp)::r_mod,wert \n"];
WriteString[sphenoInOut,"Integer::i_mod,i_test,i_rp \n"];
WriteString[sphenoInOut,"Character(len=80)::read_line \n"];
WriteString[sphenoInOut,"Do \n"];
WriteString[sphenoInOut,"Read(io,*) read_line \n"];
WriteString[sphenoInOut,"If (read_line(1:1).Eq.\"#\") Cycle! this loop \n"];
WriteString[sphenoInOut,"Backspace(io)! resetting to the beginning of the line\n"];
WriteString[sphenoInOut,"If ((read_line(1:1).Eq.\"B\").Or.(read_line(1:1).Eq.\"b\")) Exit! this loop \n"];
WriteString[sphenoInOut,"Read(io,*) i_test,wert!,read_line \n"];
For[i=1,i<=Length[FLHA`MASSandLIFETIME],
WriteString[sphenoInOut,"  "<>If[i===1," ","Else "]<>"if (i_test.Eq."<>ToString[FLHA`MASSandLIFETIME[[i,1]]]<>") Then \n"];
WriteString[sphenoInOut,"    "<>FLHA`MASSandLIFETIME[[i,3,1]] <>" =wert \n"];
i++;];
WriteString[sphenoInOut,"End If \n"];
WriteString[sphenoInOut,"End Do! i_mod \n"];
WriteString[sphenoInOut,"End Subroutine Read_FMASS \n\n\n"];

blocks=Intersection[Transpose[Transpose[FLHA`DECAYCONSTANTS][[1]]][[1]]];
temp=Table[{blocks[[i]],Select[FLHA`DECAYCONSTANTS,#[[1,1]]==blocks[[i]]&]},{i,1,Length[blocks]}] /. {A_Integer,b_Integer}->b;


WriteString[sphenoInOut,"Subroutine Read_FCONST(io) \n"];
WriteString[sphenoInOut,"Implicit None \n"];
WriteString[sphenoInOut,"Integer,Intent(in)::io \n"];
WriteString[sphenoInOut,"Real(dp)::r_mod,wert \n"];
WriteString[sphenoInOut,"Integer::i_mod,i_test,i_rp \n"];
WriteString[sphenoInOut,"Character(len=80)::read_line \n"];
WriteString[sphenoInOut,"Do \n"];
WriteString[sphenoInOut,"Read(io,*) read_line \n"];
WriteString[sphenoInOut,"If (read_line(1:1).Eq.\"#\") Cycle! this loop \n"];
WriteString[sphenoInOut,"Backspace(io)! resetting to the beginning of the line\n"];
WriteString[sphenoInOut,"If ((read_line(1:1).Eq.\"B\").Or.(read_line(1:1).Eq.\"b\")) Exit! this loop \n"];
WriteString[sphenoInOut,"Read(io,*) i_test, i_mod, wert!,read_line \n"];
For[i=1,i<=Length[temp],
WriteString[sphenoInOut,"   "<>If[i===1," ","Else "]<>"If (i_test.Eq."<>ToString[temp[[i,1]]]<>") Then \n"];
For[j=1,j<=Length[temp[[i,2]]],
WriteString[sphenoInOut,"   "<>If[j===1," ","Else "]<>"If (i_mod.Eq."<>ToString[temp[[i,2,j,1]]]<>") Then \n"];
WriteString[sphenoInOut,"    "<>temp[[i,2,j,2]] <>" =wert \n"];
j++;];
WriteString[sphenoInOut,"    End If \n"];
i++;];
WriteString[sphenoInOut,"End If \n"];
WriteString[sphenoInOut,"End Do! i_mod \n"];
WriteString[sphenoInOut,"End Subroutine Read_FCONST \n\n\n"];

];
