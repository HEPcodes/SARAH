(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



AddBoxContributionsPreSARAH[box_,name_,mb_,file_]:=Block[{start1,start2,start3,start4,i,j,i1,i2,i3,i4,SMinv,SMinvS,string,colorconstraint},
(* This routine takes a list of box diagrams and writes the expressions for the amplitude to the SPheno code *)

WriteString[sphenoTeX,"\\subsection{Box contributions} \n\n"];
For[i=1,i<=Length[box],
DynamicNumberDiagram[name]++;
SA`SPhenoTeXSub=SA`SPhenoTeXGlobal;
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MassEx12"->TeXOutput[Mass2[External[1][{gt1}]/.box[[1,2]]]],"MassEx1"->TeXOutput[Mass[External[1][{gt1}]/.box[[1,2]]]],"MassEx22"->TeXOutput[Mass2[External[2][{gt2}]/.box[[1,2]]]],"MassEx2"->TeXOutput[Mass[External[2][{gt2}]/.box[[1,2]]]],"MassEx32"->TeXOutput[Mass2[External[3][{gt3}]/.box[[1,2]]]],"MassEx3"->TeXOutput[Mass[External[3][{gt3}]/.box[[1,2]]]],"MassEx42"->TeXOutput[Mass2[External[4][{gt4}]/.box[[1,2]]]],"MassEx4"->TeXOutput[Mass[External[4][{gt4}]/.box[[1,2]]]]}];
(* get more handy names for the particles in the loop *)
p1=(Internal[1] /.box[[i,2]]);
p2 =(Internal[2] /. box[[i,2]]);
p3 =(Internal[3] /. box[[i,2]]);
p4 =(Internal[4] /. box[[i,2]]);

(* write a comment to the Fortran code what particles are in the loop *)
WriteString[file,"! "<>ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3] <>","<>ToString[p4] <>"\n"]; 

colorconstraint=1;
(*
If[DeleteCases[Flatten[getIndizes/@({External[1],External[2],External[3],External[4]} /. box[[i,2]])],generation]==={color,color,color,color},
Switch[InsertionOrder /. box[[i,2]],
1,
colorconstraint=(Delta[cex11, cex21] Delta[cex31,cex41]*(1-Delta[cex11, cex31]));,
2,
colorconstraint=(Delta[cex11, cex31] Delta[cex21,cex41]*(1-Delta[cex11, cex41]));,
3,
colorconstraint=(Delta[cex11, cex41] Delta[cex31,cex21]*(1-Delta[cex11, cex31]));
];
];
*)

If[DeleteCases[Flatten[getIndizes/@({External[1],External[2],External[3],External[4]} /. box[[i,2]])],generation]==={color,color,color,color},
colorconstraint=ColorFlow/. ColorDelta[a_,b_]ColorDelta[c_,d_]->Delta[Index[a],Index[b]]Delta[Index[c],Index[d]](1-Delta[Index[a],Index[c]]) /. box[[i,2]] /. {gt1->cex11,gt2->cex21,gt3->cex31,gt4->cex41};
];
(*
If[DeleteCases[Flatten[getIndizes/@({External[1],External[2],External[3],External[4]} /. box[[i,2]])],generation]==={color,color,color,color},
colorconstraint=ColorFlow/. ColorDelta[a_,b_]ColorDelta[c_,d_]\[Rule]Delta[Index[a],Index[b]]Delta[Index[c],Index[d]] /. box[[i,2]] /. {gt1\[Rule]cex11,gt2\[Rule]cex21,gt3\[Rule]cex31,gt4\[Rule]cex41};
]; *)

(* Calculate the color factor *)
cfactor = getChargeFactor[box[[i]],{{{External[1],ex1},{AntiField[Internal[1]],in1},{Internal[4],in4}},
{{External[2],ex2},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[3],ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{External[4],ex4},{Internal[3],in3},{AntiField[Internal[4]],in4}}} /. box[[i,2]],colorconstraint];

If[cfactor===0,
WriteString[file,"! Vanishing contribution because of color flow \n\n"];
i++;
Return[];
];


(* Write the color factor to Fortran code *)
WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

Switch[cfactor,
1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->""}];,
-1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->"-"}];,
_,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->ToString[cfactor]}];
];

(* Extract the vertices *)
c1=getSPhenoCoupling2[box[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[box[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling2[box[[i,1,3]],SPhenoCouplingsAll];
c4=getSPhenoCoupling2[box[[i,1,4]],SPhenoCouplingsAll];

(* Generate the index structure *)

ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.box[[i,2]],{AntiField[Internal[1]],i1}/.box[[i,2]],{Internal[4],i4}/.box[[i,2]],c1[[2]]];
ind2 =MakeIndicesCouplingPS[{External[2],Index[2]}/.box[[i,2]],{Internal[1],i1}/.box[[i,2]],{AntiField[Internal[2]],i2}/.box[[i,2]],c2[[2]]]; 
ind3 = MakeIndicesCouplingPS[{External[3],Index[3]}/.box[[i,2]],{Internal[2],i2}/.box[[i,2]],{AntiField[Internal[3]],i3}/.box[[i,2]],c3[[2]]];
ind4 = MakeIndicesCouplingPS[{External[4],Index[4]}/.box[[i,2]],{AntiField[Internal[4]],i4}/.box[[i,2]],{Internal[3],i3}/.box[[i,2]],c4[[2]]];


Switch[InsertionOrder /. box[[i,2]],
1,
	c1=CheckFermionFlipPS[{AntiField[Internal[1]],Internal[4],External[1]}/.box[[i,2]],c1, ind1]; (* NEW Flip *)
	c2=CheckFermionFlipPS[{External[2],Internal[1],AntiField[Internal[2]]}/.box[[i,2]],c2, ind2]; (* NEW Flip *)
	c3=CheckFermionFlipPS[{ Internal[2],AntiField[Internal[3]],External[3]}/.box[[i,2]],c3, ind3]; (* NEW Flip *)
	c4=CheckFermionFlipPS[{External[4],AntiField[Internal[4]],Internal[3]}/.box[[i,2]],c4, ind4]; (* NEW Flip *),
2,
	c1=CheckFermionFlipPS[{AntiField[Internal[1]],Internal[4],External[1]}/.box[[i,2]],c1, ind1]; (* NEW Flip *)
	c2=CheckFermionFlipPS[{External[2],Internal[1],AntiField[Internal[2]]}/.box[[i,2]],c2, ind2]; (* NEW Flip *)
	c3=CheckFermionFlipPS[{External[3], Internal[2],AntiField[Internal[3]]}/.box[[i,2]],c3, ind3]; (* NEW Flip *)
	c4=CheckFermionFlipPS[{AntiField[Internal[4]],Internal[3],External[4]}/.box[[i,2]],c4, ind4]; (* NEW Flip *),
3,
	c1=CheckFermionFlipPS[{AntiField[Internal[1]],Internal[4],External[1]}/.box[[i,2]],c1, ind1]; (* NEW Flip *)
	c2=CheckFermionFlipPS[{Internal[1],AntiField[Internal[2]],External[2]}/.box[[i,2]],c2, ind2]; (* NEW Flip *)
	c3=CheckFermionFlipPS[{ External[3],Internal[2],AntiField[Internal[3]]}/.box[[i,2]],c3, ind3]; (* NEW Flip *)
	c4=CheckFermionFlipPS[{External[4],AntiField[Internal[4]],Internal[3]}/.box[[i,2]],c4, ind4]; (* NEW Flip *)
           c2temp=c2;c4temp=c4; 
          c2=c4temp; c4=c2temp; 
          c3temp=c3;c4temp=c4; 
          c3=c4temp; c4=c3temp; 
       ];

ind1=c1[[2]];c1=c1[[1]];
ind2=c2[[2]];c2=c2[[1]];
ind3=c3[[2]];c3=c3[[1]];
ind4=c4[[2]];c4=c4[[1]];


(* start the loop with the first generation of each particles; might change if we go to another gauge *)
start1=1; start2=1; start3=1; start4=1;

WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p4],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>",  InsertionOrder: "<> ToString[InsertionOrder/.box[[i,2]]]<>"\n"]; 

(* Create a flag to switch off loops including specific particles *) 
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.("<>SPhenoIncludeLoop[getBlank[p4]]<>").and.IncludeBoxes) Then \n"];
];



(* loop over generations of particles in the loop *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"    Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];
If[getGenSPheno[p4]>1,WriteString[file,"      Do i4="<>ToString[start4]<>","<> ToString[GetGenerationFlag[p4]]<>"\n"];];

(* Check if any mass is heavier than the thresholds *)
WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p4,i4]<>".gt."<>mb<>")) Then\n"];

(* Check if only SM particles are involved *)
If[Complement[RE/@{p1,p2,p3,p4},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,i4}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,i4}},(getType[#[[1]]]===S && getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];

(* Write the vertices to Fortran code *)
WriteVertexToFile[1,c1,ind1,getVertexType[box[[i,1,1]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[2,c2,ind2,getVertexType[box[[i,1,2]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[3,c3,ind3,getVertexType[box[[i,1,3]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[4,c4,ind4,getVertexType[box[[i,1,4]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];

(* Write the masses to Fortran code *)


WriteString[file,"m"<>ToString[getType[p1]]<>"1 = "<>SPhenoMass[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"12 = "<>SPhenoMassSq[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p4]]<>"1 = "<>SPhenoMass[p4,i4]<>"\n"];
WriteString[file,"m"<>ToString[getType[p4]]<>"12 = "<>SPhenoMassSq[p4,i4]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"2 = "<>SPhenoMass[p3,i3]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"22 = "<>SPhenoMassSq[p3,i3]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"2 = "<>SPhenoMass[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"22 = "<>SPhenoMassSq[p2,i2]<>"\n"];


SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"m"<>ToString[getType[p3]]<>"22" -> TeXOutput[Mass2[p3[{j3}]]],"m"<>ToString[getType[p3]]<>"2" -> TeXOutput[Mass[p3[{j3}]]],"m"<>ToString[getType[p4]]<>"22" -> TeXOutput[Mass2[p4[{j4}]]],"m"<>ToString[getType[p4]]<>"2" ->TeXOutput[Mass[p4[{j4}]]]}];


(* Write the expressions for the amplitude to Fortran code *)

DrawBoxDiagram[(External[1][{Index[1]}] /.box[[i,2]]),(External[2][{Index[2]}] /.box[[i,2]]),(External[3][{Index[3]}] /.box[[i,2]]),(External[4][{Index[4]}] /.box[[i,2]]),p1[{j1}],p2[{j2}],p3[{j3}],p4[{j4}],(InsertionOrder /.box[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];

WriteString[sphenoTeX,"\\begin{align} \n"];
clines=1;
(*
AddBoxResultPreSARAH[name][InsertionOrder/.box[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p2],getType[p4],getType[p3]}],{"{"->"","}"->"",","->"", " "->""}]],file];
*)
AddBoxResultPreSARAH[name][InsertionOrder/.box[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p4],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " "->""}]],file];
WriteString[sphenoTeX,"\\end{align} \n"];

WriteString[file, "  End if \n"];
WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];
If[FlagLoopContributions===True,WriteString[file, "End if \n"];];

WriteString[file, "\n\n "];
i++;];

];

AddPenguinContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddPenguinContributionsPreSARAHgeneric[diagrams,name,mb,file,4];
AddPenguin2FContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddPenguinContributionsPreSARAHgeneric[diagrams,name,mb,file,2];

AddPenguinContributionsPreSARAHgeneric[diagrams_,name_,mb_,file_,nf_]:=Block[{start1,start2,start3,start4,i,j,i1,i2,i3,i4,SMinv, SMinvS},
(* This routine takes a list of penguin diagrams and writes the expressions for the amplitude to the SPheno code *)
WriteString[sphenoTeX,"\\subsection{Penguin contributions, Propagator: $"<>TeXOutput[(Propagator /. diagrams[[1,2]])]<>"$} \n\n"];
For[i=1,i<=Length[diagrams],
DynamicNumberDiagram[name]++;
SA`SPhenoTeXSub=SA`SPhenoTeXGlobal;
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MassEx12"->TeXOutput[Mass2[External[1][{gt1}]/.diagrams[[1,2]]]],"MassEx1"->TeXOutput[Mass[External[1][{gt1}]/.diagrams[[1,2]]]],"MassEx22"->TeXOutput[Mass2[External[2][{gt2}]/.diagrams[[1,2]]]],"MassEx2"->TeXOutput[Mass[External[2][{gt2}]/.diagrams[[1,2]]]],"MassEx32"->TeXOutput[Mass2[External[3][{gt3}]/.diagrams[[1,2]]]],"MassEx3"->TeXOutput[Mass[External[3][{gt3}]/.diagrams[[1,2]]]],"MassEx42"->TeXOutput[Mass2[External[4][{gt4}]/.diagrams[[1,2]]]],"MassEx4"->TeXOutput[Mass[External[4][{gt4}]/.diagrams[[1,2]]]]}];
(* particles in the loop *)
p1=(Internal[1] /.diagrams[[i,2]]);
p2 =(Internal[2] /. diagrams[[i,2]]);
p3 =(Internal[3] /. diagrams[[i,2]]);

If[nf===4,
(*Propagator *)
p4 =(Propagator /. diagrams[[i,2]]);
WriteString[file,"! Propagator: "<>ToString[p4]<>", Loop particles: "<> ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3]  <>"\n"];
WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>",  InsertionOrder: "<> ToString[InsertionOrder/.diagrams[[i,2]]]<>"\n"];, 
WriteString[file,"! Loop particles: "<> ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3]  <>"\n"];
WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>",  InsertionOrder: "<> ToString[InsertionOrder/.diagrams[[i,2]]]<>"\n"];
];


CurrentInsertionOrder = InsertionOrder /. diagrams[[i,2]];

(* Calculate the color factor of the particles in the loop *)
If[nf===4,
(*
cfactor = getChargeFactor[diagrams[[i]] /. {Cp[a__],Cp[b__],Cp[c__],Cp[d__]}\[Rule]{Cp[a],Cp[b],Cp[c]}/. {External[3]\[Rule]NONE[3],External[4]\[Rule]NONE[4]},{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}}} /. diagrams[[i,2]]];

Print[CurrentInsertionOrder];
Switch[CurrentInsertionOrder,
1,cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[3],ex3},{External[4],ex4}}} /. diagrams[[i,2]]];,
2,cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[3],ex3},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[2],ex2},{External[4],ex4}}} /. diagrams[[i,2]]];,
3,cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[4],ex4},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[3],ex3},{External[2],ex2}}} /. diagrams[[i,2]]];,
4,cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[1],ex3},{External[2],ex2}}} /. diagrams[[i,2]]];,
5,cfactor =  getChargeFactor[diagrams[[i]],{{{External[2],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[4],ex4},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[1],ex2},{External[3],ex3}}} /. diagrams[[i,2]]];,
6,cfactor =  getChargeFactor[diagrams[[i]],{{{External[2],ex2},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[3],ex3},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[1],ex2},{External[4],ex4}}} /. diagrams[[i,2]]];
]; *)
cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{Propagator,in4},{Internal[2],in2},{AntiField[Internal[3]],in3}},{{AntiField[Propagator],in4},{External[3],ex3},{External[4],ex4}}} /. diagrams[[i,2]]];, 

cfactor = getChargeFactor[diagrams[[i]] /. {Cp[a__],Cp[b__],Cp[c__],Cp[d__]}->{Cp[a],Cp[b],Cp[c]},{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{External[3],ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}}} /. diagrams[[i,2]]];
];

If[cfactor===0,
WriteString[file,"! Vanishing contribution because of color flow \n\n"];
i++;
Return[];
];

(* Write the color factor to fortran code *)
WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

Switch[cfactor,
1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->""}];,
-1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->"-"}];,
_,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->ToString[cfactor]}];
];


(* extract the vertices of involved particles *)
c1=getSPhenoCoupling2[diagrams[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[diagrams[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling2[diagrams[[i,1,3]],SPhenoCouplingsAll];
If[nf===4,c4=getSPhenoCoupling2[diagrams[[i,1,4]],SPhenoCouplingsAll];];
(* generate the index structure *)
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{Internal[1],i1}/.diagrams[[i,2]],{AntiField[Internal[2]],i2}/.diagrams[[i,2]],c1[[2]]];
ind2 =MakeIndicesCouplingPS[{External[2],Index[2]}/.diagrams[[i,2]],{AntiField[Internal[1]],i1}/.diagrams[[i,2]],{Internal[3],i3}/.diagrams[[i,2]],c2[[2]]]; 
If[nf===4,
ind3 = MakeIndicesCouplingPS[{Propagator,iProp}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]],{Internal[2],i2}/.diagrams[[i,2]],c3[[2]]]; (* changed order i2,i3 *),
ind3 = MakeIndicesCouplingPS[{External[3],Index[3]}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]],{Internal[2],i2}/.diagrams[[i,2]],c3[[2]]]; (* changed order i2,i3 *)
];
If[nf===4,
ind4 = MakeIndicesCouplingPS[{External[4],Index[4]}/.diagrams[[i,2]],{AntiField[Propagator],iProp}/.diagrams[[i,2]],{External[3],Index[3]}/.diagrams[[i,2]],c4[[2]]];
];

c1=CheckFermionFlipPS[{Internal[1],AntiField[Internal[2]],External[1]}/.diagrams[[i,2]],c1,ind1];(* NEW FLIP *)
ind1=c1[[2]];c1=c1[[1]];
c2=CheckFermionFlipPS[{External[2],AntiField[Internal[1]],Internal[3]}/.diagrams[[i,2]],c2,ind2]; (* NEW FLIP *)
ind2=c2[[2]];c2=c2[[1]];

If[nf===4,
c3=CheckFermionFlipPS[{Propagator,AntiField[Internal[3]],Internal[2]}/.diagrams[[i,2]],c3,ind3];
ind3=c3[[2]];c3=c3[[1]];
c4=CheckFermionFlipPS[{External[4],External[3],AntiField[Propagator]}/.diagrams[[i,2]],c4,ind4];
ind4=c4[[2]];c4=c4[[1]];
If[getVertexType[diagrams[[i,1,3]]]===SSV||getVertexType[diagrams[[i,1,3]]]===VVV,
c3[[1]] = getSignVertex[(Cp[AntiField[Internal[3]],Internal[2],Propagator] /.diagrams[[i,2]]),c3[[2]],getVertexType[diagrams[[i,1,3]]]]c3[[1]];
];,
 c3=CheckFermionFlipPS[{External[3],AntiField[Internal[3]],Internal[2]}/.diagrams[[i,2]],c3,ind3];  (* NEW FLIP *)
ind3=c3[[2]];c3=c3[[1]];
If[getVertexType[diagrams[[i,1,3]]]===SSV||getVertexType[diagrams[[i,1,3]]]===VVV,
c3[[1]] = getSignVertex[(Cp[AntiField[Internal[3]],Internal[2],External[3]] /.diagrams[[i,2]]),c3[[2]],getVertexType[diagrams[[i,1,3]]]]c3[[1]];
];
];


(* start the loop with the first generation of each particles; might change if we go to another gauge *)
start1=1; start2=1; start3=1; start4=1;

(* Create a flag to switch off loops including specific particles *) 
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.IncludePenguins) Then \n"];];

If[nf===4,
(* loop over generations of propagator *)
If[getGenSPheno[p4]>1,WriteString[file,"Do iProp="<>ToString[start4]<>","<> ToString[GetGenerationFlag[p4]]<>"\n"];];
];

(* loop over generations of vertices in loop *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"    Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];


(* check if any mass in the loop is above the threshold *)
WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>")) Then\n"];

If[nf===4,
If[Complement[RE/@{p1,p2,p3,p4},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,iProp}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,iProp}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];,
If[Complement[RE/@{p1,p2,p3},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];
];


(* Writing the vertices to Fortran code *)
WriteVertexToFile[1,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[3,c3,ind3,getVertexType[diagrams[[i,1,3]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
If[nf===4,
WriteVertexToFile[4,c4,ind4,getVertexType[diagrams[[i,1,4]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
];
(* Writing the masses to Fortran code *)
WriteString[file,"! Masses in loop\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"1 = "<>SPhenoMass[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"12 = "<>SPhenoMassSq[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"1 = "<>SPhenoMass[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"12 = "<>SPhenoMassSq[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"2 = "<>SPhenoMass[p3,i3]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"22 = "<>SPhenoMassSq[p3,i3]<>"\n"];

If[nf===4,
WriteString[file,"! Propagator and inverse propagator mass \n"];
If[FreeQ[massless,p4],
WriteString[file,"MP = "<>SPhenoMass[p4,iProp]<>"\n"];
WriteString[file,"MP2 = "<>SPhenoMassSq[p4,iProp]<>"\n"];
WriteString[file,"IMP = 1._dp/MP  \n"];
WriteString[file,"IMP2 = 1._dp/MP2 \n"];
];
];


If[nf===4,
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"m"<>ToString[getType[p3]]<>"22" -> TeXOutput[Mass2[p3[{j3}]]],"m"<>ToString[getType[p3]]<>"2" -> TeXOutput[Mass[p3[{j3}]]],"MP2" ->TeXOutput[Mass2[p4[{iProp}]]],"MP" -> TeXOutput[Mass[p4[{iProp}]]],"IMP2" -> "\\frac{1}{"<>TeXOutput[Mass2[p4[{iProp}]]]<>"}","IMP" -> "\\frac{1}{"<>TeXOutput[Mass[p4[{iProp}]]]<>"}"}];,
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"m"<>ToString[getType[p3]]<>"22" -> TeXOutput[Mass2[p3[{j3}]]],"m"<>ToString[getType[p3]]<>"2" -> TeXOutput[Mass[p3[{j3}]]]}];
];

(* Add the expressions of the amplitude to the code *)

If[nf===4,
DrawPenguinDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),(External[3][{Index[3]}] /.diagrams[[i,2]]),(External[4][{Index[4]}] /.diagrams[[i,2]]),p1[{j1}],p2[{j2}],p3[{j3}],p4[{iProp}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];,
DrawPenguinDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),(External[3][{Index[3]}] /.diagrams[[i,2]]),p1[{j1}],p2[{j2}],p3[{j3}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];
];
WriteString[sphenoTeX,"\\begin{align} \n"];
clines=1;
WriteString[file,"! Amplitude \n"];
If[nf===4,
AddPenguinResultPreSARAH[name][If[FreeQ[massless,p4],getType[p4],P],InsertionOrder/.diagrams[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]],file];,
AddPenguinResultPreSARAH[name][InsertionOrder/.diagrams[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]],file];
];
WriteString[sphenoTeX,"\\end{align} \n"];

WriteString[file, "  End if \n"];
WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
If[nf===4,If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];];
If[FlagLoopContributions===True,WriteString[file, "End if \n"];];

WriteString[file, "\n\n "];
i++;];

];

AddWaveContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddWaveContributionsPreSARAHgeneric[diagrams,name,mb,file,4];
AddWave2FContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddWaveContributionsPreSARAHgeneric[diagrams,name,mb,file,2];


AddWaveContributionsPreSARAHgeneric[diagrams_,name_,mb_,file_,nf_]:=Block[{start1,start2,start3,start4,i,j,i1,i2,i3,i4,SMinv, SMinvS},
(* This routine takes a list of wave diagrams and writes the expressions for the amplitude to the SPheno code *)
WriteString[sphenoTeX,"\\subsection{Wave contributions, Propagator: $"<>TeXOutput[(Propagator /. diagrams[[1,2]])]<>"$} \n\n"];
For[i=1,i<=Length[diagrams],
DynamicNumberDiagram[name]++;
SA`SPhenoTeXSub=SA`SPhenoTeXGlobal;
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MassEx12"->TeXOutput[Mass2[External[1][{gt1}]/.diagrams[[1,2]]]],"MassEx1"->TeXOutput[Mass[External[1][{gt1}]/.diagrams[[1,2]]]],"MassEx22"->TeXOutput[Mass2[External[2][{gt2}]/.diagrams[[1,2]]]],"MassEx2"->TeXOutput[Mass[External[2][{gt2}]/.diagrams[[1,2]]]],"MassEx32"->TeXOutput[Mass2[External[3][{gt3}]/.diagrams[[1,2]]]],"MassEx3"->TeXOutput[Mass[External[3][{gt3}]/.diagrams[[1,2]]]],"MassEx42"->TeXOutput[Mass2[External[4][{gt4}]/.diagrams[[1,2]]]],"MassEx4"->TeXOutput[Mass[External[4][{gt4}]/.diagrams[[1,2]]]]}];
(* particles in the loop *)
p1=(Internal[1] /.diagrams[[i,2]]);
p2 =(Internal[2] /. diagrams[[i,2]]);

(* Internal fermion *)
p3 =(Internal[3] /. diagrams[[i,2]]);

If[nf===4,
(* 'main' Propagator *)
p4 =(Propagator /. diagrams[[i,2]]);
WriteString[file,"! Propagator: "<>ToString[p4]<>", Loop particles: "<> ToString[p1] <>","<>ToString[p2] <>", Internal fermion: "<>ToString[p3]  <>"\n"]; 
WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>",  InsertionOrder: "<> ToString[InsertionOrder/.diagrams[[i,2]]]<>"\n"];,
WriteString[file,"! Loop particles: "<> ToString[p1] <>","<>ToString[p2] <>", Internal fermion: "<>ToString[p3]  <>"\n"]; 
WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>",  InsertionOrder: "<> ToString[InsertionOrder/.diagrams[[i,2]]]<>"\n"];
];



CurrentInsertionOrder = InsertionOrder /. diagrams[[i,2]];

(* Calculate the color factor of the particles in the loop *)

If[nf===4,
(* Switch[InsertionOrder/.diagrams[[i,2]],
1|3|5|7|9|11, 
cfactor = getChargeFactor[diagrams[[i]] /. {Cp[a__],Cp[b__],Cp[c__],Cp[d__]}\[Rule]{Cp[a],Cp[b]} /.(Internal[3]\[Rule]a_)\[Rule]in3\[Rule]a /. {External[3]\[Rule]NONE[3],External[4]\[Rule]NONE[4]} ,{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{Internal[3],ex2},{AntiField[Internal[1]],in1},{Internal[2],in2}}} /. diagrams[[i,2]]];, 
2|4|6|8|10|12,
cfactor = getChargeFactor[diagrams[[i]] /. {Cp[a__],Cp[b__],Cp[c__],Cp[d__]}\[Rule]{Cp[b],Cp[c]}/.(External[1]\[Rule]a_)\[Rule]EXT3\[Rule]a/.(Internal[3]\[Rule]a_):>(External[1]\[Rule]a) /. {External[3]\[Rule]NONE[3],External[4]\[Rule]NONE[4]},{{{Internal[3],ex1},{AntiField[Internal[1]],in1},{Internal[2],in2}},{{External[2],ex2},{Internal[1],in1},{AntiField[Internal[2]],in2}}} /. diagrams[[i,2]]]; 
]; *)

Switch[InsertionOrder/.diagrams[[i,2]],
1|3|5|7|9|11, 
cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{Internal[3],in3},{AntiField[Internal[1]],in1},{Internal[2],in2}},{{AntiField[Internal[3]],in3},{External[2],ex2},{Propagator,in4}},{{External[3],ex3},{External[4],ex4},{AntiField[Propagator],in4}} } /. diagrams[[i,2]]];, 
2|4|6|8|10|12,
cfactor = getChargeFactor[diagrams[[i]],{{{AntiField[Internal[3]],in3},{External[1],ex1},{Propagator,in4}},{{Internal[3],in3},{AntiField[Internal[1]],in1},{Internal[2],in2}},{{External[2],ex2},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{External[3],ex3},{External[4],ex4},{AntiField[Propagator],in4}}} /. diagrams[[i,2]]]; 
];,
Switch[InsertionOrder/.diagrams[[i,2]],
1|3|5, 
cfactor = getChargeFactor[diagrams[[i]] /. {C[a__],C[b__],C[c__]}->{Cp[a],Cp[b]} /.(Internal[3]->a_)->in3->a /. {External[3]->NONE[3],External[4]->NONE[4]} ,{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{Internal[3],ex2},{AntiField[Internal[1]],in1},{Internal[2],in2}}} /. diagrams[[i,2]]];, 
2|4|6,
cfactor = getChargeFactor[diagrams[[i]] /. {C[a__],C[b__],C[c__]}->{Cp[b],Cp[c]}/.(External[1]->a_)->EXT3->a/.(Internal[3]->a_):>(External[1]->a) /. {External[3]->NONE[3],External[4]->NONE[4]},{{{Internal[3],ex1},{AntiField[Internal[1]],in1},{Internal[2],in2}},{{External[2],ex2},{Internal[1],in1},{AntiField[Internal[2]],in2}}} /. diagrams[[i,2]]]; 
];
];

If[cfactor===0,
WriteString[file,"! Vanishing contribution because of color flow \n\n"];
i++;
Return[];
];


(* Write the color factor to fortran code *)
WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

Switch[cfactor,
1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->""}];,
-1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->"-"}];,
_,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->ToString[cfactor]}];
];

(* extract the vertices of involved particles *)
c1=getSPhenoCoupling2[diagrams[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[diagrams[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling2[diagrams[[i,1,3]],SPhenoCouplingsAll];
If[nf===4,c4=getSPhenoCoupling2[diagrams[[i,1,4]],SPhenoCouplingsAll];];

(* generate the index structure *)
Switch[InsertionOrder/.diagrams[[i,2]],
1|3|5|7|9|11,
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{AntiField[Internal[2]],i2}/.diagrams[[i,2]],{Internal[1],i1}/.diagrams[[i,2]],c1[[2]]];
c1=CheckFermionFlipPS[{AntiField[Internal[2]],Internal[1],External[1]}/.diagrams[[i,2]],c1,ind1]; (* NEW FLIP *)
ind1=c1[[2]];c1=c1[[1]];
ind2 =MakeIndicesCouplingPS[{Internal[3],i3}/.diagrams[[i,2]],{AntiField[Internal[1]],i1}/.diagrams[[i,2]],{Internal[2],i2}/.diagrams[[i,2]],c2[[2]]]; 
c2=CheckFermionFlipPS[{Internal[3],AntiField[Internal[1]],Internal[2]}/.diagrams[[i,2]],c2,ind2];(* NEW FLIP *)
ind2=c2[[2]];c2=c2[[1]];
If[nf===4,
ind3 = MakeIndicesCouplingPS[{Propagator,iProp}/.diagrams[[i,2]],{External[2],Index[2]}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]],c3[[2]]];
c3=CheckFermionFlipPS[{Propagtor, External[2],AntiField[Internal[3]]}/.diagrams[[i,2]],c3,ind3];(* NEW FLIP *)
ind3=c3[[2]];c3=c3[[1]];,
ind3 = MakeIndicesCouplingPS[{External[3],Index[3]}/.diagrams[[i,2]],{External[2],Index[2]}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]],c3[[2]]];
c3=CheckFermionFlipPS[{External[3], External[2],AntiField[Internal[3]]}/.diagrams[[i,2]],c3,ind3];(* NEW FLIP *)
ind3=c3[[2]];c3=c3[[1]];
];
If[nf===4,
ind4 = MakeIndicesCouplingPS[{External[4],Index[4]}/.diagrams[[i,2]],{AntiField[Propagator],iProp}/.diagrams[[i,2]],{External[3],Index[3]}/.diagrams[[i,2]],c4[[2]]];
c4=CheckFermionFlipPS[{Propagator,External[4],External[3]}/.diagrams[[i,2]],c4,ind4];
ind4=c4[[2]];c4=c4[[1]];
];,

2|4|6|8|10|12,
If[nf===4,
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{Propagator,iProp}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]]/.diagrams[[i,2]],c1[[2]]];
c1=CheckFermionFlipPS[{Propagagor,AntiField[Internal[3]],External[1]}/.diagrams[[i,2]],c1,ind1]; (* NEW FLIP *)
ind1=c1[[2]];c1=c1[[1]];,
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{External[3],Index[3]}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]]/.diagrams[[i,2]],c1[[2]]];
c1=CheckFermionFlipPS[{External[3],AntiField[Internal[3]],External[1]}/.diagrams[[i,2]],c1,ind1]; (* NEW FLIP *)
ind1=c1[[2]];c1=c1[[1]];
];
ind2 =MakeIndicesCouplingPS[{Internal[2],i2}/.diagrams[[i,2]],{AntiField[Internal[1]],i1}/.diagrams[[i,2]],{Internal[3],i3}/.diagrams[[i,2]],c2[[2]]]; 
ind3 = MakeIndicesCouplingPS[{External[2],Index[2]}/.diagrams[[i,2]],{Internal[1],i1}/.diagrams[[i,2]],{AntiField[Internal[2]],i2}/.diagrams[[i,2]],c3[[2]]];
c2=CheckFermionFlipPS[{Internal[2],AntiField[Internal[1]],Internal[3]}/.diagrams[[i,2]],c2,ind2]; (* NEW FLIP *)
ind2=c2[[2]];c2=c2[[1]];
c3=CheckFermionFlipPS[{External[2],Internal[1],AntiField[Internal[2]]}/.diagrams[[i,2]],c3,ind3];(* NEW FLIP *)
ind3=c3[[2]];c3=c3[[1]];
If[nf===4,
ind4 = MakeIndicesCouplingPS[{External[4],Index[4]}/.diagrams[[i,2]],{AntiField[Propagator],iProp}/.diagrams[[i,2]],{External[3],Index[3]}/.diagrams[[i,2]],c4[[2]]];
c4=CheckFermionFlipPS[{AntiField[Propagator],External[4],External[3]}/.diagrams[[i,2]],c4,ind4];
ind4=c4[[2]];c4=c4[[1]];
];
];



(* start the loop with the first generation of each particles; might change if we go to another gauge *)
start1=1; start2=1; start3=1; start4=1;

(* Create a flag to switch off loops including specific particles *) 
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.IncludeWave) Then \n"];];

If[nf==4,
(* loop over generations of propagator *)
If[getGenSPheno[p4]>1,WriteString[file,"Do iProp="<>ToString[start4]<>","<> ToString[GetGenerationFlag[p4]]<>"\n"];];
];

(* loop over generations of vertices in loop *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"    Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];


(* check if any mass in the loop is above the threshold *)
WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>")) Then\n"];

If[nf===4,
If[Complement[RE/@{p1,p2,p3,p4},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,iProp}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3},{p4,iProp}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];,
If[Complement[RE/@{p1,p2,p3},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];
];

(* Writing the vertices to Fortran code *)

Switch[InsertionOrder/.diagrams[[i,2]],
1|3|5|7|9|11,
WriteVertexToFile[1,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[3,c3,ind3,getVertexType[diagrams[[i,1,3]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
If[nf===4,
WriteVertexToFile[4,c4,ind4,getVertexType[diagrams[[i,1,4]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
];,
2 | 4| 6|8|10|12,
WriteVertexToFile[3,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
WriteVertexToFile[1,c3,ind3,getVertexType[diagrams[[i,1,3]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
If[nf===4,
WriteVertexToFile[4,c4,ind4,getVertexType[diagrams[[i,1,4]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
];
];

(*
WriteVertexToFile[1,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
WriteVertexToFile[3,c3,ind3,getVertexType[diagrams[[i,1,3]]],file];
WriteVertexToFile[4,c4,ind4,getVertexType[diagrams[[i,1,4]]],file];,
*)
(* Writing the masses to Fortran code *)
WriteString[file,"! Masses in loop\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"1 = "<>SPhenoMass[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"12 = "<>SPhenoMassSq[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"1 = "<>SPhenoMass[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"12 = "<>SPhenoMassSq[p2,i2]<>"\n"];
WriteString[file,"! Mass of internal fermion \n"];
Switch[InsertionOrder/.diagrams[[i,2]],
1 | 3 | 5|7|9|11,
	WriteString[file,"MFin = "<>SPhenoMass[p3,i3]<>"-"<>SPhenoMass[External[1]/.diagrams[[i,2]],Index[1]/.diagrams[[i,2]]]<>"\n"];
	WriteString[file,"MFin2 = "<>SPhenoMassSq[p3,i3]<>"-"<>SPhenoMassSq[External[1]/.diagrams[[i,2]],Index[1]/.diagrams[[i,2]]]<>"\n"];,
2 | 4 | 6|8|10|12,
	WriteString[file,"MFin = "<>SPhenoMass[p3,i3]<>"-"<>SPhenoMass[External[2]/.diagrams[[i,2]],Index[2]/.diagrams[[i,2]]]<>"\n"];
	WriteString[file,"MFin2 = "<>SPhenoMassSq[p3,i3]<>"-"<>SPhenoMassSq[External[2]/.diagrams[[i,2]],Index[2]/.diagrams[[i,2]]]<>"\n"];
];
WriteString[file,"If (Abs(MFin).gt.10E-10_dp) Then \n"];
WriteString[file,"MFin = "<>SPhenoMass[p3,i3]<>"\n"];
WriteString[file,"MFin2 = "<>SPhenoMassSq[p3,i3]<>"\n"];


(*
WriteString[file,"IMFin = 1._dp/MFin  \n"];
WriteString[file,"IMFin2 = 1._dp/MFin2 \n"];
WriteString[file,"Else \n"];
WriteString[file,"IMFin = 0._dp \n"];
WriteString[file,"IMFin2 = 0._dp \n"];
WriteString[file,"End if \n"]; *)

If[nf===4,
If[FreeQ[massless,p4],
WriteString[file,"! Propagator and inverse propagator mass \n"];
WriteString[file,"MP = "<>SPhenoMass[p4,iProp]<>"\n"];
WriteString[file,"MP2 = "<>SPhenoMassSq[p4,iProp]<>"\n"];
WriteString[file,"IMP = 1._dp/MP  \n"];
WriteString[file,"IMP2 = 1._dp/MP2 \n"];
];
];

If[nf===4,
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"MFin2" -> TeXOutput[Mass2[p3[{j3}]]],"MFin" -> TeXOutput[Mass[p3[{j3}]]],"MP2" ->TeXOutput[Mass2[p4[{iProp}]]],"MP" -> TeXOutput[Mass[p4[{iProp}]]],"IMP2" -> "\\frac{1}{"<>TeXOutput[Mass2[p4[{iProp}]]]<>"}","IMP" -> "\\frac{1}{"<>TeXOutput[Mass[p4[{iProp}]]]<>"}"}];,
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"MFin2" -> TeXOutput[Mass2[p3[{j3}]]],"MFin" -> TeXOutput[Mass[p3[{j3}]]]}];
];

(* Add the expressions of the amplitude to the code *)
WriteString[file,"! Amplitude \n"];

If[nf===4,
DrawWaveDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),AntiField[(External[3][{Index[3]}] /.diagrams[[i,2]])],(External[4][{Index[4]}] /.diagrams[[i,2]]),p1[{j1}],p2[{j2}],p3[{j3}],p4[{iProp}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];,
DrawWaveDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),AntiField[(External[3][{Index[3]}] /.diagrams[[i,2]])],p1[{j1}],p2[{j2}],p3[{j3}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];
];

WriteString[sphenoTeX,"\\begin{align} \n"];
clines=1;
If[nf===4,
AddWaveResultPreSARAH[name][If[FreeQ[massless,p4],getType[p4],P],InsertionOrder/.diagrams[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p2]}],{"{"->"","}"->"",","->"", " " ->""}]],file];,
AddWaveResultPreSARAH[name][InsertionOrder/.diagrams[[i,2]],ToExpression[StringReplace[ToString[{getType[p1],getType[p2]}],{"{"->"","}"->"",","->"", " " ->""}]],file];
];
WriteString[sphenoTeX,"\\end{align} \n"];

WriteString[file, "     End if \n"];
WriteString[file, "  End if \n"];
WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
If[nf===4,If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];];
If[FlagLoopContributions===True,WriteString[file, "End if \n"];];

WriteString[file, "\n\n "];
i++;];

];
AddTreeContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddTreeContributionsPreSARAHgeneric[diagrams,name,mb,file,4];
AddTree2FContributionsPreSARAH[diagrams_,name_,mb_,file_]:=AddTreeContributionsPreSARAHgeneric[diagrams,name,mb,file,2];
AddTreeContributionsPreSARAHgeneric[diagrams_,name_,mb_,file_,nf_]:=Block[{start1,start2,start3,start4,i,j,i1,i2,i3,i4,SMinv,SMinvS},
(* This routine takes a list of penguin diagrams and writes the expressions for the amplitude to the SPheno code *)
WriteString[sphenoTeX,"\\subsection{Tree contributions, Propagator: $"<>TeXOutput[(Propagator /. diagrams[[1,2]])]<>"$} \n\n"];
For[i=1,i<=Length[diagrams],
DynamicNumberDiagram[name]++;
SA`SPhenoTeXSub=SA`SPhenoTeXGlobal;
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MassA2"->TeXOutput[Mass2[External[1][{gt1}]/.diagrams[[1,2]]]],"MassA"->TeXOutput[Mass[External[1][{gt1}]/.diagrams[[1,2]]]],"MassB2"->TeXOutput[Mass2[External[2][{gt2}]/.diagrams[[1,2]]]],"MassB"->TeXOutput[Mass[External[2][{gt2}]/.diagrams[[1,2]]]]}];
(*Propagator *)

If[nf===4,
p1 =(Propagator /. diagrams[[i,2]]);
WriteString[file,"! Propagator: "<>ToString[p4]<>"\n"];
WriteString[file,"! InsertionOrder: "<> ToString[InsertionOrder/.diagrams[[i,2]]]<>"\n"]; 

CurrentInsertionOrder = InsertionOrder /. diagrams[[i,2]];

(* Calculate the color factor of the particles in the loop *)
cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Propagator,in1},{External[2],ex2}},
{{External[3],ex3},{AntiField[Propagator],in1},{External[4],ex4}}} /. diagrams[[i,2]]];,
cfactor=1;
];

If[cfactor===0,
WriteString[file,"! Vanishing contribution because of color flow \n\n"];
i++;
Return[];
];

(* Write the color factor to fortran code *)
WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

Switch[chargefactor,
1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor*"->""}];,
-1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor*"->"-"}];,
_,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"->ToString[cfactor]}];
];


(* extract the vertices of involved particles *)
c1=getSPhenoCoupling2[diagrams[[i,1,1]],SPhenoCouplingsAll];
If[nf===4,
c2=getSPhenoCoupling2[diagrams[[i,1,2]],SPhenoCouplingsAll];
];
(* generate the index structure *)
If[nf===4,
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{External[2],Index[2]}/.diagrams[[i,2]],{Propagator,iProp}/.diagrams[[i,2]],c1[[2]]];
ind2 =MakeIndicesCouplingPS[{External[3],Index[3]}/.diagrams[[i,2]],{External[4],Index[4]}/.diagrams[[i,2]],{AntiField[Propagator],iProp}/.diagrams[[i,2]],c2[[2]]]; ,
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{External[2],Index[2]}/.diagrams[[i,2]],{External[3],Index[3]}/.diagrams[[i,2]],c1[[2]]];
];

(* start the loop with the first generation of each particles; might change if we go to another gauge *)
start1=1; 


If[nf===4,
(* loop over generations of propagator *)
If[getGenSPheno[p1]>1,WriteString[file,"Do iProp="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[Complement[RE/@{p1},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,iProp}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,iProp}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
If[SMinvS==={},
WriteString[file,"If ((OnlySM).or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];
];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];,
WriteString[file,"If ((OnlySM).or.(.not.OnlySM)) Then \n"];
];


(* Writing the vertices to Fortran code *)
WriteVertexToFile[1,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
If[nf===4,
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex];
];

If[nf===4,
WriteString[file,"! Propagator and inverse propagator mass \n"];
If[FreeQ[massless,p1],
WriteString[file,"MP = "<>SPhenoMass[p1,iProp]<>"\n"];
WriteString[file,"MP2 = "<>SPhenoMassSq[p1,iProp]<>"\n"];
WriteString[file,"IMP = 1._dp/MP  \n"];
WriteString[file,"IMP2 = 1._dp/MP2 \n"];
];


SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MP2" ->TeXOutput[Mass2[p1[{iProp}]]],"MP" -> TeXOutput[Mass[p1[{iProp}]]],"IMP2" -> "\\frac{1}{"<>TeXOutput[Mass2[p1[{iProp}]]]<>"}","IMP" -> "\\frac{1}{"<>TeXOutput[Mass[p1[{iProp}]]]<>"}"}];

(* Add the expressions of the amplitude to the code *)

DrawTreeDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),(External[3][{Index[3]}] /.diagrams[[i,2]]),(External[4][{Index[4]}] /.diagrams[[i,2]]),p1[{iProp}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];
];

WriteString[sphenoTeX,"\\begin{align} \n"];
clines=1;
WriteString[file,"! Amplitude \n"];
If[nf===4,
AddTreeResultPreSARAH[name][getType[p1],InsertionOrder/.diagrams[[i,2]],empty,file];,
AddTreeResultPreSARAH[name][InsertionOrder/.diagrams[[i,2]],empty,file];
];
WriteString[sphenoTeX,"\\end{align} \n"];

(* WriteString[file, "End if \n"]; *)

WriteString[file," End if \n"];

If[nf===4,
If[getGenSPheno[p1]>1,WriteString[file,"End Do \n"];];
];
WriteString[file, "\n\n "];
i++;];

];


AddTriangleContributionsPreSARAH[diagrams_,name_,uGauge_,mb_,file_]:=Block[{start1,start2,start3,start4,i,j,i1,i2,i3,i4,SMinv, SMinvS},
(* This routine takes a list of penguin diagrams and writes the expressions for the amplitude to the SPheno code *)
(* WriteString[sphenoTeX,"\\subsection{Penguin contributions, Propagator: $"<>TeXOutput[(Propagator /. diagrams[[1,2]])]<>"$} \n\n"]; *)
For[i=1,i<=Length[diagrams],
DynamicNumberDiagram[name]++;
(* SA`SPhenoTeXSub=SA`SPhenoTeXGlobal;
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"MassA2"\[Rule]TeXOutput[Mass2[External[1][{gt1}]/.diagrams[[1,2]]]],"MassA"\[Rule]TeXOutput[Mass[External[1][{gt1}]/.diagrams[[1,2]]]],"MassB2"\[Rule]TeXOutput[Mass2[External[2][{gt2}]/.diagrams[[1,2]]]],"MassB"\[Rule]TeXOutput[Mass[External[2][{gt2}]/.diagrams[[1,2]]]]}]; *)
(* particles in the loop *)
p1=(Internal[1] /.diagrams[[i,2]]);
p2 =(Internal[2] /. diagrams[[i,2]]);
p3 =(Internal[3] /. diagrams[[i,2]]);

WriteString[file,"! Loop particles: "<> ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3]  <>"\n"];
WriteString[file,"! Generic diagram: ",StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]<>"\n"]; 

(* Calculate the color factor of the particles in the loop *)
cfactor = getChargeFactor[diagrams[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{External[3],ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}}} /. diagrams[[i,2]]];

If[cfactor===0,
WriteString[file,"! Vanishing contribution because of color flow \n\n"];
i++;
Return[];
];

(* Write the color factor to fortran code *)
WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

(*
Switch[chargefactor,
1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor*"\[Rule]""}];,
-1,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor*"\[Rule]"-"}];,
_,SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"chargefactor"\[Rule]ToString[cfactor]}];
];
*)


(* extract the vertices of involved particles *)
c1=getSPhenoCoupling2[diagrams[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[diagrams[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling2[diagrams[[i,1,3]],SPhenoCouplingsAll];

(* generate the index structure *)
ind1 = MakeIndicesCouplingPS[{External[1],Index[1]}/.diagrams[[i,2]],{Internal[1],i1}/.diagrams[[i,2]],{AntiField[Internal[2]],i2}/.diagrams[[i,2]],c1[[2]]];
ind2 =MakeIndicesCouplingPS[{External[2],Index[2]}/.diagrams[[i,2]],{AntiField[Internal[1]],i1}/.diagrams[[i,2]],{Internal[3],i3}/.diagrams[[i,2]],c2[[2]]]; 
ind3 = MakeIndicesCouplingPS[{External[3],Index[3]}/.diagrams[[i,2]],{AntiField[Internal[3]],i3}/.diagrams[[i,2]],{Internal[2],i2}/.diagrams[[i,2]],c3[[2]]]; 

If[getVertexType[diagrams[[i,1,3]]]===SSV||getVertexType[diagrams[[i,1,3]]]===VVV,
c3[[1]] = getSignVertex[(Cp[External[3],Internal[2],AntiField[Internal[3]]] /.diagrams[[i,2]]),c3[[2]],getVertexType[diagrams[[i,1,3]]]]c3[[1]];
];



(* start the loop with the first generation of each particles; might change if we go to another gauge *)
start1=1; start2=1; start3=1; 

If[uGauge===True,
start1=getGenSPhenoStart[p1];
start2=getGenSPhenoStart[p2];
start3=getGenSPhenoStart[p3];
];

(* Create a flag to switch off loops including specific particles *) 
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.IncludeTriangle) Then \n"];];


(* loop over generations of vertices in loop *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"    Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];

(* check if any mass in the loop is above the threshold *)
WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>")) Then\n"];

If[Complement[RE/@{p1,p2,p3},{TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,VectorZ,VectorW,PseudoScalar}]==={},
SMinv=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},getType[#[[1]]]===F&];
SMinvS=Select[RE/@{{p1,i1},{p2,i2},{p3,i3}},(getType[#[[1]]]===S&& getGen[#[[1]]]>1)&];
WriteString[file,"If (("<>StringReplace[StringJoin[Join[If[SMinv=!={},Riffle[("("<>ToString[#]<>".lt.4)")&/@TransposeChecked[SMinv][[2]],".and."],{}],If[SMinvS=!={},Riffle[("("<>ToString[#]<>".lt.2)")&/@TransposeChecked[SMinvS][[2]],".and."],{}]]],{")("->").and.("}]<>").or.(.not.OnlySM)) Then \n"];,
WriteString[file,"If (.not.OnlySM) Then \n"];
];


(* Writing the vertices to Fortran code *)
WriteVertexToFile[1,c1,ind1,getVertexType[diagrams[[i,1,1]]],file];
(* SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex]; *)
WriteVertexToFile[2,c2,ind2,getVertexType[diagrams[[i,1,2]]],file];
(* SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex]; *)
WriteVertexToFile[3,c3,ind3,getVertexType[diagrams[[i,1,3]]],file];
(* SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,SA`SubSPhenoTeXVertex]; *)

(* Writing the masses to Fortran code *)
WriteString[file,"! Masses in loop\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"1 = "<>SPhenoMass[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p1]]<>"12 = "<>SPhenoMassSq[p1,i1]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"1 = "<>SPhenoMass[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p2]]<>"12 = "<>SPhenoMassSq[p2,i2]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"2 = "<>SPhenoMass[p3,i3]<>"\n"];
WriteString[file,"m"<>ToString[getType[p3]]<>"22 = "<>SPhenoMassSq[p3,i3]<>"\n"];

(*
SA`SPhenoTeXSub=Join[SA`SPhenoTeXSub,{"m"<>ToString[getType[p1]]<>"12" -> TeXOutput[Mass2[p1[{j1}]]],"m"<>ToString[getType[p1]]<>"1" ->TeXOutput[Mass[p1[{j1}]]],"m"<>ToString[getType[p2]]<>"12" ->TeXOutput[Mass2[p2[{j2}]]],"m"<>ToString[getType[p2]]<>"1" -> TeXOutput[Mass[p2[{j2}]]],"m"<>ToString[getType[p3]]<>"22" -> TeXOutput[Mass2[p3[{j3}]]],"m"<>ToString[getType[p3]]<>"2" -> TeXOutput[Mass[p3[{j3}]]],"MP2" \[Rule]TeXOutput[Mass2[p4[{iProp}]]],"MP" -> TeXOutput[Mass[p4[{iProp}]]],"IMP2" -> "\\frac{1}{"<>TeXOutput[Mass2[p4[{iProp}]]]<>"}","IMP" -> "\\frac{1}{"<>TeXOutput[Mass[p4[{iProp}]]]<>"}"}];
*)

(* Add the expressions of the amplitude to the code *)
(*
DrawPenguinDiagram[(External[1][{Index[1]}] /.diagrams[[i,2]]),(External[2][{Index[2]}] /.diagrams[[i,2]]),(External[3][{Index[3]}] /.diagrams[[i,2]]),(External[4][{Index[4]}] /.diagrams[[i,2]]),p1[{j1}],p2[{j2}],p3[{j3}],p4[{iProp}],(InsertionOrder /.diagrams[[i,2]]),i,NumberOfConsideredExternalStates,name,sphenoTeX];
*)

(* WriteString[sphenoTeX,"\\begin{align} \n"]; *)
WriteString[file,"! Amplitude \n"];
AddTriangleResultPreSARAH[name][ToExpression[StringReplace[ToString[{getType[p1],getType[p2],getType[p3]}],{"{"->"","}"->"",","->"", " " ->""}]],file];
(* WriteString[sphenoTeX,"\\end{align} \n"]; *)

WriteString[file, " End if \n"];
WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
If[FlagLoopContributions===True,WriteString[file, "End if \n"];];



WriteString[file, "\n\n "];
i++;];

];

GetInformtion3ParticleProcess[Pex1_,Pex2_,Pex3_,name_,file_]:=Block[{i,j,temp,AllInternalParticles={},AllAddedCouplings={}},
(* Print["     initialize operators: ",name]; *)

AllDiagrams = InsFields[{{C[Pex1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[Pex2,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[Pex3,FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Pex1,External[2]->Pex2,External[3]->Pex3, Index[1]->gt1, Index[2]->gt2,Index[3]->gt3}}];

(* we remove all diagrams which contain massless particles since they don't contribute *)
AllDiagrams=Select[AllDiagrams,((Intersection[({Internal[1],Internal[2],Internal[3]} /.#[[2]] /. bar[x_]->x /. conj[x_]->x),{VP, (*VZ, *) VG}]=={}))&];

(* As next step we collect all appearing particles and names *)
For[j=1,j<=Length[AllDiagrams ],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. AllDiagrams[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllDiagrams[[j,1]]];
j++;];

(* Here, we check for doublets, add the mass of the external particles (charged Leptons, ie. agian called just 'Eletron'; remove again mass=0 particles (just to be really sure); and replace the couplings by their SPheno specific names (done with 'getSPhenoCoupling' *)
NeededMasses=Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Pex1],SPhenoMass[Pex2],SPhenoMass[Pex3]}]];
NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses =Join[NeededMasses, MakeSquaredMass/@NeededMasses];


NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];

TriangleContributionsAll=AllDiagrams;

(* The information about masses, couplings and diagrams is given to another function which writes the Fortran code *)
];

GetInformtion2Fermion1BosonProcess[Pex1_,Pex2_,Pex3_,name_,file_]:=Block[{i,j,temp,AllInternalParticles={},AllAddedCouplings={}},
(* Print["     initialize operators: ",name]; *)
AllDiagrams = GeneratePenguinDiagramsPreSARAH[Pex1,Pex2,Pex3];
AllDiagrams=Select[AllDiagrams,((Intersection[({Internal[1],Internal[2],Internal[3]} /.#[[2]] /. bar[x_]->x /. conj[x_]->x),{VP, (*VZ, *) VG}]=={}))&];

AllDiagramsWave=GenerateWaveDiagramsPreSARAH[Pex1,Pex2,Pex3];

AllDiagramsTree=GenerateTreeDiagramsPreSARAH[Pex1,Pex2,Pex3];

(* As next step we collect all appearing particles and names *)
For[j=1,j<=Length[AllDiagrams ],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. AllDiagrams[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllDiagrams[[j,1]]];
j++;];
For[j=1,j<=Length[AllDiagramsWave],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2]}/. AllDiagramsWave[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllDiagramsWave[[j,1]]];
j++;];
For[j=1,j<=Length[AllDiagramsTree],
AllAddedCouplings = Join[AllAddedCouplings,AllDiagramsTree[[j,1]]];
j++;];

(* Here, we check for doublets, add the mass of the external particles (charged Leptons, ie. agian called just 'Eletron'; remove again mass=0 particles (just to be really sure); and replace the couplings by their SPheno specific names (done with 'getSPhenoCoupling' *)
NeededMasses=Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Pex1],SPhenoMass[Pex2],SPhenoMass[Pex3]}]];
NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses =Join[NeededMasses, MakeSquaredMass/@NeededMasses];


NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];

PenguinContributions=AllDiagrams;
WaveContributions=AllDiagramsWave;
TreeContributions=AllDiagramsTree;

(* The information about masses, couplings and diagrams is given to another function which writes the Fortran code *)
];


GetInformtion4FermionProcess[Pex1_,Pex2_,Pex3_,Pex4_,name_,file_]:=Block[{i,j,k},

(* Print["     initialize operators: ",name]; *)

ScalarPropagators = {};
VectorPropagators = {};
PhotonPropagators={};

AllInternalParticles = {};
AllAddedCouplings = {};

For[i=1,i<=Length[Particles[Current]],
Switch[Particles[Current][[i,4]],
S,
	If[(FreeQ[VerticesInv[All],C[Pex1,Pex2,Particles[Current][[i,1]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex4,AntiField[Particles[Current][[i,1]]]]]==False) ||
(FreeQ[VerticesInv[All],C[Pex1,Pex3,Particles[Current][[i,1]]]]==False && FreeQ[VerticesInv[All],C[Pex2,Pex4,AntiField[Particles[Current][[i,1]]]]]==False) ||
(FreeQ[VerticesInv[All],C[Pex1,Pex4,Particles[Current][[i,1]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex2,AntiField[Particles[Current][[i,1]]]]]==False) ||
(FreeQ[VerticesInv[All],C[Pex1,Pex2,AntiField[Particles[Current][[i,1]]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex4,Particles[Current][[i,1]]]]==False)||
(FreeQ[VerticesInv[All],C[Pex1,Pex3,AntiField[Particles[Current][[i,1]]]]]==False && FreeQ[VerticesInv[All],C[Pex2,Pex4,Particles[Current][[i,1]]]]==False)||
(FreeQ[VerticesInv[All],C[Pex1,Pex4,AntiField[Particles[Current][[i,1]]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex2,Particles[Current][[i,1]]]]==False),
	ScalarPropagators = Join[ScalarPropagators,{Particles[Current][[i,1]]}];
	];,
V,
	If[(FreeQ[VerticesInv[All],C[Pex1,Pex2,Particles[Current][[i,1]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex4,AntiField[Particles[Current][[i,1]]]]]==False) ||
(FreeQ[VerticesInv[All],C[Pex1,Pex2,AntiField[Particles[Current][[i,1]]]]]==False && FreeQ[VerticesInv[All],C[Pex3,Pex4,Particles[Current][[i,1]]]]==False),
	If[FreeQ[massless,Particles[Current][[i,1]]], (* massless vectors (i.e. photon) have to be treated differently! *)
	VectorPropagators = Join[VectorPropagators,{Particles[Current][[i,1]]}];,
	PhotonPropagators = Join[PhotonPropagators,{Particles[Current][[i,1]]}];
	];
	];
	];
i++;];

(* Print[ScalarPropagators,VectorPropagators]; *)

PenguinContributionsScalar=Table[{},{Length[ScalarPropagators]}];
PenguinContributionsVector=Table[{},{Length[VectorPropagators]}];
PenguinContributionsPhoton=Table[{},{Length[PhotonPropagators]}];

WaveContributionsScalar=Table[{},{Length[ScalarPropagators]}];
WaveContributionsVector=Table[{},{Length[VectorPropagators]}];
WaveContributionsPhoton=Table[{},{Length[PhotonPropagators]}];

TreeContributionsScalar=Table[{},{Length[ScalarPropagators]}];
TreeContributionsVector=Table[{},{Length[VectorPropagators]}];


For[i=1,i<=Length[ScalarPropagators],
temp=GeneratePenguinDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,ScalarPropagators[[i]]];
tempWave=GenerateWaveDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,ScalarPropagators[[i]]];
tempTree=GenerateTreeDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,ScalarPropagators[[i]]];

(*
temp = Select[temp,FreeQ[NeglectInsertionOrderPenguin[name],(InsertionOrder/.#[[2]])]&];
tempWave = Select[tempWave,FreeQ[NeglectInsertionOrderWave[name],(InsertionOrder/.#[[2]])]&];
tempTree = Select[tempTree,FreeQ[NeglectInsertionOrderTree[name],(InsertionOrder/.#[[2]])]&];
*)

If[NeglectCrossedDiagrams[name]===True,
temp=RemoveCrossedDiagrams[temp,{Pex1,Pex2,Pex3,Pex4},"penguin"];
tempWave=RemoveCrossedDiagrams[tempWave,{Pex1,Pex2,Pex3,Pex4},"wave"];
tempTree=RemoveCrossedDiagrams[tempTree,{Pex1,Pex2,Pex3,Pex4},"tree"];
];

tempWave=Select[tempWave,Intersection[RE/@({Internal[1],Internal[2]}/.#[[2]]),NeglectLoopsInvolving]==={}&];
temp=Select[temp,Intersection[RE/@({Internal[1],Internal[2],Internal[3]}/.#[[2]]),NeglectLoopsInvolving]==={}&];

For[j=1,j<=Length[temp],
 If[FreeQ[massless,(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]])] ,
PenguinContributionsScalar[[i]]= Join[PenguinContributionsScalar[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];

For[j=1,j<=Length[tempWave],
 If[FreeQ[massless,(getBlank[Internal[1] /. tempWave[[j,2]]]) |  (getBlank[Internal[2] /. tempWave[[j,2]]])] ,
WaveContributionsScalar[[i]]= Join[WaveContributionsScalar[[i]],{tempWave[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. tempWave[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,tempWave[[j,1]]];
 ]; 
j++;];

For[j=1,j<=Length[tempTree],
TreeContributionsScalar[[i]]= Join[TreeContributionsScalar[[i]],{tempTree[[j]]/. C[a__]->Cp[a]}];
AllAddedCouplings = Join[AllAddedCouplings,tempTree[[j,1]]];
j++;];

i++;];

For[i=1,i<=Length[VectorPropagators],

temp=GeneratePenguinDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,VectorPropagators[[i]]];
tempWave=GenerateWaveDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,VectorPropagators[[i]]];
tempTree=GenerateTreeDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,VectorPropagators[[i]]];

(*
temp = Select[temp,FreeQ[NeglectInsertionOrderPenguin[name],(InsertionOrder/.#[[2]])]&];
tempWave = Select[tempWave,FreeQ[NeglectInsertionOrderWave[name],(InsertionOrder/.#[[2]])]&];
tempTree = Select[tempTree,FreeQ[NeglectInsertionOrderTree[name],(InsertionOrder/.#[[2]])]&];
*)

If[NeglectCrossedDiagrams[name]===True,
temp=RemoveCrossedDiagrams[temp,{Pex1,Pex2,Pex3,Pex4},"penguin"];
tempWave=RemoveCrossedDiagrams[tempWave,{Pex1,Pex2,Pex3,Pex4},"wave"];
tempTree=RemoveCrossedDiagrams[tempTree,{Pex1,Pex2,Pex3,Pex4},"tree"];
];

tempWave=Select[tempWave,Intersection[RE/@({Internal[1],Internal[2]}/.#[[2]]),NeglectLoopsInvolving]==={}&];
temp=Select[temp,Intersection[RE/@({Internal[1],Internal[2],Internal[3]}/.#[[2]]),NeglectLoopsInvolving]==={}&];


For[j=1,j<=Length[temp],
 If[FreeQ[massless,(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]])],
PenguinContributionsVector[[i]]= Join[PenguinContributionsVector[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];

For[j=1,j<=Length[tempWave],
 If[FreeQ[massless,(getBlank[Internal[1] /. tempWave[[j,2]]]) |  (getBlank[Internal[2] /. tempWave[[j,2]]]) | (getBlank[Internal[3] /. tempWave[[j,2]]])],
WaveContributionsVector[[i]]= Join[WaveContributionsVector[[i]],{tempWave[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. tempWave[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,tempWave[[j,1]]];
 ]; 
j++;];

For[j=1,j<=Length[tempTree],
TreeContributionsVector[[i]]= Join[TreeContributionsVector[[i]],{tempTree[[j]]/. C[a__]->Cp[a]}];
AllAddedCouplings = Join[AllAddedCouplings,tempTree[[j,1]]];
j++;];

i++;];

PenguinContributionsVector = DeleteCases[PenguinContributionsVector,{}];


For[i=1,i<=Length[PhotonPropagators],
temp=GeneratePenguinDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,PhotonPropagators[[i]]];
tempWave=GenerateWaveDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4,PhotonPropagators[[i]]];

temp = Select[temp,FreeQ[NeglectInsertionOrderPhotonPenguin[name],(InsertionOrder/.#[[2]])]&];
tempWave = Select[tempWave,FreeQ[NeglectInsertionOrderPhotonWave[name],(InsertionOrder/.#[[2]])]&];

For[j=1,j<=Length[temp],
 If[FreeQ[massless,(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]])],
PenguinContributionsPhoton[[i]]= Join[PenguinContributionsPhoton[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];

For[j=1,j<=Length[tempWave],
 If[FreeQ[massless,(getBlank[Internal[1] /. tempWave[[j,2]]]) |  (getBlank[Internal[2] /. tempWave[[j,2]]]) | (getBlank[Internal[3] /. tempWave[[j,2]]])],
WaveContributionsPhoton[[i]]= Join[WaveContributionsPhoton[[i]],{tempWave[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. tempWave[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,tempWave[[j,1]]];
 ]; 
j++;];
i++;];

PenguinContributionsPhoton = DeleteCases[PenguinContributionsPhoton,{}];

BoxContributions={};
temp=GenerateBoxDiagramsPreSARAH[Pex1,Pex2,Pex3,Pex4];

(*
temp = Select[temp,FreeQ[NeglectInsertionOrderBox[name],(InsertionOrder/.#[[2]])]&];
*)

If[NeglectCrossedDiagrams[name]===True,
temp=RemoveCrossedDiagrams[temp,{Pex1,Pex2,Pex3,Pex4},"box"];
];

temp=Select[temp,Intersection[RE/@({Internal[1],Internal[2],Internal[3],Internal[4]}/.#[[2]]),NeglectLoopsInvolving]==={}&];

For[j=1,j<=Length[temp],
(*  If[FreeQ[massless,(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]]) | (getBlank[Internal[4] /. temp[[j,2]]])] , *)
BoxContributions= Join[BoxContributions,{temp[[j]] /. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3],Internal[4]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 (* ];  *)
j++;];

NeededMasses=Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Pex1],SPhenoMass[Pex2],SPhenoMass[Pex3],SPhenoMass[Pex4]}]];
NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses =Join[NeededMasses, MakeSquaredMass/@NeededMasses];


NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];



];

GenerateWaveDiagramsPreSARAH[f1_,f2_,f3_,f4_,prop_]:=Block[{temp},
(* Creates all possible one-loop penguin diagrams for the 4 external particles f1,f2,f3,f4 and the propagator 'prop' *)
(* There are six different topologies: 'S,T,U' diagrams with the loop at the first two external legs *)
(* Make sure that the order of vertices fits to the topologies generates by FeynArts! *)

(* first, a topology has to be fixed by defining a series of vertices *)
(* second, InsFields populates that topology with all possible field combinations *)

(* blob at 1/2 *)

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f2,prop],C[f3,f4,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Propagator->prop, Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4,InsertionOrder->1}};

temp=InsFields[currentTop];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f1],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f3,f4,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Propagator->prop, Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4,InsertionOrder->2}};

temp=Join[temp,InsFields[currentTop]];

(* blob at 1/3 *)

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f3,prop],C[f2,f4,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Propagator->prop, Index[1]->gt1,Index[2]->gt3,Index[3]->gt2,Index[4]->gt4,InsertionOrder->3}};

temp=Join[temp,InsFields[currentTop]];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f1],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f2,f4,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Propagator->prop, Index[1]->gt1,Index[2]->gt3,Index[3]->gt2,Index[4]->gt4,InsertionOrder->4}};

temp=Join[temp,InsFields[currentTop]];


(* blob at 1/4 *)

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f4,prop],C[f3,f2,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f4,External[3]->f3,External[4]->f2,Propagator->prop, Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2,InsertionOrder->5}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f1],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f3,f2,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f4,External[3]->f3,External[4]->f2,Propagator->prop, Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2,InsertionOrder->6}};


temp=Join[temp,InsFields[currentTop]];


(* blob at 3/4 *)


currentTop={{C[f3,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f4,prop],C[f1,f2,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f3,External[2]->f4,External[3]->f1,External[4]->f2,Propagator->prop, Index[1]->gt3,Index[2]->gt4,Index[3]->gt1,Index[4]->gt2,InsertionOrder->7}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f3],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f1,f2,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f3,External[2]->f4,External[3]->f1,External[4]->f2,Propagator->prop, Index[1]->gt3,Index[2]->gt4,Index[3]->gt1,Index[4]->gt2,InsertionOrder->8}};
temp=Join[temp,InsFields[currentTop]];

(* blob at 2/4 *)

currentTop={{C[f2,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f4,prop],C[f1,f3,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f2,External[2]->f4,External[3]->f1,External[4]->f3,Propagator->prop, Index[1]->gt2,Index[2]->gt4,Index[3]->gt1,Index[4]->gt3,InsertionOrder->9}};

temp=Join[temp,InsFields[currentTop]];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f2],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f1,f3,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f2,External[2]->f4,External[3]->f1,External[4]->f3,Propagator->prop, Index[1]->gt2,Index[2]->gt4,Index[3]->gt1,Index[4]->gt3,InsertionOrder->10}};

temp=Join[temp,InsFields[currentTop]];

(* blob at 2/3 *)

currentTop={{C[f2,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f3,prop],C[f4,f1,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f2,External[2]->f3,External[3]->f4,External[4]->f1,Propagator->prop, Index[1]->gt2,Index[2]->gt3,Index[3]->gt4,Index[4]->gt1,InsertionOrder->11}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f2],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f4,f1,AntiField[prop]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f2,External[2]->f3,External[3]->f4,External[4]->f1,Propagator->prop, Index[1]->gt2,Index[2]->gt3,Index[3]->gt4,Index[4]->gt1,InsertionOrder->12}};
temp=Join[temp,InsFields[currentTop]];


Return[temp];
];

GenerateWaveDiagramsPreSARAH[f1_,f2_,prop_]:=Block[{temp,currentTop},
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[AntiField[FieldToInsert[3]],f2,prop]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->prop, Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, InsertionOrder->1}};

temp=InsFields[currentTop];

currentTop={{C[prop,AntiField[FieldToInsert[3]],f1],C[FieldToInsert[2],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[1]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->prop, Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,InsertionOrder->2}};
temp=Join[temp,InsFields[currentTop]];

Return[temp];
];

GenerateTreeDiagramsPreSARAH[f1_,f2_,f3_,f4_,prop_]:=Block[{temp,currentTop},
currentTop={{C[FieldToInsert[1],f1,f2],C[AntiField[FieldToInsert[1]],f3,f4]},{External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Propagator->FieldToInsert[1],  InsertionOrder->1,Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4}};
temp=InsFields[currentTop];

currentTop={{C[FieldToInsert[1],f1,f3],C[AntiField[FieldToInsert[1]],f2,f4]},{External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Propagator->FieldToInsert[1],  InsertionOrder->2,Index[1]->gt1,Index[2]->gt3,Index[3]->gt2,Index[4]->gt4}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[FieldToInsert[1],f1,f4],C[AntiField[FieldToInsert[1]],f3,f2]},{External[1]->f1,External[2]->f4,External[3]->f3,External[4]->f2,Propagator->FieldToInsert[1],  InsertionOrder->3,Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2}};
temp=Join[temp,InsFields[currentTop]];

  temp=Select[temp, (RE[Propagator/. #[[2]]])===RE[prop]&];
Return[temp];
];

GenerateTreeDiagramsPreSARAH[f1_,f2_,f3_]:=Block[{temp,currentTop},
currentTop={{C[f1,f2,f3]},{External[1]->f1,External[2]->f2,External[3]->f3,  InsertionOrder->1,Index[1]->gt1,Index[2]->gt2,Index[3]->gt3}};
Return[{currentTop}];
];

GeneratePenguinDiagramsPreSARAH[f1_,f2_,f3_,f4_,prop_]:=Block[{temp},
(* Creates all possible one-loop penguin diagrams for the 4 external particles f1,f2,f3,f4 and the propagator 'prop' *)
(* There are three different topologies: propagator attached to f3+f4, f2+f4 and f2+f3 *)
(* Make sure that the order of vertices fits to the topologies generates by FeynArts! *)

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f3,f4]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Propagator->prop,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4, InsertionOrder->1}};
temp=InsFields[currentTop];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f3,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f2,f4]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Propagator->prop, InsertionOrder->2, Index[1]->gt1,Index[2]->gt3,Index[3]->gt2,Index[4]->gt4}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f4,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f3,f2]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f4,External[3]->f3,External[4]->f2,Propagator->prop, InsertionOrder->3, Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2}}; 
temp=Join[temp,InsFields[currentTop]];


currentTop={{C[f3,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f4,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f1,f2]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f3,External[2]->f4,External[3]->f1,External[4]->f2,Propagator->prop,  Index[1]->gt3,Index[2]->gt4,Index[3]->gt1,Index[4]->gt2, InsertionOrder->4}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f2,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f4,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f1,f3]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f2,External[2]->f4,External[3]->f1,External[4]->f3,Propagator->prop, InsertionOrder->5, Index[1]->gt2,Index[2]->gt4,Index[3]->gt1,Index[4]->gt3}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f2,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f3,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]],C[AntiField[prop],f4,f1]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f2,External[2]->f3,External[3]->f4,External[4]->f1,Propagator->prop, InsertionOrder->6, Index[1]->gt2,Index[2]->gt3,Index[3]->gt4,Index[4]->gt1}}; 
temp=Join[temp,InsFields[currentTop]];

Return[temp];
];

GeneratePenguinDiagramsPreSARAH[f1_,f2_,prop_]:=Block[{temp},
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[prop,FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->prop,  Index[1]->gt1,Index[2]->gt2,Index[3]->gt3, InsertionOrder->1}};
temp=InsFields[currentTop];

Return[temp];
];

GenerateBoxDiagramsPreSARAH[f1_,f2_,f3_,f4_]:=Block[{temp},
temp={};
SA`CheckSameVertices=False;

(* Creates all possible one-loop box diagrams for the 4 external particles f1,f2,f3,f4 and the propagator 'prop' *)
(* There are three different topologies, in which the neighbors of particle 1 are (2,4), (2,3) and (3,4) *)
(* Make sure that the order of vertices fits to the topologies generates by FeynArts! *)


currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f4,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4, InsertionOrder ->1}};
temp=InsFields[currentTop];

currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f4,External[4]->f3,Index[1]->gt1,Index[2]->gt2,Index[3]->gt4,Index[4]->gt3, InsertionOrder ->2}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f2,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f4,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Index[1]->gt1,Index[2]->gt3,Index[3]->gt2,Index[4]->gt4, InsertionOrder ->3}}; 
temp=Join[temp,InsFields[currentTop]]; 

SA`CheckSameVertices=True;

(*
currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f2,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f4,External[3]\[Rule]f3,External[4]\[Rule]f2,Index[1]\[Rule]gt1,Index[2]\[Rule]gt4,Index[3]\[Rule]gt3,Index[4]\[Rule]gt2, InsertionOrder \[Rule]1}};
temp=InsFields[currentTop];

currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f2,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f4,External[3]\[Rule]f2,External[4]\[Rule]f3,Index[1]\[Rule]gt1,Index[2]\[Rule]gt4,Index[3]\[Rule]gt2,Index[4]\[Rule]gt3, InsertionOrder \[Rule]2}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,FieldToInsert[4],AntiField[FieldToInsert[1]]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[1]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[2]],C[f2,AntiField[FieldToInsert[4]],FieldToInsert[3]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f3,External[3]\[Rule]f4,External[4]\[Rule]f2,Index[1]\[Rule]gt1,Index[2]\[Rule]gt3,Index[3]\[Rule]gt4,Index[4]\[Rule]gt2, InsertionOrder \[Rule]3}}; 
temp=Join[temp,InsFields[currentTop]]; 
*)

(*
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f2,External[3]\[Rule]f3,External[4]\[Rule]f4,Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt3,Index[4]\[Rule]gt4, InsertionOrder \[Rule]1}};
temp=InsFields[currentTop];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f2,External[3]\[Rule]f4,External[4]\[Rule]f3,Index[1]\[Rule]gt1,Index[2]\[Rule]gt2,Index[3]\[Rule]gt4,Index[4]\[Rule]gt3, InsertionOrder \[Rule]2}};
temp=Join[temp,InsFields[currentTop]];

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f3,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]\[Rule]FieldToInsert[1],Internal[2]\[Rule]FieldToInsert[2],Internal[3]\[Rule]FieldToInsert[3],Internal[4]\[Rule]FieldToInsert[4],External[1]\[Rule]f1,External[2]\[Rule]f3,External[3]\[Rule]f2,External[4]\[Rule]f4,Index[1]\[Rule]gt1,Index[2]\[Rule]gt3,Index[3]\[Rule]gt2,Index[4]\[Rule]gt4, InsertionOrder \[Rule]3}}; 
temp=Join[temp,InsFields[currentTop]]; 
*)
Return[temp];
];

WriteDiagramsObservable[name_,triangle_, file_]:=Block[{i,jj,threshold="mf_l2(3)"},
DynamicNumberTotalDiagram[name]=Length[triangle];
DynamicNumberDiagram[name]=0;

WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Triangle Contributions                  \n"]; 
WriteString[file, "!---------------------------------------- \n"];
AddTriangleContributionsPreSARAH[triangle,name,UnitaryGauge[name],threshold,file];
];

WriteDiagramsObservable[name_,tree_,wave_,penguin_, file_]:=Block[{i,jj,threshold="mf_l2(3)"},
DynamicNumberTotalDiagram[name]=Length[tree]+Sum[Length[penguin[[i]]],{i,1,Length[penguin]}]+Sum[Length[wave[[i]]],{i,1,Length[wave]}];
DynamicNumberDiagram[name]=0;

If[Length[tree]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Tree Contributions                      \n"]; 
WriteString[file, "!---------------------------------------- \n"];
AddTree2FContributionsPreSARAH[tree,name,threshold,file];
];
If[Length[wave]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Wave Contributions                      \n"]; 
WriteString[file, "!---------------------------------------- \n"];
AddWave2FContributionsPreSARAH[wave,name,threshold,file];
];
If[Length[penguin]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Triangle Contributions                  \n"]; 
WriteString[file, "!---------------------------------------- \n"];
AddPenguin2FContributionsPreSARAH[penguin,name,threshold,file];
];
];

WriteDiagramsObservable[name_,treeS_,treeV_,waveScalar_,waveVector_,pengS_,pengV_,box_, file_]:=Block[{i,jj,threshold="mf_l2(3)"},
DynamicNumberTotalDiagram[name]=Length[treeS]+Length[treeV]+Sum[Length[pengS[[i]]],{i,1,Length[pengS]}]+Sum[Length[pengV[[i]]],{i,1,Length[pengV]}]+Length[box]+Sum[Length[waveScalar[[i]]],{i,1,Length[waveScalar]}]+Sum[Length[waveVector[[i]]],{i,1,Length[waveVector]}];
DynamicNumberDiagram[name]=0;
If[Length[treeS]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Scalar Tree Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];

For[jj=1,jj<=Length[treeS],
WriteString[file, "! -- "<>ToString[Propagator /. treeS[[jj,1,2]]]<>" - Tree            \n"]; 
AddTreeContributionsPreSARAH[treeS[[jj]],name,threshold,file];
jj++;];
];

If[Length[treeV]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Vector Tree Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];

For[jj=1,jj<=Length[treeV],
WriteString[file, "! -- "<>ToString[Propagator /. treeV[[jj,1,2]]]<>" - Tree            \n"]; 
AddTreeContributionsPreSARAH[treeV[[jj]],name,threshold,file];
jj++;];
];

If[Length[pengS]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Scalar Wave Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];

For[jj=1,jj<=Length[pengS],
WriteString[file, "! -- "<>ToString[Propagator /. pengS[[jj,1,2]]]<>" - Penguins            \n"]; 
AddWaveContributionsPreSARAH[waveScalar[[jj]],name,threshold,file];
jj++;];


If[Length[pengS]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Scalar Penguin Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];

For[jj=1,jj<=Length[pengS],
WriteString[file, "! -- "<>ToString[Propagator /. pengS[[jj,1,2]]]<>" - Penguins            \n"]; 
AddPenguinContributionsPreSARAH[pengS[[jj]],name,threshold,file];
jj++;];

If[Length[pengV]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Vector Wave Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];

For[jj=1,jj<=Length[pengV],
WriteString[file, "! --  "<>ToString[Propagator /. pengV[[jj,1,2]]]<>" - Penguins            \n"]; 
AddWaveContributionsPreSARAH[waveVector[[jj]],name,threshold,file];
jj++;];

If[Length[pengV]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Vector Penguin Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];
For[jj=1,jj<=Length[pengV],
WriteString[file, "! --  "<>ToString[Propagator /. pengV[[jj,1,2]]]<>" - Penguins            \n"]; 
AddPenguinContributionsPreSARAH[pengV[[jj]],name,threshold,file];
jj++;];

(*
If[Length[pengPhoton]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Photon Wave Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];
saveP=pengPhoton;
For[jj=1,jj\[LessEqual]Length[pengPhoton],
WriteString[file, "! --  "<>ToString[Propagator /. pengPhoton[[jj,1,2]]]<>" - Penguins            \n"]; 
AddWaveContributionsPreSARAH[wavePhoton[[jj]],name,threshold,file];
jj++;];
*)

(*
If[Length[pengPhoton]>0,
WriteString[file, "!---------------------------------------- \n"];
WriteString[file, "! Photon Penguin Contributions            \n"]; 
WriteString[file, "!---------------------------------------- \n"];
];
For[jj=1,jj\[LessEqual]Length[pengPhoton],
WriteString[file, "! --  "<>ToString[Propagator /. pengPhoton[[jj,1,2]]]<>" - Penguins            \n"]; 
AddPenguinContributionsPreSARAH[pengPhoton[[jj]],name,threshold,file];
jj++;];
*)

If[Length[box]>0,
WriteString[file, "!----------------------------- \n"];
WriteString[file, "! Box Contributions            \n"]; 
WriteString[file, "!----------------------------- \n"];
];

AddBoxContributionsPreSARAH[box,name,threshold,file];

(* have to add wave contributions *)

];

CheckForPreSARAH:=Block[{i,j,k,l,list,type},
(* check for the files in SARAH/Package/SPheno/PreSARAH/ *)

(*
Print["# Checking for FlavorKit input files # "];
Print["# Reference: 1405.1434               # "];
*)

PrintAll[StyleForm["Checking for FlavorKit input files","Section",FontSize->10]];
PrintAll[StyleForm["Reference: 'A Flavor Kit for BSM models' by W. Porod, F. Staub, A.Vicente; 1405.1434","Section",FontSize->10]];

PreSARAHnamesLFV={};
PreSARAHnamesQFV={};

WrappersLFV={};
WrappersQFV={};

PreSARAHobservablesLFV={};
PreSARAHoperatorsLFV={};
PreSARAHobservablesQFV={};
PreSARAHoperatorsQFV={};

If[SkipFlavorKit===True,Return[];];

For[l=1,l<=2,
If[l==1,type="LFV";,type="QFV";];
(*
$preSARAHdir=ToFileName[{$sarahSPhenoPackageDir,"PreSARAH"}];
listfilesOperators=FileNames["*.m",ToFileName[{$sarahSPhenoPackageDir,"PreSARAH",type,"Operators"}],2];
listfilesProcesses=FileNames["*.m",ToFileName[{$sarahSPhenoPackageDir,"PreSARAH",type,"Processes"}],1];
*)
$preSARAHdir=ToFileName[{$sarahDir,"FlavorKit"}];
listfilesOperators=FileNames["*.m",ToFileName[{$sarahDir,"FlavorKit",type,"Operators"}],2];
listfilesProcesses=FileNames["*.m",ToFileName[{$sarahDir,"FlavorKit",type,"Observables"}],1];

If[IncludeFlavorKit=!=True,listfilesOperators={}; listfilesProcesses={};];
Print["Reading files for FlavorKit ",type," operators: ",Dynamic[DynamicListOperators[TYPE]]  /. TYPE->type];
DynamicListOperators[type]={};
For[i=1,i<=Length[listfilesOperators],
 If[i===1,PrintDebug["Reading files for FlavorKit ",type," operators: "];]; 
(* read the files *)
ProcessWrapper=False;
Get[listfilesOperators[[i]]];
DynamicListOperators[type]=Join[DynamicListOperators[type],{NameProcess}];
If[ProcessWrapper==True, 
NamesParticles=ExternalFields;
Clear[ExternalFields];
If[l==1,
WrappersLFV=Join[WrappersLFV,{{NameProcess,NamesParticles,Transpose[SumContributionsOperators[NameProcess]][[1]]}}];,
WrappersQFV=Join[WrappersQFV,{{NameProcess,NamesParticles,Transpose[SumContributionsOperators[NameProcess]][[1]]}}];
];,
If[(FreeQ[NamesParticles,HiggsBoson]|| HiggsBosonPresent===True) &&(FreeQ[NamesParticles,PseudoScalar]|| PseudoScalarBosonPresent===True),
If[l==1,
PreSARAHoperatorsLFV=Join[PreSARAHoperatorsLFV,{{NameProcess,NamesParticles,NamesOperators}}];,
PreSARAHoperatorsQFV=Join[PreSARAHoperatorsQFV,{{NameProcess,NamesParticles,NamesOperators}}];
];,
If[l==1,
PreSARAHoperatorsLFV=Join[PreSARAHoperatorsLFV,{{"dummy",NamesParticles,NamesOperators}}];,
PreSARAHoperatorsQFV=Join[PreSARAHoperatorsQFV,{{"dummy",NamesParticles,NamesOperators}}];
];
];
];
i++;
];

For[i=1,i<=Length[PreSARAHoperatorsLFV],
For[j=1,j<=Length[PreSARAHoperatorsLFV[[i,3]]],
If[getType[PreSARAHoperatorsLFV[[i,2,3]]]===S,
SPhenoParameters=Join[SPhenoParameters,{{PreSARAHoperatorsLFV[[i,3,j]],DeleteCases[getGen/@PreSARAHoperatorsLFV[[i,2]],0] /.a_Integer ->generation,DeleteCases[getGen/@PreSARAHoperatorsLFV[[i,2]],0]}}];,
SPhenoParameters=Join[SPhenoParameters,{{PreSARAHoperatorsLFV[[i,3,j]],DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsLFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsLFV[[i,2]],1],0]}}];
];
j++;];
i++;];

For[i=1,i<=Length[WrappersLFV],
For[j=1,j<=Length[WrappersLFV[[i,3]]],
SPhenoParameters=Join[SPhenoParameters,{{WrappersLFV[[i,3,j]],DeleteCases[DeleteCases[getGen/@WrappersLFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@WrappersLFV[[i,2]],1],0]}}];
j++;];
i++;];

For[i=1,i<=Length[PreSARAHoperatorsQFV],
For[j=1,j<=Length[PreSARAHoperatorsQFV[[i,3]]],
If[getType[PreSARAHoperatorsQFV[[i,2,3]]]===S,
SPhenoParameters=Join[SPhenoParameters,{{PreSARAHoperatorsQFV[[i,3,j]],DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],0] /.a_Integer ->generation,DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],0]}}];
SPhenoParameters=Join[SPhenoParameters,{{ToExpression[ToString[PreSARAHoperatorsQFV[[i,3,j]]]<>"SM"],DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],0] /.a_Integer ->generation,DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],0]}}];,
SPhenoParameters=Join[SPhenoParameters,{{PreSARAHoperatorsQFV[[i,3,j]],DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],1],0]}}];
SPhenoParameters=Join[SPhenoParameters,{{ToExpression[ToString[PreSARAHoperatorsQFV[[i,3,j]]]<>"SM"],DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@PreSARAHoperatorsQFV[[i,2]],1],0]}}];
];
j++;];
i++;];

For[i=1,i<=Length[WrappersQFV],
For[j=1,j<=Length[WrappersQFV[[i,3]]],
SPhenoParameters=Join[SPhenoParameters,{{WrappersQFV[[i,3,j]],DeleteCases[DeleteCases[getGen/@WrappersQFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@WrappersQFV[[i,2]],1],0]}}];

SPhenoParameters=Join[SPhenoParameters,{{ToExpression[ToString[WrappersQFV[[i,3,j]]]<>"SM"],DeleteCases[DeleteCases[getGen/@WrappersQFV[[i,2]],1],0] /.a_Integer ->generation,DeleteCases[DeleteCases[getGen/@WrappersQFV[[i,2]],1],0]}}];

j++;];
i++;];

Print["Reading files for definition of FlavorKit ",type," observables: ",Dynamic[DynamicListObservables[TYPE]] /. TYPE->type];
DynamicListObservables[type]={};
For[i=1,i<=Length[listfilesProcesses],
(* read the files *)
If[i===1,PrintDebug["Reading files for definition of FlavorKit ",type," observables: "];];
Get[listfilesProcesses[[i]]];
PrintDebug["   ... ",Transpose[NameObservables][[1]]];
DynamicListObservables[type]= Join[DynamicListObservables[type],{Transpose[NameObservables][[1]]}];

(* store the names and information about these observables *)
If[l==1,
PreSARAHobservablesLFV=Join[PreSARAHobservablesLFV,{{NameProcess,Transpose[NameObservables][[1]],ExternalStates,NeededOperators,Body}}];
PreSARAHnamesLFV=Join[PreSARAHnamesLFV,{NameProcess}];,
PreSARAHobservablesQFV=Join[PreSARAHobservablesQFV,{{NameProcess,Transpose[NameObservables][[1]],ExternalStates,NeededOperators,Body}}];
PreSARAHnamesQFV=Join[PreSARAHnamesQFV,{NameProcess}];
];


(* add all observables to the standard list in SARAH; by default, they have to be explicitly real! *)
For[j=1,j<=Length[NameObservables],
(* For[k=1,k\[LessEqual]Length[NameObservables[[j,2]]],
ListOfLowEnergyNames=Join[ListOfLowEnergyNames,{{NameObservables[[j,2,k,1]],NameObservables[[j,2,k,2]]}}];
realVar = Join[realVar,{NameObservables[[j,2,k,1]]}];
k++;]; *)
ListOfLowEnergyNames=Join[ListOfLowEnergyNames,{NameObservables[[j]]}];
realVar = Join[realVar,{NameObservables[[j,1]]}];
(*
If[l===2 && IncludeSMprediction[NameProcess]===True,
ListOfLowEnergyNames=Join[ListOfLowEnergyNames,{{ToExpression[ToString[NameObservables[[j,1]]]<>"SM"],NameObservables[[j,2]]+1}}];
realVar = Join[realVar,{ToExpression[ToString[NameObservables[[j,1]]]<>"SM"]}];
];
*)
j++;];
i++;];
l++;];

];

GeneratePreSARAHObservables[type_,file_]:=Block[{i},
SA`SPhenoTeXGlobal={};
Format[j1,TeXForm]=Format["a",OutputForm];
Format[j2,TeXForm]=Format["b",OutputForm];
Format[j3,TeXForm]=Format["c",OutputForm];
Format[j4,TeXForm]=Format["d",OutputForm];

If[type==="LFV",PreSARAHnames=PreSARAHoperatorsLFV;];
If[type==="QFV",PreSARAHnames=PreSARAHoperatorsQFV;];

Print["Generating code for FlavorKit ",type," observables: "];
Print["  ... processing: ",Dynamic[DynamicNrPS[TYPE]] /. TYPE->type ,"/",Length[PreSARAHnames]," (",Dynamic[DynamicNamePS[TYPE]] /. TYPE->type," [Diagrams: ",Dynamic[DynamicNumberDiagram[currentNameOp]]," of ",Dynamic[DynamicNumberTotalDiagram[currentNameOp]],"])"]; 

For[i=1,i<=Length[PreSARAHnames],
DynamicNrPS[type]=i;
DynamicNamePS[type]=PreSARAHnames[[i,1]];
currentNameOp=PreSARAHnames[[i,1]];
DynamicNumberDiagram[currentNameOp]=0;
DynamicNumberTotalDiagram[currentNameOp]="(Generating Diagrams)";
$sarahCurrentTeXDir=ToFileName[{$sarahCurrentOutputDir,"TeX"}];
If[FileExistsQ[$sarahCurrentTeXDir]=!=True,CreateDirectory[$sarahCurrentTeXDir];];
$sarahCurrentTeXFlavorKitDir=ToFileName[{$sarahCurrentTeXDir,"FlavorKit"}];
If[FileExistsQ[$sarahCurrentTeXFlavorKitDir]=!=True,CreateDirectory[$sarahCurrentTeXFlavorKitDir];];

$sarahSPhenoTeXDir=ToFileName[{$sarahCurrentTeXFlavorKitDir,ToString[PreSARAHnames[[i,1]]]}];
$sarahSPhenoDiagramsDir=ToFileName[{$sarahSPhenoTeXDir,"Diagrams"}];
If[FileExistsQ[$sarahSPhenoTeXDir]=!=True,
CreateDirectory[$sarahSPhenoTeXDir];
CreateDirectory[$sarahSPhenoDiagramsDir];
];
WriteMakeTeXobservable[ToString[PreSARAHnames[[i,1]]]];
sphenoTeX=OpenWrite[ToFileName[$sarahSPhenoTeXDir,"Observable_"<>ToString[PreSARAHnames[[i,1]]]<>".tex"]];
WriteString[sphenoTeX,"\\documentclass[A4,landscape]{article} \n"];
WriteString[sphenoTeX,"\\usepackage{amsmath}\n"];
WriteString[sphenoTeX,"\\usepackage[T1]{fontenc}\n"];
WriteString[sphenoTeX,"\\usepackage{amssymb}\n"];
WriteString[sphenoTeX,"\\usepackage{feynmp}\n"];
WriteString[sphenoTeX,"\\usepackage{hyperref}\n"];
WriteString[sphenoTeX,"\\usepackage{longtable}\n"];
WriteString[sphenoTeX,"\\DeclareGraphicsRule{*}{mps}{*}{}\n"];
WriteString[sphenoTeX,"\\graphicspath{{./Diagrams/}}\n"];
WriteString[sphenoTeX,"\\textwidth 25cm\n"];
WriteString[sphenoTeX,"\\evensidemargin -1.0cm\n"];
WriteString[sphenoTeX,"\\oddsidemargin -1.0cm\n"];

WriteString[sphenoTeX,"\\begin{document}\n"];
WriteString[sphenoTeX, "\\title{Analytical expressions for the form factors of "<>ToString[PreSARAHnames[[i,1]]] <>"\\\\ in the "<>Model`NameLaTeX<>" } \n "];
WriteString[sphenoTeX, "\\author{SARAH "<>SA`Version<>"} \n"];
WriteString[sphenoTeX," \\maketitle \n"];
WriteString[sphenoTeX," \\vspace{10cm} \n"];

WriteString[sphenoTeX, "This file was automatically generated by SARAH version "<>SA`Version<>".  \\\\ \n"];
WriteString[sphenoTeX, "References: {\\bf arXiv: 1309.7223 }, {\\bf Comput.Phys.Commun.184:1792-1809,2011 (1207.0906) }, {\\bf Comput.Phys.Commun.182:808-833,2011 (1002.0840) }, {\\bf Comput.Phys.Commun.181:1077-1086,2010 (0909.2863) }, {\\bf arXiv: 0806.0538 } \\\\ \n"];
WriteString[sphenoTeX, "Package Homepage: projects.hepforge.org/sarah/ \\\\ \n"];
WriteString[sphenoTeX, "by {\\bf Florian Staub, fnstaub@th.physik.uni-bonn.de} \n"];
WriteString[sphenoTeX," \\pagebreak \n"];
 WriteString[sphenoTeX," \\tableofcontents \n"];
WriteString[sphenoTeX," \\pagebreak \n"];
Generate[PreSARAHnames[[i,1]]][file];

WriteString[sphenoTeX,"\\end{document}\n"];
Close[sphenoTeX];
i++;];

DynamicNamePS[type] = "All Done";

If[type==="LFV",PreSARAHnames=PreSARAHobservablesLFV;];
If[type==="QFV",PreSARAHnames=PreSARAHobservablesQFV;];

Print["Write Routines to calculate observables: ",Dynamic[DynamicObsNr[type]],"/",Length[PreSARAHnames]," (",Dynamic[DynamicObsName[type]],")"];
For[i=1,i<=Length[PreSARAHnames],
DynamicObsNr[type]=i;
DynamicObsName[type]=PreSARAHnames[[i,2]];
GenerateRoutineObservables[type,PreSARAHnames[[i]],sphenoFlavorKitObs];
i++;];
DynamicObsName[type]="All Done";
];

GenerateRoutineObservables[type_,{process_,observables_,states_,Ops_,body_},file_]:=Block[{i,j,k,temp},
PrintDebug["Write Routine to calculate: ",observables];
MakeSubroutineTitle["Calculate_"<>process,{},ToString/@Ops,ToString/@observables,file];
WriteString[file, "Implicit None \n"];
(*
For[i=1,i\[LessEqual]Length[Ops],
WriteString[file,"Complex(dp), Intent(in) :: "<>ToString[Ops[[i]]]<>"(:) \n"];
i++;]; *)
MakeVariableList[Ops,"",file];
For[i=1,i<=Length[observables],
WriteString[file,"Real(dp), Intent(out) :: "<>ToString[observables[[i]]]<>" \n"];
i++;];

WriteString[file,"\n \n ! #####+ Beging user defined body \n"];
AppendSourceCodePreSARAH[ToFileName[ToFileName[{type,"Observables"}],body],file];
WriteString[file,"\n \n ! ###### End user defined body \n"];

WriteString[file,"End Subroutine Calculate_"<>process <>"\n\n"];
];

WriteMakeTeXobservable[name_]:=Block[{},
makeFile=OpenWrite[ToFileName[$sarahSPhenoTeXDir,"MakePDF_"<>name<>".sh"]];
WriteString[makeFile,"#!/bin/bash \n"];
WriteString[makeFile,"pdflatex Observable_"<>name<>".tex \n"];
WriteString[makeFile,"cd Diagrams \n"];
WriteString[makeFile,"find . -name \"*.mp\" -exec mpost {} \\; \n"]; 
WriteString[makeFile,"cd .. \n"];
WriteString[makeFile,"pdflatex  Observable_"<>name<>".tex \n"];
WriteString[makeFile,"echo \"\" \n"];
WriteString[makeFile,"echo \"PDF for Observable "<>name<>" finished\" \n"];
WriteString[makeFile,"echo \"Thanks for using SARAH\" \n"];
WriteString[makeFile,"echo \"\" \n"];
Close[makeFile];
];

AppendSourceCodePreSARAH[file_,output_]:= Block[{cfile=ToFileName[$preSARAHdir,file],t,copy},
(* Function to read Fortran source code from an input file ('file') and to glue it to another file ('output') without any changes *)

If[FileExistsQ[cfile]===False,Print[file,"  does not exist"];Abort[];];

copy=OpenRead[cfile];
t=False;
While[t =!= EndOfFile,
 t = Read[copy, String,NullRecords->True];
If[t=!="",
If[t=!= EndOfFile,
If[StringTake[t,{1}]==="@", WriteString[output,ToExpression[StringDrop[t,{1}]]];, WriteString[output,t];];
WriteString[output, "\n"];
];,
WriteString[output, "\n"];
];
    ];
Close[copy];
];

RemoveCrossedDiagrams[list_,field_,type_]:=Block[{i,temp,res,l1,l2},
res=list;
Switch[type,
"wave",
	If[field[[2]]===field[[4]],res=Select[res,FreeQ[{5,6,11,12},(InsertionOrder/.#[[2]])]&];];
	If[field[[2]]===field[[3]],res=Select[res,FreeQ[{3,4,9,10},(InsertionOrder/.#[[2]])]&];];
	,
"penguin",
	If[field[[2]]===field[[4]],res=Select[res,FreeQ[{3,6},(InsertionOrder/.#[[2]])]&];];
	If[field[[2]]===field[[3]],res=Select[res,FreeQ[{2,5},(InsertionOrder/.#[[2]])]&];];
	,
"tree",
	If[field[[2]]===field[[4]],res=Select[res,FreeQ[{3},(InsertionOrder/.#[[2]])]&];];
	If[field[[2]]===field[[3]],res=Select[res,FreeQ[{2},(InsertionOrder/.#[[2]])]&];];
	,
"box",

temp=list;
res={};
added={};
dropped={};
l1={};
l2={};
(* sort: first fermions as Internal[1]; necessary to generalize? *)

For[i=1,i<=Length[list],
If[getType[Internal[1]/. list[[i,2]]]===F,
l1=Join[l1,{list[[i]]}];,
l2=Join[l2,{list[[i]]}];
];
i++;];

If[field[[2]]===field[[4]],
check={Internal[4],Internal[3],Internal[2],Internal[1]};
temp=Join[l1,l2];,
check={Internal[4],Internal[3],Internal[2],Internal[1]}; (* it's the same because another topology contributes *)
temp=Join[l1,l2];
];
For[i=1,i<= Length[temp],
If[FreeQ[added,RE/@(check/.temp[[i,2]]) ],
added=Join[added,{RE/@({Internal[1],Internal[2],Internal[3],Internal[4]}/.temp[[i,2]])}];
res=Join[res,{temp[[i]]}];,
dropped=Join[dropped,{temp[[i]]}];
];
i++;];
];
(* Print["total :", Length[list]," kept:",Length[res]]; *)
Return[res];

];





