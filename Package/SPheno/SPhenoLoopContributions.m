(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
SMparticles={VectorP,VectorW,VectorZ,VectorG,TopQuark,BottomQuark,Electron,Neutrino,ChargedHiggs,PseudoScalar,HiggsBoson,getGhost[VectorP],getGhost[VectorZ],getGhost[VectorG],getGhost[VectorW],getGhost[conj[VectorW]]};
CheckSM[list_]:=Length[Intersection[SMparticles,list/.{bar[a_]->a,conj[a_]->a}]]==Length[Intersection[list/.{bar[a_]->a,conj[a_]->a}]];
WriteGoldstoneCheck[file_,particles_]:=Block[{temp,ifstring,ifstring2,listT},
listT={HiggsBoson,PseudoScalar,ChargedHiggs};
listT=Select[listT,(getGen[#]>1)&];
(* temp=Select[particles,MemberQ[{HiggsBoson,PseudoScalar,ChargedHiggs},#[[1]]/.{bar[a_]\[Rule]a,conj[a_]\[Rule]a}]&]; *)
temp=Select[particles,MemberQ[listT,#[[1]]/.{bar[a_]->a,conj[a_]->a}]&];
ifstring="("<>ToString[#[[2]]]<>".eq.1)"&/@temp;
ifstring=Riffle[ifstring,".and."];
temp=Select[particles,MemberQ[{(*HiggsBoson, *)TopQuark,BottomQuark,Electron,Neutrino},#[[1]]/.{bar[a_]->a,conj[a_]->a}]&];
ifstring2="("<>ToString[#[[2]]]<>".lt.4)"&/@temp;
ifstring2=Riffle[ifstring2,".and."];
If[ifstring=!={} && ifstring2=!= {},
ifstring=ifstring<>".and."<>ifstring2;,
If[ifstring2=!={},ifstring=ifstring2];
];
If[ifstring=!={},
WriteString[file,"   If ("<>ifstring<>") Then\n"];
Return[True];,
Return[False];
];
];

(* this procedure writes variables, which allow to leave out generations of particles (e.g in case when we want to consider only Goldstones) *)
GetGenerationFlag[particle_]:=Block[{FlagList,tempGen},
FlagList={{Ah,"genAh"},{hh,"genhh"},{Cha,"genCha"},{Hpm,"genHpm"},{conj[Hpm],"genHpm"},{bar[Cha],"genCha"}};
tempGen=getGenSPheno[particle];
Map[(If[particle===#[[1]],tempGen=#[[2]]])&,FlagList];
Return[tempGen];
];

(* it's by default only used for bug fixing but not in the standard output *)
GetGenerationFlag[particle_]:=getGenSPheno[particle];


(* ::Input::Initialization:: *)
AddPenguinContributions2[list_,resFFVscalar_,resFFVvector_,resSSV_,resFFSscalar_,resFFSvector_,resSSS_,resVVV_,resSVV_,initial_,final_,V3Needed_,mb_,goldstones_,file_]:=Block[{i,j,k,cfactor,i1,i2,i3},


(* This function take a list of diagrams and uses known, analytical expression to write the ampltiude to the Fortran code. The 'names' of the expression for the amplitudes have to agree with the names used in the function 'AddPenguinResult' below. Note, it is assumed that two external particles are always fermions (that's the only case we need for the low-energy observables!). *)
(* The input parameters are the following: *)
(* - list: the list of diagrams (created by InsertFields) *)
(* - resFFVscalar: diagram with two internal fermions coupled to a (external) vector boson. The other particle in the loop is a scalar *)
(* - resFFVvector: diagram with two internal fermions coupled to a (external) vector boson. The other particle in the loop is a vector *)
(* - resSSV: diagram with two internal scalars coupled to a (external) vector. The other particles has to be a fermion, of course *)
(* - resFFSscalar: diagram with two internal fermions coupled to a (external) scalar. The other particle in the loop is a scalar *)
(* - resFFSvector: diagram with two internal fermions coupled to a (external) scalar. The other particle in the loop is a vector *)
(* - resSSS: diagram with two internal scalars coupled to a (external) scalar. The other particles has to be a fermion, of course *)
(* - resVVV: diagram with two internal vectors coupled to a (external) vector. The other particles has to be a fermion, of course *)
(* - inital: can be used to refer to some function which is added BEFORE the calcualtion of the diagrams. This function has also to be saved in 'AddPenguinResult' *)
(* - final: can be used to refer to some function which is added AFTER the calcualtion of the diagrams. This function has also to be saved in 'AddPenguinResult' *)
(* - V3Needed: statement, if it is necessary to write also the third vertex. (has been used in older version for photonic penguins, but is now always set to True. Will be removed in future) *)
(* - mb: (m)ass(b)ound: what is the mass threshold to include a diagram. Normally, this corresponds to the mass of the decaying particle *)
(* - goldstone: (True/False): defines, if the Goldstone contributions are added explicitly (True) or if they are already included in the expression for the corresponding vector bosons (False). => the used results have been calculated in different gauge in literature *)
(* - file: name of the output file *)


For[j=1,j<=Length[list], (* loop over all diagrams *)

(* if the penguin is only part of a process with 4 external particles, it is assumed that the third particle involved in the penguin diagram is the propagator which connects the external fields.  *)

prop = External[3] /. list[[j,2]]; 


(* pick the current diagram *)
penguin = list[[j]];

(* write some inital statements to the file if defined *)
AddPenguinResult[initial,file];


(* Calculate the charge factor, i.e. take care of color factors or group theoretical factors like Dynkin/Casimir indices. *)
cfactor = getChargeFactor[penguin,{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{External[3],ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}}} /. penguin[[2]]];

WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];


(* get the SPheno specific names for the first two vertices by using the list SPhenoCouplingsAll (which includes ALL couplings at tree level ) *)
c1=getSPhenoCoupling2[penguin[[1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[penguin[[1,2]],SPhenoCouplingsAll];

(* generate the index structure; external particles are getting indices gt1, gt2, internal particles getting indices i1, i2, i3 *)
ind1 = MakeIndicesCoupling[{External[1],gt1}/.penguin[[2]],{Internal[1],i1}/.penguin[[2]],{AntiField[Internal[2]],i2}/.penguin[[2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{External[2],gt2}/.penguin[[2]],{AntiField[Internal[1]],i1}/.penguin[[2]],
{Internal[3],i3}/.penguin[[2]],c2[[2]]]; 

(* do the same for the third vertex. As said, this separation will be removed sometimes since it became superflous.  *)
If[V3Needed ==True,
c3=getSPhenoCoupling2[penguin[[1,3]],SPhenoCouplingsAll];
(* ind3 = MakeIndicesCoupling[{External[3],gt3}/.penguin[[2]],{Internal[2],i2}/.penguin[[2]],{AntiField[Internal[3]],i3}/.penguin[[2]],c3[[2]]]; *)
ind3 = MakeIndicesCoupling[{External[3],gt3}/.penguin[[2]],{AntiField[Internal[3]],i3}/.penguin[[2]],{Internal[2],i2}/.penguin[[2]],c3[[2]]];
(* some special check is necessary to get the correct sign for a coupling involving a scalar, a pseudo scalar and a vector boson. This has to be improved and 'getSPhenoCoupling2' should take care already of that issue *)

(*check sign of Lorentz part*)
If[getVertexType[penguin[[1,3]]]===SSV||getVertexType[penguin[[1,3]]]===VVV,
c3[[1]] = getSignVertexOLD[(Cp[External[3],AntiField[Internal[3]],Internal[2]] /.penguin[[2]]),c3[[2]],getVertexType[penguin[[1,3]]]]c3[[1]];
If[getVertexType[penguin[[1,3]]]===SSV , c3[[1]]=-c3[[1]]]; (* SPheno conventions opposite to FeynArts ! *)
];
(* Check for clashing vertices *)
If[getVertexType[penguin[[1,1]]]===FFS && (getVertexType[penguin[[1,3]]]===FFS || getVertexType[penguin[[1,3]]]===FFV) && Length[Select[List@@Cp[External[1],AntiField[Internal[2]],Internal[1]] /.penguin[[2]],Head[#]===bar&]]=!=1 &&  
Intersection[MajoranaPart,RE/@({External[1],AntiField[Internal[2]],Internal[1],Internal[3]} /.penguin[[2]])]==={} &&   RE[Internal[2]/.penguin[[2]]]=== RE[Internal[3]/.penguin[[2]]](* && (conj[External[3]] /.penguin[[2]])===(External[3] /.penguin[[2]]) *),
c3[[1]]=-Reverse[c3[[1]]];
];
(*
If[getVertexType[penguin[[1,3]]]===FFV,
If[(AntiField[Internal[3]]/.penguin[[2]])===(c3[[2,1]] /. A_[{b__}]\[Rule]A) && ( Internal[2]/.penguin[[2]])===(c3[[2,2]]/. A_[{b__}]\[Rule]A) &&   RE[Internal[2]/.penguin[[2]]]=!= RE[Internal[3]/.penguin[[2]]],
c3[[1]]=-Reverse[c3[[1]]];
];
];
*)
c3=CheckFermionFlip[{External[3],Internal[2],AntiField[Internal[3]]}/. penguin[[2]],c3];
];


(*
c1=CheckFermionFlip[{External[1],Internal[1],AntiField[Internal[2]]} /. penguin[[2]],c1];
c2=CheckFermionFlip[{External[2],AntiField[Internal[1]],Internal[3]} /. penguin[[2]],c2];
*)



(* save the names of the internal particles in handy names *)
p1=(Internal[1] /.penguin[[2]]);
p2 =(Internal[2] /. penguin[[2]]);
p3 =(Internal[3] /. penguin[[2]]);

(* check, if goldstone bosons are involved, ie. start always with the first generation. Otherwise, the loops in the following have to start with the first PHYSICAL state. The corresponding generation index is returned by 'getGenSPhenoStart' *)
If[goldstones==True,
start1=1; start2=1; start3=1;,
start1=getGenSPhenoStart[p1]; start2=getGenSPhenoStart[p2]; start3=getGenSPhenoStart[p3];
];

(* It is possible to switch on/off diagrams involving specific particles using the LesHouches input file. If this is demanded, the corresponding check is written now to the file *)
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.IncludePenguins) Then \n"];
];

(* The loops in the Fortran code over all internal particles start here *)
If[getGenSPheno[p1]>1 || start1>1 ,WriteString[file,"Do i1= "<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1 || start2 > 1,WriteString[file,"  Do i2= "<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[V3Needed ==True (* || getGenSPheno[p2]=!=getGenSPheno[p3] *),
If[getGenSPheno[p3]>1 || start3 > 1,WriteString[file,"   Do i3= "<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];,
If[getGenSPheno[p3]>1 || start3 > 1,WriteString[file,"   i3 = i2\n"];];
];


(* This includes the check if the mass threshold is passed to include the current diagram: at least one particle in the loop has to be heavier than the given mass bound (mb), which corresponds normally the mass of the decaying particle *)
WriteString[file, "  If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>")) Then\n"];


(* Write the expression for the vertices to file. The function 'WriteVertexToFile' creates variable called 'coupXL, coupXR' for chiral couplings  or coupX for scalar couplings (X: number of vertex. These vertices can then be used easily in the calculation of the amplitudes *)
(* Print[1,"  ",c1,ind1,getVertexType[penguin[[1,1]]]];
Print[c2,ind2,getVertexType[penguin[[1,2]]]]; *)
WriteVertexToFile[1,c1,ind1,getVertexType[penguin[[1,1]]],file];
WriteVertexToFile[2,c2,ind2,getVertexType[penguin[[1,2]]],file];
If[V3Needed ==True  (*|| getGenSPheno[p2]=!=getGenSPheno[p3]*), WriteVertexToFile[3,c3,ind3,getVertexType[penguin[[1,3]]],file]; ];


(* It's now neceessary to check for the generic type of the diagram. This is done in two steps: *)
(* (i) 'getVertexType' returns the generic type of a specific vertex, e.g. FFS (fermion-fermion-scalar), VVV (triple-vector), SVV (scalar-vector-vecgor). This is first done for the third coupling of the penguin diagram.  *)
(* (ii) if the first check doesn't lead to an unique possibility (like SSS or VVV do), also the first vertex in the diagram is checked. *)
(* These checks identify uniquely the generic type of the particles in the loop and of the external particles. This information is also saved in variables like 'currentScalarX' or 'currentFemrion' which are used in the amplitudes to referr to these particles. The corresponding indices are saved in variables called 'IndexScalarX' or 'IndexFermionX' *)

SA`currentVertexTypeLow23 = getVertexType[penguin[[1,3]]];
Switch[getVertexType[penguin[[1,3]]],
FFS,
	Switch[getVertexType[penguin[[1,1]]],
	FFS,
	
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFSscalar,file];,

	FFV,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;	
	AddPenguinResult[resFFSvector,file];
	];,	

SSS,
	currentFermion1=p1; IndexFermion1=i1;
	currentScalar1 =p2; IndexScalar1=i2;
	currentScalar2 =p3;IndexScalar2=i3;
	AddPenguinResult[resSSS,file];,


FFV,
	Switch[getVertexType[penguin[[1,2]]],
	FFS,
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFVscalar,file];,

	FFV,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFVvector,file];
	];,	


SSV,
	(* first assumption: Vector is external *)
	currentFermion1=p1; IndexFermion1=i1;
	currentScalar1 =p2; IndexScalar1=i2;
	currentScalar2 =p3;IndexScalar2=i3;
	(* for the case that the scalar is the external particle ... *)
	If[getVertexType[penguin[[1,2]]]===FFV,
	currentScalar1=p2; IndexScalar1=i2;
	currentVector1=p3; IndexVector1=i3;
	flagFirstVertexFFV=0;
	];
	If[getVertexType[penguin[[1,1]]]===FFV,
	currentScalar1=p3; IndexScalar1=i3;
	currentVector1=p2; IndexVector1=i2;
	flagFirstVertexFFV=1;
	];
	AddPenguinResult[resSSV,file];,

SVV,
	(*first assumption: Scalar is external *)
	currentFermion1=p1; IndexFermion1=i1;
	currentVector1=p2; IndexVector1=i2;
	currentVector2=p3; IndexVector2=i3;
	If[getVertexType[penguin[[1,1]]]===FFS,
	If[getVertexType[penguin[[1,2]]]===FFV,
	currentFermion1=p1;IndexFermion1=i1;
	currentScalar1=p2; IndexScalar1=i2;
	currentVector1=p3;IndexVector1=i3;
	flagFirstVertexFFV=0;
	];,
	If[getVertexType[penguin[[1,2]]]===FFS,
	currentFermion1=p1;IndexFermion1=i1;
	currentScalar1=p3;IndexScalar1=i3;
	currentVector1=p2;IndexVector1=i2;
	flagFirstVertexFFV=1;
	];
	];
	AddPenguinResult[resSVV,file];,

VVV,
	currentFermion1=p1; IndexFermion1=i1;
	currentVector1 =p2; IndexVector1=i2;
	currentVector2 =p3;IndexVector2=i3;
	AddPenguinResult[resVVV,file];
];

WriteString[file,"End if \n"];

(* here, the loops over the internal field generations finish *)
If[getGenSPheno[p1]>1 || start1 > 1,WriteString[file,"   End Do\n"];];
If[getGenSPheno[p2]>1 || start2 > 1,WriteString[file,"  End Do\n"];];
If[V3Needed==True (*|| getGenSPheno[p2]=!=getGenSPheno[p3] *),
If[getGenSPheno[p3]>1 || start3 > 1,WriteString[file,"End Do\n"];];
];
If[FlagLoopContributions===True,
WriteString[file, "End if \n"];
];


(* it might be necessary to add some code after the calculation of the diagram. This is done now, if 'final' is not set to None in the input *)
AddPenguinResult[final,file];
WriteString[file,"\n\n"];

j++;];

];



AddVertexContributions2[list_,resFFS_,resFFV_,initial_,final_,mb_,goldstone_,file_]:=Block[{i,j,k,i1,i2,i3},
AddWaveResult[initial,file];

For[j=1,j<=Length[list],
wave = list[[j]];

c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[wave[[1,2]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[wave[[1,3]],SPhenoCouplingsAll];


ind1 = MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{Internal[3],i3}/.wave[[2]],{Internal[2],i2}/.wave[[2]],
{AnitField[Internal[1]],i1}/.wave[[2]],c2[[2]]]; 
ind3 =MakeIndicesCoupling[{External[2],gt2}/.wave[[2]],{External[3],gt3}/.wave[[2]],
{AntiField[Internal[3]],i3}/.wave[[2]],c2[[2]]]; 

p1=(Internal[1] /.wave[[2]]);
p2 =(Internal[2] /. wave[[2]]);
p3 =(Internal[3] /. wave[[2]]);



If[goldstones==True,
start1=1; start2=1; start3=1;,
start1=getGenSPhenoStart[p1]; start2=getGenSPhenoStart[p2]; start3=getGenSPhenoStart[p3];
];

If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>")) Then \n"];
];
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"   Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];


WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>")) Then\n"];


WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
WriteVertexToFile[2,c2,ind2,getVertexType[wave[[1,2]]],file];
WriteVertexToFile[3,c3,ind3,getVertexType[wave[[1,3]]],file];

Switch[getVertexType[wave[[1,1]]],
	FFS,
	If[getType[p1]===S,
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;,
	currentScalar1=p2; IndexScalar1=i2;
	currentFermion1 =p1; IndexFermion1=i1;
	];
	AddVertexResult[resFFS,file];,

	FFV,
	If[getType[p1]===V,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;,
	currentVector1=p2; IndexVector1=i2;
	currentFermion1 =p1; IndexFermion1=i1;
	];	
	AddVertexResult[resFFV,file];
	];

WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
If[FlagLoopContributions===True,WriteString[file,"End if\n"];];
WriteString[file,"\n\n"];
AddVertexResult[final,file];
WriteString[file,"\n\n"];
j++;];

];




AddBoxContributions2[box_,resFFS_,resFFSFFV_,resFFV_,initial_,final_,mb_,goldstone_,file_]:=Block[{start1,start2,start3,start4,i1,i2,i3,i4},
For[i=1,i<=Length[box],
p1=(Internal[1] /.box[[i,2]]);
p2 =(Internal[2] /. box[[i,2]]);
p3 =(Internal[3] /. box[[i,2]]);
p4 =(Internal[4] /. box[[i,2]]);

WriteString[file,"! "<>ToString[p1] <>","<>ToString[p2] <>","<>ToString[p3] <>","<>ToString[p4] <>"\n"]; 

CurrentInsertionOrder = InsertionOrder /. box[[i,2]];

AddBoxResult[initial,file];

cfactor = getChargeFactor[box[[i]],{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[4]],in4}},
{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[2],in2}},
{{External[3],ex3},{AntiField[Internal[2]],in2},{Internal[3],in3}},{{External[4],ex4},{AntiField[Internal[3]],in3},{Internal[4],in4}}} /. box[[i,2]]];



WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

c1=getSPhenoCoupling2[box[[i,1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[box[[i,1,2]],SPhenoCouplingsAll];
c3=getSPhenoCoupling2[box[[i,1,3]],SPhenoCouplingsAll];
c4=getSPhenoCoupling2[box[[i,1,4]],SPhenoCouplingsAll];

ind1 = MakeIndicesCoupling[{External[1],Index[1]}/.box[[i,2]],{Internal[1],i1}/.box[[i,2]],{AntiField[Internal[4]],i4}/.box[[i,2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{External[2],Index[2]}/.box[[i,2]],{AntiField[Internal[1]],i1}/.box[[i,2]],{Internal[2],i2}/.box[[i,2]],c2[[2]]]; 
ind3 = MakeIndicesCoupling[{External[3],Index[3]}/.box[[i,2]],{AntiField[Internal[2]],i2}/.box[[i,2]],{Internal[3],i3}/.box[[i,2]],c3[[2]]];
ind4 = MakeIndicesCoupling[{External[4],Index[4]}/.box[[i,2]],{Internal[4],i4}/.box[[i,2]],{AntiField[Internal[3]],i3}/.box[[i,2]],c4[[2]]];


If[goldstone===True,
start1=1; start2=1; start3=1; start4=1;,
start1=getGenSPhenoStart[p1]; start2=getGenSPhenoStart[p2]; start3=getGenSPhenoStart[p3]; start4=getGenSPhenoStart[p4];
];

If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>").and.("<>SPhenoIncludeLoop[getBlank[p4]]<>").and.IncludeBoxes) Then \n"];
];
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[GetGenerationFlag[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[GetGenerationFlag[p2]]<>"\n"];];
If[getGenSPheno[p3]>1,WriteString[file,"    Do i3="<>ToString[start3]<>","<> ToString[GetGenerationFlag[p3]]<>"\n"];];
If[getGenSPheno[p4]>1,WriteString[file,"      Do i4="<>ToString[start4]<>","<> ToString[GetGenerationFlag[p4]]<>"\n"];];

WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p4,i4]<>".gt."<>mb<>")) Then\n"];

WriteVertexToFile[1,c1,ind1,getVertexType[box[[i,1,1]]],file];
WriteVertexToFile[2,c2,ind2,getVertexType[box[[i,1,2]]],file];
WriteVertexToFile[3,c3,ind3,getVertexType[box[[i,1,3]]],file];
WriteVertexToFile[4,c4,ind4,getVertexType[box[[i,1,4]]],file];

Switch[C[getVertexType[box[[i,1,1]]],getVertexType[box[[i,1,3]]]],
C[FFS,FFS],
If[getType[p1]===F,
currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; IndexFermion2=i3;
currentScalar1=p2; currentScalar2=p4; IndexScalar1=i2; IndexScalar2=i4;,
currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; IndexFermion2=i4;
currentScalar1=p1; currentScalar2=p3; IndexScalar1=i1; IndexScalar2=i3;
];
AddBoxResult[resFFS,file];,

C[FFV,FFS],
If[getType[p1]===F,
If[getType[p4]===S,
currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; IndexFermion2=i3;
currentVector1=p2; currentScalar1=p4; IndexVector1=i2; IndexScalar1=i4;,
currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; IndexFermion2=i3;
currentVector1=p4; currentScalar1=p2; IndexVector1=i4; IndexScalar1=i2;
];,
If[getType[p1]===S,
currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; IndexFermion2=i4;
currentVector1=p3; currentScalar1=p1; IndexVector1=i3; IndexScalar1=i1;,
currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; IndexFermion2=i4;
currentVector1=p1; currentScalar1=p3; IndexVector1=i1; IndexScalar1=i3;
];
];
AddBoxResult[resFFSFFV,file];,

C[FFV,FFV],
If[getType[p1]===F,
currentFermion1=p1; currentFermion2=p3; IndexFermion1=i1; IndexFermion2=i3;
currentVector1=p2; currentVector2=p4; IndexVector1=i2; IndexVector2=i4;,
currentFermion1=p2; currentFermion2=p4; IndexFermion1=i2; IndexFermion2=i4;
currentVector1=p1; currentVector2=p3; IndexVector1=i1; IndexVector2=i3;
];
AddBoxResult[resFFV,file];
];

WriteString[file, "End if \n"];

If[getGenSPheno[p1]>1,WriteString[file,"    End Do \n"];];
If[getGenSPheno[p2]>1,WriteString[file,"   End Do \n"];];
If[getGenSPheno[p3]>1,WriteString[file,"  End Do \n"];];
If[getGenSPheno[p4]>1,WriteString[file,"End Do \n"];];
If[FlagLoopContributions===True,WriteString[file, "End if \n"];];

AddBoxResult[final,file];
WriteString[file, "\n\n "];
i++;];


];


(* ::Input::Initialization:: *)
(*
AddPenguinContributions2[list_,resFFVscalar_,resFFVvector_,resSSV_,resFFSscalar_,resFFSvector_,resSSS_,resVVV_,resSVV_,initial_,final_,V3Needed_,mb_,goldstones_,file_]:=Block[{i,j,k,cfactor},


(* This function take a list of diagrams and uses known, analytical expression to write the ampltiude to the Fortran code. The 'names' of the expression for the amplitudes have to agree with the names used in the function 'AddPenguinResult' below. Note, it is assumed that two external particles are always fermions (that's the only case we need for the low-energy observables!). *)
(* The input parameters are the following: *)
(* - list: the list of diagrams (created by InsertFields) *)
(* - resFFVscalar: diagram with two internal fermions coupled to a (external) vector boson. The other particle in the loop is a scalar *)
(* - resFFVvector: diagram with two internal fermions coupled to a (external) vector boson. The other particle in the loop is a vector *)
(* - resSSV: diagram with two internal scalars coupled to a (external) vector. The other particles has to be a fermion, of course *)
(* - resFFSscalar: diagram with two internal fermions coupled to a (external) scalar. The other particle in the loop is a scalar *)
(* - resFFSvector: diagram with two internal fermions coupled to a (external) scalar. The other particle in the loop is a vector *)
(* - resSSS: diagram with two internal scalars coupled to a (external) scalar. The other particles has to be a fermion, of course *)
(* - resVVV: diagram with two internal vectors coupled to a (external) vector. The other particles has to be a fermion, of course *)
(* - inital: can be used to refer to some function which is added BEFORE the calcualtion of the diagrams. This function has also to be saved in 'AddPenguinResult' *)
(* - final: can be used to refer to some function which is added AFTER the calcualtion of the diagrams. This function has also to be saved in 'AddPenguinResult' *)
(* - V3Needed: statement, if it is necessary to write also the third vertex. (has been used in older version for photonic penguins, but is now always set to True. Will be removed in future) *)
(* - mb: (m)ass(b)ound: what is the mass threshold to include a diagram. Normally, this corresponds to the mass of the decaying particle *)
(* - goldstone: (True/False): defines, if the Goldstone contributions are added explicitly (True) or if they are already included in the expression for the corresponding vector bosons (False). => the used results have been calculated in different gauge in literature *)
(* - file: name of the output file *)


For[j=1,j\[LessEqual]Length[list], (* loop over all diagrams *)

(* if the penguin is only part of a process with 4 external particles, it is assumed that the third particle involved in the penguin diagram is the propagator which connects the external fields.  *)

prop = External[3] /. list[[1,2]]; 


(* write some inital statements to the file if defined *)
AddPenguinResult[initial,file];

(* pick the current diagram *)
penguin = list[[j]];


(* Calculate the charge factor, i.e. take care of color factors or group theoretical factors like Dynkin/Casimir indices. *)
cfactor = getChargeFactor[penguin,{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[3],in3}},
{{External[3],ex3},{Internal[2],in2},{AntiField[Internal[3]],in3}}} /. penguin[[2]]];

WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];


(* get the SPheno specific names for the first two vertices by using the list SPhenoCouplingsAll (which includes ALL couplings at tree level ) *)
c1=getSPhenoCoupling2[penguin[[1,1]],SPhenoCouplingsAll];
c2=getSPhenoCoupling2[penguin[[1,2]],SPhenoCouplingsAll];

(* generate the index structure; external particles are getting indices gt1, gt2, internal particles getting indices i1, i2, i3 *)
ind1 = MakeIndicesCoupling[{External[1],gt1}/.penguin[[2]],{Internal[1],i1}/.penguin[[2]],{AntiField[Internal[2]],i2}/.penguin[[2]],c1[[2]]];
ind2 =MakeIndicesCoupling[{External[2],gt2}/.penguin[[2]],{AntiField[Internal[1]],i1}/.penguin[[2]],
{Internal[3],i3}/.penguin[[2]],c2[[2]]]; 

(* do the same for the third vertex. As said, this separation will be removed sometimes since it became superflous.  *)
If[V3Needed \[Equal]True,
c3=getSPhenoCoupling2[penguin[[1,3]],SPhenoCouplingsAll];
ind3 = MakeIndicesCoupling[{External[3],gt3}/.penguin[[2]],{Internal[2],i2}/.penguin[[2]],{AntiField[Internal[3]],i3}/.penguin[[2]],c3[[2]]];
If[getVertexType[penguin[[1,3]]]===SSV ||  getVertexType[penguin[[1,3]]]===VVV,
(* some special check is necessary to get the correct sign for a coupling involving a scalar, a pseudo scalar and a vector boson. This has to be improved and 'getSPhenoCoupling2' should take care already of that issue *)
c3[[1]] = getSignVertex[(Cp[External[3],Internal[2],AntiField[Internal[3]]] /.penguin[[2]]),c3[[2]],getVertexType[penguin[[1,3]]]]c3[[1]];
]; 
];


(* save the names of the internal particles in handy names *)
p1=(Internal[1] /.penguin[[2]]);
p2 =(Internal[2] /. penguin[[2]]);
p3 =(Internal[3] /. penguin[[2]]);

(* check, if goldstone bosons are involved, ie. start always with the first generation. Otherwise, the loops in the following have to start with the first PHYSICAL state. The corresponding generation index is returned by 'getGenSPhenoStart' *)
If[goldstones\[Equal]True,
start1=1; start2=1; start3=1;,
start1=getGenSPhenoStart[p1]; start2=getGenSPhenoStart[p2]; start3=getGenSPhenoStart[p3];
];

(* It is possible to switch on/off diagrams involving specific particles using the LesHouches input file. If this is demanded, the corresponding check is written now to the file *)
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.("<>SPhenoIncludeLoop[getBlank[p3]]<>")) Then \n"];
];

(* The loops in the Fortran code over all internal particles start here *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1= "<>ToString[start1]<>","<> ToString[getGenSPheno[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2= "<>ToString[start2]<>","<> ToString[getGenSPheno[p2]]<>"\n"];];
If[V3Needed \[Equal]True (* || getGenSPheno[p2]=!=getGenSPheno[p3] *),
If[getGenSPheno[p3]>1,WriteString[file,"   Do i3= "<>ToString[start3]<>","<> ToString[getGenSPheno[p3]]<>"\n"];];,
If[getGenSPheno[p3]>1,WriteString[file,"   i3 = i2\n"];];
];


(* This includes the check if the mass threshold is passed to include the current diagram: at least one particle in the loop has to be heavier than the given mass bound (mb), which corresponds normally the mass of the decaying particle *)
WriteString[file, "  If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p3,i3]<>".gt."<>mb<>")) Then\n"];


(* Write the expression for the vertices to file. The function 'WriteVertexToFile' creates variable called 'coupXL, coupXR' for chiral couplings  or coupX for scalar couplings (X: number of vertex. These vertices can then be used easily in the calculation of the amplitudes *)
WriteVertexToFile[1,c1,ind1,getVertexType[penguin[[1,1]]],file];
WriteVertexToFile[2,c2,ind2,getVertexType[penguin[[1,2]]],file];
If[V3Needed \[Equal]True  (*|| getGenSPheno[p2]=!=getGenSPheno[p3]*), WriteVertexToFile[3,c3,ind3,getVertexType[penguin[[1,3]]],file]; ];


(* It's now neceessary to check for the generic type of the diagram. This is done in two steps: *)
(* (i) 'getVertexType' returns the generic type of a specific vertex, e.g. FFS (fermion-fermion-scalar), VVV (triple-vector), SVV (scalar-vector-vecgor). This is first done for the third coupling of the penguin diagram.  *)
(* (ii) if the first check doesn't lead to an unique possibility (like SSS or VVV do), also the first vertex in the diagram is checked. *)
(* These checks identify uniquely the generic type of the particles in the loop and of the external particles. This information is also saved in variables like 'currentScalarX' or 'currentFemrion' which are used in the amplitudes to referr to these particles. The corresponding indices are saved in variables called 'IndexScalarX' or 'IndexFermionX' *)

SA`currentVertexTypeLow23 = getVertexType[penguin[[1,3]]];
Switch[getVertexType[penguin[[1,3]]],
FFS,
	Switch[getVertexType[penguin[[1,1]]],
	FFS,
	
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFSscalar,file];,

	FFV,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;	
	AddPenguinResult[resFFSvector,file];
	];,	

SSS,
	currentFermion1=p1; IndexFermion1=i1;
	currentScalar1 =p2; IndexScalar1=i2;
	currentScalar2 =p3;IndexScalar2=i3;
	AddPenguinResult[resSSS,file];,


FFV,
	Switch[getVertexType[penguin[[1,2]]],
	FFS,
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFVscalar,file];,

	FFV,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;
	currentFermion2 =p3;IndexFermion2=i3;
	AddPenguinResult[resFFVvector,file];
	];,	


SSV,
	currentFermion1=p1; IndexFermion1=i1;
	currentScalar1 =p2; IndexScalar1=i2;
	currentScalar2 =p3;IndexScalar2=i3;
	AddPenguinResult[resSSV,file];,


SVV,
	currentVector2=p3; IndexVector2=i3;
	Switch[getVertexType[penguin[[1,1]]],
	FFS,
	currentFermion1=p1;IndexFermion1=i1;
	currentScalar1=p2; IndexScalar1=i2;
	currentVector1=p3;IndexVector1=i3;
	flagFirstVertexFFV=0; (* case where the vector attaches to Fermion(gt2) *)
	AddPenguinResult[resSVV,file];,	
	FFV,
	(* internal Scalar/Vector interchanged *)
	currentFermion1=p1;IndexFermion1=i1;
	currentScalar1=p3;IndexScalar1=i3;
	currentVector1=p2;IndexVector1=i2;
	flagFirstVertexFFV=1; (* case where the vector attaches to Antifermion (gt1) *)
	AddPenguinResult[resSVV,file];
	];,

VVV,
	currentFermion1=p1; IndexFermion1=i1;
	currentVector1 =p2; IndexVector1=i2;
	currentVector2 =p3;IndexVector2=i3;
	AddPenguinResult[resVVV,file];
];

WriteString[file,"End if \n"];

(* here, the loops over the internal field generations finish *)
If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];
If[V3Needed\[Equal]True (*|| getGenSPheno[p2]=!=getGenSPheno[p3] *),
If[getGenSPheno[p3]>1,WriteString[file,"End Do\n"];];
];
If[FlagLoopContributions===True,
WriteString[file, "End if \n"];
];
WriteString[file,"\n\n"];

(* it might be necessary to add some code after the calculation of the diagram. This is done now, if 'final' is not set to None in the input *)
AddPenguinResult[final,file];

j++;];

];

*)


AddWaveContributions2[list_,resFFS_,resFFV_,initial_,initialLoop_,final_,mb_,goldstones_,file_]:=Block[{i,j,k,i1,i2,i3},

(* The sames as 'AddPenguinContributions2' but only for 2-point functions *)

(* Input: *)
(*   - list: list of diagrams *)
(*   - resFFS: name of generic amplitude for scalar/fermions loops *)
(*   - resFFV: name of generic amplitude for vector/fermions loops *)
(*   - initial: possible, initial statements *)
(*   - final: possible, final statements *)
(*   - mb: (m)ass(b)ound: threshold to include the diagram *)
(*   - goldstone: include Goldstone bosons (True/False) *)
(*   - file: output file *)


AddWaveResult[initial,file];
Clear[j1,j2,j3];

For[j=1,j<=Length[list],


(* take the current diagram *)
wave = list[[j]];


(* check for the SPheno name of the first couplings; the second vertex is always assumed to be h.c. of the first one *)
c1=getSPhenoCoupling2[wave[[1,1]],SPhenoCouplingsAll];

(* generate the index structure for the vertices *)
ind1 = MakeIndicesCoupling[{External[1],gt1}/.wave[[2]],{Internal[1],i1}/.wave[[2]],{AntiField[Internal[2]],i2}/.wave[[2]],c1[[2]]];
ind2=ind1;
ind2[[1]]= StringReplace[ind2[[1]],{"gt1"->"gt2"}];
ind2[[2]] = ind2[[2]] /. {True->False,False->True};

cfactor = getChargeFactor[wave,{{{External[1],ex1},{Internal[1],in1},{AntiField[Internal[2]],in2}},{{External[2],ex2},{AntiField[Internal[1]],in1},{Internal[2],in2}}} /. wave[[2]]];

WriteString[file,"chargefactor = "<>SPhenoForm[cfactor]<>" \n"];

(* create short-forms of the particles in the loop *)
p1=(Internal[1] /.wave[[2]]);
p2 =(Internal[2] /. wave[[2]]);

AddWaveResult[initialLoop,file];

(* if goldstones are skipped, check for the first physical generation of internal fields *)
If[goldstones==True,
start1=1; start2=1;,
start1=getGenSPhenoStart[p1]; start2=getGenSPhenoStart[p2];
];


(* add (optionally) a flag to switch contributions on/off using the LesHouches.in file *)
If[FlagLoopContributions===True,
WriteString[file,"If (("<>SPhenoIncludeLoop[getBlank[p1]]<>").and.("<>SPhenoIncludeLoop[getBlank[p2]]<>").and.IncludeWave) Then \n"];
];

(* loop over the generations of the particles in the loop *)
If[getGenSPheno[p1]>1,WriteString[file,"Do i1="<>ToString[start1]<>","<> ToString[getGenSPheno[p1]]<>"\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  Do i2="<>ToString[start2]<>","<> ToString[getGenSPheno[p2]]<>"\n"];];

(* add the check of the mass threshold to the Fortran code *)
WriteString[file, "If (("<>SPhenoMassSq[p1,i1]<>".gt."<>mb<>").Or.("<>SPhenoMassSq[p2,i2]<>".gt."<>mb<>")) Then\n"];

(* write the verices*)
WriteVertexToFile[1,c1,ind1,getVertexType[wave[[1,1]]],file];
WriteVertexToFile[2,c1,ind2,getVertexType[wave[[1,1]]],file];

(* Check for the generic type of the diagram *)
(* assign the name of the internal particles and the corresponding generation indices to variables which can be used in the generic amplitude *)
(* The generic amplitudes are saved in 'AddWaveResult' and the results are added here *)
Switch[getVertexType[wave[[1,1]]],
	FFS,
	If[getType[p1]===S,
	currentScalar1=p1; IndexScalar1=i1;
	currentFermion1 =p2; IndexFermion1=i2;,
	currentScalar1=p2; IndexScalar1=i2;
	currentFermion1 =p1; IndexFermion1=i1;
	];
	AddWaveResult[resFFS,file];,

	FFV,
	If[getType[p1]===V,
	currentVector1=p1; IndexVector1=i1;
	currentFermion1 =p2; IndexFermion1=i2;,
	currentVector1=p2; IndexVector1=i2;
	currentFermion1 =p1; IndexFermion1=i1;
	];	
	AddWaveResult[resFFV,file];
	];


WriteString[file,"End if \n"];

(* close the loops over generation indices *)
If[getGenSPheno[p1]>1,WriteString[file,"   End Do\n"];];
If[getGenSPheno[p2]>1,WriteString[file,"  End Do\n"];];

(* finish the current diagram *)
If[FlagLoopContributions===True,WriteString[file,"End if \n"];];
WriteString[file,"\n\n"];
AddWaveResult[final,file];
WriteString[file,"\n\n"];
j++;];

];








(* ::Input::Initialization:: *)

AddBoxResult[res_,file_]:=Block[{string,string1,string2,string3,string4,subB,
subB2={"B1L"->"B1R","B2L"->"B2R","B3L"->"B3R", "B4L"->"B4R","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"},M1F,M2F,M2Fsq,M1Fsq,MSsq,MVsq,MV2sq},

Switch[res,
(*Contributions from B0 (s,d)\[Rule]l l*)
BoxB0LLpIn,
	Clear[M1F,M2F,M2Fsq,M1Fsq,MSsq,MVsq,MV2sq];
	WriteString[file,"! box diagram nr. "<>ToString[i]<>" ("<>ToString[i]<>"/"<>ToString[NrAllDiagrams]<>"), InsertionOrder="<>ToString[CurrentInsertionOrder]<>"\n"];,BoxB0LLpFin,WriteString[file,"cnt = cnt+1 \n"];,

BoxB0LLpFFS,

	M1F=SPhenoMass[currentFermion1,IndexFermion1];
	M2F=SPhenoMass[currentFermion2,IndexFermion2];
	string=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2];
	WriteString[file,StringReplace["D0u = D0_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
	WriteString[file,StringReplace["D00u= D27_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
	WriteString[file,"If (D0u.ne.D0u) D0u = 0._dp \n"];
	WriteString[file,"If (D00u.ne.D00u) D00u = 0._dp \n"];
	
If[getType[p1]===F,
(*Box S1*)
Switch[CurrentInsertionOrder,
1,
string1="(-1)* coup1L * coup2L * coup3L * coup4L *"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="(-1)* coup1L * coup2L * coup3R * coup4R *"<>M1F<>"*"<>M2F<>"*D0u \n";
string3="(-1)* coup1R * coup2L * coup3R * coup4L * D00u \n";
string4="(-1)* coup1R * coup2L * coup3L * coup4R * D00u \n";,
2,
string1="(-1)* coup1L * coup2L * coup3L * coup4L *"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="(-1)* coup1L * coup2L * coup3R * coup4R *"<>M1F<>"*"<>M2F<>"*D0u \n";
string3="coup1R * coup2L * coup3L * coup4R * D00u \n";
string4="coup1R * coup2L * coup3R * coup4L * D00u \n";,
4,
string1="0.5_dp*coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="(-2)*coup1L*coup2R*coup3L*coup4R *D00u \n";
string3="coup1R * coup2R * coup3L * coup4L * D00u \n";
string4="0.5_dp*coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";];,
(*Box S2*)
Switch[CurrentInsertionOrder,
1,
string1="0.5_dp*coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="2._dp *coup1L * coup2L * coup3R * coup4R * D00u \n";
string3="(-1)* coup1R * coup2L * coup3R * coup4L * D00u \n";
string4="0.5_dp* coup1R * coup2L * coup3L * coup4R * "<>M1F<>"*"<>M2F<>"*D0u \n";,
2,
string1="0.5_dp*coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="2._dp *coup1L * coup2L * coup3R * coup4R * D00u \n";
string3="(-0.5_dp)* coup1R * coup2L * coup3L * coup4R * "<>M1F<>"*"<>M2F<>"*D0u \n";
string4="coup1R * coup2L * coup3R * coup4L * D00u \n";,
4,
string1="0.5_dp*coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string2="(-2._dp) *coup1L * coup2R * coup3L * coup4R * D00u \n";
string3="(-0.5_dp)* coup1R * coup2R * coup3L * coup4L * "<>M1F<>"*"<>M2F<>"*D0u \n";
string4="(-1)*coup1R * coup2L * coup3L * coup4R * D00u \n";];
];
	WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
	WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]] ;
	WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]] ;
	WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];

If[CheckSM[{p1,p2,p3,p4}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{p4,i4}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]];WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]];WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]];WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

BoxB0LLpFFSFFV,

	M1F=SPhenoMass[currentFermion1,IndexFermion1];(*Abbreviations*)M2F=SPhenoMass[currentFermion2,IndexFermion2];
	string=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1];
	WriteString[file,StringReplace["D0u = D0_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
	WriteString[file,StringReplace["D00u= D27_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
	WriteString[file,"If (D0u.ne.D0u) D0u = 0._dp \n"];
	WriteString[file,"If (D00u.ne.D00u) D00u = 0._dp \n"];
If[getType[p1]===F,
If[getType[p4]===S,
(*Box SV1*)
Switch[CurrentInsertionOrder,
1,
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1];
(* WriteString[file,"C0u  = Cget(\"C0  \",0._dp,0._dp,0._dp,"<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
M1Fsq=SPhenoMassSq[currentFermion1,IndexFermion1];
string1="2._dp*coup1L*coup2L*coup3R*coup4L*& \n &(C0u+"<>M1Fsq<>"*D0u-2*D00u) \n";
string2="2._dp*coup1L*coup2L*coup3L*coup4R*& \n &(C0u+"<>M1Fsq<>"*D0u-2*D00u) \n";
string3="coup1R*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="coup1R*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";,
2,
string1="(-4._dp)*coup1L*coup2L*coup3L*coup4L*D00u \n";(*CSLL*)
string2="(-4._dp)*coup1L*coup2L*coup3R*coup4R*D00u \n";(*CSLR*)
string3="coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";,
4,
string1="(-0.25_dp)*(13*coup1L*coup2L*coup3L*coup4L+3*coup1R*coup2R*coup3R*coup4R)*D00u \n";(*CSLL*)string2="(-2._dp)*coup1L*coup2R*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)string3="coup1R*coup2R*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)
string4="2._dp*coup1R*coup2L*coup3L*coup4R*D00u \n";];,
(*Box VS1*)
Switch[CurrentInsertionOrder,
1,  Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]; 
(* WriteString[file,"C0u  = Cget(\"C0  \",0._dp,0._dp,0._dp,"<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
M1Fsq=SPhenoMassSq[currentFermion1,IndexFermion1];
string1="2._dp*coup1R*coup2L*coup3L*coup4L*& \n &(C0u+"<>M1Fsq<>"*D0u-2*D00u) \n";(*CSLL*)string2="2._dp*coup1R*coup2L*coup3R*coup4R*& \n &(C0u+"<>M1Fsq<>"*D0u-2*D00u) \n";(*CSLR*)string3="coup1L * coup2L * coup3R * coup4L *"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="coup1L * coup2L * coup3L * coup4R *"<>M1F<>"*"<>M2F<>"*D0u \n";,
2,
string1="(-4._dp)*coup1R*coup2L*coup3L*coup4R*D00u \n";(*CSLL*)
string2="(-4._dp)*coup1R*coup2L*coup3R*coup4L*D00u \n";(*CSLR*)
string3="coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="coup1L*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";,
4,
string1="(-0.25_dp)*(13*coup1R*coup2R*coup3L*coup4R+3*coup1L*coup2L*coup3R*coup4R)*D00u \n";(*CSLL*)string2="((-2._dp)*coup1R*coup2L*coup3R*coup4L*D0u+0.75_dp*(coup1R*coup2R*coup3L*coup4L-coup1L*coup2L*coup3R*coup4R)*D00u) \n";(*CSLR*)string3="coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="2._dp*coup1L*coup2R*coup3L*coup4R*D00u \n";];];,
If[getType[p1]===S,
(*Box SV2*)
MSsq=SPhenoMassSq[currentScalar1,IndexScalar1];
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
Switch[CurrentInsertionOrder,
1,
(* Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]; *) (* FS moved C string*)
(*
WriteString[file,"C0u  = Cget(\"C0  \",0._dp,0._dp,0._dp,"<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
string1="(-1)*coup1L*coup2L*coup3R*coup4L*& \n &(KilianC0D0("<>Cstring<>","<>MSsq<>")+4*D00u) \n";(*CSLL*)string2="(-2._dp) *coup1L*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)string3="coup1R*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="(-1)*coup1R*coup2L*coup3R*coup4R*& \n &(KilianC0D0("<>Cstring<>","<>MSsq<>")-2*D00u) \n";,
2,
string1="8*coup1L*coup2L*coup3R*coup4R*D00u \n";(*CSLL*)
string2="2*coup1L*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)
string3="(-2)*coup1R*coup2L*coup3R*coup4L*D00u \n";(*CVLL*)
string4="coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";,
4,
string1="(-1)*coup1L*coup2L*coup3L*coup4L*(KilianC0D0("<>Cstring<>","<>MSsq<>")-8*D00u) \n";(*CSLL*)string2="2*coup1L*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)string3="coup1R*coup2L*coup3L*coup4L*(KilianC0D0("<>Cstring<>","<>MSsq<>")-2*D00u) \n";(*CVLL*)string4="coup1R*coup2R*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";];,

(*p1 must be V.Box VS2*)
MVsq=SPhenoMassSq[currentVector1,IndexVector1];
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1];
Switch[CurrentInsertionOrder,
1,
(* Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]; *) (* FS moved C string *) 
(* WriteString[file,"C0u  = Cget(\"C0  \",0._dp,0._dp,0._dp,"<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
string1="(-1)*coup1R*coup2L*coup3L*coup4L*& \n & (KilianC0D0("<>Cstring<>","<>MVsq<>")+4*D00u) \n";
string2="(-2)*coup1R*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";
string3="coup1L*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string4="(-1)*coup1L*coup2L*coup3L*coup4R*& \n & (KilianC0D0("<>Cstring<>","<>MVsq<>")-2*D00u) \n";,
2,
string1="8*coup1L*coup2L*coup3L*coup4L*D00u \n";
string2="2*coup1L*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";
string3="(-2)*coup1R*coup2L*coup3L*coup4R*D00u \n";
string4="coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";,
4,
string1="(-1)*coup1L*coup2L*coup3L*coup4R*(KilianC0D0("<>Cstring<>","<>MVsq<>")-8*D00u) \n";
string2="2*coup1L*coup2R*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";
string3="coup1R*coup2R*coup3L*coup4R*(KilianC0D0("<>Cstring<>","<>MVsq<>")-2*D00u) \n";
string4="coup1R*coup2L*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";];];
];

	WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]] ;
	WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]] ;
	WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]] ;
	WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];

	If[CheckSM[{p1,p2,p3,p4}],
	GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{p4,i4}}];
	WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]] ;
	WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]] ;
	WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]] ;
	WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]] ;
	WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]] ;
	WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]] ;
	WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

BoxB0LLpFFV,

M1F=SPhenoMass[currentFermion1,IndexFermion1];
M1Fsq=SPhenoMassSq[currentFermion1,IndexFermion1];
M2F=SPhenoMass[currentFermion2,IndexFermion2];
MVsq=SPhenoMassSq[currentVector1,IndexVector1];
MV2sq=SPhenoMassSq[currentVector2,IndexVector2];
string=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
(* WriteString[file,"C0u  = Cget(\"C0  \",0._dp,0._dp,0._dp,"<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,StringReplace["D0u = D0_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
WriteString[file,StringReplace["D00u= D27_Bagger("<>ToString[string]<>")\n",{"0._dp"->"1.0E-30_dp"}]];
WriteString[file,"If (D0u.ne.D0u) D0u = 0._dp \n"];
WriteString[file,"If (D00u.ne.D00u) D00u = 0._dp \n"];

If[getType[p1]===F,
(*Box V1*)
Switch[CurrentInsertionOrder,
1,
string1="(-4._dp)*coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)string2="(-4._dp)*coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)string3="(-4)*coup1L*coup2L*coup3L*coup4L*& \n &(C0u+"<>M1Fsq<>"*D0u-3*D00u) \n";(*CVLL*)string4="(-4)*coup1L*coup2L*coup3R*coup4R*& \n &(C0u+"<>M1Fsq<>"*D0u) \n";,
2,
string1="(-4._dp)*coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)string2="(-4._dp)*coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLR*)
string3="16*coup1L*coup2L*coup3L*coup4L*D00u \n";(*CVLL*)
string4="4*coup1L*coup2L*coup3R*coup4R*D00u \n";,
4,
string1="(-4._dp)*coup1R*coup2R*coup3L*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)
string2="(-8._dp)*coup1R*coup2L*coup3L*coup4R*D00u \n";(*CSLR*)
string3="16*coup1L*coup2L*coup3L*coup4L*D00u \n";(*CVLL*)
string4="2*coup1L*coup2R*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";
];,
(*Box V2*)
Switch[CurrentInsertionOrder,
1,
string1="8._dp*coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)string2="8._dp*coup1R*coup2L*coup3L*coup4R*& \n &(KilianC0D0("<>Cstring<>","<>MVsq<>")) \n";(*CSLR*)string3="(-4)*coup1L*coup2L*coup3L*coup4L*& \n &(KilianC0D0("<>Cstring<>","<>MVsq<>")-3*D00u) \n";(*CVLL*)string4="2*coup1L*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLR*),
2,
string1="8._dp*coup1L*coup2L*coup3R*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)
string2="32._dp*coup1L*coup2L*coup3L*coup4L* D00u \n";(*CSLR*)
string3="(-2)*coup1R*coup2L*coup3R*coup4L*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)
string4="4*coup1R*coup2L*coup3L*coup4R*D00u \n";,
4,
string1="(-4._dp)*coup1L*coup2R*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CSLL*)string2="(-8._dp)*coup1L*coup2L*coup3L*coup4L* (KilianC0D0("<>Cstring<>","<>MV2sq<>")-3*D00u) \n";(*CSLR*)string3="(-2)*coup1R*coup2L*coup3L*coup4R*"<>M1F<>"*"<>M2F<>"*D0u \n";(*CVLL*)string4="(-4)*coup1R*coup2R*coup3L*coup4L*(KilianC0D0("<>Cstring<>","<>MV2sq<>")) \n";];
];
	WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
	WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
	WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]];
	WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]];
	WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
	WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
	WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]];
	WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];
(*sum up SM contributions only*)
If[CheckSM[{p1,p2,p3,p4}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{p4,i4}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB2]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB2]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB2]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB2]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

(* Box l \[Rule] 3 l' *)

Box1LeptonTo3Leptons,
string= SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ];
WriteString[file,"fun2 = D0_Bagger("<>string<>")*"<>SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2 ]<>" \n"];
WriteString[file,"fun1 = 4._dp*D27_Bagger("<>string<>")\n"];

WriteString[file,"If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp))) Then \n" ];
subB = {"B1L"->"B1R","B2L"->"B2R","B3L"->"B3R", "B4L"->"B4R","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"};


Switch[CurrentInsertionOrder,
1,
string1 = "B1L = B1L + 2._dp*chargefactor*fun1*coup1L*coup2R*coup3L*coup4R \n";
string2=  "B2L = B2L + chargefactor*fun1*coup2R*coup1L*coup3R*coup4L-0.5_dp*fun2*coup1L*coup2L*coup3R*coup4R \n";
string3 = "B3L = B3L + chargefactor*fun2*(coup1L*coup2L*coup3L*coup4L) \n";
string4 = "B4L = B4L + 0._dp \n";

WriteString[file, string1];
WriteString[file, string2];
WriteString[file, string3];
WriteString[file, string4];


WriteString[file, StringReplace[string1,subB]];
WriteString[file, StringReplace[string2,subB]];
WriteString[file, StringReplace[string3,subB]];
WriteString[file, StringReplace[string4,subB]];,
4,
string1 = "B1L = B1L + chargefactor*fun2*coup2L*coup3R*coup1L*coup4R \n";
string2= "B2L = B2L + chargefactor*fun1*(-coup2R*coup3L*coup1L*coup4R + coup2L*coup3L*coup1L*coup4L) \n";
string3 = "B3L = B3L + chargefactor*fun2*(0.5_dp*coup2L*coup3L*coup1L*coup4L) \n";
string4 = "B4L = B4L + chargefactor*fun2*coup2L*coup3L*coup1L*coup4L/8._dp \n";


WriteString[file, string1];
WriteString[file, string2];
WriteString[file, string3];
WriteString[file, string4];

WriteString[file, StringReplace[string1,subB]];
WriteString[file, StringReplace[string2,subB]];
WriteString[file, StringReplace[string3,subB]];
WriteString[file, StringReplace[string4,subB]];
];
WriteString[file,"End if \n"];,

BoxLLpHadron,
string= SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ];
WriteString[file,"fun2 = D0_Bagger("<>string<>")*"<>SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2 ]<>" \n"];
WriteString[file,"fun1 = 4._dp*D27_Bagger("<>string<>")\n"];
WriteString[file,"If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp))) Then \n" ];
subB = {"BLV"->"BRV","BLS"->"BRS","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"};

string1 = "BLV = BLV -1._dp/8._dp*chargefactor*fun1*(coup1R*coup2R*coup3R*coup4R)+1._dp/4._dp*fun2*(coup1R*coup2R*coup3L*coup4L) \n";
string2=  "BLS = BLS +1._dp/4._dp*chargefactor*fun1*(coup1R*coup2L*coup3R*coup4L)+1._dp/4._dp*fun2*(coup1R*coup2L*coup3L*coup4R) \n";


(*
string1 = "BLV = BLV -1._dp/8._dp*chargefactor*fun1*(coup1L*coup2R*coup3L*coup4R)+1._dp/4._dp*fun2*(coup1L*coup2R*coup3L*coup4R) \n";
string2=  "BLS = BLS +1._dp/4._dp*chargefactor*fun1*(coup1L*coup2L*coup3L*coup4L)+1._dp/4._dp*fun2*(coup1L*coup2L*coup33*coup4R) \n";
*)

WriteString[file, string1];
WriteString[file, string2];
WriteString[file, StringReplace[string1,subB]];
WriteString[file, StringReplace[string2,subB]];


WriteString[file,"End if \n"];,

BoxDeltaVB,
Switch[CurrentInsertionOrder,
1,
string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ];
WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
WriteString[file, "If(Real(D27m2,dp).eq.Real(D27m2,dp)) Then \n"];
WriteString[file, "teil = teil + D27m2*chargefactor*coup1L*coup2R*coup3L*coup4R \n"];
WriteString[file, "End if\n"];,

2,
string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ];
WriteString[file,"D0m2 = D0_Bagger("<>string<>")*"<>SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2 ]<>
" \n"];
WriteString[file,"D27m2 = D27_Bagger("<>string<>")\n"];
WriteString[file, "If ((Real(D27m2,dp).eq.Real(D27m2,dp)).And.(Real(D0m2,dp).eq.Real(D0m2,dp))) Then \n"];
WriteString[file, "teil = teil + 0.5_dp*chargefactor*D27m2*coup1L*coup2R*coup3L*coup4R+D0m2*coup1L*coup2L*coup3R*coup4R \n"];
WriteString[file, "End if\n"];,

3,
string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ];
WriteString[file,"D0m2 = D0_Bagger("<>string<>")*"<>SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2 ]<>
" \n"];
WriteString[file, "If (Real(D0m2,dp).eq.Real(D0m2,dp)) Then \n"];
WriteString[file, "teil = teil + D0m2*chargefactor*coup1L*coup2L*coup3R*coup4R \n"];
WriteString[file, "End if\n"];,

4, 
string= SPhenoMassSq[currentScalar1,IndexScalar1 ]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2 ]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1 ]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2 ];
WriteString[file,"D0m2 = D0_Bagger("<>string<>")*"<>SPhenoMass[currentFermion1,IndexFermion1 ]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2 ]<>
" \n"];
WriteString[file, "If (Real(D0m2,dp).eq.Real(D0m2,dp)) Then \n"];
WriteString[file, "teil = teil + 0.5_dp*chargefactor*D0m2*coup1L*coup2R*coup3R*coup4L \n"];
WriteString[file, "End if\n"];


];
];
];



(* ::Input::Initialization:: *)
AddWaveResult[res_,file_]:=Block[{n,start4,prop,MF,MpropSq,mQi,mQj,mQisq,mQjsq,mQn,mQnsq,subB={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L","coup5L"->"coup5R","coup5R"->"coup5L"},string1,string2,string3,string4,M1Sq,M2Sq,M3Sq,stringLow,stringHigh,stringHightilde,stringHighV,stringLowV,stringHighVtilde,stringLowVtilde},

Switch[res,(*----------Contributions to B0\[Rule]l l'------------*)

WaveB0LLpIn,

WriteString[file,"! wave diagram nr. "<>ToString[j]<>" ("<>ToString[NrBoxDiagrams+NrPenguinDiagrams+j]<>"/"<>ToString[NrAllDiagrams]<>") - "<>ToString[p1]<>","<>ToString[p2]<>"\n"];,WaveB0LLpFin,WriteString[file,"cnt=cnt+1 \n"];,

WaveB0LLpFFS,
	M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M3Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
	mQi=SPhenoMass[BottomQuark,gt1];
	mQisq=SPhenoMassSq[BottomQuark,gt1];
	mQj=SPhenoMass[BottomQuark,gt2];
	mQjsq=SPhenoMassSq[BottomQuark,gt2];
	MF=SPhenoMass[currentFermion1,IndexFermion1];
	mQnsq=SPhenoMassSq[BottomQuark,i3];
	mQn=SPhenoMass[BottomQuark,i3];
	stringLow="1/("<>mQnsq<>"-"<>mQisq<>")*(-"<>MF<>"*(coup1L*coup5L*"<>mQn<>"+coup1R*coup5R*"<>mQi<>")*B0u+(coup1R*coup5L*"<>mQn<>"*"<>mQi<>"+coup1L*coup5R*"<>mQisq<>")*B1u) \n";
	stringHigh="1/("<>mQjsq<>"-"<>mQnsq<>")*("<>MF<>"*(coup5R*coup2R*"<>mQj<>"+coup5L*coup2L*"<>mQn<>")*B0u-(coup5R*coup2L*"<>mQjsq<>"+coup5L*coup2R*"<>mQj<>"*"<>mQn<>")*B1u) \n";
	stringHightilde="1/("<>mQjsq<>"-"<>mQnsq<>")*("<>MF<>"*(coup5L*coup2L*"<>mQj<>"+coup5R*coup2R*"<>mQn<>")*B0u-(coup5L*coup2R*"<>mQjsq<>"+coup5R*coup2L*"<>mQj<>"*"<>mQn<>")*B1u) \n";
	WriteString[file,"! S channel wave diagrams \n"];
	For[n=1,n<=Length[B0LLpPropagators],n++,prop=B0LLpPropagators[[n]];
	MpropSq=SPhenoMassSq[prop,gt3];
	If[getGen[prop]>=2,
WriteString[file,"\n   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];
];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark \n"];
c3=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{bar[BottomQuark],gt2},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[BottomQuark],prop]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
If[getType[prop]===S,
string1="1/("<>MpropSq<>"-MassB02)*coup3L*coup4L*"<>stringLow<>"\n";
string2=StringReplace[string1,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];

If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];


];
If[getType[prop]===V,
string3="(-1)/("<>MpropSq<>"-MassB02)*coup3L*coup4L*"<>stringLow<>"\n";
string4=StringReplace[string3,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]] ;
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]] ;
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];

If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c3=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,gt1},{bar[BottomQuark],i3},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[BottomQuark],prop]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="1/("<>MpropSq<>"-MassB02)*coup3L*coup4L*"<>stringHigh<>"\n";
string2=StringReplace[string1,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];

If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];



];
If[getType[prop]===V,
string3="(-1)/("<>MpropSq<>"-MassB02)*coup3L*coup4L*"<>stringHightilde<>"\n";
string4=StringReplace[string3,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]] ;WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]] ;WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];
];

WriteString[file,"\n ! T channel wave diagrams\n"];
For[n=1,n<=Length[B0LLpPropagatorsT],n++,prop=B0LLpPropagatorsT[[n]];
MpropSq=SPhenoMassSq[prop,gt3];
If[getGen[prop]>=2,WriteString[file,"   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" ! sum over internal quark \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
c4=getSPhenoCoupling2[C[Electron,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[BottomQuark],gt2},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[BottomQuark],prop]],file];
c3=getSPhenoCoupling2[C[BottomQuark,bar[Electron],conj[prop]],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{bar[Electron],gt5},{conj[prop],gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[Electron],conj[prop]]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(-0.5_dp)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLow;
string4="(-0.5_dp)/("<>MpropSq<>")*coup3L*coup4R*"<>stringLow;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
If[getType[prop]===V,
string2="2._dp/("<>MpropSq<>")*coup3L*coup4R*"<>stringLow;
string3="(-1)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLow;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c4=getSPhenoCoupling2[C[bar[Electron],BottomQuark,conj[prop]],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{bar[Electron],gt5},{BottomQuark,gt1},{conj[prop],gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[bar[Electron],BottomQuark,conj[prop]]],file];
c3=getSPhenoCoupling2[C[bar[BottomQuark],Electron,prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{bar[BottomQuark],i3},{Electron,gt4},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[Electron],conj[prop]]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,string1="(-0.5_dp)/("<>MpropSq<>")*coup3L*coup4L*"<>stringHigh;
string4="(-0.5_dp)/("<>MpropSq<>")*coup3R*coup4L*"<>stringHightilde;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
If[getType[prop]===V,
string2="2/("<>MpropSq<>")*coup3R*coup4L*"<>stringHigh;
string3="(-1)/("<>MpropSq<>")*coup3L*coup4L*"<>stringHightilde;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];];
WriteString[file,"\n ! U channel wave diagrams\n"];
For[n=1,n<=Length[B0LLpPropagatorsU],n++,prop=B0LLpPropagatorsU[[n]];
MpropSq=SPhenoMassSq[prop,gt3];
If[getGen[prop]>=2,WriteString[file,"   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" ! sum over internal quark \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
c4=getSPhenoCoupling2[C[bar[Electron],bar[BottomQuark],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt5},{bar[BottomQuark],gt2},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[bar[Electron],bar[BottomQuark],prop]],file];
c3=getSPhenoCoupling2[C[BottomQuark,Electron,conj[prop]],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{Electron,gt4},{conj[prop],gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,Electron,conj[prop]]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(-0.5_dp)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLow;
string3="(+0.5_dp)/("<>MpropSq<>")*coup3L*coup4R*"<>stringLow;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
If[getType[prop]===V,
string2="(-2)/("<>MpropSq<>")*coup3R*coup4R*"<>stringLow;
string4="(-1)/("<>MpropSq<>")*coup3R*coup4L*"<>stringLow;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c4=getSPhenoCoupling2[C[Electron,BottomQuark,conj[prop]],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{BottomQuark,gt1},{conj[prop],gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,BottomQuark,conj[prop]]],file];
c3=getSPhenoCoupling2[C[bar[BottomQuark],bar[Electron],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{bar[BottomQuark],i3},{bar[Electron],gt5},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[bar[BottomQuark],bar[Electron],prop]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(-0.5_dp)/("<>MpropSq<>")*coup3L*coup4L*"<>stringHigh;
string3="(+0.5_dp)/("<>MpropSq<>")*coup3R*coup4L*"<>stringHightilde;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
If[getType[prop]===V,
string2="(-2)/("<>MpropSq<>")*coup3R*coup4R*"<>stringHigh;
string4="(-1)/("<>MpropSq<>")*coup3L*coup4R*"<>stringHightilde;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];];,

WaveB0LLpFFV,

M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
mQi=SPhenoMass[BottomQuark,gt1];
mQisq=SPhenoMassSq[BottomQuark,gt1];
mQj=SPhenoMass[BottomQuark,gt2];
mQjsq=SPhenoMassSq[BottomQuark,gt2];
MF=SPhenoMass[currentFermion1,IndexFermion1];
mQnsq=SPhenoMassSq[BottomQuark,i3];
mQn=SPhenoMass[BottomQuark,i3];
stringLowV="1/("<>mQnsq<>"-"<>mQisq<>")*(2*"<>MF<>"*(coup1L*coup5R*"<>mQn<>"+coup1R*coup5L*"<>mQi<>")*B0u+(coup1R*coup5R*"<>mQn<>"*"<>mQi<>"+coup1L*coup5L*"<>mQisq<>")*B1u) \n";
stringHighV="1/("<>mQjsq<>"-"<>mQnsq<>")*(2*"<>MF<>"*(coup5R*coup2L*"<>mQj<>"+coup5L*coup2R*"<>mQn<>")*B0u+(coup5R*coup2R*"<>mQjsq<>"+coup5L*coup2L*"<>mQj<>"*"<>mQn<>")*B1u) \n";
stringHighVtilde="1/("<>mQjsq<>"-"<>mQnsq<>")*(2*"<>MF<>"*(coup5L*coup2R*"<>mQj<>"+coup5R*coup2L*"<>mQn<>")*B0u+(coup5L*coup2L*"<>mQjsq<>"+coup5R*coup2R*"<>mQj<>"*"<>mQn<>")*B1u) \n";
stringLowVtilde="1/("<>mQnsq<>"-"<>mQisq<>")*(2*"<>MF<>"*(coup1R*coup5L*"<>mQn<>"+coup1L*coup5R*"<>mQi<>")*B0u+(coup1L*coup5L*"<>mQn<>"*"<>mQi<>"+coup1R*coup5R*"<>mQisq<>")*B1u) \n";
For[n=1,n<=Length[B0LLpPropagators],n++,prop=B0LLpPropagators[[n]];
MpropSq=SPhenoMassSq[prop,gt3];
If[getGen[prop]>=2,WriteString[file,"\n   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark \n"];
c3=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{bar[BottomQuark],gt2},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[BottomQuark],prop]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
If[getType[prop]===S,
string1="2*coup4L/("<>MpropSq<>"-MassB02)*coup3L*"<>stringLowV<>"\n";
string2=StringReplace[string1,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];

];
If[getType[prop]===V,
string3="(-2*coup4L)/("<>MpropSq<>"-MassB02)*coup3L*"<>stringLowV<>"\n";
string4=StringReplace[string3,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c3=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,gt1},{bar[BottomQuark],i3},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[BottomQuark],prop]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(-2)*coup4L*coup3L/("<>MpropSq<>"-MassB02)*"<>stringHighV<>"\n";
string2=StringReplace[string1,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
If[getType[prop]===V,
string3="2*coup4L*coup3L/("<>MpropSq<>"-MassB02)*"<>stringHighVtilde<>"\n";
string4=StringReplace[string3,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];];
WriteString[file,"\n ! T channel \n"];
For[n=1,n<=Length[B0LLpPropagatorsT],n++,prop=B0LLpPropagatorsT[[n]];
If[getGen[prop]>=2,WriteString[file,"   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
MpropSq=SPhenoMassSq[prop,gt3];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" ! sum over internal quark \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
c4=getSPhenoCoupling2[C[Electron,bar[BottomQuark],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[BottomQuark],gt2},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[BottomQuark],prop]],file];
c3=getSPhenoCoupling2[C[BottomQuark,bar[Electron],conj[prop]],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{bar[Electron],gt5},{conj[prop],gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,bar[Electron],conj[prop]]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
mQnsq=SPhenoMassSq[BottomQuark,i3];
mQn=SPhenoMass[BottomQuark,i3];
If[getType[prop]===S,
string1="(-1)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLowV;
string4=StringReplace[string1,{"coup4L"->"coup4R"}];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
If[getType[prop]===V,
string2="4/("<>MpropSq<>")*coup3L*coup4R*"<>stringLowV;
string3="(-2)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLowV;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c4=getSPhenoCoupling2[C[bar[Electron],BottomQuark,conj[prop]],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{bar[Electron],gt5},{BottomQuark,gt1},{conj[prop],gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[bar[Electron],BottomQuark,conj[prop]]],file];
c3=getSPhenoCoupling2[C[bar[BottomQuark],Electron,prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{bar[BottomQuark],i3},{Electron,gt4},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[bar[BottomQuark],Electron,prop]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="1/("<>MpropSq<>")*coup3L*coup4L*"<>stringHighV;
string4="1/("<>MpropSq<>")*coup3R*coup4L*"<>stringHighVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
If[getType[prop]===V,
string2="(-4)/("<>MpropSq<>")*coup3R*coup4L*"<>stringHighV;
string3="(2)/("<>MpropSq<>")*coup3L*coup4L*"<>stringHighVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];];
WriteString[file,"\n ! U channel wave diagrams\n"];
For[n=1,n<=Length[B0LLpPropagatorsU],n++,prop=B0LLpPropagatorsU[[n]];
MpropSq=SPhenoMassSq[prop,gt3];
If[getGen[prop]>=2,WriteString[file,"   Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]];];
WriteString[file," ! prop: "<>ToString[prop]<>"\n"];
WriteString[file,"    ! bubble at quark i=gt1 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" ! sum over internal quark \n"];
WriteString[file,"     If (i3.ne.gt1) Then \n"];
c4=getSPhenoCoupling2[C[bar[Electron],bar[BottomQuark],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt5},{bar[BottomQuark],gt2},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[bar[Electron],bar[BottomQuark],prop]],file];
c3=getSPhenoCoupling2[C[BottomQuark,Electron,conj[prop]],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{BottomQuark,i3},{Electron,gt4},{conj[prop],gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[BottomQuark,Electron,conj[prop]]],file];
(*index and coupling for the internal quark*)ind5=ind2;
ind5[[1]]=StringReplace[ind5[[1]],{"gt2"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(-1)/("<>MpropSq<>")*coup3L*coup4L*"<>stringLowVtilde;
string3="(+1)/("<>MpropSq<>")*coup3L*coup4R*"<>stringLowVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
If[getType[prop]===V,
string2="(-4)/("<>MpropSq<>")*coup3R*coup4R*"<>stringLowVtilde;
string4="(-2)/("<>MpropSq<>")*coup3R*coup4L*"<>stringLowVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
WriteString[file,"    ! bubble at quark j=gt2 \n"];
WriteString[file,"    Do i3=1,"<>ToString[getGenSPheno[BottomQuark]]<>" !sum over internal quark\n"];
WriteString[file,"     If (i3.ne.gt2) Then \n"];
c4=getSPhenoCoupling2[C[Electron,BottomQuark,conj[prop]],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{BottomQuark,gt1},{conj[prop],gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,BottomQuark,conj[prop]]],file];
c3=getSPhenoCoupling2[C[bar[BottomQuark],bar[Electron],prop],SPhenoCouplingsAll];
ind3=MakeIndicesCoupling[{bar[BottomQuark],i3},{bar[Electron],gt5},{prop,gt3},c3[[2]]];
WriteVertexToFile[3,c3,ind3,getVertexType[C[bar[BottomQuark],bar[Electron],prop]],file];
(*index and coupling for the internal quark*)ind5=ind1;
ind5[[1]]=StringReplace[ind5[[1]],{"gt1"->"i3"}];
WriteVertexToFile[5,c1,ind5,getVertexType[wave[[1,1]]],file];
WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
If[getType[prop]===S,
string1="(+1)/("<>MpropSq<>")*coup3L*coup4L*"<>stringHighV;
string3="(-0.5_dp)/("<>MpropSq<>")*coup3R*coup4L*"<>stringHighVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
];
If[getType[prop]===V,
string2="(+4)/("<>MpropSq<>")*coup3R*coup4R*"<>stringHighV;
string4="(+2)/("<>MpropSq<>")*coup3L*coup4R*"<>stringHighVtilde;
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
];
WriteString[file,"     End If \n"];
WriteString[file,"    End Do \n"];
If[getGen[prop]>=2,WriteString[file,"   End Do\n"];];];
,
	

(* ---------- Contributions to Z \[Rule] l l' ------------ *)

WaveZLLpFFS,
	(* prefactor is I/(16 pi^2)  *)
	WriteString[file,"! FFS wave diagram number "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>"\n"];
	c3=getSPhenoCoupling[C[VectorZ,Electron,bar[Electron]],SPhenoCouplingsAll];
	ind3=MakeIndicesCoupling[{Electron,gt1},{VectorZ,i1},{bar[Electron],gt1},c3[[2]]]; (* universal, indices don't matter, but must be equal *)
	WriteVertexToFile[3,c3,ind3,getVertexType[C[VectorZ,Electron,bar[Electron]]],file]; (* will produce coup3L,coup3R *)
	M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M3Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
	WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
	WriteString[file,"Ai(1) = - coup3L*coup2R*coup1L*B1u \n"];
	WriteString[file,"Ai(2) = - coup3R*coup2L*coup1R*B1u \n"];
	WriteString[file,"Ai(3) = 0._dp \n"];
	WriteString[file,"Ai(4) = 0._dp \n"];
	WriteString[file,"ampWave(countvar,:) = ampWave(countvar,:) + Ai(:) *chargefactor \n"];,
WaveZLLpFFV,
	(* prefactor is -I/(16 pi^2) *)
	WriteString[file,"! FFV wave diagram number "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>"\n"];
	c3=getSPhenoCoupling[C[VectorZ,Electron,bar[Electron]],SPhenoCouplingsAll];
	ind3=MakeIndicesCoupling[{Electron,gt1},{VectorZ,i1},{bar[Electron],gt1},c3[[2]]]; (* universal, indices don't matter, but must be equal *)
	WriteVertexToFile[3,c3,ind3,getVertexType[C[VectorZ,Electron,bar[Electron]]],file]; (* will produce coup3L,coup3R *)
	M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
	WriteString[file,"B1u = B1(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
	WriteString[file,"Ai(1) = - 2._dp*coup3L*coup2L*coup1L*B1u \n"];
	WriteString[file,"Ai(2) = - 2._dp*coup3R*coup2R*coup1R*B1u \n"];
	WriteString[file,"Ai(3) = 0._dp \n"];
	WriteString[file,"Ai(4) = 0._dp \n"];
	WriteString[file,"ampWave(countvar,:) = ampWave(countvar,:) + Ai(:)*chargefactor \n"];,
WaveZLLpIn,
	WriteString[file,"Ai(:) = 0._dp \n"];,
WaveZLLpFin,
	WriteString[file, "countvar = countvar +1\n"];,

(* ---------- Contributions to l \[Rule] 3 l' ------------ *)

Wave1LeptonTo3LeptonsFFSVector,
	If[FreeQ[massless,currentPropagator]==False,
	WriteString[file,"X_ax="<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1] <>"\n"];
	WriteString[file,"If ((X_ax.eq.X_ax).and.(X_ax.lt.1.0E+30_dp).and.(X_ax.gt.1.0E-30_dp)) Then \n"];

If[bar[currentFermion1]===currentFermion1,
	WriteString[file,"fun1=(2._dp-9._dp*X_ax+18._dp*X_ax**2-11._dp*X_ax**3& \n"];
	WriteString[file,"   &+6._dp*X_ax**3*Log(X_ax))/(1._dp-X_ax)**4 \n"];
	WriteString[file,"fun3=2._dp*F2(X_ax) \n"];
	WriteString[file,"fun2=2._dp*F4(X_ax)\n"];,
	WriteString[file,"fun1=-(16._dp-45._dp*X_ax+36._dp*X_ax**2-7._dp*X_ax**3& \n"];
	WriteString[file,"   &+6._dp*(2._dp-3._dp*X_ax)*Log(X_ax))/(1._dp-X_ax)**4 \n"];
	WriteString[file,"fun3=-2._dp*F1(X_ax) \n"];
	WriteString[file,"fun2=-2._dp*F3(X_ax)\n"];
];
	
	string1="tempA1R=tempA1R+chargefactor*coup1R*coup2L*fun1/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";
	string2="tempA2L=tempA2L+chargefactor*(coup1L*coup2R*fun3& \n";
	string2 = string2 <>"      &+coup1L*coup2L*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>SPhenoMass[Electron,in]<>"*fun2)/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";

	WriteString[file,string1];
	WriteString[file,string2];
	WriteString[file,StringReplace[string1,{"tempA1R"->"tempA1L","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,StringReplace[string2,{"tempA2L"->"tempA2R","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,"End if \n"];,

	WriteString[file,"tempFL = tempFL - chargefactor*coup1L*coup2R*B1(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>SPhenoMassSq[currentScalar1,IndexScalar1] <>") \n"];
	WriteString[file,"tempFR = tempFR - chargefactor*coup1R*coup2L*B1(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>SPhenoMassSq[currentScalar1,IndexScalar1] <>") \n"];
	
];,

Wave1LeptonTo3LeptonsVVVScalar,
	WriteString[file,"X_ax="<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n"];
	(* WriteString[file,"tempFLR = tempFLR + chargefactor*coup1L*coup2L*FZ_P(X_ax) \n"];
	WriteString[file,"tempFRL = tempFRL + chargefactor*coup1R*coup2R*FZ_P(X_ax) \n"]; *)
	WriteString[file,"tempFL = tempFL + chargefactor*coup1L*coup2L*FZ_P(X_ax)/sqrt(2._dp) \n"];
	WriteString[file,"tempFR = tempFR + chargefactor*coup1R*coup2R*FZ_P(X_ax)/sqrt(2._dp) \n"];,

Wave1LeptonTo3LeptonsFFSScalar,
	string = "(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>")";
	string1="tempHL = tempHL + chargefactor*vertex1L/("<>SPhenoMassSq[Electron,out]<>"-"<>SPhenoMassSq[Electron,in] <>")* & \n    & (-"<>SPhenoMassSq[Electron,out]<>"*B1"<>string <>"*coup1L*coup2R + & \n";
	 string1 = string1 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[Electron,out]<>"*B0"<>string<>"*coup1R*coup2R & \n  &    - "<> SPhenoMass[Electron,out]<>"*"<>SPhenoMass[Electron,in]<>"*B1"<>string<>"*coup1R*coup2L + & \n";
	string1 = string1 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[Electron,in]<>"*B0"<>string<>"*coup1L*coup2L)\n";
	WriteString[file,string1 <> "\n"];

	string2 = "tempHL = tempHL + chargefactor*vertex2L/("<>SPhenoMassSq[Electron,in]<>"-"<>SPhenoMassSq[Electron,out] <>")*& \n    & (-"<>SPhenoMassSq[Electron,in]<>"*B1"<>string <>"*coup1L*coup2R + & \n";
	string2 = string2 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[Electron,in]<>"*B0"<>string<>"*coup1R*coup2R & \n    & -"<> SPhenoMass[Electron,out]<>"*"<>SPhenoMass[Electron,in]<>"*B1"<>string<>"*coup1R*coup2L + & \n";
	string2 = string2 <>"&  "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[Electron,out]<>"*B0"<>string<>"*coup1L*coup2L)\n";
	WriteString[file,string2 <> "\n"];

	WriteString[file,StringReplace[string1,{"tempHL"->"tempHR","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}] <> "\n\n"];
	WriteString[file,StringReplace[string2,{"tempHL"->"tempHR","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}] <> "\n\n"];,



(* ---------- Contributions to delta_VB ------------ *)

WaveDeltaVB,
	WriteString[file,"sumI = sumI + chargefactor*0.5_dp*coup1L*coup2R*B1(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>")  \n"];
];

];


AddVertexResult[res_,file_]:=Block[{},
Switch[res,
DeltaVBVertex,
	WriteString[file,"teil = teil + coup1L*coup2R*(coup3L*B0("<>SPhenoMass[currentScalar1,IndexScalar1]<>","<>SPhenoMass[currentFermion1,IndexFermion1]<>","<>SPhenoMass[currentFermion2,IndexFermion2]<>") \n"];
];

];


(* ::Input::Initialization:: *)
AddPenguinResult[res_,file_]:=Block[{norm,M1,M2,M3,M1Sq,M2Sq,M3Sq,MpropSq,string1,string2,string3,string4,Cstring,subB={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"},LoopArgumentString},

Switch[res,

(*---------Contributions to B0 (s,d)\[Rule]l l'--------*)

PenguinB0LLpIn,

	Clear[M1,M2,M3,M1Sq,M2Sq,M3Sq,Cstring];
	WriteString[file,"! penguin nr. "<>ToString[j]<>" (total: "<>ToString[NrBoxDiagrams+j]<>"/"<>ToString[NrAllDiagrams]<>
	") - "<>ToString[Internal[1]/.penguin[[2]]]<>","<>ToString[Internal[2]/.penguin[[2]]]<>","<>ToString[Internal[3]/.penguin[[2]]]<>
	" - propagator: "<>ToString[prop]<>"\n"];
	If[getGen[prop]>=2,
	WriteString[file,"Do gt3= 1,"<>ToString[GetGenerationFlag[prop]]<>"\n"];
	];,

PenguinB0LLpFFSscalar,

c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
M1=SPhenoMass[currentFermion1,IndexFermion1];
M2=SPhenoMass[currentFermion2,IndexFermion2];
M3Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
(*
Cstring="MassB02,0._dp,0._dp,"<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]; *)
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]; (* FSCHANGED *)
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
(* WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[Cstring]<>") \n"]; *)
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"]; (* FSCHANGED *)
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0C0u  = KilianB0C0("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>M3Sq<>") \n"];
string1="coup1L*coup2L*coup4L*(coup3R*B0C0u+(coup3L*"<>M1<>"*"<>M2<>")*C0u)/"<>MpropSq<>" \n";
(* FSCHANGED: used KilianB0C0u auch in string2 *)
(* string2="coup1L*coup2L*coup4R*(coup3R*B0u+(coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u)/"<>MpropSq<>" \n"; *)
string2="coup1L*coup2L*coup4R*(coup3R*B0C0u+(coup3L*"<>M1<>"*"<>M2<>")*C0u)/"<>MpropSq<>" \n";
(*
string1="coup1L*coup2L*coup4L*(coup3R*B0u+(coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u)/"<>MpropSq<>" \n";
string2="coup1L*coup2L*coup4R*(coup3R*B0u+(coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u)/"<>MpropSq<>" \n";
*)
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpFFVscalar,

c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
M1=SPhenoMass[currentFermion1,IndexFermion1];
M2=SPhenoMass[currentFermion2,IndexFermion2];
M3Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
(* Cstring="MassB02,0._dp,0._dp,"<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]; *)
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]; (* FSCHANGED *)
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
(*
WriteString[file,"C00u = Cget(\"C00 \","<>ToString[Cstring]<>") \n"];
WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[Cstring]<>") \n"]; *)

(* FSCHANGED *)
WriteString[file,"C00u = C00_3m("<>ToString[Cstring]<>") \n"];
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0C0u  = KilianB0C0("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>M3Sq<>") \n"];
string3="coup1L*coup2R*coup4L*(coup3R*B0C0u+(-coup3L*"<>M1<>"*"<>M2<>")*C0u-2*coup3R*C00u)/"<>MpropSq<>" \n";
(* FSCHANGED: added B0C0u to string4 *)
string4="coup1L*coup2R*coup4R*(coup3R*B0C0u+(-coup3L*"<>M1<>"*"<>M2<>")*C0u-2*coup3R*C00u)/"<>MpropSq<>" \n";
(* string4="coup1L*coup2R*coup4R*(coup3R*B0u+(-coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u-2*coup3R*C00u)/"<>MpropSq<>" \n"; *)
(*
string3="coup1L*coup2R*coup4L*(coup3R*B0u+(-coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u-2*coup3R*C00u)/"<>MpropSq<>" \n";
string4="coup1L*coup2R*coup4R*(coup3R*B0u+(-coup3L*"<>M1<>"*"<>M2<>"+coup3R*"<>M3Sq<>")*C0u-2*coup3R*C00u)/"<>MpropSq<>" \n";
*)
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]]; WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpSSS,

c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
M1=SPhenoMass[currentFermion1,IndexFermion1];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
(* Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2];
WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2];
WriteString[file,"C0u  = C0_3m("<>ToString[Cstring]<>") \n"]; 
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
string1="coup1L*coup2L*coup3*coup4L*"<>M1<>"*C0u/"<>MpropSq<>" \n";
string2="coup1L*coup2L*coup3*coup4R*"<>M1<>"*C0u/"<>MpropSq<>" \n";
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpSSV,

MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
If[getType[prop]===V,
(*
Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2];
WriteString[file,"C00u = Cget(\"C00 \","<>ToString[Cstring]<>") \n"];
*)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2];
WriteString[file,"C00u = C00_3m("<>ToString[Cstring]<>") \n"];
string3="(-2)*coup1L*coup2R*coup3*coup4L*C00u/"<>MpropSq<>"\n";
string4="(-2)*coup1L*coup2R*coup3*coup4R*C00u/"<>MpropSq<>"\n";
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]]; WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]] ;WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,
If[getType[prop]===S,
M3Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
(*
Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"];
*)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>") \n"];
If[flagFirstVertexFFV===1,string1="coup1L*coup2L*coup3*coup4L*(B0u+"<>M3Sq<>"*C0u)/"<>MpropSq<>" \n";
string2="coup1L*coup2L*coup3*coup4R*(B0u+"<>M3Sq<>"*C0u)/"<>MpropSq<>" \n";,If[flagFirstVertexFFV===0,string1="(-1)*coup1L*coup2R*coup3*coup4L*(B0u+"<>M3Sq<>"*C0u)/"<>MpropSq<>" \n";
string2="(-1)*coup1L*coup2R*coup3*coup4R*(B0u+"<>M3Sq<>"*C0u)/"<>MpropSq<>" \n";];
];
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];
];
];,

PenguinB0LLpFFVvector,

M1=SPhenoMass[currentFermion1,IndexFermion1];
M2=SPhenoMass[currentFermion2,IndexFermion2];
M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
(*
Cstring="MassB02,0._dp,0._dp,"<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"];
WriteString[file,"C00u = Cget(\"C00 \","<>ToString[Cstring]<>") \n"];
*)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file,"C00u = C00_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0C0u = KilianB0C0("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>M3Sq<>")\n"];
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
string3="2*coup1L*coup2L*coup4L*(coup3L*B0C0u+(-coup3R*"<>M1<>"*"<>M2<>")*C0u-coup3L*2*C00u)/"<>MpropSq<>"\n";
string4="2*coup1L*coup2L*coup4R*(coup3L*B0C0u+(-coup3R*"<>M1<>"*"<>M2<>")*C0u-coup3L*2*C00u)/"<>MpropSq<>"\n";
(*
string3="2*coup1L*coup2L*coup4L*(coup3L*B0u+(-coup3R*"<>M1<>"*"<>M2<>"+coup3L*"<>M3Sq<>")*C0u-coup3L*2*C00u)/"<>MpropSq<>"\n";
string4="2*coup1L*coup2L*coup4R*(coup3L*B0u+(-coup3R*"<>M1<>"*"<>M2<>"+coup3L*"<>M3Sq<>")*C0u-coup3L*2*C00u)/"<>MpropSq<>"\n";
*)
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpFFSvector,

M1=SPhenoMass[currentFermion1,IndexFermion1];
M2=SPhenoMass[currentFermion2,IndexFermion2];
M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
(*
Cstring="MassB02,0._dp,0._dp,"<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"];
*)
(* FSCHANGED *)

Cstring=SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0C0u = KilianB0C0("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>","<>M3Sq<>") \n"];
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
(*
string1="(-4)*coup1L*coup2R*coup4L*(coup3L*B0u+(coup3R*"<>M1<>"*"<>M2<>"+coup3L*"<>M3Sq<>")*C0u)/"<>MpropSq<>"\n";
string2="(-4)*coup1L*coup2R*coup4R*(coup3L*B0u+(coup3R*"<>M1<>"*"<>M2<>"+coup3L*"<>M3Sq<>")*C0u)/"<>MpropSq<>"\n";
*)
string1="(-4)*coup1L*coup2R*coup4L*(coup3L*B0C0u+(coup3R*"<>M1<>"*"<>M2<>")*C0u)/"<>MpropSq<>"\n";
string2="(-4)*coup1L*coup2R*coup4R*(coup3L*B0C0u+(coup3R*"<>M1<>"*"<>M2<>")*C0u)/"<>MpropSq<>"\n";

WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];

If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpVVV,

M1=SPhenoMass[currentFermion1,IndexFermion1];
M1Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
(*
Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"];
WriteString[file,"C00u =Cget(\"C00 \","<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file,"C00u =C00_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
WriteString[file,"B0u=B0(MassB02,"<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2]<>") \n"];
string3="(-2)*coup1L*coup2L*coup3*coup4L*(B0u+"<>M1Sq<>"*C0u+2*C00u)/"<>MpropSq<>"\n";
string4="(-2)*coup1L*coup2L*coup3*coup4R*(B0u+"<>M1Sq<>"*C0u+2*C00u)/"<>MpropSq<>"\n";
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,

PenguinB0LLpSVV,

c4=getSPhenoCoupling2[C[Electron,bar[Electron],prop],SPhenoCouplingsAll];
ind4=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,gt3},c4[[2]]];
WriteVertexToFile[4,c4,ind4,getVertexType[C[Electron,bar[Electron],prop]],file];
MpropSq="("<>SPhenoMassSq[prop,gt3]<>"-MassB02)";
If[getType[prop]===S,
M1=SPhenoMass[currentFermion1,IndexFermion1];
(*
Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"]; *)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentVector1,IndexVector1]<>","<>SPhenoMassSq[currentVector2,IndexVector2];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
string1="4*coup1L*coup2R*coup3*coup4L*"<>M1<>"*C0u/"<>MpropSq<>"\n";
string2="4*coup1L*coup2R*coup3*coup4R*"<>M1<>"*C0u/"<>MpropSq<>"\n";
WriteString[file,FortranLineBreak["WCS(cnt,1)=WCS(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS(cnt,2)=WCS(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS(cnt,3)=WCS(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS(cnt,4)=WCS(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCS_SM(cnt,1)=WCS_SM(cnt,1)+chargefactor*"<>string1]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,2)=WCS_SM(cnt,2)+chargefactor*"<>string2]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,3)=WCS_SM(cnt,3)+chargefactor*"<>StringReplace[string1,subB]]];
WriteString[file,FortranLineBreak["WCS_SM(cnt,4)=WCS_SM(cnt,4)+chargefactor*"<>StringReplace[string2,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];
];,
If[getType[prop]===V,
M1=SPhenoMass[currentFermion1,IndexFermion1];
(*
Cstring="0._dp,MassB02,0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = Cget(\"C0  \","<>ToString[Cstring]<>") \n"];
*)
(* FSCHANGED *)
Cstring=SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentVector1,IndexVector1];
WriteString[file,"C0u = C0_3m("<>ToString[Cstring]<>") \n"];
WriteString[file, "If (Abs(C0u).gt.1.0E32_dp) C0u=0._dp \n"];
If[flagFirstVertexFFV===1,
string3="coup1L*coup2R*coup3*coup4L*"<>M1<>"*C0u/"<>MpropSq<>"\n";
string4="coup1L*coup2R*coup3*coup4R*"<>M1<>"*C0u/"<>MpropSq<>"\n";,
If[flagFirstVertexFFV===0,
string3="coup1L*coup2L*coup3*coup4L*"<>M1<>"*C0u/"<>MpropSq<>"\n";
string4="coup1L*coup2L*coup3*coup4R*"<>M1<>"*C0u/"<>MpropSq<>"\n";];
];
WriteString[file,FortranLineBreak["WCV(cnt,1)=WCV(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV(cnt,2)=WCV(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV(cnt,3)=WCV(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV(cnt,4)=WCV(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[CheckSM[{p1,p2,p3,prop}],
GoldstoneFlagKilian=WriteGoldstoneCheck[file,{{p1,i1},{p2,i2},{p3,i3},{prop,gt3}}];
WriteString[file,FortranLineBreak["WCV_SM(cnt,1)=WCV_SM(cnt,1)+chargefactor*"<>string3]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,2)=WCV_SM(cnt,2)+chargefactor*"<>string4]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,3)=WCV_SM(cnt,3)+chargefactor*"<>StringReplace[string3,subB]]];
WriteString[file,FortranLineBreak["WCV_SM(cnt,4)=WCV_SM(cnt,4)+chargefactor*"<>StringReplace[string4,subB]]];
If[GoldstoneFlagKilian,WriteString[file,"   End If\n"]];];
];
];,

PenguinB0LLpFin,

If[getGen[prop]>=2,WriteString[file,"End Do \n"];];
WriteString[file,"cnt = cnt + 1 \n"];,

(* ---------- Contributions to l \[Rule] 3l' ------------ *)

PenguinScalar1LeptonTo3LeptonsFFS,
	WriteString[file,"fun1=B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
	WriteString[file,"fun2=C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
	WriteString[file,"fun3=vertexC12("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
	WriteString[file,"fun4=vertexC11("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") \n"];
	WriteString[file, "If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp)).And.& \n & (Real(fun3,dp).eq.Real(fun3,dp)).And.(Real(fun4,dp).eq.Real(fun4,dp)).And. & \n"];
        WriteString[file, "& (Abs(fun1).lt.1.0E+30_dp).And.(Abs(fun2).lt.1.0E+30_dp).And.& \n & (Abs(fun3).lt.1.0E+30_dp).And.(Abs(fun4).lt.1.0E+30_dp)) Then \n"];
	string1= "tempHL = tempHL +(fun1+"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"*fun2 +"<>SPhenoMassSq[Electron,in]<>"*fun3 &  \n";
	string1 =string1 <>"   & + "<>SPhenoMassSq[Electron,out]<>"*(fun4-fun3))*coup1L*coup3R*coup2L & \n";
	string1 = string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>SPhenoMass[Electron,in]<>"*(fun4+fun2)*coup1R*coup3L*coup2R  & \n";
	string1 = string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*(fun4+fun2-fun3)*coup1R*coup3L*coup2L  & \n";
	string1=string1<> "   & + "<>SPhenoMass[Electron,in]<>"*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*fun3*coup1L*coup3R*coup2R  & \n";
	string1=string1<> "   & + "<>SPhenoMass[Electron,out]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2]<>"*(fun4-fun3)*coup1R*coup3R*coup2L  & \n";
	string1=string1<> "   & + "<>SPhenoMass[Electron,in]<>"*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*(fun3+fun2)*coup1L*coup3L*coup2R  & \n";
	string1=string1<> "   & + "<>SPhenoMass[currentFermion2,IndexFermion2]<>"*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*fun2*coup1L*coup3L*coup2L  \n \n";

	WriteString[file,string1];
	WriteString[file,StringReplace[string1,{"tempHL"->"tempHR","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file, "End if \n"]; ,

PenguinScalar1LeptonTo3LeptonsSSS,
	WriteString[file,"C0m = -"<>SPhenoMass[currentFermion1,IndexFermion1]  <>"* C0_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2] <> ")\n"];
	WriteString[file,"fun3=C0_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
	WriteString[file,"fun2=vertexC12("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
	WriteString[file,"fun1=vertexC11("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") \n"];
	WriteString[file, "If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp)).And.(Real(C0m,dp).eq.Real(C0m,dp)).And. & \n"];
	WriteString[file, " & (Abs(fun1).lt.1.0E+30_dp).And.(Abs(fun2).lt.1.0E+30_dp).And.(Abs(C0m).lt.1.0E+30_dp)) Then \n"];
	string1= "tempHL = tempHL -("<>SPhenoMass[Electron,out]<>"*(fun1-fun2)*coup2R*coup1L + &  \n";
	string1 = string1 <> "     &"<>SPhenoMass[Electron,in]<>"*fun2*coup2L*coup1R - & \n";
	string1 = string1 <> "     &"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*fun3*coup1L*coup2L)*coup3  \n \n";
	WriteString[file,string1];
	WriteString[file,StringReplace[string1,{"tempHL"->"tempHR","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,"End if \n"];,

PenguinVector1LeptonTo3LeptonsFFVscalar,
WriteString[file,"fun2 = "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2]  <>"* C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1] <>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<> ")\n"];
If[UseAandHresults===True,
WriteString[file,"fun1=0.5_dp*vertexC0tilde("<>SPhenoMassSq[currentScalar1,IndexScalar1] <>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<> ") \n"];,
WriteString[file,"fun1=-(2._dp*C00_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1] <>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<> ")-B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") - "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"*C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>")) \n"];
];
	WriteString[file, "If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp)).And. &  \n"];
	WriteString[file, "  & (Abs(fun1).lt.1.0E+30).And.(Abs(fun2).lt.1.0E+30)) Then \n"];
	WriteString[file,"tempFL=tempFL-coup1L*coup2R*(coup3R*fun1-coup3L*fun2) \n"];
	WriteString[file,"tempFR=tempFR-coup1R*coup2L*(coup3L*fun1-coup3R*fun2) \n"];
	WriteString[file, "End if \n"];,

PenguinVector1LeptonTo3LeptonsFFVvector,
	WriteString[file,"ratio1 ="<>SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>SPhenoMass[currentVector1,IndexVector1]<>" \n"];
	WriteString[file,"ratio2 ="<>SPhenoMass[currentFermion2,IndexFermion2]<>"/"<>SPhenoMass[currentVector1,IndexVector1]<>" \n"];
	(* WriteString[file,"fun1 = 4._dp*HZ_P(ratio1,ratio2)*sqrt((1._dp-mW2/mZ2)**3) \n"];
	WriteString[file,"fun2 = 4._dp*GZ_P(ratio1,ratio2)*sqrt((1._dp-mW2/mZ2)**3) \n"]; *)
	WriteString[file,"fun1 = -2._dp*HZ_P(ratio1,ratio2)*sqrt((1._dp-mW2/mZ2))/sqrt(2._dp) \n"];
	WriteString[file,"fun2 = -2._dp*GZ_P(ratio1,ratio2)*sqrt((1._dp-mW2/mZ2))/sqrt(2._dp) \n"];
	WriteString[file, "If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Real(fun2,dp).eq.Real(fun2,dp)).And. &  \n"];
	WriteString[file, "  & (Abs(fun1).lt.1.0E+30).And.(Abs(fun2).lt.1.0E+30)) Then \n"];
	WriteString[file,"tempFL=tempFL-coup1L*coup2L*(coup3L*fun1+coup3R*fun2) ! has to be checked\n"];
	WriteString[file,"tempFR=tempFR-coup1R*coup2R*(coup3R*fun1+coup3L*fun2) ! has to be checked \n"];
	WriteString[file, "End if \n"];,


PenguinVector1LeptonTo3LeptonsSSV,
If[UseAandHresults===True,
WriteString[file,"fun1=0.5_dp*vertexC0tilde("<>SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<> ") \n"];,
WriteString[file,"fun1=2._dp*C00_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1] <>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<> ") \n"];
];
	WriteString[file, "If ((Real(fun1,dp).eq.Real(fun1,dp)).And.(Abs(fun1).lt.1.0E+20_dp)) Then \n"];
	 If[conj[currentScalar1]=!=currentScalar1, 
	 WriteString[file,"tempFL=tempFL+coup1L*coup2R*coup3*fun1 \n"];
	WriteString[file,"tempFR=tempFR+coup1R*coup2L*coup3*fun1 \n"];,
          WriteString[file,"tempFL=tempFL-coup1L*coup2R*coup3*fun1 \n"];
	               WriteString[file,"tempFR=tempFR-coup1R*coup2L*coup3*fun1 \n"];
         ]; 
	WriteString[file,"End if \n"];,



(* ---------- Contributions to g-2 ------------ *)

PenguinGm2SSF,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*"<>"("<>SPhenoForm[-1.getElectricCharge[currentScalar1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"a_mu = a_mu - chargefactor*(2._dp*Real(coup1L*Conjg(coup1R),dp)*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
	WriteString[file,"      & +2._dp*"<>SPhenoMass[Electron,Ifermion]<>"*(Abs(coup1L)**2 + Abs(coup1R)**2)*F1(ratio)/" <>
SPhenoMassSq[currentFermion1,IndexFermion1] <>") \n"];
WriteString[file,"End if \n \n"];,

PenguinGm2FFS,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentFermion1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"a_mu = a_mu - chargefactor*(Real(coup1L*Conjg(coup1R),dp)*F3gamma(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
	WriteString[file,"      & - 2._dp*"<>SPhenoMass[Electron,Ifermion]<>"*(Abs(coup1L)**2 + Abs(coup1R)**2)*F2(ratio)/" <>SPhenoMassSq[currentFermion1,IndexFermion1] <>") \n"];
	WriteString[file,"End if \n \n"];,

PenguinGm2VVF,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentVector1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"ratio = 1._dp/ratio ! conventions in 1402.7065 are different \n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"a_mu = a_mu - 4._dp*chargefactor*ratio*(Real(coup1L*Conjg(coup1R),dp)*gVVF(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
	WriteString[file,"      & + 2._dp*"<>SPhenoMass[Electron,Ifermion]<>"*(Abs(coup1L)**2 + Abs(coup1R)**2)*fVVF(ratio)/" <>SPhenoMassSq[currentFermion1,IndexFermion1] <>") \n"];
WriteString[file,"End if \n \n"];,

PenguinGm2FFV,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"ratio = 1._dp/ratio ! conventions in 1402.7065 are different \n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentFermion1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"a_mu = a_mu - 8._dp*chargefactor*ratio*(Real(coup1L*Conjg(coup1R),dp)*gFFV(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"& \n"];
	WriteString[file,"      & + 2._dp*"<>SPhenoMass[Electron,Ifermion]<>"*(Abs(coup1L)**2 + Abs(coup1R)**2)*fFFV(ratio)/" <>SPhenoMassSq[currentFermion1,IndexFermion1] <>") \n"];
WriteString[file,"End if \n \n"];,


(* ---------- Contributions EDM ------------ *)

PenguinEDMFFS,
	 sign = "-("<>SPhenoForm[RelativeCoupling[VectorP,getBlank[currentFermion2]]]<>")*"; feynfun="A";
	WriteString[file,"!ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n "];
	WriteString[file,"!If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"!EDM = EDM "<>sign<>" chargefactor*Aimag(coup1R*Conjg(coup1L))*FeynFunction"<>feynfun<>"(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1] <>" \n"];
	WriteString[file,"!End if \n \n"];
	
	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentFermion1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"EDM = EDM - 0.5_dp*chargefactor*(Aimag(coup1L*Conjg(coup1R))*F3gamma(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>") \n"];
	WriteString[file,"End if \n \n"];,

PenguinEDMSSF,
	 sign = "+("<>SPhenoForm[RelativeCoupling[VectorP,getBlank[currentScalar2]]]<>")*"; feynfun="B";
	WriteString[file,"!ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n "];
	WriteString[file,"!If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"!EDM = EDM "<>sign<>" chargefactor*Aimag(coup1L*Conjg(coup1R))*FeynFunction"<>feynfun<>"(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1] <>" \n"];
	WriteString[file,"!End if \n \n"];

	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*"<>"("<>SPhenoForm[-1.getElectricCharge[currentScalar1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"EDM = EDM - chargefactor*(Aimag(coup1L*Conjg(coup1R))*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>") \n"];
	WriteString[file,"End if \n \n"];,

PenguinEDMVVF,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentVector1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"ratio = 1._dp/ratio ! conventions in 1402.7065 are different \n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"EDM = EDM - 2._dp*chargefactor*(Aimag(coup1L*Conjg(coup1R))*gVVF(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>") \n"];
	WriteString[file,"End if \n \n"];,

PenguinEDMFFV,
	WriteString[file,"ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n "];
	WriteString[file,"ratio = 1._dp/ratio ! conventions in 1402.7065 are different \n "];
	WriteString[file,"chargefactor = chargefactor*("<>SPhenoForm[-1.getElectricCharge[currentFermion1]/getElectricCharge[Electron]]<>")\n "];
	WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file,"EDM = EDM - 4._dp*chargefactor*(Aimag(coup1L*Conjg(coup1R))*gFFV(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>") \n"];
	WriteString[file,"End if \n \n"];,



(* ---------- Contributions to delta_VB ------------ *)

PenguinDeltaVBFFVscalar,
If[getBlank[currentScalar1]===SneutrinoNIX ,
WriteString[file,"vertex = vertex - chargefactor*(coup1L*coup2R*(-sqrt2*coup3L*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2]<>"& \n"];
WriteString[file,"& *C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") + oosqrt2*coup3R* & \n"];
WriteString[file,"& (B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>")-0.5_dp +"<> SPhenoMassSq[currentScalar1,IndexScalar1]<>"*C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>")))) \n"];,
WriteString[file,"vertex = vertex + chargefactor*(coup1L*coup2R*(-sqrt2*coup3R*"<>SPhenoMass[currentFermion1,IndexFermion1]<>"*"<>SPhenoMass[currentFermion2,IndexFermion2]<>"& \n"];
WriteString[file,"& *C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>") + oosqrt2*coup3L* & \n"];
WriteString[file,"& (B0(0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>")-0.5_dp +"<> SPhenoMassSq[currentScalar1,IndexScalar1]<>"*C0_3m("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentFermion2,IndexFermion2]<>")))) \n"];
];,
PenguinDeltaVBSSV,
(*	 WriteString[file,"vertex = vertex - chargefactor*(0.5_dp*sqrt2*coup1L*coup2R*coup3*("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"*C0_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") + B0(0._dp,"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") +0.5_dp)) \n"];,  *)
 WriteString[file,"vertex = vertex + chargefactor*(0.5_dp*sqrt2*coup1L*coup2R*coup3*("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"*C0_3m("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") + B0(0._dp,"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>") +0.5_dp)) \n"];, 


(* ---------- Contributions to l \[Rule] gamma l' ------------ *)

LLpFFVscalar,
         WriteString[file,"If ("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>".lt."<>SPhenoMassSq[currentFermion1,IndexFermion1]<>") Then \n"];
	WriteString[file," ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
	WriteString[file, " part(1) = -2._dp*"<>SPhenoMass[Electron,inState]<>"*F2(ratio)/"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file, " part(2) = F3gamma(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file,"Else \n"];         
         WriteString[file," ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n"];
         WriteString[file," part(1) = -2._dp*"<>SPhenoMass[Electron,inState]<>"*F1(ratio)/"<>SPhenoMassSq[currentScalar1,IndexScalar1] <>"\n"];
	WriteString[file," part(2) = -2._dp*F3(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1]  <>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
         WriteString[file,"End if \n"];         
	           WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file, "AL = AL - coup2L*(coup1R*part(1) + coup1L*part(2))*coup3L \n"];
	WriteString[file, "AR = AR - coup2R*(coup1L*part(1) + coup1R*part(2))*coup3L \n"];
	WriteString[file,"End If \n"];,
LLpFFVvector,
	WriteString[file,"! Generic structure not yet supported \n \n"];,
LLpSSV,
         WriteString[file,"If ("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>".lt."<>SPhenoMassSq[currentFermion1,IndexFermion1]<>") Then \n"];
	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
	WriteString[file, "part(1) = 2._dp*"<>SPhenoMass[Electron,inState]<>"*F1(ratio)/"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file, "part(2) = 2._dp*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"\n"];
         WriteString[file,"Else \n"];         
                     WriteString[file," ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n"];
                     WriteString[file, "part(1) = 2._dp*"<>SPhenoMass[Electron,inState]<>"*F2(ratio)/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
	WriteString[file, "part(2) = 2._dp*F4(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
                     WriteString[file,"End if \n"];         
	           WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file, "AL = AL + coup2L*(coup1R*part(1) + coup1L*part(2))*coup3 \n"];
	WriteString[file, "AR = AR + coup2R*(coup1L*part(1) + coup1R*part(2))*coup3 \n"]; 
	(* WriteString[file, "AL = AL - coup2L*(coup1R*part(1) + coup1L*part(2))*coup3 \n"];
	WriteString[file, "AR = AR - coup2R*(coup1L*part(1) + coup1R*part(2))*coup3 \n"]; *)
	WriteString[file,"End If \n"];,
LLpVVV,
	 WriteString[file,"If ("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>".lt."<>SPhenoMassSq[currentVector1,IndexVector1]<>") Then \n"];
	WriteString[file,"ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<> "\n"];
	WriteString[file, "part(1) = 3._dp*"<>SPhenoMass[Electron,inState]<>"*ratio*F2(ratio)/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n"];
	WriteString[file, "part(2) = 3._dp*F4(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<>"\n"];
	WriteString[file,"Else \n"];         
                     WriteString[file," ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
                     WriteString[file, "part(1) = 3._dp*"<>SPhenoMass[Electron,inState]<>"*F1(ratio)/"<>SPhenoMassSq[currentVector1,IndexVector1]<>"\n"];
		  WriteString[file, "part(2) = 3._dp*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1]<>" \n"];
         WriteString[file,"End if \n"]; 
          WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
(*	WriteString[file, "AL = AL - coup2L*(coup1L*part(1) + coup1R*part(2))*coup3 \n"];
	WriteString[file, "AR = AR - coup2R*(coup1R*part(1) + coup1L*part(2))*coup3 \n"]; *)
	WriteString[file, "AL = AL + coup2L*(coup1L*part(1) + coup1R*part(2))*coup3 \n"];
	WriteString[file, "AR = AR + coup2R*(coup1R*part(1) + coup1L*part(2))*coup3 \n"];
	WriteString[file,"End If \n"];,
LLpIn,
	WriteString[file, "AL = ZeroC \n"];
	WriteString[file, "AR = ZeroC\n"];,
LLpFin,
	WriteString[file, "amp(countvar,1) = chargefactor*AL \n"];
	WriteString[file, "amp(countvar,2) = chargefactor*AR\n"];
	WriteString[file, "countvar = countvar +1\n"];,


(* ---------- photonic Contributions to l \[Rule] gamma 3 l' ------------ *)

LLpLpLpFFVscalar,
	norm = "/"<>ToString[getSPhenoCoupling2[C[Electron,bar[Electron],VectorP],SPhenoCouplingsAll][[1,1]]]<>"(1,1)";
	WriteString[file,"If ("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>".lt."<>SPhenoMassSq[currentFermion1,IndexFermion1]<>") Then \n"];
	WriteString[file," ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
         WriteString[file,"fun1=(7._dp-36._dp*ratio+45._dp*ratio**2-16._dp*ratio**3+ & \n"];
		  WriteString[file,"6._dp*ratio**2*(-3._dp+2._dp*ratio)*Log(ratio))/(-1._dp+ratio)**4/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>" \n"];
	           WriteString[file, " part(1) = -2._dp*"<>SPhenoMass[Electron,in]<>"*F2(ratio)/"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file, " part(2) = F3gamma(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file,"Else \n"];         
         WriteString[file," ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n"];
	WriteString[file,"fun1=-(16._dp-45._dp*ratio+36._dp*ratio**2-7._dp*ratio**3& \n"];
		  WriteString[file,"   &+6._dp*(2._dp-3._dp*ratio)*Log(ratio))/(1._dp-ratio)**4/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n"];
	           WriteString[file," part(1) = -2._dp*"<>SPhenoMass[Electron,in]<>"*F1(ratio)/"<>SPhenoMassSq[currentScalar1,IndexScalar1] <>"\n"];
	WriteString[file," part(2) = -2._dp*F3(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1]  <>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
         WriteString[file,"End if \n"];         
	           WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file, "part = part/"<>SPhenoMass[Electron,in]<>"\n"];
	WriteString[file, "tempA2L = tempA2L + chargefactor*coup2L*(coup1R*part(1) + coup1L*part(2))*coup3L"<>norm<>" \n"];
	WriteString[file, "tempA2R = tempA2R + chargefactor*coup2R*(coup1L*part(1) + coup1R*part(2))*coup3L"<>norm<>" \n"];
	string1="tempA1R=tempA1R+chargefactor*coup1R*coup2L*coup3L*fun1"<>norm<>" \n";
	WriteString[file,string1];
	WriteString[file,StringReplace[string1,{"tempA1R"->"tempA1L","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,"End If \n"];,
LLpLpLpFFVvector,
	WriteString[file,"! Generic structure not yet supported \n \n"];,
LLpLpLpSSV,
	norm = "/"<>ToString[getSPhenoCoupling2[C[Electron,bar[Electron],VectorP],SPhenoCouplingsAll][[1,1]]]<>"(1,1)";
         WriteString[file,"If ("<>SPhenoMassSq[currentScalar1,IndexScalar1]<>".lt."<>SPhenoMassSq[currentFermion1,IndexFermion1]<>") Then \n"];
	WriteString[file,"ratio = "<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
	WriteString[file,"fun1=(-11._dp+18._dp*ratio-9._dp*ratio**2+2._dp*ratio**3& \n"];
		  WriteString[file,"   &-6._dp*Log(ratio))/(1._dp-ratio)**4/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>" \n"];
           	WriteString[file, "part(1) = 2._dp*"<>SPhenoMass[Electron,in]<>"*F1(ratio)/"<>SPhenoMassSq[currentFermion1,IndexFermion1] <>"\n"];
	WriteString[file, "part(2) = 2._dp*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1] <>"\n"];
         WriteString[file,"Else \n"];         
                     WriteString[file," ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<> "\n"];
	WriteString[file,"fun1=(2._dp-9._dp*ratio+18._dp*ratio**2-11._dp*ratio**3& \n"];
		  WriteString[file,"   &+6._dp*ratio**3*Log(ratio))/(1._dp-ratio)**4/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n"];
                    WriteString[file, "part(1) = 2._dp*"<>SPhenoMass[Electron,in]<>"*F2(ratio)/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
	WriteString[file, "part(2) = 2._dp*F4(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>"\n"];
                     WriteString[file,"End if \n"];         
	           WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file, "part = part/"<>SPhenoMass[Electron,in]<>"\n"];
	 WriteString[file, "tempA2L = tempA2L - chargefactor*coup2L*(coup1R*part(1) + coup1L*part(2))*coup3"<>norm<>" \n"];
	WriteString[file, "tempA2R = tempA2R - chargefactor*coup2R*(coup1L*part(1) + coup1R*part(2))*coup3"<>norm<>" \n"]; 
(* WriteString[file, "tempA2L = tempA2L + chargefactor*coup2L*(coup1R*part(1) + coup1L*part(2))*coup3"<>norm<>" \n"];
	WriteString[file, "tempA2R = tempA2R + chargefactor*coup2R*(coup1L*part(1) + coup1R*part(2))*coup3"<>norm<>" \n"];  *)
         string1="tempA1R=tempA1R+chargefactor*coup1R*coup2L*coup3*fun1"<>norm<>" \n";
         WriteString[file,string1];
	WriteString[file,StringReplace[string1,{"tempA1R"->"tempA1L","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,"End If \n"];,
LLpLpLpVVV,
	norm = "/"<>ToString[getSPhenoCoupling2[C[Electron,bar[Electron],VectorP],SPhenoCouplingsAll][[1,1]]]<>"(1,1)";
	WriteString[file,"X_ax="<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n"];
	WriteString[file,"If ("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>".lt."<>SPhenoMassSq[currentVector1,IndexVector1]<>") Then \n"];
	WriteString[file,"ratio = "<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<> "\n"];
	WriteString[file, "part(1) = 3._dp*"<>SPhenoMass[Electron,in]<>"*ratio*F2(ratio)/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n"];
	WriteString[file, "part(2) = 3._dp*F4(ratio)*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<>"\n"];
	WriteString[file, "fun1= (ratio*(-12._dp+11._dp*ratio+8._dp*ratio**2-7._dp*ratio**3- &\n"];
		   WriteString[file, "  & 2._dp*ratio*(12._dp-10._dp*ratio+ratio**2)*Log(ratio)))/(12._dp*(-1._dp+ratio)**4)/"<>SPhenoMassSq[currentVector1,IndexScalar1]<>" ! Corresponds to FZ of Pilaftsis \n"];
	  	WriteString[file,"Else \n"];         
                     WriteString[file," ratio = "<>SPhenoMassSq[currentVector1,IndexVector1]<>"/"<>SPhenoMassSq[currentFermion1,IndexFermion1]<> "\n"];
                     WriteString[file, "part(1) = 3._dp*"<>SPhenoMass[Electron,in]<>"*F1(ratio)/"<>SPhenoMassSq[currentVector1,IndexVector1]<>"\n"];
		  WriteString[file, "part(2) = 3._dp*F4(ratio)/"<>SPhenoMass[currentFermion1,IndexFermion1]<>" \n"];
	WriteString[file, "fun1 = (-7._dp+8._dp*ratio+11._dp*ratio**2-12._dp*ratio**3+ & \n"];
         WriteString[file,"  & (2._dp-20._dp*ratio+24._dp*ratio**2)*Log(ratio))/(12._dp*(-1._dp+ratio)**4)/"<>SPhenoMassSq[currentVector1,IndexScalar1]<>" \n"];
         WriteString[file,"End if \n"];         
	           WriteString[file,"If ((ratio.eq.ratio).and.(ratio.lt.1.0E+30_dp).and.(ratio.gt.1.0E-30_dp)) Then \n"];
	WriteString[file, "part = part/"<>SPhenoMass[Electron,in]<>"\n"];
	WriteString[file, "tempA2L = tempA2L + chargefactor*coup2L*(coup1L*part(1) + coup1R*part(2))*coup3"<>norm<>" \n"];
	WriteString[file, "tempA2R = tempA2R + chargefactor*coup2R*(coup1R*part(1) + coup1L*part(2))*coup3"<>norm<>" \n"];
	string1="tempA1R=tempA1R - 18._dp*chargefactor*coup1R*coup2R*coup3*fun1"<>norm<>" \n";
	WriteString[file,string1];
	WriteString[file,StringReplace[string1,{"tempA1R"->"tempA1L","coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"}]];
	WriteString[file,"End If \n"];,


(* ----------- Contributions to Z \[Rule] l l'-----------------*)

 
ZLLpSSV,
(*argument string for C loop functions*)
	WriteString[file,"! SSV diagram nr. "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>","<>ToString[p3]<>"\n"];
	LoopArgumentString="0._dp,"<>ToString[SPhenoMassSq[VectorZ]]<>",0._dp,"<>SPhenoMassSq[currentFermion1,IndexFermion1]<>","<>SPhenoMassSq[currentScalar2,IndexScalar2]<>","<>SPhenoMassSq[currentScalar1,IndexScalar1];
	WriteString[file,"C00u = Cget(\"C00 \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C1u  = Cget(\"C1  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C2u  = Cget(\"C2  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"Ai(1) = 2*coup3*coup2R*coup1L*C00u \n"];
	WriteString[file,"Ai(2) = 2*coup3*coup2L*coup1R*C00u \n"];
	WriteString[file,"Ai(3) = 2*coup3* "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*coup2L*coup1L*(C0u+C1u+C2u) \n"];
	WriteString[file,"Ai(4) = 2*coup3* "<>SPhenoMass[currentFermion1,IndexFermion1]<>"*coup2R*coup1R*(C0u+C1u+C2u) \n"];
	 WriteString[file,"amp(countvar,:) = amp(countvar,:) + Ai(:) *chargefactor \n"];, 
ZLLpIn,
	WriteString[file,"Ai(:) = 0._dp \n"];,
ZLLpFin,
	WriteString[file, "countvar = countvar+1 \n"];,
ZLLpFFVscalar,
	WriteString[file,"! FFVscalar diagram nr. "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>","<>ToString[p3]<>"\n"];
(*abbreviations for the masses*)
	M1Sq=SPhenoMassSq[currentFermion2,IndexFermion2];
	M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M3Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
	M1=SPhenoMass[currentFermion2,IndexFermion2];
	M2=SPhenoMass[currentFermion1,IndexFermion1];
(*argument string for C loop functions*)
	LoopArgumentString=ToString[SPhenoMassSq[VectorZ]]<>",0._dp,0._dp,"<>M1Sq<>","<>M2Sq<>","<>M3Sq;
	WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
	WriteString[file,"C00u = Cget(\"C00 \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C1u  = Cget(\"C1  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C2u  = Cget(\"C2  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"Ai(1) = -coup2R*coup3R*coup1L*(B0u-2*C00u+"<>ToString[SPhenoMassSq[VectorZ]]<>"*C1u) & \n"];
	WriteString[file,"& -coup1L*coup2R*"<>M1<>"*(coup3R*"<>M1<>"-coup3L*"<>M2<>")*C0u \n"];
	WriteString[file,"Ai(2) = -coup2L*coup3L*coup1R*(B0u-2*C00u+"<>ToString[SPhenoMassSq[VectorZ]]<>"*C1u) & \n"];
	WriteString[file,"& -coup1R*coup2L*"<>M1<>"*(coup3L*"<>M1<>"-coup3R*"<>M2<>")*C0u \n"];
	WriteString[file,"Ai(3) = 2*coup2L*coup3R*coup1L*"<>M1<>"&\n&*(C0u+C2u+C1u)-2*coup2L*coup1L*coup3L*"<>M2<>"*C1u \n"];
	WriteString[file,"Ai(4) = 2*coup2R*coup3L*coup1R*"<>M1<>"&\n&*(C0u+C2u+C1u)-2*coup2R*coup1R*coup3R*"<>M2<>"*C1u \n"];
	WriteString[file,"amp(countvar,:) = amp(countvar,:) + Ai(:)*chargefactor \n"];,
ZLLpFFVvector,
	WriteString[file,"! FFVvector diagram nr. "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>","<>ToString[p3]<>"\n"];
	M1Sq=SPhenoMassSq[currentFermion2,IndexFermion2];
	M2Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
	M1=SPhenoMass[currentFermion2,IndexFermion2];
	M2=SPhenoMass[currentFermion1,IndexFermion1];
	LoopArgumentString=""<>ToString[SPhenoMassSq[VectorZ]]<>",0._dp,0._dp,"<>M1Sq<>","<>M2Sq<>","<>M3Sq;
	StringReplaceRules={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"};
	WriteString[file,"B0u = B0(0._dp,"<>M2Sq<>","<>M3Sq<>") \n"];
	WriteString[file,"C00u = Cget(\"C00 \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C1u  = Cget(\"C1  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C2u  = Cget(\"C2  \","<>ToString[LoopArgumentString]<>") \n"];
	string1="2*coup1L*coup2L*(coup3L*(-B0u+2*C00u-"<>ToString[SPhenoMassSq[VectorZ]]<>"*(C1u+C2u)) & \n"
<>"& + "<>M1<>"*(coup3R*"<>M2<>"-coup3L*"<>M1<>")*C0u) \n";
	string2="-4*coup2R*coup1L*(coup3L*"<>M1<>"+coup3R*"<>M2<>")*C2u \n";
	WriteString[file,"Ai(1) = "<>string1];
	WriteString[file,"Ai(2) = "<>StringReplace[string1,StringReplaceRules]];
	WriteString[file,"Ai(3) = "<>string2];
	WriteString[file,"Ai(4) = "<>StringReplace[string2,StringReplaceRules]];
	WriteString[file,"amp(countvar,:) = amp(countvar,:) + Ai(:) * chargefactor \n"];,
ZLLpVVV,
	WriteString[file,"! VVV diagram nr. "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>","<>ToString[p3]<>"\n"];
	M1Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M2Sq=SPhenoMassSq[currentVector2,IndexVector2];
	M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
	M1=SPhenoMass[currentFermion1,IndexFermion1];
	M2=SPhenoMass[currentVector2,IndexVector2];
	LoopArgumentString="0._dp,"<>ToString[SPhenoMassSq[VectorZ]]<>",0._dp,"<>M1Sq<>","<>M2Sq<>","<>M3Sq;
	StringReplaceRules={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"};
	WriteString[file,"B0u = B0(0._dp,"<>M1Sq<>","<>M3Sq<>") \n"];
	WriteString[file,"C00u = Cget(\"C00 \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C1u  = Cget(\"C1  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C2u  = Cget(\"C2  \","<>ToString[LoopArgumentString]<>") \n"];
	string1="2*coup3*coup2L*coup1L*(B0u+2*C00u+C0u*"<>M2Sq<>"-"<>ToString[SPhenoMassSq[VectorZ]]<>"*C1u) \n";
	string2="-6*coup3*coup2R*coup1L*"<>M1<>"*(C1u+C2u) \n";
	WriteString[file,"Ai(1) = "<>string1];
	WriteString[file,"Ai(2) = "<>StringReplace[string1,StringReplaceRules]];
	WriteString[file,"Ai(3) = "<>string2];
	WriteString[file,"Ai(4) = "<>StringReplace[string2,StringReplaceRules]];
	WriteString[file,"amp(countvar,:) = amp(countvar,:) + Ai(:) * chargefactor \n"];,
ZLLpSVV,
	WriteString[file,"! SVV diagram nr. "<>ToString[j]<>" - "<>ToString[p1]<>","<>ToString[p2]<>","<>ToString[p3]<>"\n"];
	M1Sq=SPhenoMassSq[currentFermion1,IndexFermion1];
	M2Sq=SPhenoMassSq[currentScalar1,IndexScalar1];
	M3Sq=SPhenoMassSq[currentVector1,IndexVector1];
	M1=SPhenoMass[currentFermion1,IndexFermion1];
	If[flagFirstVertexFFV===1,
	LoopArgumentString="0._dp,"<>ToString[SPhenoMassSq[VectorZ]]<>",0._dp,"<>M1Sq<>","<>M2Sq<>","<>M3Sq;];
	If[flagFirstVertexFFV===0,
	LoopArgumentString="0._dp,"<>ToString[SPhenoMassSq[VectorZ]]<>",0._dp,"<>M1Sq<>","<>M3Sq<>","<>M2Sq;];
	StringReplaceRules={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L"};
	WriteString[file,"C0u  = Cget(\"C0  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C1u  = Cget(\"C1  \","<>ToString[LoopArgumentString]<>") \n"];
	WriteString[file,"C2u  = Cget(\"C2  \","<>ToString[LoopArgumentString]<>") \n"];
	If[flagFirstVertexFFV===1,
	string1="-"<>M1<>"*coup2R*coup1L*coup3*C0u \n";
	string2="-2*coup2L*coup1L*coup3*C2u \n";
	];
	If[flagFirstVertexFFV===0,
	string1="-"<>M1<>"*coup2L*coup1L*coup3*C0u \n";
	string2="-2*coup2R*coup1L*coup3*C1u \n";
	];
	WriteString[file,FortranLineBreak["Ai(1) = "<>string1]];
	WriteString[file,FortranLineBreak["Ai(2) = "<>StringReplace[string1,StringReplaceRules]]];
	WriteString[file,FortranLineBreak["Ai(3) = "<>string2]];
	WriteString[file,FortranLineBreak["Ai(4) = "<>StringReplace[string2,StringReplaceRules]]];
	WriteString[file,"amp(countvar,:) = amp(countvar,:) + Ai(:) * chargefactor \n"];,



(* --------------- C7 and C8 (q to q' gamma) ---------------- *)

PenguinC7smFinal,
	WriteString[file,"If (PrintDebugInformation) Write(*,*) \""<>ToString[p1]<>"  "<>ToString[p2]<>" "<>ToString[p3]<>" \", temp \n"];
	WriteString[file,"res(2) = res(2) + chargefactor*0.25_dp*temp/CnormSM \n"];,

PenguinC7NonsmFinal,
	WriteString[file,"If (PrintDebugInformation) Write(*,*) \""<>ToString[p1]<>"  "<>ToString[p2]<>" "<>ToString[p3]<>" \", temp \n"];
	WriteString[file,"res(3) = res(3) + chargefactor*0.25_dp*temp/Cnorm \n"];,

PenguinC7Start,
	WriteString[file,"temp = 0._dp \n"];,

PenguinC7FFVvector,
	WriteString[file,"xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<>") \n"];
	string= "temp = temp - coup1L*coup2L*xt*F1(xt)*coup3L/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n";
	WriteString[file,"If ((xt.eq.xt).and.(xt.lt.1.0E+30_dp).and.(xt.gt.1.0E-30_dp)) Then \n"];
If[currentC7andC8p==False,
WriteString[file,string];,
WriteString[file,StringReplace[string,{"coup1L"->"coup1R","coup2L"->"coup2R","coup1R"->"coup1L","coup2R"->"coup2L"}]];
];
WriteString[file,"End If \n"];,

PenguinC7FFVscalar,
		WriteString[file,"xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>") \n"];
		WriteString[file,"If ((xt.eq.xt).and.(xt.lt.1.0E+30_dp).and.(xt.gt.1.0E-30_dp)) Then \n"];
			string= "temp = temp +coup3L* (F1(xt)*coup1R*coup2L + F3(xt)*coup1L*coup2L*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMass[BottomQuark,gt1] <>"   )  /"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";

If[currentC7andC8p==False,
WriteString[file,string];,
WriteString[file,StringReplace[string,{"coup1L"->"coup1R","coup2L"->"coup2R","coup1R"->"coup1L","coup2R"->"coup2L"}]];
];
WriteString[file,"End If \n"];,

PenguinC7SSV,
	WriteString[file,"xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>") \n"];
(*	string= "temp = temp +coup3*(F2(xt)*coup1L*coup2R +F4(xt)*coup1L*coup2L*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMass[BottomQuark,gt1] <>"   )  /"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";  *)
	 string= "temp = temp -coup3*(F2(xt)*coup1L*coup2R +F4(xt)*coup1L*coup2L*"<>SPhenoMass[currentFermion1,IndexFermion1] <>"/"<>SPhenoMass[BottomQuark,gt1] <>"   )  /"<>SPhenoMassSq[currentScalar1,IndexScalar1]<>" \n";  
		WriteString[file,"If ((xt.eq.xt).and.(xt.lt.1.0E+30_dp).and.(xt.gt.1.0E-30_dp)) Then \n"];
If[currentC7andC8p==False,
WriteString[file,string];,
WriteString[file,StringReplace[string,{"coup1L"->"coup1R","coup2L"->"coup2R","coup1R"->"coup1L","coup2R"->"coup2L"}]];
];
WriteString[file,"End If \n"];,

PenguinC7VVV,
WriteString[file,"xt=("<>SPhenoMassSq[currentFermion1,IndexFermion1]<>"/"<>SPhenoMassSq[currentVector1,IndexVector1]<>") \n"];
WriteString[file,"If ((xt.eq.xt).and.(xt.lt.1.0E+30_dp).and.(xt.gt.1.0E-30_dp)) Then \n"];
 string= "temp = temp - coup1L*coup2L*xt*F2(xt)*coup3/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n";  
 (* string= "temp = temp + coup1L*coup2L*xt*F2(xt)*coup3/"<>SPhenoMassSq[currentVector1,IndexVector1] <>"\n";  *)

If[currentC7andC8p==False,
WriteString[file,string];,
WriteString[file,StringReplace[string,{"coup1L"->"coup1R","coup2L"->"coup2R","coup1R"->"coup1L","coup2R"->"coup2L"}]];
];
WriteString[file,"End If \n"];

];


];
