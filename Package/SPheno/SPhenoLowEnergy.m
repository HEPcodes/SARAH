(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



SPhenoLowEnergyIncluded =True;

GenerateSPhenoLowEnergy:=Block[{i,temp,file,ModuleName},

Print[StyleForm["Write routine for precision observables","Section",FontSize->12]];
Print["(in collaboration with K. Nickel, W. Porod, A. Vicente)"];
(*
Print["----------------------------------------------"];
Print["Writing Routines for  Low Energy Constraints  "];
Print["(in collaboration with K. Nickel, W. Porod,   "];
Print[" and A. Vicente)                              "];
Print["----------------------------------------------"];
*)


(* defines the block numbers of the different observables for the LesHouches output *)
ListOfLowEnergyNames={{ae,20,"(g-2)_e"},{amu,21,"(g-2)_mu"},{atau,22,"(g-2)_tau"},{EDMe,23,"EDM(e)"},{EDMmu,24,"EDM(mu)"},{EDMtau,25,"EDM(tau)"},{dRho,39,"delta(rho)"}};

If[IncludeOldObservables===True,
ListOfLowEnergyNames=Join[ListOfLowEnergyNames,{{BrMu3e,29,"mu->3e"},{BrTau3e,30,"tau->3e"},{BrTau3mu,31,"tau->3mu"},{GMuEgamma,0,""},{BRMuEgamma,26,",mu->e gamma"},{GTauEgamma,0,""},{BRTauEgamma,27,"tau->e gamma"},{GTauMugamma,0,""},{BRTauMugamma,28,"tau -> mu gamma"},{BRBtoSGamma,1,"b->s gamma"},{MuEAl,81,"mu-e,Al"},{MuETi,82,"mu-e,Ti"},{MuESr,83,"mu-e,Sr"},{MuESb,84,"mu-e,Sb"},{MuEAu,85,"mu-e,Au"},{MuEPb,86,"mu-e,Pb"},{TauEPi0,91,"tau->e pi"},{TauEEta,92,"tau->e eta"},{TauEEtap,93,"tau->e eta'"},{TauMuPi0,94,"tau->mu pi"},{TauMuEta,95,"tau->mu eta"},{TauMuEtap,96,"tau->mu eta'"},{GZMuE,0,""},{BRZMuE,40,"Z->mu e"},{GZTauE,0,""},{BRZTauE,41,"Z->tau e"},{GZTauMu,0,""},{BRZTauMu,42,"Z->tau mu"},{BRBsEE,5111,"Bs->ee"},{BRBsEESM,5110,"Bs->ee (SM)"},{BRBsMuMu,5221,"Bs->mu mu"},{BRBsMuMuSM,5220,"Bs->mu mu (SM)"},{BRBsMuE,5121,"Bs->mu e"},{BRBsMuESM,5120,"Bs->mu e (SM)"},{BRBdEE,4111,"Bd->ee"},{BRBdEESM,4110,"Bd>ee (SM)"},{BRBdMuMu,4221,"Bd->mu mu"},{BRBdMuMuSM,4220,"Bd->mu mu (SM)"},{BRBdTauTau,4331,"Bd->tau tau"},{BRBdTauTauSM,4330,"Bd->tau tau (SM)"},{GBsEE,0,""},{GBdEE,0,""},{GBsMuMu,0,""},{GBsMuE,0,""},{GBdMuMu,0,""},{GBdTauTau,0,""}}];
];

Get[ToFileName[$sarahSPhenoPackageDir,"SPhenoPreSARAH.m"]];
Get[ToFileName[$sarahSPhenoPackageDir,"SPhenoDiagrams.m"]];
CheckForPreSARAH;

(* sort it to get a increasing order *)
ListOfLowEnergyNames = Sort[ListOfLowEnergyNames,(#1[[2]]<#2[[2]])&];

(* add the names of the observables to the list of SPheno specific parameters and define them with dimension 0 (=>{})*)
For[i=1,i<=Length[ListOfLowEnergyNames],
SPhenoParameters=Join[SPhenoParameters,{{ListOfLowEnergyNames[[i,1]],{},{}}}];
i++;];

(* assume that all observables are real parameters *)
realVar=Join[realVar,{BRBtoSGamma,ae,amu,atau,BrMu3e,BrTau3e,BrTau3mu,EDMe,EDMmu,EDMtau,GMuEgamma,BRMuEgamma,GTauEgamma,BRTauEgamma,GTauMugamma,BRTauMugamma,dRho,MuEAl,MuETi,MuESr,MuESb,MuEAu,MuEPb,TauMuEta,TauMuEtap,TauMuPi0,TauEEta,TauEEtap,TauEPi0,BRZMuE,BRZTauE,BRZTauMu,GZMuE,GZTauE,GZTauMu,BRBsEE,BRBsMuMu,BRBsMuE,BRBdMuMu,BRBdEE,BRBdTauTau,BRBsTauTau,BRBsEESM,BRBsMuMuSM,BRBsMuESM,BRBdMuMuSM,BRBdEESM,BRBdTauTauSM,BRBsTauTauSM,GBsEE,GBsMuMu,GBsMuE,GBdMuMu,GBdEE,GBdTauTau,GBsTauTau}];


(* open the file to write *)
sphenoLow=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"LowEnergy_"<>ModelName<>".f90"]];
sphenoFlavorKitLFV=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"FlavorKit_LFV_"<>ModelName<>".f90"]];
sphenoFlavorKitQFV=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"FlavorKit_QFV_"<>ModelName<>".f90"]];
sphenoFlavorKitObs=OpenWrite[ToFileName[$sarahCurrentSPhenoDir,"FlavorKit_Observables_"<>ModelName<>".f90"]];

LowEnergyConstraintsParameterList={};



(* next lines define the Fortran header: declar file as module and say what other modules have to be loaded *)

For[i=1,i<=4,
Switch[i,
1,file=sphenoLow;
       ModuleName="LowEnergy_";,
2,file=sphenoFlavorKitLFV;
      ModuleName="FlavorKit_LFV_";,
3,file=sphenoFlavorKitQFV;
      ModuleName="FlavorKit_QFV_";,
4,file=sphenoFlavorKitObs;
      ModuleName="FlavorKit_Observables_";
];
(* function to write references for SARAH as well as date and time to the beginning of the file *)
WriteCopyRight[file];

WriteString[file,"Module "<>ModuleName<>ModelName<>" \n"];
WriteString[file,"Use Control \n"];
WriteString[file,"Use Couplings_"<>ModelName<>" \n"];
WriteString[file,"Use LoopCouplings_"<>ModelName<>" \n"];
WriteString[file,"Use LoopFunctions \n"];
WriteString[file,"Use LoopMasses_"<>ModelName<>" \n"];
WriteString[file,"Use StandardModel \n"];

If[i>1,
WriteString[file,"\n \n Contains \n \n"];
];
i++;];


(* there is a list of hard coded parameter values; this function writes them to the file *)
WriteNeededParameters;


(* ---- Here starts the output of the different observables --- *)

(* First, the FlavorKit observables *)
GeneratePreSARAHObservables["LFV",sphenoFlavorKitLFV];
GeneratePreSARAHObservables["QFV",sphenoFlavorKitQFV];

If[IncludeOldObservables===True,
(* leptonic observables l -> 3 l' and l -> l' gamma *)
Generate1LeptonTo3Leptons;
GenerateLgammaLp;

(* Z ->  l l' decays *)
GenerateZLLp;

(*B0 (s,d) meson -> l l decays *)
GenerateB0LLp;

(* mu - e conversion and tau to meson decays *)
GenerateLLpHadron;

(* Hadronic observables; so far only b -> s gamma *)
GenerateC7andC8;
WriteBtoQGamma;
];

(* g-2, EDMs and delta rho *)
GenerateGminus2; 
WriteDeltaRho;

(* This routine adds Fortran code given in a file contained in Package/SPheno/Include without any change to the currently considered file. *)
(* Here, we include the expressions for the necessary loop functions *)
For[i=1,i<=4,
Switch[i,
1,file=sphenoLow;
       ModuleName="LowEnergy_";,
2,file=sphenoFlavorKitLFV;
      ModuleName="FlavorKit_LFV_";,
3,file=sphenoFlavorKitQFV;
      ModuleName="FlavorKit_QFV_";,
4,file=sphenoFlavorKitObs;
      ModuleName="FlavorKit_Observables_";
];
AppendSourceCode["IncludeLowEnergy.f90",file];

(* Finish the low energy module and close the file *)
WriteString[file,"End Module "<>ModuleName<>ModelName<>" \n"];
Close[file];
i++;];

];


GenerateB0LLp:=Block[{i,j,temp,AllInternalParticles={},AllPenguinDiagrams={},AllBoxDiagrams={},AllWaveDiagrams={},AllInfoList,AllInfoList2,AllInfoList3},

(* This function generates all possible diagrams for B0 (s,d) -> ll; checks for necessary couplings and other parameters and passes this information to another routine which writes the Fortran function afterwards *)

Print["Write Function for B0(s,d) to l l  (by Kilian Nickel)"];

NeededCouplingsB0LLp={};
NeededMassesB0LLp={};

(* different gt1,gt2 Convention for boxes !!! *)
(* Generates all Box diagrams with incoming antiquark j=gt1 and quark i=gt2, outgoing lepton l=gt3 and antilepton k=gt4 *)
AllBoxDiagrams=GenerateBoxDiagrams[bar[BottomQuark],BottomQuark,bar[Electron],Electron];
(*Remove Insertion Order 3, because they are equivalent to Insertion Order 1.*)
AllBoxDiagrams=Select[AllBoxDiagrams,!((InsertionOrder/.#[[2]])===3)&];
(*Remove boxes with neutral vector bosons (VZ,VG,VP).Those diagrams are possible at tree level,which is dominant,and they lead to numerical problems.*)AllBoxDiagrams=Select[AllBoxDiagrams,(Intersection[{Internal[1],Internal[2],Internal[3],Internal[4]}/.#[[2]],{VG,(*VZ, *)VP}]=={})&];

 


B0LLpPropagators={};
B0LLpPropagatorsT={};
B0LLpPropagatorsU={};
(* Generate diagrams Electron,bar[Electron],propagator *)
PropagatorDiagrams=InsFields[{{C[Electron,bar[Electron],FieldToInsert[1]]},{Internal[1]->FieldToInsert[1],External[1]->Electron,External[2]->bar[Electron]}}];
(* remove the gluon (photon can have a contribution!), collect the others *)
PropagatorDiagrams=Select[PropagatorDiagrams,(Intersection[({Internal[1]}/.#[[2]]/. bar[x_]->x /. conj[x_]->x/.Glu->VG),{VG,VP}]=={})&];
(* these are vertices that appear in T and U channels *)
PropagatorDiagramsT=InsFields[{{C[bar[BottomQuark],Electron,FieldToInsert[1]]},{Internal[1]->FieldToInsert[1],External[1]->bar[BottomQuark],External[2]->Electron}}];
PropagatorDiagramsU=InsFields[{{C[bar[BottomQuark],bar[Electron],FieldToInsert[1]]},{Internal[1]->FieldToInsert[1],External[1]->bar[BottomQuark],External[2]->bar[Electron]}}];


(* Generate Penguin diagrams with different propagators, collect the propagators in a list*)
For[j=1,j<=Length[PropagatorDiagrams],j++,
temp=PropagatorDiagrams[[j]];
B0LLpPropagators=Join[B0LLpPropagators,{Internal[1]/.temp[[2]]}];
NeededCouplingsB0LLp=Join[NeededCouplingsB0LLp,(getSPhenoCoupling2[temp[[1]],SPhenoCouplingsAll][[1]]),(getSPhenoCoupling2[{C[Internal[1]/.temp[[2]],BottomQuark,bar[BottomQuark]]},SPhenoCouplingsAll][[1]])];
NeededMassesB0LLp=Intersection[Join[NeededMassesB0LLp,{SPhenoMass[Internal[1]/.temp[[2]]]}]];

If[!((Internal[1]/.temp[[2]])===VP),
AllPenguinDiagrams=Join[AllPenguinDiagrams,GeneratePenguinDiagrams[BottomQuark,bar[BottomQuark],Internal[1]/.temp[[2]]]];
];
];

(*remove Penguin diagrams with neutral vector bosons in the loop*)
AllPenguinDiagrams=Select[AllPenguinDiagrams,(Intersection[({Internal[1]}/.#[[2]]/.bar[x_]->x/.conj[x_]->x),{VG,(*VZ, *) VP}]=={})&];



(* collect masses and couplings of T,U channel propagators *)
For[j=1,j<=Length[PropagatorDiagramsT],j++,
	temp=PropagatorDiagramsT[[j]];
	B0LLpPropagatorsT=Join[B0LLpPropagatorsT,{Internal[1]/.temp[[2]]}];
	NeededCouplingsB0LLp=Join[NeededCouplingsB0LLp,(getSPhenoCoupling2[temp[[1]],SPhenoCouplingsAll][[1]]),(getSPhenoCoupling2[{C[conj[Internal[1]/.temp[[2]]],BottomQuark,bar[Electron]]},SPhenoCouplingsAll][[1]])];
	NeededMassesB0LLp=Join[NeededMassesB0LLp,{SPhenoMass[Internal[1]/.temp[[2]]]}];	
];
For[j=1,j<=Length[PropagatorDiagramsU],j++,
	temp=PropagatorDiagramsU[[j]];
	B0LLpPropagatorsU=Join[B0LLpPropagatorsU,{Internal[1]/.temp[[2]]}];
	NeededCouplingsB0LLp=Join[NeededCouplingsB0LLp,(getSPhenoCoupling2[temp[[1]],SPhenoCouplingsAll][[1]]),(getSPhenoCoupling2[{C[conj[Internal[1]/.temp[[2]]],BottomQuark,Electron]},SPhenoCouplingsAll][[1]])];
	NeededMassesB0LLp=Join[NeededMassesB0LLp,{SPhenoMass[Internal[1]/.temp[[2]]]}];	
];

NeededMassesB0LLp=Intersection[NeededMassesB0LLp];(*remove duplicates*)


(*generate wave diagrams*)

(* Changed by FS to work with getChargeFactor *)
(* AllWaveDiagrams=InsFields[{{C[BottomQuark,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->BottomQuark}}]; *)
(*generate wave diagrams*)
AllWaveDiagrams=InsFields[{{C[BottomQuark,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[AntiField[BottomQuark],AntiField[FieldToInsert[1]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->BottomQuark,External[2]->AntiField[BottomQuark]}}];

(*remove wave diagrams with massless particles*)
AllWaveDiagrams=Select[AllWaveDiagrams,((Intersection[({Internal[1],Internal[2]}/.#[[2]]/.bar[x_]->x /. conj[x_]->x),{VG, (*VZ, *) VP}]=={}))&];

(* produces a list with 4 elements: diagrams, masses in SPheno format, couplings in SPheno format, couplings in SARAH format *)
AllInfoList=MakeMassesCouplingLists[AllBoxDiagrams];
AllInfoList2=MakeMassesCouplingLists[AllPenguinDiagrams];
AllInfoList3=MakeMassesCouplingLists[AllWaveDiagrams];


(* Add the Electron and Z mass to the list of needed couplings, remove duplicates, replace all by SPheno specific names *)
NeededMassesB0LLp=Intersection[Join[NeededMassesB0LLp,AllInfoList[[2]],AllInfoList2[[2]],AllInfoList3[[2]],{SPhenoMass[Electron],SPhenoMass[BottomQuark],SPhenoMass[VectorZ]}]];

(* adds the squared masses to the list as own variables. remove 0 masses before *)
NeededMassesB0LLp=Select[NeededMassesB0LLp,!(#===0.)&];
NeededMassesB0LLp=Join[NeededMassesB0LLp,MakeSquaredMass/@NeededMassesB0LLp];
(* Collect all needed couplings in a list with their SPheno names, remove duplicates. The C[Z,Fe,bar[Fe]] has to be added manually. *)
couplingZLL=getSPhenoCoupling2[{C[VectorZ,Electron,bar[Electron]]},SPhenoCouplingsAll];
couplingWWZ=getSPhenoCoupling2[{C[VectorZ,VectorW,conj[VectorW]]},SPhenoCouplingsAll];
NeededCouplingsB0LLp=Intersection[Join[NeededCouplingsB0LLp,AllInfoList[[3]],AllInfoList2[[3]],AllInfoList3[[3]],couplingZLL[[1]],couplingWWZ[[1]]]];




(* The information about masses, couplings and diagrams is given to another function which writes the Fortran code *)
WriteB0LLp[NeededMassesB0LLp,NeededCouplingsB0LLp,AllBoxDiagrams,AllPenguinDiagrams,AllWaveDiagrams];
];

WriteB0LLp[masses_,couplings_,boxdiagrams_,penguindiagrams_,wavediagrams_]:=Block[{i,j,k,MassBound="MassB02",ampSquaredstring,NrBoxDiagrams,NrPenguinDiagrams,NrWaveDiagrams,NrAllDiagrams,VtxBottomBottom,VtxElectronElectron,prop,string1,string2,string3,string4,MassPropSq,subB={"coup1L"->"coup1R","coup2L"->"coup2R","coup3L"->"coup3R","coup4L"->"coup4R","coup1R"->"coup1L","coup2R"->"coup2L","coup3R"->"coup3L","coup4R"->"coup4L","coup5L"->"coup5R","coup5R"->"coup5L"},VtxBottomElectronC,VtxBottomElectron},


(* This function writes the Fortran code for B0 (s,d) ->ll' for SPheno *)

(* --- Create the header of the subroutine --- *)
(* The syntax of MakeSubroutineTitle is: Name of Subroutine; main part of parameters; some additional parameters which should appear at the beginning; some additional parameters which should appear at the end; file name *)
(* first vertex: incoming antiquark, gt1. 
second vertex: incoming quark, gt2.
third vertex: outgoing lepton, gt3
 fourth vertex: outgoing antilepton, gt4. *)

MakeSubroutineTitle["BrB0LLp",Flatten[{masses,couplings}],{"inState1","inState2","outState3","outState4"},{"width","BR","BR_SM","Amplitude"},sphenoLow];

(* --- Here starts the variable declaration --- *)
WriteString[sphenoLow,"Implicit None \n"];

(* 'MakeVariableList' takes a list of parameters and checks itself if they are real or complex and adds the dimension. Only the scope has to be given as second (Intent (in), Intent (out), Intent (inout), "")argument *)
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];
NrBoxDiagrams=Length[boxdiagrams];
NrPenguinDiagrams=Length[penguindiagrams];
NrWaveDiagrams=Length[wavediagrams];
NrAllDiagrams=NrBoxDiagrams+NrPenguinDiagrams+NrWaveDiagrams;
WriteString[sphenoLow,"Integer,Intent(in) :: inState1, inState2, outState3, outState4 \n"]; 
WriteString[sphenoLow,"Real(dp), Intent(out) :: width \n"];
WriteString[sphenoLow,"Real(dp), Intent(out), Optional :: BR, BR_SM\n"];
WriteString[sphenoLow,"Complex(dp), Intent(out), Optional ::  Amplitude("<>ToString[NrAllDiagrams]<>",8) \n"];
WriteString[sphenoLow,"Real(dp) :: chargefactor \n"];
WriteString[sphenoLow,"Real(dp) :: AmpSquared,AmpSquared2, AmpSquared_SM, AmpSquared2_SM, width_SM \n"];
(*
WriteString[sphenoLow,"Real(dp) :: MassB0s=5.3663_dp ! Mass of B0_s meson in GeV \n"];
WriteString[sphenoLow,"Real(dp) :: MassB0d=5.27950_dp ! Mass of B0_d meson in GeV \n"];
WriteString[sphenoLow,"Real(dp) :: fBs=0.227_dp ! meson amplitude B0_s in GeV \n"];
WriteString[sphenoLow,"Real(dp) :: fBd=0.190_dp ! meson amplitude B0_d in GeV \n"];
WriteString[sphenoLow,"Real(dp) :: TauB0s=1.472E-12_dp, TauB0d=1.525E-12_dp ! life times in seconds\n"]; *)
WriteString[sphenoLow,"Real(dp) :: MassB0s, MassB0d, fBs, fBd, TauB0s, TauB0d \n"];
WriteString[sphenoLow,"Real(dp) :: hbar=6.58211899E-16_dp ! reduced Planck constant (hbar) in eV*sec (PDG, 2010) \n"];
WriteString[sphenoLow,"Real(dp) :: MassB0,MassB02,fB0,GammaB0 \n"];
WriteString[sphenoLow,"Complex(dp) :: WCS("<>ToString[NrAllDiagrams]<>",4)=0._dp \n"]; (* scalar Wilson coefficients *)
WriteString[sphenoLow,"Complex(dp) :: WCV("<>ToString[NrAllDiagrams]<>",4)=0._dp \n"]; (* vector Wilson coefficients *)
WriteString[sphenoLow,"Complex(dp) :: WCT("<>ToString[NrAllDiagrams]<>",2)=0._dp \n"]; (* tensor Wilson coefficients *)
WriteString[sphenoLow,"Complex(dp) :: WCS_SM("<>ToString[NrAllDiagrams]<>",4)=0._dp \n"];
WriteString[sphenoLow,"Complex(dp) :: WCV_SM("<>ToString[NrAllDiagrams]<>",4)=0._dp \n"];
WriteString[sphenoLow,"Complex(dp) :: WCT_SM("<>ToString[NrAllDiagrams]<>",2)=0._dp \n"];

WriteString[sphenoLow,"Complex(dp) :: CS(4)=0._dp,CV(4)=0._dp,CT(4)=0._dp \n"]; (* final Wilson coefficients (sum) *)
WriteString[sphenoLow, "Complex(dp) :: FS=0._dp, FP=0._dp, FV=0._dp, FA=0._dp \n"]; (* for final sum of diagrams *)

WriteString[sphenoLow,"Complex(dp) :: CS_SM(4)=0._dp,CV_SM(4)=0._dp,CT_SM(4)=0._dp \n"];
WriteString[sphenoLow,"Complex(dp) :: FS_SM=0._dp, FP_SM=0._dp, FV_SM=0._dp, FA_SM=0._dp \n"];


WriteString[sphenoLow,"Complex(dp) :: coup1L, coup1R, coup2L, coup2R, coup3L, coup3R, coup4L, coup4R, coup3, coup5L,coup5R \n"];
WriteString[sphenoLow,"Integer :: gt1,gt2,gt3,gt4,gt5, i1, i2, i3, i4, cnt, n \n"];
WriteString[sphenoLow,"Integer :: genAh,genhh,genCha,genHpm \n"];
WriteString[sphenoLow,"Complex(dp) ::  D0u,D00u,C00u,C0u,C1u,C2u,C11u,B0u,B0C0u,B0u2,B1u,B1u2 \n "]; (* loop integrals for local use *)

(* Iname is used for bugfixing purposes *)
WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\"BrB0LLp \" \n"];

WriteString[sphenoLow,"fBd = f_B0d_CONST  \n"];
WriteString[sphenoLow,"fBs = f_B0s_CONST  \n"];
WriteString[sphenoLow,"TauB0d = tau_B0d \n"];
WriteString[sphenoLow,"TauB0s = tau_B0s\n"];
WriteString[sphenoLow,"MassB0d = mass_B0d \n"];
WriteString[sphenoLow,"MassB0s = mass_B0s \n"];

WriteString[sphenoLow,"WCS=0._dp \n"];
WriteString[sphenoLow,"WCV=0._dp \n"];
WriteString[sphenoLow,"WCT=0._dp \n"];
WriteString[sphenoLow,"CS=0._dp \n"];
WriteString[sphenoLow,"CV=0._dp \n"];
WriteString[sphenoLow,"CT=0._dp \n"];
WriteString[sphenoLow,"FV=0._dp \n"];
WriteString[sphenoLow,"FS=0._dp \n"];
WriteString[sphenoLow,"FP=0._dp \n"];
WriteString[sphenoLow,"FA=0._dp \n"];
WriteString[sphenoLow,"WCS_SM=0._dp \n"];
WriteString[sphenoLow,"WCV_SM=0._dp \n"];
WriteString[sphenoLow,"CS_SM=0._dp \n"];
WriteString[sphenoLow,"CV_SM=0._dp \n"];
WriteString[sphenoLow,"FV_SM=0._dp \n"];
WriteString[sphenoLow,"FS_SM=0._dp \n"];
WriteString[sphenoLow,"FP_SM=0._dp \n"];
WriteString[sphenoLow,"FA_SM=0._dp \n"];
WriteString[sphenoLow,"gt1 = inState2 \n"]; (*the strange/down quark*)
WriteString[sphenoLow,"gt2 = inState1 \n"]; (*the bottom quark *)
WriteString[sphenoLow,"gt3 = outState3 \n"]; 
(* gt3 is the external index in box calculations, but also used as propagator particle generation index in penguin diagrams*)
WriteString[sphenoLow,"gt4 = outState4 \n"]; 
WriteString[sphenoLow,"gt5 = outState3 \n"]; 
WriteString[sphenoLow,"If (gt1.eq.2) then\n"];
WriteString[sphenoLow,"  fB0 = fBs ! strange quark in B meson\n"];
WriteString[sphenoLow,"  MassB0 = MassB0s \n"];
WriteString[sphenoLow,"  GammaB0 = (hbar)/(TauB0s)*(1E-9) \n"];
WriteString[sphenoLow,"Else  \n"];
WriteString[sphenoLow," If (gt1.eq.1) then  \n"];
WriteString[sphenoLow,"  fB0 = fBd ! down quark in B meson\n"];
WriteString[sphenoLow,"  MassB0 = MassB0d \n"];
WriteString[sphenoLow,"  GammaB0 = (hbar)/(TauB0d)*(1E-9) \n"];
WriteString[sphenoLow," End If \n"];
WriteString[sphenoLow,"End If \n"];
WriteString[sphenoLow,"  MassB02 = MassB0**2 \n"];
WriteString[sphenoLow,"cnt = 1 \n"]; (* counts through all diagrams *)

WriteString[sphenoLow,"! for bugfixing \n"];
WriteString[sphenoLow,"genHpm = 2 \n"];
WriteString[sphenoLow,"genAh = 2 \n"];
WriteString[sphenoLow,"genhh = 2 \n"];
WriteString[sphenoLow,"genCha = 2 \n"];



(* This function takes the list of diagrams and writes it to the Fortran file. For this purpose it is necessary to give the identifier under which the corresponding, generic expressions are saved. Look for more information to the file SPhenoLoopContributions.   *)

WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!------tree level------\n"];
WriteString[sphenoLow,"!----------------------\n \n\n"];


WriteString[sphenoLow,"!------S channel------\n"];
For[j=1,j<=Length[B0LLpPropagators],j++,
prop=B0LLpPropagators[[j]];
WriteString[sphenoLow,"! propagator: "<>ToString[prop]<>"\n"];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"Do i1=1,"<>ToString[getGenSPheno[prop]]<>"\n"];
];
VtxBottomBottom=C[BottomQuark,bar[BottomQuark],prop];
VtxElectronElectron=C[Electron,bar[Electron],prop];
MassPropSq=SPhenoMassSq[prop,i1];
c1=getSPhenoCoupling2[VtxBottomBottom,SPhenoCouplingsAll];
c2=getSPhenoCoupling2[VtxElectronElectron,SPhenoCouplingsAll];
ind1=MakeIndicesCoupling[{bar[BottomQuark],gt2} ,{BottomQuark,gt1} ,{prop,i1},c1[[2]]];
ind2=MakeIndicesCoupling[{Electron,gt4},{bar[Electron],gt5},{prop,i1},c2[[2]]];
WriteVertexToFile[1,c1,ind1,getVertexType[VtxBottomBottom],sphenoLow];
WriteVertexToFile[2,c2,ind2,getVertexType[VtxElectronElectron],sphenoLow];
If[getType[prop]===S,
	string1="coup1L*coup2L/("<>MassPropSq<>"-MassB02) \n";
	string2="coup1L*coup2R/("<>MassPropSq<>"-MassB02) \n";
	WriteString[sphenoLow,FortranLineBreak["CS(1)=CS(1)+"<>string1]];
	WriteString[sphenoLow,FortranLineBreak["CS(2)=CS(2)+"<>string2]];
	WriteString[sphenoLow,FortranLineBreak["CS(3)=CS(3)+"<>StringReplace[string1,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CS(4)=CS(4)+"<>StringReplace[string2,subB]]];,
If[getType[prop]===V,
	string3="(-1)*coup1L*coup2L/("<>MassPropSq<>"-MassB02)\n";
	string4="(-1)*coup1L*coup2R/("<>MassPropSq<>"-MassB02)\n";
	WriteString[sphenoLow,FortranLineBreak["CV(1)=CV(1)+"<>string3]];
	WriteString[sphenoLow,FortranLineBreak["CV(2)=CV(2)+"<>string4]];
	WriteString[sphenoLow,FortranLineBreak["CV(3)=CV(3)+"<>StringReplace[string3,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CV(4)=CV(4)+"<>StringReplace[string4,subB]]];
];
];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"End Do \n"];
];
];

WriteString[sphenoLow,"!------T channel------\n"];
For[j=1,j<=Length[B0LLpPropagatorsT],j++,
prop=B0LLpPropagatorsT[[j]];
WriteString[sphenoLow,"! propagator: "<>ToString[prop]<>"\n"];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"Do i1=1,"<>ToString[getGenSPheno[prop]]<>"\n"];
];
VtxBottomElectron=C[Electron,bar[BottomQuark],prop];
VtxBottomElectronC=C[bar[Electron],BottomQuark,conj[prop]];
MassPropSq=SPhenoMassSq[prop,i1];
c1=getSPhenoCoupling2[VtxBottomElectron,SPhenoCouplingsAll];
c2=getSPhenoCoupling2[VtxBottomElectronC,SPhenoCouplingsAll];
ind1=MakeIndicesCoupling[{bar[BottomQuark],gt2} ,{Electron,gt4} ,{prop,i1},c1[[2]]];
ind2=MakeIndicesCoupling[{BottomQuark,gt1},{bar[Electron],gt5},{conj[prop],i1},c2[[2]]];
WriteVertexToFile[1,c1,ind1,getVertexType[VtxBottomElectron],sphenoLow];
WriteVertexToFile[2,c2,ind2,getVertexType[VtxBottomElectronC],sphenoLow];
If[getType[prop]===S,
	string1="(-1)*coup1L*coup2L/(2*("<>MassPropSq<>")) \n";
	string4="(-1)*coup1R*coup2L/(2*("<>MassPropSq<>")) \n";
	WriteString[sphenoLow,FortranLineBreak["CS(1)=CS(1)+"<>string1]];
	WriteString[sphenoLow,FortranLineBreak["CS(3)=CS(3)+"<>StringReplace[string1,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CV(2)=CV(2)+"<>string4]];
	WriteString[sphenoLow,FortranLineBreak["CV(4)=CV(4)+"<>StringReplace[string4,subB]]];
If[getType[prop]===V,
	string2="2*coup1R*coup2L/("<>MassPropSq<>")\n";
	string3="(-1)*coup1L*coup2L/("<>MassPropSq<>")\n";
	WriteString[sphenoLow,FortranLineBreak["CS(2)=CS(2)+"<>string2]];
	WriteString[sphenoLow,FortranLineBreak["CS(4)=CS(4)+"<>StringReplace[string2,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CV(1)=CV(1)+"<>string3]];
	WriteString[sphenoLow,FortranLineBreak["CV(3)=CV(3)+"<>StringReplace[string3,subB]]];
];
];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"End Do \n"];
];
];

WriteString[sphenoLow,"!------U channel------\n"];
For[j=1,j<=Length[B0LLpPropagatorsU],j++,
prop=B0LLpPropagatorsU[[j]];
WriteString[sphenoLow,"! propagator: "<>ToString[prop]<>"\n"];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"Do i1=1,"<>ToString[getGenSPheno[prop]]<>"\n"];
];
VtxBottomElectronC=C[bar[Electron],bar[BottomQuark],prop];
VtxBottomElectron=C[Electron,BottomQuark,conj[prop]];
MassPropSq=SPhenoMassSq[prop,i1];
c1=getSPhenoCoupling2[VtxBottomElectronC,SPhenoCouplingsAll];
c2=getSPhenoCoupling2[VtxBottomElectron,SPhenoCouplingsAll];
ind1=MakeIndicesCoupling[{bar[BottomQuark],gt2} ,{bar[Electron],gt5} ,{prop,i1},c1[[2]]];
ind2=MakeIndicesCoupling[{BottomQuark,gt1},{Electron,gt4},{conj[prop],i1},c2[[2]]];
WriteVertexToFile[1,c1,ind1,getVertexType[VtxBottomElectronC],sphenoLow];
WriteVertexToFile[2,c2,ind2,getVertexType[VtxBottomElectron],sphenoLow];
If[getType[prop]===S,
	string1="(-1)*coup1L*coup2L/(2*("<>MassPropSq<>")) \n";
	string3="(-1)*coup1R*coup2L/(2*("<>MassPropSq<>")) \n";
	WriteString[sphenoLow,FortranLineBreak["CS(1)=CS(1)+"<>string1]];
	WriteString[sphenoLow,FortranLineBreak["CS(3)=CS(3)+"<>StringReplace[string1,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CV(1)=CV(1)+"<>string3]];
	WriteString[sphenoLow,FortranLineBreak["CV(3)=CV(3)+"<>StringReplace[string3,subB]]];
If[getType[prop]===V,
	string2="(-2)*coup1R*coup2R/("<>MassPropSq<>")\n";
	string4="(-1)*coup1L*coup2R/("<>MassPropSq<>")\n";
	WriteString[sphenoLow,FortranLineBreak["CS(2)=CS(2)+"<>string2]];
	WriteString[sphenoLow,FortranLineBreak["CS(4)=CS(4)+"<>StringReplace[string2,subB]]];
	WriteString[sphenoLow,FortranLineBreak["CV(2)=CV(2)+"<>string3]];
	WriteString[sphenoLow,FortranLineBreak["CV(4)=CV(4)+"<>StringReplace[string3,subB]]];
];
];
If[getGenSPheno[prop]>=2,
WriteString[sphenoLow,"End Do \n"];
];
];
WriteString[sphenoLow,"CS(:)=CS(:)*1/oo16pi2 \n"];
WriteString[sphenoLow,"CV(:)=CV(:)*1/oo16pi2 \n"];
WriteString[sphenoLow,"CT(:)=CT(:)*1/oo16pi2 \n\n"];



WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!------box diagrams----\n"];
WriteString[sphenoLow,"!----------------------\n \n\n"];

MassBoundB0s="5.3663_dp"; (*mass of the B0s meson in GeV*)
MassBoundB0d = "5.27950_dp"; (*mass of the B0d meson in GeV*)

WriteString[sphenoLow,"!--different index convention for boxes---\n "];
WriteString[sphenoLow,"gt1 = instate1 ! bottom\n "];
WriteString[sphenoLow,"gt2 = instate2 ! strange/down\n "];


AddBoxContributions2[boxdiagrams,BoxB0LLpFFS,BoxB0LLpFFSFFV,BoxB0LLpFFV,BoxB0LLpIn,BoxB0LLpFin,MassBound,True,sphenoLow];

(* WritePrintFCoefficientsB0LLp[" boxes: ",1,NrBoxDiagrams,False,sphenoLow]; *)


WriteString[sphenoLow,"!--restore original index convention ---\n "];
WriteString[sphenoLow,"gt1 = instate2 !strange/down \n "];
WriteString[sphenoLow,"gt2 = instate1 !bottom \n "];


WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!---penguin diagrams---\n"];
WriteString[sphenoLow,"!----------------------\n \n"];



AddPenguinContributions2[AllPenguinDiagrams,PenguinB0LLpFFVscalar,PenguinB0LLpFFVvector,PenguinB0LLpSSV,PenguinB0LLpFFSscalar,PenguinB0LLpFFSvector,PenguinB0LLpSSS,PenguinB0LLpVVV,PenguinB0LLpSVV,PenguinB0LLpIn,PenguinB0LLpFin,True,MassBound,True,sphenoLow];


(*
AddPenguinContributions2[AllPenguinDiagrams,PenguinB0LLpFFVscalar,PenguinB0LLpFFVvector,PenguinB0LLpSSV,PenguinB0LLpFFSscalar,PenguinB0LLpFFSvector,PenguinB0LLpSSS,PenguinB0LLpVVV,PenguinB0LLpSVV,PenguinB0LLpIn,PenguinB0LLpFin,True,MassBound,True,sphenoLow];
*)

(* WritePrintFCoefficientsB0LLp[" penguins: ",NrBoxDiagrams+1,NrBoxDiagrams+NrPenguinDiagrams,False,sphenoLow]; *)

WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!-----wave diagrams----\n"];
WriteString[sphenoLow,"!----------------------\n \n \n"];

(* this routine needs access to lists of propagators. thats why they are defined globally. gt1=i, gt2=j *)

AddWaveContributions2[wavediagrams,WaveB0LLpFFS,WaveB0LLpFFV,None,WaveB0LLpIn,WaveB0LLpFin,MassBound,True,sphenoLow];


(* WritePrintFCoefficientsB0LLp[" waves: ",NrBoxDiagrams+NrPenguinDiagrams+1,NrAllDiagrams,False,sphenoLow]; *)

(* In all (1loop) amplitude expressions the factor 1/(16pi^2) must be factored out!*)
WriteString[sphenoLow,"Do n=1,4 \n"];
WriteString[sphenoLow,"  CS(n)=CS(n)+sum(WCS(:,n)) \n"];
WriteString[sphenoLow,"  CV(n)=CV(n)+sum(WCV(:,n)) \n"];
WriteString[sphenoLow,"  CS_SM(n)=CS_SM(n)+sum(WCS_SM(:,n)) \n"];
WriteString[sphenoLow,"  CV_SM(n)=CV_SM(n)+sum(WCV_SM(:,n)) \n"];
WriteString[sphenoLow,"  If (n.le.2) then\n"];
WriteString[sphenoLow,"   CT(n)=CT(n)+sum(WCT(:,n)) \n"];
WriteString[sphenoLow,"  End If \n"];
WriteString[sphenoLow,"End Do\n"];

(*need to reset gt3 to the original value *)
WriteString[sphenoLow,"gt3=gt5 \n"];

(* Calculate the width and the branching ratio *)
WriteString[sphenoLow,"FS= 0.25_dp*MassB02*fB0/(MFd(gt1)+MFd(gt2))*( CS(1)+CS(2)-CS(3)-CS(4)) \n"];
WriteString[sphenoLow,"FP= 0.25_dp*MassB02*fB0/(MFd(gt1)+MFd(gt2))*(-CS(1)+CS(2)-CS(3)+CS(4)) \n"];
WriteString[sphenoLow,"FV= -0.25_dp*fB0*( CV(1)+CV(2)-CV(3)-CV(4)) \n"];
WriteString[sphenoLow,"FA= -0.25_dp*fB0*(-CV(1)+CV(2)-CV(3)+CV(4)) \n"];

WriteString[sphenoLow,"FS_SM= 0.25_dp*MassB02*fB0/(MFd(gt1)+MFd(gt2))*( CS_SM(1)+CS_SM(2)-CS_SM(3)-CS_SM(4)) \n"];
WriteString[sphenoLow,"FP_SM= 0.25_dp*MassB02*fB0/(MFd(gt1)+MFd(gt2))*(-CS_SM(1)+CS_SM(2)-CS_SM(3)+CS_SM(4)) \n"];
WriteString[sphenoLow,"FV_SM= -0.25_dp*fB0*( CV_SM(1)+CV_SM(2)-CV_SM(3)-CV_SM(4)) \n"];
WriteString[sphenoLow,"FA_SM= -0.25_dp*fB0*(-CV_SM(1)+CV_SM(2)-CV_SM(3)+CV_SM(4)) \n"];

ampSquaredstring="AmpSquared = oo16pi2*oo16pi2*( 2 * abs(FS)**2 * (MassB02 - (MFe(gt3)+MFe(gt4))**2) &\n
& + 2 *abs(FP)**2 * (MassB02 - (MFe(gt3)-MFe(gt4))**2) &\n
& + 2 *abs(FV)**2 * (MassB02*(MFe(gt4)-MFe(gt3))**2 - (MFe2(gt4)-MFe2(gt3))**2) &\n
& + 2 *abs(FA)**2 * (MassB02*(MFe(gt4)+MFe(gt3))**2 - (MFe2(gt4)-MFe2(gt3))**2) &\n
& + 4 *REAL(FS*conjg(FV)) *(MFe(gt3)-MFe(gt4)) *(MassB02 + (MFe(gt3)+MFe(gt4))**2) &\n
& + 4 *REAL(FP*conjg(FA)) *(MFe(gt3)+MFe(gt4)) *(MassB02 - (MFe(gt3)-MFe(gt4))**2)  ) \n";
WriteString[sphenoLow,StringReplace[ampSquaredstring,{"MFe"->ToString[SPhenoMass[Electron]]}]];
ampSquaredstringSM=StringReplace[ampSquaredstring,{"AmpSquared"->"AmpSquared_SM","FS"->"FS_SM","FA"->"FA_SM","FV"->"FV_SM","FP"->"FP_SM"}];
WriteString[sphenoLow,StringReplace[ampSquaredstringSM,{"MFe"->ToString[SPhenoMass[Electron]]}]];
WriteString[sphenoLow,StringReplace["AmpSquared2=2*MassB02*oo16pi2*oo16pi2*(abs(FS)**2+abs(FP+2*MFe(gt4)*FA)**2)\n",{"MFe"->ToString[SPhenoMass[Electron]]}]];
WriteString[sphenoLow,StringReplace["width = oo16pi * AmpSquared / MassB0 * sqrt(1-((MFe(gt4)+MFe(gt3))/MassB0)**2) &\n
& * sqrt(1-((MFe(gt4)-MFe(gt3))/MassB0)**2) \n",{"MFe"->ToString[SPhenoMass[Electron]]}]];
WriteString[sphenoLow,StringReplace["width_SM = oo16pi * AmpSquared_SM / MassB0 * sqrt(1-((MFe(gt4)+MFe(gt3))/MassB0)**2) &\n
          & * sqrt(1-((MFe(gt4)-MFe(gt3))/MassB0)**2) \n",{"MFe"->ToString[SPhenoMass[Electron]]}]];
WriteString[sphenoLow, "BR = width / GammaB0 \n"];
WriteString[sphenoLow,"BR_SM = width_SM / GammaB0 \n"];

WriteString[sphenoLow,"Iname=Iname-1\n"];

WriteString[sphenoLow,"If (Present(Amplitude)) Then \n"];
WriteString[sphenoLow,"Amplitude(1:"<>ToString[NrAllDiagrams]<>",1:4) = oo16pi2 * WCS(:,1:4) \n"]; 
WriteString[sphenoLow,"Amplitude(1:"<>ToString[NrAllDiagrams]<>",5:8) = oo16pi2 * WCV(:,1:4) \n"]; 
WriteString[sphenoLow,"End if \n"];

Clear[NrBoxDiagrams];
Clear[NrPenguinDiagrams];
Clear[NrWaveDiagrams];
Clear[NrAllDiagrams];

WriteString[sphenoLow,"End Subroutine BrB0LLp  \n\n"];
];




GenerateLgammaLp:=Block[{i,j,temp,AllInternalParticles={},AllAddedCouplings={}},

(* This function generate all possible diagrams for l -> l' gamma; checks for necessary couplings and other parameters  and passes this information to another routine which writes the Fortran function afterwards *)

Print["Write Function for l to l' gamma"];

(* Generates all penguin diagrams with two external charged leptons (here only called 'Electron', but the generation is NOT fixed!) and a photon (particle name is saved as 'VectorP'). Note, a list with names for phyiscal parameters can be found in Packages/init.nb in the function InitSMParameters. The function InsFields is similar to the function 'InsertFields' known by FeynArts *)
AllDiagrams = InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[VectorP,FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->VectorP}}];

(* we remove all diagrams which contain massless particles since they don't contribute *)
AllDiagrams=Select[AllDiagrams,((Intersection[({Internal[1],Internal[2],Internal[3]} /.#[[2]] /. bar[x_]->x /. conj[x_]->x),{VP, (*VZ, *) VG}]=={}))&];

(* As next step we collect all appearing particles and names *)
For[j=1,j<=Length[AllDiagrams ],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. AllDiagrams[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllDiagrams[[j,1]]];
j++;];

(* Here, we check for doublets, add the mass of the external particles (charged Leptons, ie. agian called just 'Eletron'; remove again mass=0 particles (just to be really sure); and replace the couplings by their SPheno specific names (done with 'getSPhenoCoupling' *)
NeededMasses=DeleteCases[Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Electron]}]],0.];
NeededMassesLLp =Join[NeededMasses, MakeSquaredMass/@NeededMasses];
NeededCouplingsLLp=Intersection[Flatten[(getSPhenoCoupling[#,SPhenoCouplingsAll][[1]]&)/@Intersection[AllAddedCouplings /. C[a__]->Cp[a]]]];

(* The information about masses, couplings and diagrams is given to another function which writes the Fortran code *)
WriteLgammaLp[NeededMassesLLp,NeededCouplingsLLp,AllDiagrams];

];

WriteLgammaLp[masses_,couplings_,diagrams_]:=Block[{i,j,k},
(* This function writes the Fotrance code for l -> l' gamma for SPheno *)

(* --- Create the header of the subroutine --- *)
(* The syntax if MakeSubroutineTitle is: Name of Subroutine; main part of parameters; some additional parameters which should appear at the beginning; some additional parameters which should appear at the end; file name *)

MakeSubroutineTitle["BrLgammaLp",Flatten[{masses,couplings}],{"inState","outState"},{"width","BR","Amplitude"},sphenoLow];

(* --- Here starts the variable declaration --- *)
WriteString[sphenoLow,"Implicit None \n"];

(* 'MakeVariableList' takes a list of parameters and checks itself if they are real or complex and adds the dimension. Only the scope has to be given as second (Intent (in), Intent (out), Intent (inout), "")argument *)
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];

WriteString[sphenoLow,"Integer,Intent(in) :: inState, outState \n"];
WriteString[sphenoLow,"Real(dp), Intent(out) ::width \n"];
WriteString[sphenoLow,"Real(dp), Intent(out), Optional :: BR\n"];
WriteString[sphenoLow,"Complex(dp), Intent(out), Optional ::  Amplitude("<>ToString[Length[diagrams]]<>",2) \n"];
WriteString[sphenoLow,"Real(dp) :: part(2), ratio, chargefactor \n"];
WriteString[sphenoLow,"Complex(dp) :: amp("<>ToString[Length[diagrams]]<>",2), AL, AR \n"];
WriteString[sphenoLow,"Complex(dp) :: coup1L, coup1R, coup2L, coup2R, coup3L, coup3R, coup3 \n"];
WriteString[sphenoLow,"Integer :: gt1, gt2, gt3, gt4, i1, i2, i3, i4, countvar \n \n"];

WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\"BrLgammaLp \" \n\n"];

WriteString[sphenoLow,"gt1 = inState \n"];
WriteString[sphenoLow,"gt2 = outState \n"];
WriteString[sphenoLow,"countvar = 1 \n"];

(* This function takes the list of diagrams and writes it to the Fortran file. For this purpose it is necessary to give the identifier under which the corresponding, generic expressions are saved. Look for more information to the file SPhenoLoopContributions.   *)
AddPenguinContributions2[diagrams,LLpFFVscalar,LLpFFVvector,LLpSSV,None,None,None,LLpVVV,None,LLpIn,LLpFin,True,"mf_l2(instate)",False,sphenoLow];

(* Sum up the different contributions to the amplitude *)
WriteString[sphenoLow,"AL=oo32pi2*Sum(amp(:,1)) \n"];
WriteString[sphenoLow,"AR=oo32pi2*Sum(amp(:,2)) \n"];

(* Calculate the widht and the branching ratio *)
WriteString[sphenoLow,"width=0.25_dp*mf_l(inState)**3*(Abs(AL)**2+Abs(AR)**2)*Alpha/("<>ToString[getSPhenoCoupling2[C[Electron,bar[Electron],VectorP],SPhenoCouplingsAll][[1,1]]]<>"(1,1)**2)  \n"];
WriteString[sphenoLow,"If (Present(Br)) Then \n"];
WriteString[sphenoLow,"If (inState.Eq.2) Br=width/(width+GammaMu)\n"];
WriteString[sphenoLow,"If (inState.Eq.3) Br=width/(width+GammaTau) \n"];
WriteString[sphenoLow,"End If \n"];

(* Finish the Fortran routine *)
WriteString[sphenoLow,"If (Present(Amplitude)) Amplitude=oo32pi2*amp \n"];

WriteString[sphenoLow,"Iname=Iname-1\n"];


WriteString[sphenoLow,"End Subroutine BrLgammaLp  \n\n"];
];


Generate1LeptonTo3Leptons:=Block[{i,j},
Print["Writing Function for 1 Lepton to 3 Leptons"];

ScalarPropagators = {};
VectorPropagators = {};

For[i=1,i<=Length[Particles[Current]],
Switch[Particles[Current][[i,4]],
S,
	If[conj[Particles[Current][[i,1]]]===Particles[Current][[i,1]],
	If[FreeQ[VerticesInv[All],C[Electron,bar[Electron],Particles[Current][[i,1]]]]==False,
	ScalarPropagators = Join[ScalarPropagators,{Particles[Current][[i,1]]}];
	];
	];,
V,
	If[conj[Particles[Current][[i,1]]]===Particles[Current][[i,1]],
	If[FreeQ[VerticesInv[All],C[Electron,bar[Electron],Particles[Current][[i,1]]]]==False,
	VectorPropagators = Join[VectorPropagators,{Particles[Current][[i,1]]}];
	];
	];
	];
i++;];

AllInternalParticles=Flatten[{ScalarPropagators,VectorPropagators}];
AllAddedCouplings={};

For[i=1,i<=Length[ScalarPropagators],
AllAddedCouplings=Join[AllAddedCouplings,{C[ScalarPropagators[[i]],Electron,bar[Electron]]}];
i++;];

For[i=1,i<=Length[VectorPropagators],
AllAddedCouplings=Join[AllAddedCouplings,{C[VectorPropagators[[i]],Electron,bar[Electron]]}];
i++;];


temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->Electron}}];

WaveFunctionContribution={};
For[i=1,i<=Length[temp],
(* If[FreeQ[SMParticles,getBlank[Internal[1] /. temp[[i,2]]]] && FreeQ[SMParticles,getBlank[Internal[2] /. temp[[i,2]]]], *)
 If[FreeQ[{VP,VG} (* massless *),(getBlank[Internal[1] /. temp[[i,2]]]) |  (getBlank[Internal[2] /. temp[[i,2]]])] ,
WaveFunctionContribution = Join[WaveFunctionContribution,{temp[[i]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2]}/. temp[[i,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[i,1]]];
 ]; 
i++;];


PenguinContributionsScalar=Table[{},{Length[ScalarPropagators]}];
PenguinContributionsVector=Table[{},{Length[VectorPropagators]}];

For[i=1,i<=Length[ScalarPropagators],
temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[ScalarPropagators[[i]],FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->ScalarPropagators[[i]]}}];

For[j=1,j<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]])] ,
PenguinContributionsScalar[[i]]= Join[PenguinContributionsScalar[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];
i++;];

For[i=1,i<=Length[VectorPropagators],
(* If[FreeQ[massless,VectorPropagators[[i]]], *)
temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[VectorPropagators[[i]],FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->VectorPropagators[[i]]}}];

temp=GeneratePenguinDiagrams[Electron,bar[Electron],VectorPropagators[[i]]];

For[j=1,j<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]])],
(* PenguinContributionsVector[[i]]= Join[PenguinContributionsVector[[i]],{temp[[j]]/. C[a__]->Cp[a]}]; *)
PenguinContributionsVector[[i]]= Join[PenguinContributionsVector[[i]],{temp[[j]]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];
(* ]; *)
i++;];

PenguinContributionsVector = DeleteCases[PenguinContributionsVector,{}];


BoxContributions={};
temp=GenerateBoxDiagrams[Electron,bar[Electron],Electron,bar[Electron]];

For[j=1,j<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]]) | (getBlank[Internal[4] /. temp[[j,2]]])] && FreeQ[getType/@getBlank/@({Internal[1],Internal[2],Internal[3],Internal[4]} /. temp[[j,2]]),V],
If[getType[Internal[1] /. temp[[j,2]]]===F,
If[(InsertionOrder /. temp[[j,2]])==1 || (InsertionOrder /. temp[[j,2]])==4,
BoxContributions= Join[BoxContributions,{temp[[j]] /. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3],Internal[4]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
];
];
 ]; 
j++;];

NeededMasses=Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Electron]}]];
NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses =Join[NeededMasses, MakeSquaredMass/@NeededMasses];


NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];



LowEnergyConstraintsParameterList=Join[LowEnergyConstraintsParameterList,{{OneLeptonToThreeLeptons,NeededMasses,NeededCouplings}}];

 Write1LeptonTo3Leptons[NeededMasses,NeededCouplings,WaveFunctionContribution,PenguinContributionsScalar,PenguinContributionsVector,BoxContributions];

];




Write1LeptonTo3Leptons[masses_,couplings_,wave_,penguinScalar_,penguinVector_,box_] :=Block[{i,j,k,fermions,scalars},

MakeSubroutineTitle["BR1LeptonTo3Leptons",Flatten[{masses,couplings}],{"in","out"},{"BR"},sphenoLow];
WriteString[sphenoLow,"Implicit None \n"];
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];
WriteString[sphenoLow,"Integer,Intent(in) :: in, out \n"];
WriteString[sphenoLow,"Real(dp), Intent(out) :: BR \n\n"];
WriteString[sphenoLow,"Integer :: gt1, gt2, gt3, gt4, gt5, i1, i2, i3, i4 \n"];
WriteString[sphenoLow,"Integer :: iVectorCounter \n"];
WriteString[sphenoLow,"Complex(dp)::A1L,A1R,A2L,A2R,FL,FR,FLL,FLR,FRL,FRR \n"];
WriteString[sphenoLow,"Complex(dp) :: FLsave("<>ToString[Length[VectorPropagators]]<>"), FRsave("<>ToString[Length[VectorPropagators]]<>"), FLLs("<>ToString[Length[VectorPropagators]]<>"), FRRs("<>ToString[Length[VectorPropagators]]<>"), FRLs("<>ToString[Length[VectorPropagators]]<>"), FLRs("<>ToString[Length[VectorPropagators]]<>") \n"];
WriteString[sphenoLow,"Complex(dp)::tempA1L,tempA1R,tempA2L,tempA2R,tempFL,tempFR,tempFLR,tempFRL& \n"];
WriteString[sphenoLow,"&,B1L,B1R,B2L,B2R,B3L,B3R,B4L,B4R& \n"];
WriteString[sphenoLow,"&,tempHL, tempHR, H2L,H2R,H3L,H3R,wertL,wertR,fun1c,fun2c \n"];
WriteString[sphenoLow,"Complex(dp)::C0m, D0m2, D27m2, vertex1L, vertex1R, vertex2L, vertex2R \n"];
WriteString[sphenoLow,"Real(dp) ::  X_ax, chargefactor, ratio, ratio1, ratio2, PartialResults(6) \n"];
WriteString[sphenoLow,"Real(dp),Parameter::oo576Pi2=1._dp/(576._dp*Pi2)\n"];
WriteString[sphenoLow,"Complex(dp) :: fun1, fun2, fun3, fun4, part(2),& \n"];
WriteString[sphenoLow," &    coup1L, coup1R, coup2L, coup2R, coup3L, coup3R, coup3, coup4L, coup4R \n \n"];
WriteString[sphenoLow,"Complex(dp),Parameter::mat0(3,3)=0._dp \n \n"];


WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\"BR1LeptonTo3Leptons\" \n\n"];
AddCalcSquaredMasses[masses,sphenoLow];

WriteString[sphenoLow,"BR=0._dp \n \n"];
WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=out \n "];
WriteString[sphenoLow,"gt4=out \n "];

WriteString[sphenoLow, "!----------------------------- \n"];
WriteString[sphenoLow, "! Wave Function Contributions \n"];
WriteString[sphenoLow, "!----------------------------- \n"];

WriteString[sphenoLow,"A1L=0._dp \n"];
WriteString[sphenoLow,"A1R=0._dp\n"];
WriteString[sphenoLow,"A2L=0._dp\n"];
WriteString[sphenoLow,"A2R=0._dp\n\n\n"];
WriteString[sphenoLow,"FL = 0._dp \n"];
WriteString[sphenoLow,"FR = 0._dp \n"];
WriteString[sphenoLow,"FLsave = 0._dp \n"];
WriteString[sphenoLow,"FRsave = 0._dp \n"];
WriteString[sphenoLow,"FLLs = 0._dp \n"];
WriteString[sphenoLow,"FRRs = 0._dp \n"];
WriteString[sphenoLow,"FRLs = 0._dp \n"];
WriteString[sphenoLow,"FLRs = 0._dp \n"];
WriteString[sphenoLow,"FLL = 0._dp \n"];
WriteString[sphenoLow,"FRL = 0._dp \n"];
WriteString[sphenoLow,"FLR = 0._dp \n"];
WriteString[sphenoLow,"FRR = 0._dp \n\n\n"];
WriteString[sphenoLow,"H2L = 0._dp \n"];
WriteString[sphenoLow,"H2R = 0._dp \n"];
WriteString[sphenoLow,"H3L = 0._dp \n"];
WriteString[sphenoLow,"H3R = 0._dp \n\n"];

WriteString[sphenoLow,"B1L=0._dp\n"];
WriteString[sphenoLow,"B1R=0._dp\n"];
WriteString[sphenoLow,"B2L=0._dp\n"];
WriteString[sphenoLow,"B2R=0._dp\n"];
WriteString[sphenoLow,"B3L=0._dp\n"];
WriteString[sphenoLow,"B3R=0._dp\n"];
WriteString[sphenoLow,"B4L=0._dp\n"];
WriteString[sphenoLow,"B4R=0._dp\n\n\n"];


WriteString[sphenoLow,"gt1 = in \n"];
WriteString[sphenoLow,"gt2 = out \n\n\n"];

WriteString[sphenoLow,"iVectorCounter = 1 \n"];

For[i=1,i<=Length[VectorPropagators],
currentPropagator = VectorPropagators[[i]];
WriteString[sphenoLow,"! "<> ToString[VectorPropagators[[i]]]<>" \n \n"];
If[getGenSPheno[VectorPropagators[[i]]]>1,WriteString[sphenoLow,"Do i3 = 1,"<>ToString[getGenSPheno[VectorPropagators[[i]]]]<>"\n"];
];

If[FreeQ[(* massless *) {VP,VG},VectorPropagators[[i]]]==False,
WriteString[sphenoLow,"tempA1L = 0._dp   \n"];
WriteString[sphenoLow,"tempA1R = 0._dp   \n"];
WriteString[sphenoLow,"tempA2L = 0._dp   \n"];
WriteString[sphenoLow,"tempA2R = 0._dp   \n"];,
WriteString[sphenoLow,"tempFL = 0._dp   \n"];
WriteString[sphenoLow,"tempFR = 0._dp   \n"];
WriteString[sphenoLow,"tempFLR = 0._dp   \n"];
WriteString[sphenoLow,"tempFRL = 0._dp   \n"];
];

If[FreeQ[(* massless *) {VP,VG},VectorPropagators[[i]]]==True,
AddWaveContributions2[wave,Wave1LeptonTo3LeptonsFFSVector,Wave1LeptonTo3LeptonsVVVScalar,None,None,None,"mf_l2(in)",False,sphenoLow];
];

If[FreeQ[(* massless *) {VP,VG},VectorPropagators[[i]]]==False,
If[False,
WriteString[sphenoLow,"A1L=A1L+oo576Pi2*tempA1L   \n"];
WriteString[sphenoLow,"A1R=A1R+oo576Pi2*tempA1R  \n"];
WriteString[sphenoLow,"A2L=A2L+oo32Pi2*tempA2L  \n"];
WriteString[sphenoLow,"A2R=A2R+oo32Pi2*tempA2R \n"];
];,

c1=getSPhenoCoupling2[C[Electron,bar[Electron],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,in},{bar[Electron],in},{VectorPropagators[[i]],i3},c1[[2]]];
ind2= MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];

(* WriteString[sphenoLow,"FL = tempFL*vertex1L+tempFLR*vertex1R  \n"];
WriteString[sphenoLow,"FR = tempFR*vertex1R+tempFRL*vertex1L \n"];  *)
WriteString[sphenoLow,"FLsave(iVectorCounter) = FLsave(iVectorCounter) + tempFL*vertex1L+tempFLR*vertex1R  \n"];
WriteString[sphenoLow,"FRsave(iVectorCounter) = FRsave(iVectorCounter) + tempFR*vertex1R+tempFRL*vertex1L   \n"];
];

WriteString[sphenoLow,"iVectorCounter = iVectorCounter +1 \n"];
If[getGenSPheno[VectorPropagators[[i]]]>1,WriteString[sphenoLow,"End Do\n"];];

i++;];

WriteString[sphenoLow," \n\n\n"];

For[i=1,i<=Length[ScalarPropagators],
currentPropagator =ScalarPropagators[[i]]; 
WriteString[sphenoLow,"! "<> ToString[ScalarPropagators[[i]]]<>" \n \n"];

If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"Do i3 = "<>ToString[getGenSPhenoStart[ScalarPropagators[[i]]]]<>","<>ToString[getGenSPheno[ScalarPropagators[[i]]]]<>"\n"];
];
WriteString[sphenoLow,"tempHL  = 0._dp  \n"];
WriteString[sphenoLow,"tempHR  = 0._dp  \n"];
c1=getSPhenoCoupling2[C[Electron,bar[Electron],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,in},{bar[Electron],in},{ScalarPropagators[[i]],i3},c1[[2]]];
ind2= MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{ScalarPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
AddWaveContributions2[wave,Wave1LeptonTo3LeptonsFFSScalar,None,None,None,None,"mf_l2(in)",False,sphenoLow];
WriteString[sphenoLow,"H2L = H2L +0.5_dp*tempHL*vertex2R/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"H2R = H2R +0.5_dp*tempHR*vertex2R/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"H3L = H3L - tempHL*vertex2L/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"H3R = H3R - tempHR*vertex2L/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
If[getGenSPheno[ScalarPropagators[[i]]]>1,
WriteString[sphenoLow,"End Do\n"];
];
i++;];


WriteString[sphenoLow, "!----------------------------- \n"];
WriteString[sphenoLow, "! Vector Penguin Contributions \n"];
WriteString[sphenoLow, "!----------------------------- \n"];

WriteString[sphenoLow,"iVectorCounter = 1 \n"];

For[i=1,i<=Length[penguinVector],
currentPropagator = External[3] /. penguinVector[[i,1,2]];
WriteString[sphenoLow, "\n ! --------- "<>ToString[currentPropagator] <>" ----------- \n \n"];
If[FreeQ[massless,currentPropagator],
WriteString[sphenoLow,"tempFL = 0._dp   \n"];
WriteString[sphenoLow,"tempFR = 0._dp   \n"];

AddPenguinContributions2[penguinVector[[i]],PenguinVector1LeptonTo3LeptonsFFVscalar,PenguinVector1LeptonTo3LeptonsFFVvector,PenguinVector1LeptonTo3LeptonsSSV,None,None,None,None,None,None,None,True,"mf_l2(in)",False,sphenoLow];


(* WriteString[sphenoLow,"FL=oo16pi2*FL+oo16pi2*tempFL\n"];
WriteString[sphenoLow,"FR=oo16pi2*FR+oo16pi2*tempFR\n"]; *)
WriteString[sphenoLow,"FLsave(iVectorCounter)=oo16pi2*FLsave(iVectorCounter)+oo16pi2*tempFL\n"];
WriteString[sphenoLow,"FRsave(iVectorCounter)=oo16pi2*FRsave(iVectorCounter)+oo16pi2*tempFR\n"];


c1=getSPhenoCoupling[C[Electron,bar[Electron],External[3] /. penguinVector[[i,1,2]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,1},{bar[Electron],1},{External[3] /. penguinVector[[i,1,2]],gt1},c1[[2]]];
If[(External[3] /. penguinVector[[i,1,2]])===VectorZ,
WriteString[sphenoLow,"fun1=1._dp/("<>SPhenoForm[leftCoupling]<>"**2*(1._dp-mW2/mZ2)*mZ2)\n"];,
WriteString[sphenoLow,"fun1=1._dp/("<>SPhenoForm[leftCoupling]<>"**2*(1._dp-mW2/mZ2)*"<>SPhenoForm[SPhenoMassSq[(External[3] /. penguinVector[[i,1,2]])]]<>")\n"];
];

(*
WriteString[sphenoLow,"FLL=FLL-fun1*"<>ToString[c1[[1,1]]]<>ind1[[1]]<>"*FL\n"];
WriteString[sphenoLow,"FLR=FLR-fun1*"<>ToString[c1[[1,2]]]<>ind1[[1]]<>"*FL\n"];
WriteString[sphenoLow,"FRL=FRL-fun1*"<>ToString[c1[[1,1]]]<>ind1[[1]]<>"*FR\n"];
WriteString[sphenoLow,"FRR=FRR-fun1*"<>ToString[c1[[1,2]]]<>ind1[[1]]<>"*FR\n"];
*)

WriteString[sphenoLow,"FLLs(iVectorCounter)=FLLs(iVectorCounter)-fun1*"<>ToString[c1[[1,1]]]<>ind1[[1]]<>"*FLsave(iVectorCounter)\n"];
WriteString[sphenoLow,"FLRs(iVectorCounter)=FLRs(iVectorCounter)-fun1*"<>ToString[c1[[1,2]]]<>ind1[[1]]<>"*FLsave(iVectorCounter)\n"];
WriteString[sphenoLow,"FRLs(iVectorCounter)=FRLs(iVectorCounter)-fun1*"<>ToString[c1[[1,1]]]<>ind1[[1]]<>"*FRsave(iVectorCounter)\n"];
WriteString[sphenoLow,"FRRs(iVectorCounter)=FRRs(iVectorCounter)-fun1*"<>ToString[c1[[1,2]]]<>ind1[[1]]<>"*FRsave(iVectorCounter)\n"];,

WriteString[sphenoLow,"tempA1L = 0._dp   \n"];
WriteString[sphenoLow,"tempA1R = 0._dp   \n"];
WriteString[sphenoLow,"tempA2L = 0._dp   \n"];
WriteString[sphenoLow,"tempA2R = 0._dp   \n"];
AddPenguinContributions2[penguinVector[[i]],LLpLpLpFFVscalar,LLpLpLpFFVvector,LLpLpLpSSV,None,None,None,LLpLpLpVVV,None,None,None,True,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow,"A1L=A1L+oo576Pi2*tempA1L   \n"];
WriteString[sphenoLow,"A1R=A1R+oo576Pi2*tempA1R  \n"];
WriteString[sphenoLow,"A2L=A2L+ oo32Pi2*tempA2L  \n"];
WriteString[sphenoLow,"A2R=A2R+ oo32Pi2*tempA2R \n"];

];
WriteString[sphenoLow,"iVectorCounter = iVectorCounter + 1\n"];

i++;];

WriteString[sphenoLow, "! Summing up the massive vectors \n"];
WriteString[sphenoLow,"FLL = Sum(FLLs(:)) \n"];
WriteString[sphenoLow,"FLR = Sum(FLRs(:)) \n"];
WriteString[sphenoLow,"FRL = Sum(FRLs(:)) \n"];
WriteString[sphenoLow,"FRR = Sum(FRRs(:)) \n"];
WriteString[sphenoLow,"FL = Sum(FLsave(:)) \n"];
WriteString[sphenoLow,"FR = Sum(FRsave(:)) \n"];


WriteString[sphenoLow, "!------------------------------ \n"];
WriteString[sphenoLow, "! Scalar Penguin Contributions \n"];
WriteString[sphenoLow, "!------------------------------ \n"];

For[i=1,i<=Length[penguinScalar],
currentPropagator =External[3] /. penguinScalar[[i,1,2]]; 
If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"Do gt3 = "<>ToString[getGenSPhenoStart[currentPropagator]]<>","<>ToString[getGenSPheno[currentPropagator]]<>"\n"];
];
WriteString[sphenoLow,"tempHL  = 0._dp  \n"];
WriteString[sphenoLow,"tempHR  = 0._dp  \n"];
c1=getSPhenoCoupling2[C[Electron,bar[Electron],currentPropagator],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{currentPropagator,gt3},c1[[2]]];
ind2= MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{currentPropagator,gt3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
AddPenguinContributions2[penguinScalar[[i]],None,None,None,PenguinScalar1LeptonTo3LeptonsFFS,None,PenguinScalar1LeptonTo3LeptonsSSS,None,None,PenguinScalar1LeptonTo3LeptonsStart,PenguinScalar1LeptonTo3LeptonsFinal,True,"mf_l2(in)",False,sphenoLow];
WriteString[sphenoLow,"H2L = H2L +0.5_dp*tempHL*vertex1R/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"H2R = H2R +0.5_dp*tempHR*vertex1L/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"H3L = H3L - tempHL*vertex1L/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"H3R = H3R - tempHR*vertex1R/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
If[getGenSPheno[ScalarPropagators[[i]]]>1,
WriteString[sphenoLow,"End Do\n"];
];
i++;];

WriteString[sphenoLow, "!------------------------------ \n"];
WriteString[sphenoLow, "! Box Contributions \n"];
WriteString[sphenoLow, "!------------------------------ \n"];


WriteString[sphenoLow, "B1L=0._dp\n"];
WriteString[sphenoLow, "B1R=0._dp\n"];
WriteString[sphenoLow, "B2L=0._dp\n"];
WriteString[sphenoLow, "B2R=0._dp\n"];
WriteString[sphenoLow, "B3L=0._dp\n"];
WriteString[sphenoLow, "B3R=0._dp\n"];
WriteString[sphenoLow, "B4L=0._dp\n"];
WriteString[sphenoLow, "B4R=0._dp\n"];

WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=out \n "];
WriteString[sphenoLow,"gt4=out \n "];


AddBoxContributions2[box,Box1LeptonTo3Leptons,None,None,None,None,"mf_l2(in)",False,sphenoLow];


If[AuxiliaryHyperchargeCoupling, WriteString[sphenoLow,SPhenoForm[hyperchargeCoupling] <>" = " <>SPhenoForm[ExpressionAuxHypercharge] <>"\n"];];
If[FreeQ[ParameterDefinitions,"Hypercharge-Coupling"]===False &&  FreeQ[ParameterDefinitions,"Left-Coupling"]===False,
WriteString[sphenoLow,"fun1=oo16pi2/(("<>SPhenoForm[leftCoupling]<>"*"<>SPhenoForm[hyperchargeCoupling]<>")**2/("<>SPhenoForm[leftCoupling]<>"**2+"<>SPhenoForm[hyperchargeCoupling]<>"**2))\n"];,
WriteString[sphenoLow,"fun1=oo16pi2/(4._dp*Pi*Alpha*0.22290)\n"];
];
WriteString[sphenoLow,"B1L=fun1*B1L\n"];
WriteString[sphenoLow,"B1R=fun1*B1R\n"];
WriteString[sphenoLow,"B2L=fun1*B2L\n"];
WriteString[sphenoLow,"B2R=fun1*B2R\n"];
WriteString[sphenoLow,"B3L=fun1*B3L\n"];
WriteString[sphenoLow,"B3R=fun1*B3R\n"];
WriteString[sphenoLow,"B4L=fun1*B4L\n"];
WriteString[sphenoLow,"B4R=fun1*B4R\n\n\n"];



If[FreeQ[ParameterDefinitions,"Hypercharge-Coupling"]===False &&  FreeQ[ParameterDefinitions,"Left-Coupling"]===False,
WriteString[sphenoLow,"fun1=oo16pi2/(("<>SPhenoForm[leftCoupling]<>"*"<>SPhenoForm[hyperchargeCoupling]<>")**2/("<>SPhenoForm[leftCoupling]<>"**2+"<>SPhenoForm[hyperchargeCoupling]<>"**2))\n"];,
WriteString[sphenoLow,"fun1=oo16pi2/(4._dp*Pi*Alpha*0.22290)\n"];
];

WriteString[sphenoLow,"B2L=B2L+fun1*H2L \n"];
WriteString[sphenoLow,"B2R=B2R+fun1*H2R \n"];
WriteString[sphenoLow,"B3L=B3L+fun1*H3L \n"];
WriteString[sphenoLow,"B3R=B3R+fun1*H3R \n\n"];

WriteString[sphenoLow,"!-------------------------\n"];
WriteString[sphenoLow,"!now the branching ratio\n"];
WriteString[sphenoLow,"!-------------------------\n"];
WriteString[sphenoLow,"BR=Abs(A1L)**2+Abs(A1R)**2&\n"];
WriteString[sphenoLow,"&-4._dp*Real(A1L*Conjg(A2R)+A2L*Conjg(A1R),dp)&\n"];
WriteString[sphenoLow,"&+(Abs(A2L)**2+Abs(A2R)**2)&\n"];
WriteString[sphenoLow,"&*(16._dp*Log(mf_l(in)/mf_l(out))-22._dp)/3._dp&\n"];
WriteString[sphenoLow,"&+(Abs(B1L)**2+Abs(B1R)**2)/6._dp&\n"];
WriteString[sphenoLow,"&+(Abs(B2L)**2+Abs(B2R)**2)/3._dp&\n"];
WriteString[sphenoLow,"&+(Abs(B3L)**2+Abs(B3R)**2)/24._dp&\n"];
WriteString[sphenoLow,"&+6._dp*(Abs(B4L)**2+Abs(B4R)**2)&\n"];
WriteString[sphenoLow,"&-Real(B3L*Conjg(B4L)+B3R*Conjg(B4R),dp)&\n"];
WriteString[sphenoLow,"&+2._dp*Real(A1L*Conjg(B1L)+A1R*Conjg(B1R)&\n"];
WriteString[sphenoLow,"&+A1L*Conjg(B2L)+A1R*Conjg(B2R),dp)/3._dp&\n"];
WriteString[sphenoLow,"&-4._dp*Real(A2R*Conjg(B1L)+A2L*Conjg(B1R)&\n"];
WriteString[sphenoLow,"&+A2L*Conjg(B2R)+A2R*Conjg(B2L),dp)/3._dp&\n"];
WriteString[sphenoLow,"&+(2._dp*(Abs(FLL)**2+Abs(FRR)**2)+Abs(FLR)**2+Abs(FRL)**2&\n"];
WriteString[sphenoLow,"&+2._dp*Real(B1L*Conjg(FLL)+B1R*Conjg(FRR)&\n"];
WriteString[sphenoLow,"&+B2L*Conjg(FLR)+B2R*Conjg(FRL),dp)&\n"];
WriteString[sphenoLow,"&+4._dp*Real(A1L*Conjg(FLL)+A1R*Conjg(FRR),dp)&\n"];
WriteString[sphenoLow,"&+2._dp*Real(A1L*Conjg(FLR)+A1R*Conjg(FRL),dp)&\n"];
WriteString[sphenoLow,"&-8._dp*Real(A2R*Conjg(FLL)+A2L*Conjg(FRR),dp)&\n"];
WriteString[sphenoLow,"&-4._dp*Real(A2L*Conjg(FRL)+A2R*Conjg(FLR),dp))/3._dp\n"];

WriteString[sphenoLow,"!----------------------------------------------------------------------\n"];
WriteString[sphenoLow,"!taking alpha(Q=0) instead of alpha(m_Z) as this contains most of the\n"];
WriteString[sphenoLow,"!running of the Wilson coefficients\n"];
WriteString[sphenoLow,"!----------------------------------------------------------------------\n"];
WriteString[sphenoLow,"BR=oo32pi*Alpha**2*mf_l(in)**5*BR\n"];

WriteString[sphenoLow,"If (in.Eq.2) Then\n"];
WriteString[sphenoLow,"BR=BR/GammaMu\n"];
WriteString[sphenoLow,"Else If (in.Eq.3) Then\n"];
WriteString[sphenoLow,"BR=BR/GammaTau\n"];
WriteString[sphenoLow,"End If\n \n\n"];

WriteString[sphenoLow,"!-------------------------\n"];
WriteString[sphenoLow,"!Partial contributions\n"];
WriteString[sphenoLow,"!-------------------------\n"];

WriteString[sphenoLow, "If (PrintPartialContributions) Then \n"];
WriteString[sphenoLow,"PartialResults(1)=Abs(A1L)**2+Abs(A1R)**2 & \n"];
WriteString[sphenoLow,"&-4._dp*Real(A1L*Conjg(A2R)+A2L*Conjg(A1R),dp)& \n"];
WriteString[sphenoLow,"&+(Abs(A2L)**2+Abs(A2R)**2)& \n"];
WriteString[sphenoLow,"&*(16._dp*Log(mf_l(in)/mf_l(out))-22._dp)/3._dp \n\n"];

WriteString[sphenoLow,"!Higgs+box contributions \n "];

WriteString[sphenoLow,"PartialResults(2)=(Abs(B1L)**2+Abs(B1R)**2)/6._dp & \n"];
WriteString[sphenoLow,"&+(Abs(B2L)**2+Abs(B2R)**2)/3._dp &  \n"];
WriteString[sphenoLow,"&+(Abs(B3L)**2+Abs(B3R)**2)/24._dp &  \n"];
WriteString[sphenoLow,"&+6._dp*(Abs(B4L)**2+Abs(B4R)**2)& \n"];
WriteString[sphenoLow,"&-Real(B3L*Conjg(B4L)+B3R*Conjg(B4R),dp) \n"];

WriteString[sphenoLow,"!Mix:Photon x Higgs-Box \n"];

WriteString[sphenoLow,"PartialResults(3)=2._dp*Real(A1L*Conjg(B1L)+A1R*Conjg(B1R) & \n"];
WriteString[sphenoLow,"&+A1L*Conjg(B2L)+A1R*Conjg(B2R),dp)/3._dp& \n"];
WriteString[sphenoLow,"&-4._dp*Real(A2R*Conjg(B1L)+A2L*Conjg(B1R)& \n"];
WriteString[sphenoLow,"&+A2L*Conjg(B2R)+A2R*Conjg(B2L),dp)/3._dp \n\n"];

WriteString[sphenoLow,"!Z-boson contributions \n"];

WriteString[sphenoLow,"PartialResults(4)=(2._dp*(Abs(FLL)**2+Abs(FRR)**2)+Abs(FLR)**2+Abs(FRL)**2)/3._dp \n"];

WriteString[sphenoLow,"!Mix:Z-boson x Higgs-Box \n"];

WriteString[sphenoLow,"PartialResults(5)=(2._dp*Real(B1L*Conjg(FLL)+B1R*Conjg(FRR) & \n"];
WriteString[sphenoLow,"&+B2L*Conjg(FLR)+B2R*Conjg(FRL),dp))/3._dp \n\n"];

WriteString[sphenoLow,"!Mix:Photon x Z-boson \n"];
WriteString[sphenoLow,"PartialResults(6)=(4._dp*Real(A1L*Conjg(FLL)+A1R*Conjg(FRR),dp)& \n"];
WriteString[sphenoLow,"&+2._dp*Real(A1L*Conjg(FLR)+A1R*Conjg(FRL),dp)& \n"];
WriteString[sphenoLow,"&-8._dp*Real(A2R*Conjg(FLL)+A2L*Conjg(FRR),dp)& \n"];
WriteString[sphenoLow,"&-4._dp*Real(A2L*Conjg(FRL)+A2R*Conjg(FLR),dp))/3._dp \n\n"];

WriteString[sphenoLow, "If (PrintPartialContributions) Then \n"];
WriteString[sphenoLow, "PartialResults = oo32pi*Alpha**2*mf_l(in)**5*PartialResults \n"];
WriteString[sphenoLow, "Write(*,*) \"# Contributions to l -> 3 l'. Generations: \", in, out \n"];
WriteString[sphenoLow, "End If \n"];

WriteString[sphenoLow,"Write(*,*) \"    Photon\", PartialResults(1) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Higgs/Box\", PartialResults(2) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Photon x Higgs/Box\", PartialResults(3) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Z\", PartialResults(4) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Z x Higgs/Box\", PartialResults(5) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Photon x Z\", PartialResults(6) \n"];
WriteString[sphenoLow,"Write(*,*) \"    Sum\", BR \n"];
WriteString[sphenoLow,"Write(*,*) \"-----------------------------------\" \n"];
WriteString[sphenoLow, "End If \n"];

WriteString[sphenoLow,"Iname=Iname-1\n\n"];

(* AppendSourceCode["LeptonTo3Leptons.f90",sphenoLow]; *)

WriteString[sphenoLow,"End Subroutine BR1LeptonTo3Leptons \n\n"];


];


GenerateLLpHadron:=Block[{i,j},
Print["Writing Function for Lepton to Lepton and Hadron"];

ScalarPropagators = {};
VectorPropagators = {};

For[i=1,i<=Length[Particles[Current]],
Switch[Particles[Current][[i,4]],
S,
	If[conj[Particles[Current][[i,1]]]===Particles[Current][[i,1]],
	If[FreeQ[VerticesInv[All],C[Electron,bar[Electron],Particles[Current][[i,1]]]]==False,
	ScalarPropagators = Join[ScalarPropagators,{Particles[Current][[i,1]]}];
	];
	];,
V,
	If[conj[Particles[Current][[i,1]]]===Particles[Current][[i,1]],
	If[FreeQ[VerticesInv[All],C[Electron,bar[Electron],Particles[Current][[i,1]]]]==False,
	VectorPropagators = Join[VectorPropagators,{Particles[Current][[i,1]]}];
	];
	];
	];
i++;];

AllInternalParticles=Flatten[{ScalarPropagators,VectorPropagators}];
AllAddedCouplings={};

For[i=1,i<=Length[ScalarPropagators],
AllAddedCouplings=Join[AllAddedCouplings,{C[ScalarPropagators[[i]],Electron,bar[Electron]],C[ScalarPropagators[[i]],BottomQuark,bar[BottomQuark]],C[ScalarPropagators[[i]],TopQuark,bar[TopQuark]]}];
i++;];

For[i=1,i<=Length[VectorPropagators],
AllAddedCouplings=Join[AllAddedCouplings,{C[VectorPropagators[[i]],Electron,bar[Electron]],C[VectorPropagators[[i]],BottomQuark,bar[BottomQuark]],C[VectorPropagators[[i]],TopQuark,bar[TopQuark]]}];
i++;];


temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->Electron}}];

WaveFunctionContribution={};
For[i=1,i<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[i,2]]]) |  (getBlank[Internal[2] /. temp[[i,2]]])] ,
WaveFunctionContribution = Join[WaveFunctionContribution,{temp[[i]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2]}/. temp[[i,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[i,1]]];
 ]; 
i++;];


PenguinContributionsScalar=Table[{},{Length[ScalarPropagators]}];
PenguinContributionsVector=Table[{},{Length[VectorPropagators]}];

For[i=1,i<=Length[ScalarPropagators],
temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[ScalarPropagators[[i]],FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->ScalarPropagators[[i]]}}];

For[j=1,j<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]])] ,
PenguinContributionsScalar[[i]]= Join[PenguinContributionsScalar[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];
i++;];

For[i=1,i<=Length[VectorPropagators],
temp=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[VectorPropagators[[i]],FieldToInsert[2],AntiField[FieldToInsert[3]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->VectorPropagators[[i]]}}];

For[j=1,j<=Length[temp],
 If[FreeQ[(* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]])],
PenguinContributionsVector[[i]]= Join[PenguinContributionsVector[[i]],{temp[[j]]/. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ]; 
j++;];
i++;];

PenguinContributionsVector = DeleteCases[PenguinContributionsVector,{}];


BoxContributions={};
temp=GenerateBoxDiagrams[Electron,bar[Electron],BottomQuark,bar[BottomQuark]];
For[j=1,j<=Length[temp],
 If[FreeQ[ (* massless *) {VP,VG},(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]]) | (getBlank[Internal[4] /. temp[[j,2]]])] && FreeQ[getType/@getBlank/@({Internal[1],Internal[2],Internal[3],Internal[4]} /. temp[[j,2]]),V],
(* If[getType[Internal[1] /. temp[[j,2]]]===F, *)
If[(InsertionOrder /. temp[[j,2]])==1 || (InsertionOrder /. temp[[j,2]])==2, 
BoxContributions= Join[BoxContributions,{temp[[j]] /. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3],Internal[4]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
];
 ];
(* ];  *)
j++;];
BoxContributionsDD = BoxContributions;

BoxContributions={};
temp=GenerateBoxDiagrams[Electron,bar[Electron],TopQuark,bar[TopQuark]];
For[j=1,j<=Length[temp],
 If[FreeQ[massless,(getBlank[Internal[1] /. temp[[j,2]]]) |  (getBlank[Internal[2] /. temp[[j,2]]]) | (getBlank[Internal[3] /. temp[[j,2]]]) | (getBlank[Internal[4] /. temp[[j,2]]])] && FreeQ[getType/@getBlank/@({Internal[1],Internal[2],Internal[3],Internal[4]} /. temp[[j,2]]),V],
(* If[getType[Internal[1] /. temp[[j,2]]]===F, *)
If[(InsertionOrder /. temp[[j,2]])==1 || (InsertionOrder /. temp[[j,2]])==2, 
BoxContributions= Join[BoxContributions,{temp[[j]] /. C[a__]->Cp[a]}];
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3],Internal[4]}/. temp[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,temp[[j,1]]];
 ];
(* ]; *)
 ]; 
j++;];
BoxContributionsUU = BoxContributions;

NeededMasses=Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Electron],SPhenoMass[TopQuark],SPhenoMass[BottomQuark]}]];
NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses =Join[NeededMasses, MakeSquaredMass/@NeededMasses];


NeededCouplingsInsert=Intersection[AllAddedCouplings /. C[a__]->Cp[a]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];



LowEnergyConstraintsParameterList=Join[LowEnergyConstraintsParameterList,{{LLpHadron,NeededMasses,NeededCouplings}}];

 WriteLLpHadron[NeededMasses,NeededCouplings,WaveFunctionContribution,PenguinContributionsScalar,PenguinContributionsVector,BoxContributionsDD,BoxContributionsUU];

];


WriteLLpHadron[masses_,couplings_,wave_,penguinScalar_,penguinVector_,boxDD_, boxUU_] :=Block[{i,j,k,fermions,scalars,dim},
MakeSubroutineTitle["BrLLpHadron",Flatten[{masses,couplings}],{"in","out"},{"Results"},sphenoLow];
WriteString[sphenoLow,"Implicit None \n"];
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];
WriteString[sphenoLow,"Integer,Intent(in) :: in, out \n"];
WriteString[sphenoLow,"Real(dp), Intent(out) :: Results(:) \n\n"];
WriteString[sphenoLow,"Integer :: gt1, gt2, gt3, gt4, gt5, i1, i2, i3, i4 \n"];
WriteString[sphenoLow,"Integer :: iScalarCounter, iVectorCounter \n"];
WriteString[sphenoLow,"Complex(dp)::A1L,A1R,A2L,A2R,FL,FR,FLL,FLR,FRL,FRR \n"];
WriteString[sphenoLow,"Complex(dp)::tempA1L,tempA1R,tempA2L,tempA2R,tempFL,tempFR,tempFLR,tempFRL& \n"];
WriteString[sphenoLow,"&,BLV, BLS, BRV, BRS & \n"];
WriteString[sphenoLow,"&,tempHL, tempHR, H2L,H2R,H3L,H3R,wertL,wertR,fun1c,fun2c \n"];
dim = "("<>ToString[Plus@@(getGen/@ScalarPropagators)]<>")";
WriteString[sphenoLow,"Complex(dp) :: HLps"<>dim<>", HRps"<>dim<>",BLfd"<>dim<>",BRfd"<>dim<>",BLfu"<>dim<>",BRfu"<>dim<>"  \n"];
dim = "("<>ToString[Plus@@(getGen/@VectorPropagators)]<>")";
WriteString[sphenoLow,"Complex(dp) :: FLsave"<>dim<>", FRsave"<>dim<>",ZddAxial"<>dim<>",ZuuAxial"<>dim<>"  \n"];
WriteString[sphenoLow,"Complex(dp)::C0m, D0m2, D27m2, vertex1L, vertex1R, vertex2L, vertex2R \n"];
WriteString[sphenoLow,"Real(dp) ::  X_ax, chargefactor, ratio, ratio1, ratio2 \n"];
WriteString[sphenoLow,"Real(dp),Parameter::oo576Pi2=1._dp/(576._dp*Pi2)\n"];
WriteString[sphenoLow,"Complex(dp) :: fun1, fun2, fun3, fun4, part(2),& \n"];
WriteString[sphenoLow," &    coup1L, coup1R, coup2L, coup2R, coup3L, coup3R, coup3, coup4L, coup4R \n \n"];
WriteString[sphenoLow,"Complex(dp) :: gZLV(3),gZRV(3),gHLS(3),gHRS(3),gPLV(3),gPRV(3),gBLV(3),gBRV(3),gBLS(3),gBRS(3) \n"];
WriteString[sphenoLow,"Complex(dp),Parameter::mat0(3,3)=0._dp \n \n"];
WriteString[sphenoLow,"Real(dp) :: Znuc,Nnuc \n"];
WriteString[sphenoLow,"Real(dp)::Zeff,Fp,GammaCapt,GSp(3),GSn(3),GVp(3),GVn(3) \n"];
WriteString[sphenoLow,"Complex(dp)::Lcont,Rcont,gLS(3),gRS(3),gLV(3),gRV(3),g0LS,g0RS,& \n"];
WriteString[sphenoLow,"& g0LV,g0RV,g1LS,g1RS,g1LV,g1RV \n"];
WriteString[sphenoLow,"Complex(dp)::meson_abs_T2,aP(2),bP(2),sigma1,sigma2,BLA0(3),BRA0(3),cont \n"];
WriteString[sphenoLow,"Complex(dp)::FactorPSA, FactorPSB \n"];
WriteString[sphenoLow,"Real(dp)::m_meson,c_meson,Fpi,thetaEta,mPi,mK,mEta,mEtap,cW,sin_beta,cos_beta,factor \n"];
WriteString[sphenoLow,"Real(dp)::PartialResult(6,5) \n"];

WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\"BR1LeptonTo3Leptons\" \n\n"];
AddCalcSquaredMasses[masses,sphenoLow];
WriteString[sphenoLow,"Results=0._dp \n \n"];
WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=out \n "];
WriteString[sphenoLow,"gt4=out \n "];

WriteString[sphenoLow, "!----------------------------- \n"];
WriteString[sphenoLow, "! Wave Function Contributions \n"];
WriteString[sphenoLow, "!----------------------------- \n"];

WriteString[sphenoLow,"gZLV=0._dp \n"];
WriteString[sphenoLow,"gZRV=0._dp \n"];
WriteString[sphenoLow,"gHLS=0._dp \n"];
WriteString[sphenoLow,"gHRS=0._dp \n"];
WriteString[sphenoLow,"gPLV=0._dp \n"];
WriteString[sphenoLow,"gPRV=0._dp \n"];
WriteString[sphenoLow,"gBLV=0._dp \n"];
WriteString[sphenoLow,"gBRV=0._dp \n"];
WriteString[sphenoLow,"gBLS=0._dp \n"];
WriteString[sphenoLow,"gBRS=0._dp \n"];


WriteString[sphenoLow,"A1L=0._dp \n"];
WriteString[sphenoLow,"A1R=0._dp\n"];
WriteString[sphenoLow,"A2L=0._dp\n"];
WriteString[sphenoLow,"A2R=0._dp\n\n\n"];
WriteString[sphenoLow,"FLsave = 0._dp \n"];
WriteString[sphenoLow,"FRsave = 0._dp \n"];
WriteString[sphenoLow,"FL = 0._dp \n"];
WriteString[sphenoLow,"FR = 0._dp \n"];
WriteString[sphenoLow,"FLL = 0._dp \n"];
WriteString[sphenoLow,"FRL = 0._dp \n"];
WriteString[sphenoLow,"FLR = 0._dp \n"];
WriteString[sphenoLow,"FRR = 0._dp \n\n\n"];

WriteString[sphenoLow,"HLps = 0._dp \n"];
WriteString[sphenoLow,"HRps = 0._dp \n"];

WriteString[sphenoLow,"H2L = 0._dp \n"];
WriteString[sphenoLow,"H2R = 0._dp \n"];
WriteString[sphenoLow,"H3L = 0._dp \n"];
WriteString[sphenoLow,"H3R = 0._dp \n\n\n"];

WriteString[sphenoLow,"gt1 = in \n"];
WriteString[sphenoLow,"gt2 = out \n\n\n"];

WriteString[sphenoLow,"iVectorCounter = 1 \n"];

For[i=1,i<=Length[VectorPropagators],
currentPropagator = VectorPropagators[[i]];
WriteString[sphenoLow,"! "<> ToString[VectorPropagators[[i]]]<>" \n \n"];
If[getGenSPheno[VectorPropagators[[i]]]>1,WriteString[sphenoLow,"Do i3 = 1,"<>ToString[getGenSPheno[VectorPropagators[[i]]]]<>"\n"];
];

If[FreeQ[massless,VectorPropagators[[i]]]==False,
WriteString[sphenoLow,"tempA1L = 0._dp   \n"];
WriteString[sphenoLow,"tempA1R = 0._dp   \n"];
WriteString[sphenoLow,"tempA2L = 0._dp   \n"];
WriteString[sphenoLow,"tempA2R = 0._dp   \n"];,
WriteString[sphenoLow,"tempFL = 0._dp   \n"];
WriteString[sphenoLow,"tempFR = 0._dp   \n"];
WriteString[sphenoLow,"tempFLR = 0._dp   \n"];
WriteString[sphenoLow,"tempFRL = 0._dp   \n"];
];

If[FreeQ[massless,VectorPropagators[[i]]]==True,
AddWaveContributions2[wave,Wave1LeptonTo3LeptonsFFSVector,Wave1LeptonTo3LeptonsVVVScalar,None,None,None,"mf_l2(in)",False,sphenoLow];
];

If[FreeQ[massless,VectorPropagators[[i]]]==False,
If[False,
WriteString[sphenoLow,"A1L=A1L+oo576Pi2*tempA1L   \n"];
WriteString[sphenoLow,"A1R=A1R+oo576Pi2*tempA1R  \n"];
WriteString[sphenoLow,"A2L=A2L+oo32Pi2*tempA2L  \n"];
WriteString[sphenoLow,"A2R=A2R+oo32Pi2*tempA2R \n"];
];,

c1=getSPhenoCoupling2[C[Electron,bar[Electron],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,in},{bar[Electron],in},{VectorPropagators[[i]],i3},c1[[2]]];
ind2= MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];

WriteString[sphenoLow,"FL = FL + oo16pi2*tempFL*vertex1L   \n"];
WriteString[sphenoLow,"FR = FR + oo16pi2*tempFR*vertex1R   \n"];
WriteString[sphenoLow,"FLsave(iVectorCounter) = FLsave(iVectorCounter) + oo16pi2*tempFL*vertex1L   \n"];
WriteString[sphenoLow,"FRsave(iVectorCounter) = FRsave(iVectorCounter) + oo16pi2*tempFR*vertex1R   \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{BottomQuark,1},{bar[BottomQuark],1},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(2) = gZLV(2) + tempFL*(vertex2L+vertex2R)*vertex1L/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(2) = gZRV(2) + tempFR*(vertex2R+vertex2L)*vertex1R/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"]; 

WriteString[sphenoLow,"ZddAxial(iVectorCounter) = vertex2L-vertex2R \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{BottomQuark,2},{bar[BottomQuark],2},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(3) = gZLV(3) + tempFL*(vertex2L+vertex2R)*vertex1L/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(3) = gZRV(3) + tempFR*(vertex2R+vertex2L)*vertex1R/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"]; 

c1=getSPhenoCoupling2[C[TopQuark,bar[TopQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{TopQuark,1},{bar[TopQuark],1},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(1) = gZLV(1) + tempFL*(vertex2L+vertex2R)*vertex1L/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(1) = gZRV(1) + tempFR*(vertex2R+vertex2L)*vertex1R/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"]; 

WriteString[sphenoLow,"ZuuAxial(iVectorCounter) = vertex2L-vertex2R \n"];

WriteString[sphenoLow,"iVectorCounter = iVectorCounter + 1 \n"];

];


If[getGenSPheno[VectorPropagators[[i]]]>1,WriteString[sphenoLow,"End Do\n"];];

i++;];


WriteString[sphenoLow," \n\n\n"];

WriteString[sphenoLow,"iScalarCounter = 1 \n"];
For[i=1,i<=Length[ScalarPropagators],
currentPropagator =ScalarPropagators[[i]]; 
WriteString[sphenoLow,"! "<> ToString[ScalarPropagators[[i]]]<>" \n \n"];

If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"Do i3 = "<>ToString[getGenSPhenoStart[ScalarPropagators[[i]]]]<>","<>ToString[getGenSPheno[ScalarPropagators[[i]]]]<>"\n"];
];
WriteString[sphenoLow,"tempHL  = 0._dp  \n"];
WriteString[sphenoLow,"tempHR  = 0._dp  \n"];

c1=getSPhenoCoupling2[C[Electron,bar[Electron],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{Electron,in},{bar[Electron],in},{ScalarPropagators[[i]],i3},c1[[2]]];
ind2= MakeIndicesCoupling[{Electron,out},{bar[Electron],out},{ScalarPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];

AddWaveContributions2[wave,Wave1LeptonTo3LeptonsFFSScalar,None,None,None,None,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow,"HLps(iScalarCounter) = HLps(iScalarCounter) + tempHL/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"HRps(iScalarCounter) = HRps(iScalarCounter) + tempHR/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{BottomQuark,1},{bar[BottomQuark],1},{ScalarPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(2) = gHLS(2) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"gHRS(2) = gHRS(2) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];


c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{BottomQuark,2},{bar[BottomQuark],2},{ScalarPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(3) = gHLS(3) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"gHRS(3) = gHRS(3) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];

c1=getSPhenoCoupling2[C[TopQuark,bar[TopQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{TopQuark,1},{bar[TopQuark],1},{ScalarPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(1) = gHLS(1) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];
WriteString[sphenoLow,"gHRS(1) = gHRS(1) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,i3]<>" \n"];

WriteString[sphenoLow,"iScalarCounter = iScalarCounter + 1 \n"];
If[getGenSPheno[ScalarPropagators[[i]]]>1, WriteString[sphenoLow,"End Do\n"]; ];
i++;];



WriteString[sphenoLow, "!----------------------------- \n"];
WriteString[sphenoLow, "! Vector Penguin Contributions \n"];
WriteString[sphenoLow, "!----------------------------- \n"];

WriteString[sphenoLow,"iVectorCounter = 1 \n"];

For[i=1,i<=Length[penguinVector],
currentPropagator = External[3] /. penguinVector[[i,1,2]];
WriteString[sphenoLow, "\n ! --------- "<>ToString[currentPropagator] <>" ----------- \n \n"];
If[FreeQ[massless,currentPropagator],
WriteString[sphenoLow,"tempFL = 0._dp   \n"];
WriteString[sphenoLow,"tempFR = 0._dp   \n"];

AddPenguinContributions2[penguinVector[[i]],PenguinVector1LeptonTo3LeptonsFFVscalar,PenguinVector1LeptonTo3LeptonsFFVvector,PenguinVector1LeptonTo3LeptonsSSV,None,None,None,None,None,None,None,True,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow,"FL = FL + oo16pi2*tempFL \n"];
WriteString[sphenoLow,"FR = FR + oo16pi2*tempFR \n"];

WriteString[sphenoLow,"FLsave(iVectorCounter) = FLsave(iVectorCounter) + oo16pi2*tempFL \n"];
WriteString[sphenoLow,"FRsave(iVectorCounter) = FRsave(iVectorCounter) + oo16pi2*tempFR \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{BottomQuark,1},{bar[BottomQuark],1},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(2) = gZLV(2) + tempFL*(vertex1L+vertex1R)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(2) = gZRV(2) + tempFR*(vertex1R+vertex1L)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"]; 


c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{BottomQuark,2},{bar[BottomQuark],2},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(3) = gZLV(3) + tempFL*(vertex1L+vertex1R)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(3) = gZRV(3) + tempFR*(vertex1R+vertex1L)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"]; 

c1=getSPhenoCoupling2[C[TopQuark,bar[TopQuark],VectorPropagators[[i]]],SPhenoCouplingsAll];
ind1 = MakeIndicesCoupling[{TopQuark,1},{bar[TopQuark],1},{VectorPropagators[[i]],i3},c1[[2]]];
WriteString[sphenoLow,"vertex1L = "<>ToString[c1[[1,1]]] <>ind1[[1]]<>" \n"];
WriteString[sphenoLow,"vertex1R = "<>ToString[c1[[1,2]]] <>ind1[[1]]<>"\n"];
WriteString[sphenoLow,"gZLV(1) = gZLV(1) + tempFL*(vertex1L+vertex1R)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>"  \n"];
WriteString[sphenoLow,"gZRV(1) = gZRV(1) + tempFR*(vertex1R+vertex1L)/"<>SPhenoMassSq[VectorPropagators[[i]],i3]<>" \n"];

WriteString[sphenoLow,"iVectorCounter = iVectorCounter + 1 \n"];,

WriteString[sphenoLow,"tempA1L = 0._dp   \n"];
WriteString[sphenoLow,"tempA1R = 0._dp   \n"];
WriteString[sphenoLow,"tempA2L = 0._dp   \n"];
WriteString[sphenoLow,"tempA2R = 0._dp   \n"];

AddPenguinContributions2[penguinVector[[i]],LLpLpLpFFVscalar,LLpLpLpFFVvector,LLpLpLpSSV,None,None,None,LLpLpLpVVV,None,None,None,True,"mf_l2(in)",False,sphenoLow];
WriteString[sphenoLow,"A1L=A1L+oo576Pi2*tempA1L   \n"];
WriteString[sphenoLow,"A1R=A1R+oo576Pi2*tempA1R  \n"];
WriteString[sphenoLow,"A2L=A2L+oo32Pi2*tempA2L  \n"];
WriteString[sphenoLow,"A2R=A2R+oo32Pi2*tempA2R \n"];

];

i++;];


WriteString[sphenoLow,"gZLV = - oo16pi2*gZLV/Sqrt(2._dp)/G_F  \n"];
WriteString[sphenoLow,"gZRV = - oo16pi2*gZRV/Sqrt(2._dp)/G_F  \n"];

WriteString[sphenoLow,"gPLV(2) = gPLV(2) + (A1L-A2R)*("<>SPhenoForm[getElectricCharge[BottomQuark]]<>")  \n"];
WriteString[sphenoLow,"gPRV(2) = gPRV(2) + (A1R-A2L)*("<>SPhenoForm[getElectricCharge[BottomQuark]]<>")  \n"]; 
WriteString[sphenoLow,"gPLV(3) = gPLV(3) + (A1L-A2R)*("<>SPhenoForm[getElectricCharge[BottomQuark]]<>")  \n"];
WriteString[sphenoLow,"gPRV(3) = gPRV(3) + (A1R-A2L)*("<>SPhenoForm[getElectricCharge[BottomQuark]]<>")  \n"];
WriteString[sphenoLow,"gPLV(1) = gPLV(1) + (A1L-A2R)*("<>SPhenoForm[getElectricCharge[TopQuark]]<>" ) \n"];WriteString[sphenoLow,"gPRV(1) = gPRV(1) + (A1R-A2L)*("<>SPhenoForm[getElectricCharge[TopQuark]]<>")  \n"];

WriteString[sphenoLow,"gPLV = gPLV*Sqrt(2._dp)/G_F*(4._dp*Pi*Alpha)  \n"];
WriteString[sphenoLow,"gPRV = gPRV*Sqrt(2._dp)/G_F*(4._dp*Pi*Alpha)  \n"];


WriteString[sphenoLow, "!------------------------------ \n"];
WriteString[sphenoLow, "! Scalar Penguin Contributions \n"];
WriteString[sphenoLow, "!------------------------------ \n"];

WriteString[sphenoLow,"iScalarCounter = 1 \n"];

For[i=1,i<=Length[penguinScalar],
currentPropagator =External[3] /. penguinScalar[[i,1,2]]; 
If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"Do gt3 = "<>ToString[getGenSPhenoStart[currentPropagator]]<>","<>ToString[getGenSPheno[currentPropagator]]<>"\n"];
];
WriteString[sphenoLow,"tempHL  = 0._dp  \n"];
WriteString[sphenoLow,"tempHR  = 0._dp  \n"];

AddPenguinContributions2[penguinScalar[[i]],None,None,None,PenguinScalar1LeptonTo3LeptonsFFS,None,PenguinScalar1LeptonTo3LeptonsSSS,None,None,PenguinScalar1LeptonTo3LeptonsStart,PenguinScalar1LeptonTo3LeptonsFinal,True,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow,"HLps(iScalarCounter) = HLps(iScalarCounter) + tempHL/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"HRps(iScalarCounter) = HRps(iScalarCounter) + tempHR/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{BottomQuark,1},{bar[BottomQuark],1},{ScalarPropagators[[i]],gt3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(2) = gHLS(2) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"gHRS(2) = gHRS(2) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];

WriteString[sphenoLow,"BLfd(iScalarCounter) = vertex2L \n"];
WriteString[sphenoLow,"BRfd(iScalarCounter) = vertex2R \n"];

c1=getSPhenoCoupling2[C[BottomQuark,bar[BottomQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{BottomQuark,2},{bar[BottomQuark],2},{ScalarPropagators[[i]],gt3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(3) = gHLS(3) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"gHRS(3) = gHRS(3) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];

c1=getSPhenoCoupling2[C[TopQuark,bar[TopQuark],ScalarPropagators[[i]]],SPhenoCouplingsAll];
ind2= MakeIndicesCoupling[{TopQuark,1},{bar[TopQuark],1},{ScalarPropagators[[i]],gt3},c1[[2]]];
WriteString[sphenoLow,"vertex2L = "<>ToString[c1[[1,1]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"vertex2R = "<>ToString[c1[[1,2]]] <>ind2[[1]]<>"\n"];
WriteString[sphenoLow,"gHLS(1) = gHLS(1) +0.5_dp*tempHL*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];
WriteString[sphenoLow,"gHRS(1) = gHRS(1) +0.5_dp*tempHR*(vertex2R+vertex2L)/"<>SPhenoMassSq[currentPropagator,gt3]<>" \n"];

WriteString[sphenoLow,"BLfu(iScalarCounter) = vertex2L \n"];
WriteString[sphenoLow,"BRfu(iScalarCounter) = vertex2R \n"];

WriteString[sphenoLow,"iScalarCounter = iScalarCounter + 1 \n"];
If[getGenSPheno[ScalarPropagators[[i]]]>1,
WriteString[sphenoLow,"End Do\n"];
];
i++;];



WriteString[sphenoLow, "gHLS = oo16pi2*gHLS*sqrt(2._dp)/G_F \n"];
WriteString[sphenoLow, "gHRS = oo16pi2*gHRS*sqrt(2._dp)/G_F \n"];


WriteString[sphenoLow, "!------------------------------ \n"];
WriteString[sphenoLow, "! Box Contributions \n"];
WriteString[sphenoLow, "!------------------------------ \n"];


WriteString[sphenoLow, "! dd-Boxes \n"];

WriteString[sphenoLow, "BLV=0._dp\n"];
WriteString[sphenoLow, "BRV=0._dp\n"];
WriteString[sphenoLow, "BLS=0._dp\n"];
WriteString[sphenoLow, "BRS=0._dp\n"];

WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=1 \n "];
WriteString[sphenoLow,"gt4=1 \n "];

AddBoxContributions2[boxDD,BoxLLpHadron,None,None,None,None,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow, "gBLV(2)= oo16pi2*BLV\n"];
WriteString[sphenoLow, "gBRV(2)= oo16pi2*BLS\n"];
WriteString[sphenoLow, "gBLS(2)= oo16pi2*BRV\n"];
WriteString[sphenoLow, "gBRS(2)= oo16pi2*BLS\n\n\n"];

WriteString[sphenoLow, "! ss-Boxes \n"];

WriteString[sphenoLow, "BLV=0._dp\n"];
WriteString[sphenoLow, "BRV=0._dp\n"];
WriteString[sphenoLow, "BLS=0._dp\n"];
WriteString[sphenoLow, "BRS=0._dp\n"];

WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=2 \n "];
WriteString[sphenoLow,"gt4=2 \n "];

AddBoxContributions2[boxDD,BoxLLpHadron,None,None,None,None,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow, "gBLV(3)= oo16pi2*BLV\n"];
WriteString[sphenoLow, "gBRV(3)= oo16pi2*BLS\n"];
WriteString[sphenoLow, "gBLS(3)= oo16pi2*BRV\n"];
WriteString[sphenoLow, "gBRS(3)= oo16pi2*BLS\n\n\n"];

WriteString[sphenoLow, "! uu-Boxes \n"];

WriteString[sphenoLow, "BLV=0._dp\n"];
WriteString[sphenoLow, "BRV=0._dp\n"];
WriteString[sphenoLow, "BLS=0._dp\n"];
WriteString[sphenoLow, "BRS=0._dp\n"];

WriteString[sphenoLow,"gt1=in \n "];
WriteString[sphenoLow,"gt2=out \n "];
WriteString[sphenoLow,"gt3=1 \n "];
WriteString[sphenoLow,"gt4=1 \n "];

AddBoxContributions2[boxUU,BoxLLpHadron,None,None,None,None,"mf_l2(in)",False,sphenoLow];

WriteString[sphenoLow, "gBLV(3)= oo16pi2*BLV\n"];
WriteString[sphenoLow, "gBRV(3)= oo16pi2*BLS\n"];
WriteString[sphenoLow, "gBLS(3)= oo16pi2*BRV\n"];
WriteString[sphenoLow, "gBRS(3)= oo16pi2*BLS\n\n\n"];

WriteString[sphenoLow, "gBLV = -gBLV*sqrt(2._dp)/G_F \n"];
WriteString[sphenoLow, "gBLS = -gBLS*sqrt(2._dp)/G_F \n"];
WriteString[sphenoLow, "gBRV = -gBRV*sqrt(2._dp)/G_F \n"];
WriteString[sphenoLow, "gBRS = -gBRS*sqrt(2._dp)/G_F \n \n \n"];



WriteString[sphenoLow,"If (in.eq.2) Then \n"];
WriteString[sphenoLow,"!-------------------------\n"];
WriteString[sphenoLow,"! mu - e - conversion \n"];
WriteString[sphenoLow,"!-------------------------\n"];

WriteString[sphenoLow, "If (PrintPartialContributions) Then \n"];
WriteString[sphenoLow, "Write(*,*) \"# Contributions to mu - e conversion \" \n"];
WriteString[sphenoLow, "End If \n"];

WriteString[sphenoLow,"Do i1=1,6 \n "];
WriteString[sphenoLow,"If(i1.eq.1) Then \n"];
WriteString[sphenoLow,"Znuc=13._dp \n"];
WriteString[sphenoLow,"Nnuc=14._dp \n"];
WriteString[sphenoLow,"Zeff=11.5_dp \n"];
WriteString[sphenoLow,"Fp=0.64_dp \n"];
WriteString[sphenoLow,"GammaCapt=4.64079e-19_dp \n"];
WriteString[sphenoLow,"Else If(i1.eq.2) Then \n"];
WriteString[sphenoLow,"Znuc=22._dp \n"];
WriteString[sphenoLow,"Nnuc=26._dp \n"];
WriteString[sphenoLow,"Zeff=17.6_dp \n"];
WriteString[sphenoLow,"Fp=0.54_dp \n"];
WriteString[sphenoLow,"GammaCapt=1.70422e-18_dp \n"];
WriteString[sphenoLow,"Else If(i1.eq.3) Then \n"];
WriteString[sphenoLow,"Znuc=38._dp \n"];
WriteString[sphenoLow,"Nnuc=42._dp \n"];
WriteString[sphenoLow,"Zeff=25.0_dp \n"];
WriteString[sphenoLow,"Fp=0.39_dp \n"];
WriteString[sphenoLow,"GammaCapt=4.61842e-18_dp \n"];
WriteString[sphenoLow,"Else If(i1.eq.4) Then \n"];
WriteString[sphenoLow,"Znuc=51._dp \n"];
WriteString[sphenoLow,"Nnuc=70._dp \n"];
WriteString[sphenoLow,"Zeff=29.0_dp \n"];
WriteString[sphenoLow,"Fp=0.32_dp \n"];
WriteString[sphenoLow,"GammaCapt=6.71711e-18_dp \n"];
WriteString[sphenoLow,"Else If(i1.eq.5) Then \n"];
WriteString[sphenoLow,"Znuc=79._dp \n"];
WriteString[sphenoLow,"Nnuc=118._dp \n"];
WriteString[sphenoLow,"Zeff=33.5_dp \n"];
WriteString[sphenoLow,"Fp=0.16_dp \n"];
WriteString[sphenoLow,"GammaCapt=8.59868e-18_dp \n"];
WriteString[sphenoLow,"Else If(i1.eq.6) Then \n"];
WriteString[sphenoLow,"Znuc=82._dp \n"];
WriteString[sphenoLow,"Nnuc=125._dp \n"];
WriteString[sphenoLow,"Zeff=34.0_dp \n"];
WriteString[sphenoLow,"Fp=0.15_dp \n"];
WriteString[sphenoLow,"GammaCapt=8.84868e-18_dp \n"];
WriteString[sphenoLow,"End If \n"];


WriteString[sphenoLow,"!numerical values \n"];
WriteString[sphenoLow,"GSp=(/5.1,4.3,2.5/) \n"];
WriteString[sphenoLow,"GSn=(/4.3,5.1,2.5/) \n"];
WriteString[sphenoLow,"GVp=(/2.0,1.0,0.0/) \n"];
WriteString[sphenoLow,"GVn=(/1.0,2.0,0.0/) \n"];

WriteString[sphenoLow,"Do i4=1,5 \n"];

WriteString[sphenoLow, "If (i4.eq.1) Then \n"];
WriteString[sphenoLow, "! Photon contributions \n"];
WriteString[sphenoLow,"gLS=0._dp \n"];
WriteString[sphenoLow,"gRS=0._dp \n"];
WriteString[sphenoLow,"gLV=gPLV \n"];
WriteString[sphenoLow,"gRV=gPRV \n"];
WriteString[sphenoLow,"Else If(i4.eq.2) Then \n"];
WriteString[sphenoLow, "! Vector boson contributions \n"];
WriteString[sphenoLow,"gLS= 0._dp \n"];
WriteString[sphenoLow,"gRS=0._dp \n"];
WriteString[sphenoLow,"gLV=gZLV \n"];
WriteString[sphenoLow,"gRV=gZRV \n"];
WriteString[sphenoLow,"Else If(i4.eq.3) Then \n"];
WriteString[sphenoLow, "! Scalar contributions \n"];
WriteString[sphenoLow,"gLS=gHLS \n"];
WriteString[sphenoLow,"gRS=gHRS \n"];
WriteString[sphenoLow,"gLV=0._dp \n"];
WriteString[sphenoLow,"gRV=0._dp \n"];
WriteString[sphenoLow,"Else If(i4.eq.4) Then \n"];
WriteString[sphenoLow, "! Box contributions \n"];
WriteString[sphenoLow,"gLS=gBLS \n"];
WriteString[sphenoLow,"gRS=gBRS \n"];
WriteString[sphenoLow,"gLV=gBLV \n"];
WriteString[sphenoLow,"gRV=gBRV \n"];
WriteString[sphenoLow,"Else If(i4.eq.5) Then \n"];
WriteString[sphenoLow,"gLS=gHLS+gBLS \n"];
WriteString[sphenoLow,"gRS=gHRS+gBRS \n"];
WriteString[sphenoLow,"gLV=gPLV+gZLV+gBLV \n"];
WriteString[sphenoLow,"gRV=gPRV+gZRV+gBRV \n"];
WriteString[sphenoLow,"End if \n"];

WriteString[sphenoLow,"g0LS=0._dp \n"];
WriteString[sphenoLow,"g0RS=0._dp \n"];
WriteString[sphenoLow,"g0LV=0._dp \n"];
WriteString[sphenoLow,"g0RV=0._dp \n"];
WriteString[sphenoLow,"g1LS=0._dp \n"];
WriteString[sphenoLow,"g1RS=0._dp \n"];
WriteString[sphenoLow,"g1LV=0._dp \n"];
WriteString[sphenoLow,"g1RV=0._dp \n"];

WriteString[sphenoLow,"Do i2=1,3\n"];
WriteString[sphenoLow,"g0LS=g0LS+0.5_dp*gLS(i2)*(GSp(i2)+GSn(i2))\n"];
WriteString[sphenoLow,"g0RS=g0RS+0.5_dp*gRS(i2)*(GSp(i2)+GSn(i2))\n"];
WriteString[sphenoLow,"g0LV=g0LV+0.5_dp*gLV(i2)*(GVp(i2)+GVn(i2))\n"];
WriteString[sphenoLow,"g0RV=g0RV+0.5_dp*gRV(i2)*(GVp(i2)+GVn(i2))\n"];
WriteString[sphenoLow,"g1LS=g1LS+0.5_dp*gLS(i2)*(GSp(i2)-GSn(i2))\n"];
WriteString[sphenoLow,"g1RS=g1RS+0.5_dp*gRS(i2)*(GSp(i2)-GSn(i2))\n"];
WriteString[sphenoLow,"g1LV=g1LV+0.5_dp*gLV(i2)*(GVp(i2)-GVn(i2))\n"];
WriteString[sphenoLow,"g1RV=g1RV+0.5_dp*gRV(i2)*(GVp(i2)-GVn(i2))\n"];
WriteString[sphenoLow,"End Do\n"];

WriteString[sphenoLow,"Lcont=(Znuc+Nnuc)*(g0LV+g0LS)+(Znuc-Nnuc)*(g1LV-g1LS) \n"];
WriteString[sphenoLow,"Rcont=(Znuc+Nnuc)*(g0RV+g0RS)+(Znuc-Nnuc)*(g1RV-g1RS)\n"];

WriteString[sphenoLow,"PartialResult(i1,i4)=oo8pi2*mf_l(2)**5*G_F**2*Alpha**3*Zeff**4*Fp**2/Znuc*& \n"];
WriteString[sphenoLow,"& (Abs(Lcont)**2+Abs(Rcont)**2)/GammaCapt \n"];

WriteString[sphenoLow,"End do \n"];

WriteString[sphenoLow,"Results(i1) = PartialResult(i1,5) \n"];

WriteString[sphenoLow, "If (PrintPartialContributions) Then \n"];
WriteString[sphenoLow,"Write(*,*) \"nucleus: \", i1 \n"];
WriteString[sphenoLow,"Write(*,*) \"   Photon: \", PartialResult(i1,1) \n"];
WriteString[sphenoLow,"Write(*,*) \"   Z: \", PartialResult(i1,2) \n"];
WriteString[sphenoLow,"Write(*,*) \"   Higgs: \", PartialResult(i1,3) \n"];
WriteString[sphenoLow,"Write(*,*) \"   Box: \", PartialResult(i1,4) \n"];
WriteString[sphenoLow,"Write(*,*) \"   Sum + Interference: \", PartialResult(i1,5) \n"];
WriteString[sphenoLow,"Write(*,*) \"-----------------------------------\" \n"];
WriteString[sphenoLow,"End if \n"];

(*
WriteString[sphenoLow,"Results(i1)=oo8pi2*mf_l(2)**5*G_F**2*Alpha**3*Zeff**4*Fp**2/Znuc*& \n"];
WriteString[sphenoLow,"& (Abs(Lcont)**2+Abs(Rcont)**2)/GammaCapt \n"];
*)
WriteString[sphenoLow,"End do \n "];

WriteString[sphenoLow,"Else \n"];

WriteString[sphenoLow,"!-------------------------\n"];
WriteString[sphenoLow,"! tau to mu + meson decays \n"];
WriteString[sphenoLow,"!-------------------------\n"];

WriteString[sphenoLow,"BLfd=2._dp*BLfd/mf_d(1) \n"];
WriteString[sphenoLow,"BRfd=2._dp*BRfd/mf_d(1) \n"];
WriteString[sphenoLow,"BLfu=2._dp*BLfu/mf_u(1) \n"];
WriteString[sphenoLow,"BRfu=2._dp*BRfu/mf_u(1) \n"];

WriteString[sphenoLow,"Fpi=0.0924_dp! Pion decay constant in GeV \n"];
WriteString[sphenoLow,"thetaEta=-Pi/10._dp! eta-eta' mixing angle:-18\[CapitalAHat]\.ba=-pi/10 radians \n"];
WriteString[sphenoLow,"mPi=0.13497_dp! Pion mass in GeV \n"];
WriteString[sphenoLow,"mK=0.49761_dp! Kaon mass in GeV \n"];
WriteString[sphenoLow,"mEta=0.548_dp! Eta mass in GeV \n"];
WriteString[sphenoLow,"mEtap=0.958_dp! Eta' mass in GeV \n"];

WriteString[sphenoLow,"!Mesons:!1:Pi0 \n"];
WriteString[sphenoLow,"!2:Eta \n"];
WriteString[sphenoLow,"!3:Eta' \n"];

WriteString[sphenoLow,"Do i4=1,3 \n"];
WriteString[sphenoLow,"If(i4.eq.1) Then \n"];
WriteString[sphenoLow,"m_meson=mPi \n"];
WriteString[sphenoLow,"c_meson=1._dp \n"];
WriteString[sphenoLow,"Else If(i4.eq.2) Then \n"];
WriteString[sphenoLow,"m_meson=mEta \n"];
WriteString[sphenoLow,"c_meson=(Sin(thetaEta)+Sqrt(2._dp)*Cos(thetaEta))/Sqrt(6._dp) \n"];
WriteString[sphenoLow,"Else If(i4.eq.3) Then \n"];
WriteString[sphenoLow,"m_meson=mEtap \n"];
WriteString[sphenoLow,"c_meson=(Sqrt(2._dp)*Sin(thetaEta)-Cos(thetaEta))/Sqrt(6._dp) \n"];
WriteString[sphenoLow,"End If \n\n\n"];


WriteString[sphenoLow,"iVectorCounter = 1 \n"];
WriteString[sphenoLow,"aP(1) = 0._dp \n"];
WriteString[sphenoLow,"bP(1) = 0._dp \n"];

For[i=1,i<=Length[penguinVector],
currentPropagator = External[3] /. penguinVector[[i,1,2]];
WriteString[sphenoLow, "\n ! --------- "<>ToString[currentPropagator] <>" ----------- \n \n"];
If[FreeQ[massless,currentPropagator],
WriteString[sphenoLow,"aP(1)= aP(1) + (ZuuAxial(iVectorCounter)-ZddAxial(iVectorCounter))/"<>SPhenoForm[SPhenoMassSq[currentPropagator]]<>"* &  \n"];
WriteString[sphenoLow,"  &  (Fpi/4._dp)*c_meson*(mf_l(3)-mf_l(out))*(FLsave(iVectorCounter)+FRsave(iVectorCounter)) \n"];
WriteString[sphenoLow,"bP(1)= bP(1) - (ZuuAxial(iVectorCounter)-ZddAxial(iVectorCounter))/"<>SPhenoForm[SPhenoMassSq[currentPropagator]]<>"* &   \n"];
WriteString[sphenoLow,"  &  (Fpi/4._dp)*c_meson*(mf_l(3)+mf_l(out))*(FRsave(iVectorCounter)-FLsave(iVectorCounter)) \n \n \n"];

(*
WriteString[sphenoLow,"! Vector contributions \n"];
WriteString[sphenoLow,"cW=mW/mZ \n"];

WriteString[sphenoLow,"aP(1)=-g2/(2._dp*cW)*(Fpi/2._dp)*(c_meson/mZ2)*(mf_l(3)-mf_l(out))*(FL+FR) \n"];
WriteString[sphenoLow,"bP(1)=g2/(2._dp*cW)*(Fpi/2._dp)*(c_meson/mZ2)*(mf_l(3)+mf_l(out))*(FR-FL) \n \n \n"];
*)
WriteString[sphenoLow,"iVectorCounter = iVectorCounter + 1 \n"];
];
i++;];

WriteString[sphenoLow,"! Scalar contributions \n"];

WriteString[sphenoLow,"BLA0 = 0._dp \n"];
WriteString[sphenoLow,"BRA0 = 0._dp \n"];
WriteString[sphenoLow,"FactorPSA =  0._dp \n"];
WriteString[sphenoLow,"FactorPSB =  0._dp \n"];

WriteString[sphenoLow,"iScalarCounter = 1 \n"];
For[i=1,i<=Length[ScalarPropagators],
currentPropagator =ScalarPropagators[[i]]; 
WriteString[sphenoLow,"! "<> ToString[ScalarPropagators[[i]]]<>" \n \n"];

If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"Do i3 = "<>ToString[getGenSPhenoStart[ScalarPropagators[[i]]]]<>","<>ToString[getGenSPheno[ScalarPropagators[[i]]]]<>"\n"];
];


(*
WriteString[sphenoLow,"cos_beta=1._dp/Sqrt(1+tanbetaMZ**2) \n"];
WriteString[sphenoLow,"sin_beta=cos_beta*tanbetaMZ \n"];

WriteString[sphenoLow,"sigma1=(0._dp,1._dp)*sin_beta \n"];
WriteString[sphenoLow,"sigma2=-(0._dp,1._dp)*cos_beta \n"];

WriteString[sphenoLow,"BLA0(1)=mPi**2/4._dp*(-conjg(sigma2)/sin_beta-conjg(sigma1)/cos_beta) \n"];

WriteString[sphenoLow,"BLA0(2)=1._dp/(4._dp*Sqrt(3._dp))*(-conjg(sigma2)/sin_beta*mPi**2*(Cos(thetaEta)-Sqrt(2._dp)*Sin(thetaEta))&  \n"];
WriteString[sphenoLow,"&+conjg(sigma1)/cos_beta*((3._dp*mPi**2-4._dp*mK**2)*Cos(thetaEta)-2._dp*Sqrt(2._dp)*mK**2*Sin(thetaEta))) \n"];

WriteString[sphenoLow,"BLA0(3)=1._dp/(4._dp*Sqrt(3._dp))*(-conjg(sigma2)/sin_beta*mPi**2*(Sin(thetaEta)+Sqrt(2._dp)*Cos(thetaEta))& \n"];
WriteString[sphenoLow,"&+conjg(sigma1)/cos_beta*((3._dp*mPi**2-4._dp*mK**2)*Sin(thetaEta)+2._dp*Sqrt(2._dp)*mK**2*Cos(thetaEta))) \n"];
*)

WriteString[sphenoLow,"BLA0(1)=mPi**2/4._dp*(-BLfu(iScalarCounter)+BLfd(iScalarCounter)) \n"];
WriteString[sphenoLow,"BLA0(2)=1._dp/(4._dp*Sqrt(3._dp))*(-BLfu(iScalarCounter)*mPi**2*(Cos(thetaEta)-Sqrt(2._dp)*Sin(thetaEta))&  \n"];
WriteString[sphenoLow,"&-BLfd(iScalarCounter)*((3._dp*mPi**2-4._dp*mK**2)*Cos(thetaEta)-2._dp*Sqrt(2._dp)*mK**2*Sin(thetaEta))) \n"];
WriteString[sphenoLow,"BLA0(3)=1._dp/(4._dp*Sqrt(3._dp))*(-BLfu(iScalarCounter)*mPi**2*(Sin(thetaEta)+Sqrt(2._dp)*Cos(thetaEta))& \n"];
WriteString[sphenoLow,"&-BLfd(iScalarCounter)*((3._dp*mPi**2-4._dp*mK**2)*Sin(thetaEta)+2._dp*Sqrt(2._dp)*mK**2*Cos(thetaEta))) \n"];

WriteString[sphenoLow,"BRA0(1)=mPi**2/4._dp*(-BRfu(iScalarCounter)+BRfd(iScalarCounter)) \n"];
WriteString[sphenoLow,"BRA0(2)=1._dp/(4._dp*Sqrt(3._dp))*(-BRfu(iScalarCounter)*mPi**2*(Cos(thetaEta)-Sqrt(2._dp)*Sin(thetaEta))&  \n"];
WriteString[sphenoLow,"&-BRfd(iScalarCounter)*((3._dp*mPi**2-4._dp*mK**2)*Cos(thetaEta)-2._dp*Sqrt(2._dp)*mK**2*Sin(thetaEta))) \n"];
WriteString[sphenoLow,"BRA0(3)=1._dp/(4._dp*Sqrt(3._dp))*(-BRfu(iScalarCounter)*mPi**2*(Sin(thetaEta)+Sqrt(2._dp)*Cos(thetaEta))& \n"];
WriteString[sphenoLow,"&-BRfd(iScalarCounter)*((3._dp*mPi**2-4._dp*mK**2)*Sin(thetaEta)+2._dp*Sqrt(2._dp)*mK**2*Cos(thetaEta))) \n"];

WriteString[sphenoLow,"FactorPSA = FactorPSA + (BLA0(i4)-BRA0(i4))*(HLps(iScalarCounter) +  HRps(iScalarCounter)) \n"];
WriteString[sphenoLow,"FactorPSB = FactorPSB + (BLA0(i4)-BRA0(i4))*(HLps(iScalarCounter) -  HRps(iScalarCounter)) \n"];

WriteString[sphenoLow,"iScalarCounter = iScalarCounter + 1 \n"];

If[getGenSPheno[ScalarPropagators[[i]]]>1,WriteString[sphenoLow,"End do\n"];];
i++];

(*
WriteString[sphenoLow,"BRA0=conjg(BLA0) \n"];


WriteString[sphenoLow,"aP(2)=(Fpi/(2._dp))*(BLA0(i3)-BRA0(i3))*(HLps+HRps) \n"];
WriteString[sphenoLow,"bP(2)=(Fpi/(2._dp))*(BLA0(i3)-BRA0(i3))*(HRps-HLps) \n"];
*)

WriteString[sphenoLow,"aP(2)=(Fpi/(2._dp))*FactorPSA \n"];
WriteString[sphenoLow,"bP(2)=(Fpi/(2._dp))*FactorPSB \n"];

WriteString[sphenoLow,"!averaged squared amplitude \n"];
WriteString[sphenoLow,"meson_abs_T2=0._dp \n"];

WriteString[sphenoLow,"Do i1=1,2 \n"];
WriteString[sphenoLow,"Do i2=1,2 \n"];
WriteString[sphenoLow,"cont=2._dp*mf_l(out)*mf_l(3)*(aP(i1)*conjg(aP(i2))-bP(i1)*conjg(bP(i2)))+& \n"];
WriteString[sphenoLow,"& (mf_l(3)**2+mf_l(out)**2-m_meson**2)*(aP(i1)*conjg(aP(i2))+bP(i1)*conjg(bP(i2))) \n"];
WriteString[sphenoLow,"meson_abs_T2=meson_abs_T2+cont \n"];
WriteString[sphenoLow,"End Do \n"];
WriteString[sphenoLow,"End Do \n"];

WriteString[sphenoLow,"meson_abs_T2=meson_abs_T2/(2._dp*mf_l(3)) \n"];

WriteString[sphenoLow,"!branching ratio \n"];

WriteString[sphenoLow,"factor=oo4pi*Sqrt(lamb(mf_l(3)**2,mf_l(out)**2,m_meson**2))/(mf_l(3)**2*GammaTau)*0.5_dp \n"];

WriteString[sphenoLow,"Results(i4)=factor*meson_abs_T2 \n"];

WriteString[sphenoLow,"End do \n"];
WriteString[sphenoLow,"End if \n"];




WriteString[sphenoLow,"Iname=Iname-1\n\n"];

(* AppendSourceCode["LeptonTo3Leptons.f90",sphenoLow]; *)

WriteString[sphenoLow,"\n \n"];
WriteString[sphenoLow,"Contains \n"];
WriteString[sphenoLow,"Real(dp) Function lamb(x,y,z) \n"];
WriteString[sphenoLow,"Real(dp),Intent(in)::x,y,z \n"];
WriteString[sphenoLow," lamb=(x+y-z)**2-4._dp*x*y \n"];
WriteString[sphenoLow,"End Function lamb \n \n"];

WriteString[sphenoLow,"End Subroutine BrLLpHadron \n\n"];


];


GenerateZLLp:=Block[{i,j,temp,AllInternalParticles={},AllAddedCouplings={}},

(* This function generates all possible diagrams for Z -> ll'; checks for necessary couplings and other parameters and passes this information to another routine which writes the Fortran function afterwards *)

Print["Write Function for Z to l l'  (by Kilian Nickel)"];

(* Generates all Penguin (Triangle) diagrams with a Z boson coming in and two external charged leptons (here only called 'Electron', but the generation is NOT fixed!) coming out. The diagrams generic structure is the same as for L->gammaLp. Note, a list with names for physical parameters can be found in Packages/init.nb in the function InitSMParameters. The function InsFields is similar to the function 'InsertFields' known by FeynArts *)
(* A diagram is a list with two entries. The first is a list of couplings, the second a list of replacement rules for internal and external particles. *)
(* first vertex: outgoing antilepton, outState1. second vertex: outgoing lepton, outState2. *)
AllPenguinDiagrams = 
InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[bar[Electron],AntiField[FieldToInsert[1]],FieldToInsert[3]],C[VectorZ,AntiField[FieldToInsert[3]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2], Internal[3]->FieldToInsert[3],External[1]->Electron,External[2]->bar[Electron],External[3]->VectorZ}}];

(* the wave diagram is defined by one vertex. The other vertex of the loop is the h.c. of the first one, with external indices i,j exchanged. The coupling of Electrons to Z boson results in a multiplication, which is done in SPhenoLopContributions.nb *)
AllWaveDiagrams=InsFields[{{C[Electron,FieldToInsert[1],AntiField[FieldToInsert[2]]]},{Internal[1]->FieldToInsert[1], Internal[2]->FieldToInsert[2],External[1]->Electron}}];


(* we remove all diagrams which contain massless particles since they don't contribute: photons (or gluons) don't change flavor *)
(* #[[2]] are the replacement rules of a single diagram *)
AllPenguinDiagrams=Select[AllPenguinDiagrams,((Intersection[({Internal[1],Internal[2],Internal[3]} /.#[[2]] /. bar[x_]->x /. conj[x_]->x),{VP,VG} (* massless *)]=={}))&];
AllWaveDiagrams=Select[AllWaveDiagrams,((Intersection[({Internal[1],Internal[2]}/.#[[2]]/.bar[x_]->x /. conj[x_]->x),{VP,VG} (* massless *)]=={}))&];

(* produces a list with 4 elements: diagrams, masses in SPheno format, couplings in SPheno format, couplings in SARAH format *)
AllInfoList1=MakeMassesCouplingLists[AllPenguinDiagrams];
AllInfoList2=MakeMassesCouplingLists[AllWaveDiagrams];


(* As next step we collect all appearing particles and names *)
For[j=1,j<=Length[AllPenguinDiagrams],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2],Internal[3]}/. AllPenguinDiagrams[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllPenguinDiagrams[[j,1]]];
j++;];
For[j=1,j<=Length[AllWaveDiagrams],
AllInternalParticles=Join[AllInternalParticles,{Internal[1],Internal[2]}/. AllWaveDiagrams[[j,2]]];
AllAddedCouplings = Join[AllAddedCouplings,AllWaveDiagrams[[j,1]]];
j++;];

(* Here, we check for doublets, add the mass of the external particles (charged Leptons, again called just 'Eletron'; remove again mass=0 particles (just to be really sure); and replace the couplings by their SPheno specific names (done with 'getSPhenoCoupling' *)
(* NeededMasses=DeleteCases[Intersection[Join[SPhenoMass/@AllInternalParticles,{SPhenoMass[Electron]}]],0.];
NeededMassesZLLp =Join[NeededMasses, MakeSquaredMass/@NeededMasses];
NeededCouplingsZLLp=Intersection[Flatten[(getSPhenoCoupling[#,SPhenoCouplingsAll][[1]]&)/@Intersection[AllAddedCouplings /. C[a__]->Cp[a]]]];
*)

(* Add the Electron and Z mass to the list of needed couplings, remove duplicates, replace all by SPheno specific names *)
NeededMasses=Intersection[Join[AllInfoList1[[2]],AllInfoList2[[2]],{SPhenoMass[Electron],SPhenoMass[VectorZ]}]];
(* adds the squared masses to the list as own variables *)
NeededMassesZLLp=Join[NeededMasses,MakeSquaredMass/@NeededMasses];
(* Collect all needed couplings in a list with their SPheno names, remove duplicates. The C[Z,Fe,bar[Fe]] has to be added manually. *)
couplingZLL=getSPhenoCoupling[C[VectorZ,Electron,bar[Electron]],SPhenoCouplingsAll];
couplingWWZ=getSPhenoCoupling[C[VectorZ,VectorW,conj[VectorW]],SPhenoCouplingsAll];
NeededCouplingsZLLp=Intersection[Join[AllInfoList1[[3]],AllInfoList2[[3]],couplingZLL[[1]],couplingWWZ[[1]]]];

(* The information about masses, couplings and diagrams is given to another function which writes the Fortran code *)
WriteZLLp[NeededMassesZLLp,NeededCouplingsZLLp,AllPenguinDiagrams,AllWaveDiagrams];
];

WriteZLLp[masses_,couplings_,penguindiagrams_,wavediagrams_]:=Block[{i,j,k},
(* This function writes the Fortran code for Z ->ll' for SPheno *)

(* --- Create the header of the subroutine --- *)
(* The syntax of MakeSubroutineTitle is: Name of Subroutine; main part of parameters; some additional parameters which should appear at the beginning; some additional parameters which should appear at the end; file name *)
(* first vertex: outgoing antilepton, outState1. second vertex: outgoing lepton, outState2. *)
MakeSubroutineTitle["BrZLLp",Flatten[{masses,couplings}],{"outState1","outState2"},{"width","BR","Amplitude"},sphenoLow];

(* --- Here starts the variable declaration --- *)
WriteString[sphenoLow,"Implicit None \n"];

(* 'MakeVariableList' takes a list of parameters and checks itself if they are real or complex and adds the dimension. Only the scope has to be given as second (Intent (in), Intent (out), Intent (inout), "")argument *)
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];
NrPenguinDiagrams=Length[penguindiagrams];
NrWaveDiagrams=Length[wavediagrams];
WriteString[sphenoLow,"Integer,Intent(in) :: outState1, outState2 \n"]; (* first: antilepton ("j"), second: lepton ("i") *)
WriteString[sphenoLow,"Real(dp), Intent(out) :: width \n"];
WriteString[sphenoLow,"Real(dp), Intent(out), Optional :: BR\n"];
WriteString[sphenoLow,"Complex(dp), Intent(out), Optional ::  Amplitude("<>ToString[NrPenguinDiagrams+NrWaveDiagrams]<>",4) \n"];
WriteString[sphenoLow,"Real(dp) :: chargefactor \n"];
WriteString[sphenoLow,"Complex(dp) :: amp("<>ToString[NrPenguinDiagrams]<>",4)=0._dp \n"]; (* for all penguin diagrams *)
WriteString[sphenoLow,"Complex(dp) :: ampWave("<>ToString[NrWaveDiagrams]<>",4)=0._dp \n"]; (* for all wave diagrams *)
WriteString[sphenoLow, "Complex(dp) :: Ai(4)=0._dp \n"]; (* for final sum of diagrams and local use *)
WriteString[sphenoLow,"Complex(dp) :: coup1L, coup1R, coup2L, coup2R, coup3L, coup3R, coup3 \n"];
WriteString[sphenoLow,"Integer :: gt1, gt2, i1, i2, i3, i4, countvar, n \n"];
WriteString[sphenoLow,"Complex(dp) :: C00u,C0u,C1u,C2u,C11u,C12u,C22u,B0u,B1u \n "]; (* loop integrals for local use *)

(* Iname is used for bugfixing purposes *)
WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\"BrZLLp \" \n"];
WriteString[sphenoLow,"amp=0._dp \n"];
WriteString[sphenoLow,"ampWave=0._dp \n"];
WriteString[sphenoLow,"gt1 = outState1 \n"];
WriteString[sphenoLow,"gt2 = outState2 \n"];
WriteString[sphenoLow,"countvar = 1 \n"]; (* counts through all diagrams *)


(* This function takes the list of diagrams and writes it to the Fortran file. For this purpose it is necessary to give the identifier under which the corresponding, generic expressions are saved. Look for more information to the file SPhenoLoopContributions.   *)
WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!---penguin diagrams---\n"];
WriteString[sphenoLow,"!----------------------\n"];
AddPenguinContributions2[penguindiagrams,ZLLpFFVscalar,ZLLpFFVvector,ZLLpSSV,None,None,None,ZLLpVVV,ZLLpSVV,ZLLpIn,ZLLpFin,True,ToString[SPhenoMassSq[VectorZ]],True,sphenoLow];

WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"!-----wave diagrams----\n"];
WriteString[sphenoLow,"!----------------------\n"];
WriteString[sphenoLow,"countvar = 1\n"]; (* need to count from 1 again *)
AddWaveContributions2[wavediagrams,WaveZLLpFFS,WaveZLLpFFV,WaveZLLpIn,None,WaveZLLpFin,ToString[SPhenoMassSq[VectorZ]],True,sphenoLow];

(* Sum up the different contributions to the amplitude *)
(* In all amplitude expressions the factor 1/(16pi^2) must be factored out! The I in front of everything is neglected (disappears in the width anyway) *)
WriteString[sphenoLow,"Do n=1,4 \n"];
WriteString[sphenoLow,"  Ai(n)=sum(amp(:,n))\n"];
WriteString[sphenoLow,"  Ai(n)=Ai(n)+sum(ampWave(:,n)) \n"];
WriteString[sphenoLow,"End Do\n"];
WriteString[sphenoLow,"Ai = oo16pi2 * Ai \n"];

(* Calculate the width and the branching ratio *)
WriteString[sphenoLow,"width = oo48pi * (2 * (Abs(Ai(1))**2+Abs(Ai(2))**2) * mZ & \n"];
WriteString[sphenoLow, "& + (Abs(Ai(3))**2+Abs(Ai(4))**2) * mZ * mZ2 * 0.25) \n"];
WriteString[sphenoLow, "BR = width / gamZ \n"];

WriteString[sphenoLow,"If (Present(Amplitude)) Then \n"];
WriteString[sphenoLow,"Amplitude(1:"<>ToString[NrPenguinDiagrams]<>",:) = oo16pi2 * amp\n"]; 
WriteString[sphenoLow,"Amplitude("<>ToString[NrPenguinDiagrams+1]<>":"<>ToString[NrPenguinDiagrams+NrWaveDiagrams]<>",:) = oo16pi2 * ampWave\n"]; 
WriteString[sphenoLow,"End if \n"];

WriteString[sphenoLow,"Iname=Iname-1\n"];

WriteString[sphenoLow,"End Subroutine BrZLLp  \n\n"];
];


GenerateGminus2:=Block[{i},

Print["Write Function for g-2"];

list=GeneratePenguinDiagrams[bar[Electron],Electron,VectorP];
list=Select[GeneratePenguinDiagrams[bar[Electron],Electron,VectorP],(FreeQ[getVertexType/@#[[1]],SVV]==True  && getVertexType[#[[1,1]]]=!=FFV)&];
res=MakeMassesCouplingLists[list,True];
ListOfDiagrams = res[[1]];
NeededMasses=res[[2]];
NeededCouplings=res[[3]];

NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses=Join[NeededMasses,{SPhenoMass[Electron]}];
NeededMasses=Intersection[Join[NeededMasses,MakeSquaredMass/@NeededMasses]];

LowEnergyConstraintsParameterList = Join[LowEnergyConstraintsParameterList,{{Gminus2,NeededMasses,NeededCouplings}}];


MakeSubroutineTitle["Gminus2",Flatten[{NeededMasses,NeededCouplings}],{"Ifermion"},{"a_mu"},sphenoLow];
MakeVariableList[Flatten[{NeededMasses,NeededCouplings}], ",Intent(in) ", sphenoLow];
WriteString[sphenoLow,"Real(dp), Intent(out) :: a_mu \n"];
WriteString[sphenoLow,"Integer, Intent(in) :: Ifermion \n"];
WriteString[sphenoLow,"Real(dp) :: ratio, chargefactor \n"];
WriteString[sphenoLow,"Integer :: i1, i2, i3, gt1, gt2 \n"];
WriteString[sphenoLow,"Complex(dp) :: coup1L,coup1R,coup2L,coup2R \n \n"];

WriteString[sphenoLow,"Iname = Iname + 1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname) = \"Gminus2\" \n \n \n"];
AddCalcSquaredMasses[NeededMasses,sphenoLow];

WriteString[sphenoLow,"a_mu = 0._dp \n"];

WriteString[sphenoLow,"gt1 = Ifermion \n"];
WriteString[sphenoLow,"gt2 = Ifermion \n \n"];

AddPenguinContributions2[ListOfDiagrams,PenguinGm2FFV,None,PenguinGm2SSV,None,None,None,None,None,None,None,False,"mz2",False,sphenoLow];

WriteString[sphenoLow,"a_mu = a_mu*"<>SPhenoMass[Electron,Ifermion]<>"*oo16pi2 \n"];
WriteString[sphenoLow,"Iname = Iname -1 \n \n"];

WriteString[sphenoLow,"End Subroutine Gminus2 \n \n \n"];


list=GeneratePenguinDiagrams[bar[Electron],Electron,VectorP];
list=Select[GeneratePenguinDiagrams[bar[Electron],Electron,VectorP],(FreeQ[getVertexType/@#[[1]],SVV]==True)&];
res=MakeMassesCouplingLists[list,True];
ListOfDiagrams = res[[1]];
NeededMasses=res[[2]];
NeededCouplings=res[[3]];

NeededMasses =DeleteCases[NeededMasses,0.];
NeededMasses=Join[NeededMasses,{SPhenoMass[Electron]}];
NeededMasses=Intersection[Join[NeededMasses,MakeSquaredMass/@NeededMasses]];

LowEnergyConstraintsParameterList = Join[LowEnergyConstraintsParameterList,{{LeptonEDM,NeededMasses,NeededCouplings}}];

Print["Write Function EDM of Leptons"];

MakeSubroutineTitle["LeptonEDM",Flatten[{NeededMasses,NeededCouplings}],{"Ifermion"},{"EDM"},sphenoLow];
WriteString[sphenoLow,"Implicit None\n"];
MakeVariableList[Flatten[{NeededMasses,NeededCouplings}], ",Intent(in) ", sphenoLow];
WriteString[sphenoLow,"Real(dp), Intent(out) :: EDM \n"];
WriteString[sphenoLow,"Real(dp) :: ratio, chargefactor \n"];
WriteString[sphenoLow,"Integer, Intent(in) :: Ifermion \n"];
WriteString[sphenoLow,"Integer :: i1, i2, i3, gt1, gt2 \n"];
WriteString[sphenoLow,"Complex(dp) :: coup1L,coup1R,coup2L,coup2R \n \n"];

WriteString[sphenoLow,"Iname = Iname + 1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname) = \"Gminus2\" \n \n \n"];
AddCalcSquaredMasses[NeededMasses,sphenoLow];

WriteString[sphenoLow,"EDM = 0._dp \n"];

WriteString[sphenoLow,"gt1 = Ifermion \n"];
WriteString[sphenoLow,"gt2 = Ifermion \n \n"];

AddPenguinContributions2[ListOfDiagrams,PenguinEDMFFV,None,PenguinEDMSSV,None,None,None,None,None,None,None,False,"mz2",False,sphenoLow];

WriteString[sphenoLow,"EDM = ecmfactor*EDM*oo16pi2 \n"];
WriteString[sphenoLow,"Iname = Iname -1 \n \n"];

WriteString[sphenoLow,"End Subroutine LeptonEDM \n \n \n"];




];



WriteDeltaRho:=Block[{masses,couplings,posH,posZ,upS,downS,i,posL,iso,y,tree},

posZ =Position[listNotMixedMasses,VectorZ][[1,1]];
posW =Position[listNotMixedMasses,VectorW][[1,1]];
massesW= Extract[NeededMassesUnmixed,posW];
massesZ= Extract[NeededMassesUnmixed,posZ];
couplingsW= Extract[NeededCouplingsUnmixed,posW];
couplingsZ= Extract[NeededCouplingsUnmixed,posZ];

masses=Intersection[Flatten[{massesZ,massesW}]];
couplings=Intersection[Flatten[{couplingsZ, couplingsW}]];


masses =DeleteCases[masses,0.];


LowEnergyConstraintsParameterList = Join[LowEnergyConstraintsParameterList,{{DeltaRho,masses,couplings}}];
MakeSubroutineTitle["DeltaRho",Flatten[{masses,couplings}],{},{"rho"},sphenoLow];
WriteString[sphenoLow,"Implicit None\n"];
MakeVariableList[Flatten[{masses,couplings}], ",Intent(in) ", sphenoLow];
WriteString[sphenoLow,"Real(dp), Intent(out) :: rho \n"];
WriteString[sphenoLow,"Integer :: i1, i2, i3, kont \n"];
WriteString[sphenoLow,"Real(dp) ::  delta_rho, delta_rho0, Drho_top, mu_old \n"];
WriteString[sphenoLow,"Complex(dp) ::  dmW2, dmz2 \n"];

WriteString[sphenoLow,"mu_old = SetRenormalizationScale(mZ2) \n \n"];
MakeCall["Pi1Loop"<>ToString[VectorZ],Flatten[{massesZ,couplingsZ}],{"0._dp"},{"kont","dmZ2"},sphenoLow];
MakeCall["Pi1Loop"<>ToString[VectorW],Flatten[{massesW,couplingsW}],{"0._dp"},{"kont","dmW2"},sphenoLow];
WriteString[sphenoLow,"Drho_top = 3*G_F*mf_u(3)**2*oosqrt2*oo8pi2 \n \n"];
WriteString[sphenoLow,"mu_old = SetRenormalizationScale(mu_old) \n \n"];

WriteString[sphenoLow,"! Tree Level \n"];
WriteString[sphenoLow,"delta_rho0 =  "<>SPhenoForm[RhoParTree]<>" \n \n"];

WriteString[sphenoLow,"! 1-Loop Level \n"];
WriteString[sphenoLow,"delta_rho =  dmZ2/mz2 - dMW2/mW2 - drho_top \n "];

WriteString[sphenoLow,"Rho= delta_rho + delta_rho0\n"];


WriteString[sphenoLow,"End subroutine DeltaRho \n \n \n"];

];

RhoParameterAtTreeLevel:=Block[{i,j,posH,posL,upS,downS,temp,iso,y,tree,treeMW,trip,doub,k,vev},
(* tree-level contributions *)

posH=Position[Gauge,hypercharge];
posL=Position[Gauge,left];
If[posH=!={} && posL=!={},
posH=posH[[1,1]];
posL=posL[[1,1]];
upS=0;
downS=0;
trip=0;
doub=0;
For[i=1,i<=Length[NameOfStates],
temp=DEFINITION[NameOfStates[[i]]][VEVs];
If[Head[temp]===List,
For[j=1,j<=Length[temp],
iso=SA`DynL[temp[[j,1]],posL] /. {0}->0 /. {1}->1/2 /. {2}->1;
y= 2 Abs[SA`ChargeGG[temp[[j,1]],posH]];
(* 1310.0763; eq. (1.124) *)
upS+=(4 iso (iso+1)-3 y^2)temp[[j,2,1]]^2;
downS+=2 y^2 temp[[j,2,1]]^2;
vev=temp[[j,2,1]];
If[vev=!=0,
If[getGenALL[temp[[j,1]]]===1,
vev=vev^2;,
vev=Sum[vev[k]^2,{k,1,getGenALL[temp[[j,1]]]}];
];
];
If[iso===1,trip+=(4 iso (iso+1)-3 y^2)*vev;];
If[iso===1/2 &&  temp[[j,2,1]]=!=VEVSM1 &&  temp[[j,2,1]]=!=VEVSM2 &&  temp[[j,2,1]]=!=VEVSM,doub+=2 y^2 vev;];
j++;];
];
i++;];
tree=Simplify[upS/(upS+downS) ];
treeMW=Simplify[Gauge[[posL,4]]^2trip/8]; (* factor of 1/8 ! *),
Print[" ... can't extract tree level contributions to delta(rho) because gauge group 'left' or 'hypercharge' not defined; assuming zero"];
tree=0;
treeMW=0;
doub=0;
trip=0;
];
RhoParTree=tree;
SA`SPhenoWMassTree=treeMW;
SA`AdditionalTripletVEVs=trip;
SA`AdditionalDoubletVEVs=doub;
];


WriteNeededParameters:=Block[{},


(* WriteString[sphenoLow,"Real(dp)::L_edm_contri(5,2) \n"]; *)
(* WriteString[sphenoLow,"Real(dp),Private,Parameter::sa(7)= (/-1._dp/3._dp,1._dp/4._dp&\n"];
WriteString[sphenoLow,"&,-1._dp/5._dp,1._dp/6._dp,-1._dp/7._dp,1._dp/8._dp&\n"];
WriteString[sphenoLow,"&,-1._dp/9._dp/)& \n"]; *)
(* WriteString[sphenoLow,"&,sb(7)=(/1._dp/6._dp,-1._dp/12._dp,1._dp/20._dp&\n"];
WriteString[sphenoLow,"&,-1._dp/30._dp,1._dp/42._dp,-1._dp/56._dp&\n"];
WriteString[sphenoLow,"&,1._dp/72._dp/)& \n"];
WriteString[sphenoLow,"&,sd(7)=(/-1._dp/20._dp,1._dp/15._dp,-1._dp/14._dp&\n"];
WriteString[sphenoLow,"&,1._dp/14._dp,-5._dp/72._dp,1._dp/15._dp&\n"];
WriteString[sphenoLow,"&,-7._dp/110._dp/)& \n"];
WriteString[sphenoLow,"&,se(7)=(/1._dp/30._dp,-1._dp/30._dp,1._dp/35._dp&\n"];
WriteString[sphenoLow,"&,-1._dp/42._dp,5._dp/252._dp,-1._dp/60._dp&\n"];
WriteString[sphenoLow,"&,7._dp/495._dp/)\n"];
*)
(* WriteString[sphenoLow,"Real(dp),Private::ecmfactor=5.975e-15_dp ,elimit=4.3e-27_dp&\n"]; 
WriteString[sphenoLow,"&,nlimit=1.1e-25_dp,qcdCorrection=1.53_dp,CqcdCorrection=3.4_dp&\n"];
WriteString[sphenoLow,"&,chiralMass=1.19_dp,deltaUp=0.746_dp,deltaDown=-0.508_dp&\n"];
WriteString[sphenoLow,"&,deltaStrange=-0.226_dp\n"];
*)
(* WriteString[sphenoLow,"Real(dp),Private::ecmfactor=5.975e-15_dp\n"]; *)


(*
WriteString[sphenoLow,"Real(dp),Private::MBq(2)=(/5.2794_dp,5.3696_dp/),etaB=0.55_dp&\n"];
WriteString[sphenoLow,"&,FBhatB(2)=(/0.216_dp,1.21_dp*0.216_dp/)&\n"];
WriteString[sphenoLow,"&,TauB(2)=(/1.537_dp,1.461_dp/)! in pico seconds\n"];
WriteString[sphenoLow,"Real(dp),Private::mBm(2)=(/5.279_dp,6.286_dp/)&\n"];
WriteString[sphenoLow,"&,TauBm(2)=(/1.638e-12_dp,0.46e-12_dp/)! in seconds\n"];
*)

(*
WriteString[sphenoLow,"Real(dp),Parameter,Private::e_u=2._dp/3._dp,e_d=-1._dp/3._dp\n"];
WriteString[sphenoLow,"Logical,Private::WriteLLpGamma=.False.\n"];
*)

WriteString[sphenoLow,"Private::F1,F2,F3,F4,F3Gamma\n"];
WriteString[sphenoLow,"!private variables\n \n\n"];


WriteString[sphenoLow,"Contains\n\n\n"];


];


AddCalcSquaredMasses[list_,file]:=Block[{i},
For[i=1,i<=Length[list],
WriteString[file,SPhenoForm[MakeSquaredMass[list[[i]]]] <>" = " <> SPhenoForm[list[[i]]]<>"**2 \n"];
i++;];
];


GenerateC7andC8:=Block[{i,j,k,temp,list},
temp={};
tempSM={};
tempHpm={};
NeededCouplingsInsert={};
NeededCouplings={};
AllInternalFields={};


For[j=1,j<=2,
temp={};
tempSM={};
tempHpm={};
If[j==1,
list=GeneratePenguinDiagrams[bar[BottomQuark],BottomQuark,VectorP];
CurrentVectorBoson = VectorP;,
list=GeneratePenguinDiagrams[bar[BottomQuark],BottomQuark,VectorG];
CurrentVectorBoson = VectorG;
];

For[i=1,i<=Length[list],
If[getVertexType[list[[i,1,3]]]=!=SVV && RelativeCoupling[CurrentVectorBoson,getBlank[Internal[2] /. list[[i,2]]]]=!=0  && Intersection[{VP,(* VZ, *) VG},{Internal[1],Internal[2],Internal[3]} /. list[[i,2]]] ==={},
InternalFields={Internal[1],Internal[2],Internal[3]}/. list[[i,2]];
If[FreeQ[InternalFields,VectorP] && FreeQ[InternalFields,VectorG] && FreeQ[InternalFields,VectorZ],
If[Length[Cases[getBlank/@InternalFields,x_?NonSMQ]]>0,
If[FreeQ[InternalFields,ChargedHiggs],
temp = Join[temp,{list[[i]]}];,
tempHpm = Join[tempHpm,{list[[i]]}];
];,
tempSM = Join[tempSM,{list[[i]]}];
];
NeededCouplingsInsert=Join[NeededCouplingsInsert,{{list[[i,1]]}}];
AllInternalFields=Join[AllInternalFields,{Internal[1],Internal[2],Internal[3]} /. list[[i,2]]];
];
];
i++;];
NonSMContributions = temp;
SMContributions = tempSM;
ChargedHiggsContributions = tempHpm;


NeededMasses=DeleteCases[Intersection[Join[SPhenoMass/@(Select[AllInternalFields,(FreeQ[massless,#])&]),{SPhenoMass[Electron]}]],0.];
NeededMasses=Join[NeededMasses,{MakeSquaredMass/@NeededMasses}];
NeededCouplingsInsert=Intersection[Flatten[NeededCouplingsInsert]];
NeededCouplings={};
For[i=1,i<=Length[NeededCouplingsInsert],
NeededCouplings=Join[NeededCouplings,getSPhenoCoupling[NeededCouplingsInsert[[i]],SPhenoCouplingsAll][[1]]];
i++;];
NeededCouplings = Flatten[NeededCouplings];

If[j==1, 
Name="C_7";
Print["Writing Wilson Coefficient C7 and C7p"];
LowEnergyConstraintsParameterList=Join[LowEnergyConstraintsParameterList,{{WilsonC7,{NeededMasses,NeededCouplings},{},{}}}];, 
Name="C_8";
Print["Writing Wilson Coefficient C8 and C8p"];
LowEnergyConstraintsParameterList=Join[LowEnergyConstraintsParameterList,{{WilsonC8,{NeededMasses,NeededCouplings},{},{}}}];
];

WriteC7orC8[Name, NeededMasses,NeededCouplings,SMContributions,Join[NonSMContributions,ChargedHiggsContributions],False,CurrentVectorBoson];
WriteC7orC8[Name<>"p",NeededMasses,NeededCouplings,SMContributions,Join[NonSMContributions,ChargedHiggsContributions],True,CurrentVectorBoson];
j++;
];
];


WriteC7orC8[name_,masses_,couplings_,sm_,nonSM_,pTrue_,currentVectorBoson_]:=Block[{i,j},


currentC7andC8p=pTrue;

MakeSubroutineTitle[name,Flatten[{masses,couplings}],{"gt1","gt2"},{"res"},sphenoLow];
WriteString[sphenoLow,"Implicit None \n"];
MakeVariableList[Flatten[{couplings,masses}],",Intent(in)",sphenoLow];
WriteString[sphenoLow,"Complex(dp),Intent(out) :: res(3) \n"];
WriteString[sphenoLow,"Complex(dp) :: coup1L, coup1R, coup2L, coup2R, coup3, coup3L, coup3R, Cnorm, CnormSM \n"];
WriteString[sphenoLow,"Integer::i1,i2,i3,n_i \n"];
WriteString[sphenoLow,"Integer, Intent(in)::gt1,gt2 \n"];
WriteString[sphenoLow,"Real(dp)::xt,temp, chargefactor \n"];

WriteString[sphenoLow,"Iname=Iname+1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname)=\""<>name<>"\" \n"];
WriteString[sphenoLow,"If (PrintDebugInformation) Write(*,*) \" -----  "<>name<>" ---- \" \n"];
WriteString[sphenoLow,"res=0._dp \n"];
AddCalcSquaredMasses[masses,sphenoLow];

C7andC8currentVB = currentVectorBoson;
C7andC8currentOperator = pTrue;

If[currentVectorBoson===VectorP,
WriteString[sphenoLow,"CnormSM = "<>ToString[getSPhenoCoupling[C[bar[BottomQuark],BottomQuark,currentVectorBoson]][[1,1]]]<>"(1,1) \n"];
WriteString[sphenoLow,"Cnorm = 3._dp*CnormSM \n"];,
WriteString[sphenoLow,"CnormSM = "<>ToString[getSPhenoCoupling[C[bar[BottomQuark],BottomQuark,currentVectorBoson]][[1,1]]]<>"(1,1) \n"];
WriteString[sphenoLow,"Cnorm = CnormSM \n"];
];


WriteString[sphenoLow,"!---------------------- \n"];
WriteString[sphenoLow,"! SM \n"];
WriteString[sphenoLow,"!---------------------- \n"];

AddPenguinContributions2[sm,PenguinC7FFVscalar,PenguinC7FFVvector,PenguinC7SSV,PenguinC7FFSscalar,PenguinC7FFSvector,PenguinC7SSS,PenguinC7VVV,None,PenguinC7Start,PenguinC7smFinal,True,"mz2",False,sphenoLow];

WriteString[sphenoLow,"!---------------------- \n"];
WriteString[sphenoLow,"! Non - SM \n"];
WriteString[sphenoLow,"!---------------------- \n"];

AddPenguinContributions2[nonSM,PenguinC7FFVscalar,PenguinC7FFVvector,PenguinC7SSV,PenguinC7FFSscalar,PenguinC7FFSvector,PenguinC7SSS,PenguinC7VVV,None,PenguinC7Start,PenguinC7NonsmFinal,True,"mz2",False,sphenoLow];

WriteString[sphenoLow,"\n\n"];
WriteString[sphenoLow,"res(1) = res(2) + res(3) \n \n"];

WriteString[sphenoLow,"Iname = Iname -1 \n"];


WriteString[sphenoLow,"End subroutine "<>name <>"\n \n \n"];

];


WriteBtoQGamma:=Block[{i,pos},
Print["Write Function for B->q gamma"];

pos=Position[LowEnergyConstraintsParameterList,WilsonC7][[1,1]];
couplingsC7 =Extract[LowEnergyConstraintsParameterList,pos][[2,2]];
couplingsC8 =Extract[LowEnergyConstraintsParameterList,pos+1][[2,2]];
massesC7 =Extract[LowEnergyConstraintsParameterList,pos][[2,1]];
massesC8 =Extract[LowEnergyConstraintsParameterList,pos+1][[2,1]];

massesBtoQG = Intersection[Flatten[{SPhenoMass[BottomQuark],massesC7,massesC8}]];
couplingsBtoQG = Intersection[Join[couplingsC7,couplingsC8]];

LowEnergyConstraintsParameterList=Join[LowEnergyConstraintsParameterList,{{BToQGamma,massesBtoQG,couplingsBtoQG}}];

MakeSubroutineTitle["BToQGamma",Flatten[{massesBtoQG,couplingsBtoQG}],{"Ifermion",SPhenoForm[leftCoupling],SPhenoForm[DownMatrixL],SPhenoForm[UpMatrixL]},{"Bratio","c7_o","c7p_o","c8_o","c8p_o","A_CP","i_scheme","NNLO_SM_in"},sphenoLow];

WriteString[sphenoLow,"Implicit None\n"];
WriteString[sphenoLow,"Integer, Intent(in) :: Ifermion \n"];
MakeVariableList[Flatten[{massesBtoQG,couplingsBtoQG}],", Intent(in) ",sphenoLow ];
(* MakeVariableList[MakeSquaredMass/@massesBtoQG,"",sphenoLow]; *)
MakeVariableList[Flatten[{leftCoupling,DownMatrixL,UpMatrixL}],", Intent(in) ",sphenoLow ];
WriteString[sphenoLow,"Real(dp), Intent(out) :: Bratio \n"];
WriteString[sphenoLow,"Complex(dp), Intent(out), Optional :: c7_o(3),c7p_o(3),c8_o(3),c8p_o(3)  \n"];
WriteString[sphenoLow,"Real(dp), Intent(out), Optional :: A_CP \n"];
WriteString[sphenoLow,"Integer, Intent(in), Optional :: i_scheme \n"];
WriteString[sphenoLow,"real(dp),intent(in),optional::NNLO_SM_in \n"];
WriteString[sphenoLow,"Integer :: i_t \n"];
WriteString[sphenoLow,"Complex(dp) :: norm, CKM(3,3), epsQ, epsQC,cpl_uWd(3,3) \n"];
WriteString[sphenoLow,"Complex(dp) :: delta_C7_0, delta_C7p_0, delta_C8_0, delta_C8p_0,delta_C7_1, & \n"];
WriteString[sphenoLow,"   & delta_C7p_1, delta_C8_1, delta_C8p_1,c7(3), c7p(3), c8(3), c8p(3),  & \n"];
WriteString[sphenoLow,"   & r7, r7p, r8, r8p \n"];
WriteString[sphenoLow, "Real(dp) :: NNLO_SM \n"];
WriteString[sphenoLow,"Real(dp),Dimension(5),Parameter::&\n"];
WriteString[sphenoLow,"& a=(/7.8221_dp,6.9120_dp,8.1819_dp,7.1714_dp,7.9699_dp/)&\n"];
WriteString[sphenoLow,"&,a_77=(/0.8161_dp,0.8161_dp,0.8283_dp,0.8283_dp,0.9338_dp/)&\n"];
WriteString[sphenoLow,"&,ar_7=(/4.8802_dp,4.5689_dp,4.9228_dp,4.6035_dp,5.3314_dp/)&\n"];
WriteString[sphenoLow,"&,ai_7=(/0.3546_dp,0.2167_dp,0.3322_dp,0.2029_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,a_88=(/0.0197_dp,0.0197_dp,0.0986_dp,0.0986_dp,0.0066_dp/)&\n"];
WriteString[sphenoLow,"&,ar_8=(/0.5680_dp,0.5463_dp,0.7810_dp,0.7600_dp,0.4498_dp/)&\n"];
WriteString[sphenoLow,"&,ai_8=(/-0.0987_dp,-0.1105_dp,-0.0963_dp,-0.1091_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,a_eps=(/0.4384_dp,0.3787_dp,0.8598_dp,0.7097_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ar_eps=(/-1.6981_dp,-2.6679_dp,-1.3329_dp,-2.4935_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ai_eps=(/2.4997_dp,2.8956_dp,2.5274_dp,2.9127_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ar_87=(/0.1923_dp,0.1923_dp,0.2025_dp,0.2025_dp,0.1576_dp/)&\n"];
WriteString[sphenoLow,"&,ar_7eps=(/-0.7827_dp,-1.0940_dp,-0.8092_dp,-1.1285_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ar_8eps=(/-0.0601_dp,-0.0819_dp,-0.0573_dp,-0.0783_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ai_87=(/-0.0487_dp,-0.0487_dp,-0.0487_dp,-0.0487_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ai_7eps=(/-0.9067_dp,-1.0447_dp,-0.9291_dp,-1.0585_dp,0.0_dp/)&\n"];
WriteString[sphenoLow,"&,ai_8eps=(/-0.0661_dp,-0.0779_dp,-0.0637_dp,-0.0765_dp,0.0_dp/)\n \n\n"];


WriteString[sphenoLow,"Iname = Iname +1 \n"];
WriteString[sphenoLow,"NameOfUnit(Iname) = \"BtoQGamma\" \n\n"];
AddCalcSquaredMasses[massesBtoQG,sphenoLow];


WriteString[sphenoLow,"CKM = MatMul("<>SPhenoForm[UpMatrixL] <>"(1:3,1:3),Transpose(Conjg("<> SPhenoForm[DownMatrixL]<>"(1:3,1:3)))) \n \n"];
WriteString[sphenoLow,"cpl_uWd = "<>SPhenoForm[leftCoupling] <>"* oosqrt2*CKM \n"];
WriteString[sphenoLow,"norm = 0.5_dp*cpl_uWd(3,3)*Conjg(cpl_uWd(3,ifermion))/mW2 \n"]; 

MakeCall["C_7",Flatten[{massesC7,couplingsC7}],{"3","Ifermion"},{"c7"},sphenoLow];
MakeCall["C_7p",Flatten[{massesC7,couplingsC7}],{"3","Ifermion"},{"c7p"},sphenoLow];
MakeCall["C_8",Flatten[{massesC8,couplingsC8}],{"3","Ifermion"},{"c8"},sphenoLow];
MakeCall["C_8p",Flatten[{massesC8,couplingsC8}],{"3","Ifermion"},{"c8p"},sphenoLow];


WriteString[sphenoLow,"c7 = c7/norm \n"];
WriteString[sphenoLow,"c7p = c7p/norm \n"];
WriteString[sphenoLow,"c8 = c8/norm \n"];
WriteString[sphenoLow,"c8p = c8p/norm \n"];
WriteString[sphenoLow,"r7 = c7(1)/c7(2) \n"];
WriteString[sphenoLow,"r7p = c7p(1)/c7(2) \n"];
WriteString[sphenoLow,"r8 = c8(1)/c8(2) \n"];
WriteString[sphenoLow,"r8p = c8p(1)/c8(2) \n"];


WriteString[sphenoLow,"epsq=Conjg(CKM(1,Ifermion))*CKM(1,3)/(Conjg(CKM(3,Ifermion))*CKM(3,3))\n"];
WriteString[sphenoLow,"epsqC=Conjg(epsq)\n"];

WriteString[sphenoLow,"If (Present(i_scheme)) Then\n"];
WriteString[sphenoLow,"i_t=i_scheme\n"];
WriteString[sphenoLow,"Else\n"];
WriteString[sphenoLow,"i_t=3\n"];
WriteString[sphenoLow,"End If\n"];

WriteString[sphenoLow,"if (i_t.ne.0) then\n"];
WriteString[sphenoLow,"Bratio=a(i_t)+a_77(i_t)*(Abs(r7)**2+Abs(r7p)**2)&\n"];
WriteString[sphenoLow,"&+ar_7(i_t)*Real(r7,dp)+ai_7(i_t)*Aimag(r7)&\n"];
WriteString[sphenoLow,"&+a_88(i_t)*(Abs(r8)**2+Abs(r8p)**2)&\n"];
WriteString[sphenoLow,"&+ar_8(i_t)*Real(r8,dp)+ai_8(i_t)*Aimag(r8)&\n"];
WriteString[sphenoLow,"&+a_eps(i_t)*Abs(epsq)**2+ar_eps(i_t)*Real(epsq,dp)&\n"];
WriteString[sphenoLow,"&+ai_eps(i_t)*Aimag(epsq)&\n"];
WriteString[sphenoLow,"&+ar_87(i_t)*Real(r8*Conjg(r7)+r8p*Conjg(r7p),dp)&\n"];
WriteString[sphenoLow,"&+ai_87(i_t)*Aimag(r8*Conjg(r7)+r8p*Conjg(r7p))&\n"];
WriteString[sphenoLow,"&+ar_7eps(i_t)*Real(r7*epsqC,dp)+ar_8eps(i_t)*Real(r8*epsqC,dp)&\n"];
WriteString[sphenoLow,"&+ai_7eps(i_t)*Aimag(r7*epsqC)+ai_8eps(i_t)*Aimag(r8*epsqC)\n"];

WriteString[sphenoLow,"!-----------------------!\n"];
WriteString[sphenoLow,"!is 10^4 BR\n"];
WriteString[sphenoLow,"!-----------------------\n"];
WriteString[sphenoLow,"Bratio=2.567e-1_dp*Abs(Conjg(CKM(3,Ifermion))*CKM(3,3)/CKM(2,3))**2*Bratio\n"];

WriteString[sphenoLow,"Else! E.Lunghi,J.Matias,hep-ph/0612166,eq.18 still missing 1-loop part\n"];
WriteString[sphenoLow,"delta_C7_0=C7(3)\n"];
WriteString[sphenoLow,"delta_C7p_0=C7p(1)\n"];
WriteString[sphenoLow,"delta_C8_0=C8(3)\n"];
WriteString[sphenoLow,"delta_C8p_0=C8p(1)\n"];
WriteString[sphenoLow,"delta_C7_1=0._dp\n"];
WriteString[sphenoLow,"delta_C7p_1=0._dp\n"];
WriteString[sphenoLow,"delta_C8_1=0._dp\n"];
WriteString[sphenoLow,"delta_C8p_1=0._dp\n \n"];

WriteString[sphenoLow,"if (present(NNLO_SM_in)) then \n"];
WriteString[sphenoLow,"  NNLO_SM=NNLO_SM_in \n"];
WriteString[sphenoLow,"Else \n"];
WriteString[sphenoLow,"  NNLO_SM=2.98_dp \n"];
WriteString[sphenoLow,"end if \n"];



WriteString[sphenoLow,"Bratio=NNLO_SM+4.743_dp*(Abs(delta_C7_0)**2+Abs(delta_C7p_0)**2)&\n"];
WriteString[sphenoLow,"&+0.789_dp*(Abs(delta_C8_0)**2+Abs(delta_C8p_0)**2)&\n"];
WriteString[sphenoLow,"&+Real((-7.184_dp,0.612_dp)*delta_C7_0&\n"];
WriteString[sphenoLow,"&+(-2.225_dp,-0.557_dp)*delta_C8_0+(2.454_dp,-0.884_dp)*&\n"];
WriteString[sphenoLow,"&(delta_C7_0*conjg(delta_C8_0)+delta_C7p_0*conjg(delta_C8p_0)),dp)\n"];
WriteString[sphenoLow,"end if\n\n"];

WriteString[sphenoLow,"If (Present(A_CP)) Then\n"];
WriteString[sphenoLow,"A_CP=Aimag(ai_7(i_t)*(r7)+ai_8(i_t)*(r8)&\n"];
WriteString[sphenoLow,"&+ai_87(i_t)*(r8*Conjg(r7)+r8p*Conjg(r7p))&\n"];
WriteString[sphenoLow,"&+ai_7eps(i_t)*r7*epsqC+ai_8eps(i_t)*r8*epsqC)&\n"];
WriteString[sphenoLow,"&/(a(i_t)+a_77(i_t)*(Abs(r7)**2+Abs(r7p)**2)&\n"];
WriteString[sphenoLow,"&+ar_7(i_t)*Real(r7,dp)+ar_8(i_t)*Real(r8,dp)&\n"];
WriteString[sphenoLow,"&+a_88(i_t)*(Abs(r8)**2+Abs(r8p)**2)&\n"];
WriteString[sphenoLow,"&+ar_87(i_t)*Real(r8*Conjg(r7)+r8p*Conjg(r7p),dp))\n"];
WriteString[sphenoLow,"End If\n \n \n"];
WriteString[sphenoLow,"If (Present(c7_o)) c7_o=c7\n"];
WriteString[sphenoLow,"If (Present(c7p_o)) c7p_o=c7p\n"];
WriteString[sphenoLow,"If (Present(c8_o)) c8_o=c8\n"];
WriteString[sphenoLow,"If (Present(c8p_o)) c8p_o=c8p \n\n"];

WriteString[sphenoLow,"Iname = Iname -1 \n \n"];

WriteString[sphenoLow,"End subroutine BToQgamma \n \n \n\n"];


];



