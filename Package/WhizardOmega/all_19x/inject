#!/bin/sh

# $Id: inject 3435 2011-07-24 22:20:34Z cnspeckn $

# TODO
# - Make sure this is free of bashisms and runs on other implemetations of sh
#   without problems.

# Print usage information
usage() {
	[ -n "$1" ] && echo $@
	cat <<EOI
Usage: inject [options] path

Injects the WHIZARD/O'Mega model files generated by FeynRules into the
respective program trees and applies the necessary patches if necessary. After
this step, these models will work like the built-in ones. By default, "path"
points to a WHIZARD installation, and both the WHIZARD and the integrated O'Mega
tree will be patched.

Options:

--whizard-only      WHIZARD only
--omega-only        O'Mega only, assume that "path" points to a O'Mega tree
--no-patch          just copy the model files, don't apply patches
--patch-only        just apply the patches, don't copy model files
--force-patch       try to apply patches even when the stamps suggest that this
                    already been done
-f, --force         force overwriting of existing model files (these get skipped
                    by default)
--skip-check        don't check whether "path" indeed points to a valid
                    installation
--basedir dir       look for the FeynRules output in "dir" (default: ".")
--cleanup           remove conflicting potentially files from the WHIZARD
                    directory
-h, --help          this help text
EOI
	[ -n "$1" ] && exit 1
	exit
}

die() {
	[ -n "$1" ] && echo $@
	exit 1
}

# global variables
cwd=`pwd`

# Print usage if no parameters are given
[ -z "$1" ] && usage

# Setup variables
basedir="."

# Parse the command line
while [ -n "$1" ]; do
	case "$1" in
		'-h'|'--help') usage;;
		'--whizard-only') whizard_only=1;;
		'--omega-only') omega_only=1;;
		'--no-patch') no_patch=1;;
		'--patch-only') patch_only=1;;
		'-f'|'--force') force=1;;
		'--skip_check') nocheck=1;;
		'--force-patch') patch_force=1;;
		'--cleanup') cleanup=1;;
		'--basedir')
			[ -z "$2" ] && usage "ERROR: \"--base-dir\" expects a path"
			basedir="$2"
			shift
			;;
		*)
			[ -z "$2" ] && destdir="$1" || die "ERROR: unknown option \"$1\""
			;;
	esac
	shift
done

delimiter="################################################################################"

# Absolutify basedir
cd $basedir
basedir=`pwd`
cd $cwd

# Dito, but destdir
[ -d "$destdir" ] || die "ERROR: \"$destdir\" is no directory!"
cd $destdir || die "ERROR: can't change to \"$destdir\"!"
destdir=`pwd`
cd $cwd

# Sanity checks
[ -n "$omega_only" ] && [ -n "$whizard_only" ] && \
	die "ERROR: --whizard-only and --omega-only don't go together..."

# See what has do be done
copy_whizard=""
[ -z "$omega_only" ] && [ -z "$patch_only" ] && copy_whizard=1
patch_whizard=""
[ -z "$omega_only" ] && [ -z "$no_patch" ] && patch_whizard=1
copy_omega=""
[ -z "$whizard_only" ] && [ -z "$patch_only" ] && copy_omega=1
patch_omega=""
[ -z "$whizard_only" ] && [ -z "$no_patch" ] && patch_omega=1

# Set paths
if [ -n "$omega_only" ]; then
	omegapath="$destdir"
	whizpath=""
elif [ -n "$whizard_only" ]; then
	whizpath="$destdir"
	omegapath=""
else
	whizpath="$destdir"
	omegapath="$whizpath/omega-src/bundle"
fi
fr_whizdir="$basedir/whizard"
fr_omegadir="$basedir/omega"
fr_whizpatch="$basedir/whizard.feynrules.patch"
fr_omegapatch="$basedir/omega.feynrules.patch"

# Sanity check directories and files
[ -n "$whizpath" ] && { [ -f "$whizpath/whizard.nw" ] \
	|| die "ERROR: \"$whizpath\" doesn' seem to contain a valid WHIZARD installation..."; }
[ -n "$omegapath" ] && { [ -f "$omegapath/src/omega.ml" ] \
	|| die "ERROR: \"$omegapath\" doesn' seem to contain a valid O'Mega installation..."; }
[ -n "$copy_whizard" ] && { [ -d "$fr_whizdir" ] \
	|| die "ERROR \"$fr_whizdir\" not found!"; }
[ -n "$patch_whizard" ] && { [ -f "$fr_whizpatch" ] \
	|| die "ERROR \"$fr_whizpatch\" not found!"; }
[ -n "$copy_omega" ] && { [ -d "$fr_omegadir" ] \
	|| die "ERROR \"$fr_omegadir\" not found!"; }
[ -n "$patch_omega" ] && { [ -f "$fr_omegapatch" ] \
	|| die "ERROR \"$fr_omegapatch\" not found!"; }

# Patch WHIZARD if desired
if [ -n "$patch_whizard" ]; then
	echo $delimiter
	echo
	echo "Patching WHIZARD..."
	if [ -f "$whizpath/patched.feynrules.stamp" ] && [ -z "$patch_force" ]; then
		echo "...seems like WHIZARD is already patched."
	else
		cd $whizpath
		patch -p1 < $fr_whizpatch || { cd $cwd; die "ERROR applying the WHIZARD patch!"; }
		touch patched.feynrules.stamp
		echo "...done. Remember to (re)run configure for the changes to take effect."
	fi
	echo

fi

# Copy the WHIZARD model files if desired
if [ -n  "$copy_whizard" ]; then
	echo $delimiter
	echo
	echo "Copying WHIZARD files to \"$whizpath/conf/models\":"
	for file in `ls $fr_whizdir`; do
		if [ -f "$whizpath/conf/models/$file" ] && [ -z "$force" ]; then
			echo "   \"$file\" already exists in destination directory, skipping..."
			skipped=1
		else
			echo "   copying \"$file\"..."
			cp "$fr_whizdir/$file" "$whizpath/conf/models" || die "ERROR copying file!"
		fi
	done
	# Check for potential conflicts with existing files
	for file in `ls $fr_whizdir/*cpl1.f90`; do
		file="${file##*/}"
		filepat="-name ${file%cpl1.f90}cpl[0-9].f90"
		filepat="$filepat -or -name ${file%cpl1.f90}cpl[0-9][0-9].f90"
		filepat="$filepat -or -name ${file%cpl1.f90}cpl[0-9][0-9][0-9].f90"
		for file2 in `find $whizpath/conf/models $filepat`; do
			if [ ! -f "$fr_whizdir/${file2##*/}" ]; then
				if [ -z "$cleanup" ]; then
					conflicts="$conflicts $file2"
				else
					echo "   deleting \"$file2\"..."
					rm -f $file2 || die "ERROR deleting file!"
				fi
			fi
		done
	done
	echo "Done. Please recompile WHIZARD for any changes to the model files to take effect."
	echo
	if [ -n "$conflicts" ]; then
		cat <<EOI
WARNING: conflicting files have been found in the target directory which might
         screw up the WHIZARD compile. The conflicting files are:

EOI
		for file in $conflicts; do
			echo $file
		done
	echo
	fi
fi

# Patch O'Mega if desired
if [ -n "$patch_omega" ]; then
	echo $delimiter
	echo
	echo "Patching O'Mega..."
	if [ -f "$omegapath/patched.omega.stamp" ] && [ -z "$patch_force" ]; then
		echo "...seems like O'Mega is already patched."
	else
		cd $omegapath
		patch -p1 < $fr_omegapatch || { cd $cwd; die "ERROR applying the WHIZARD patch!"; }
		touch patched.omega.stamp
	fi
	echo
fi

# Copy the O'Mega model files if desired
if [ -n  "$copy_omega" ]; then
	echo $delimiter
	echo
	echo "Copying O'Mega files to \"$omegapath/src\":"
	for file in `ls $fr_omegadir`; do
		if [ -f "$omegapath/src/$file" ] && [ -z "$force" ]; then
			echo "   \"$file\" already exists in destination directory, skipping..."
			skipped=1
		else
			echo "   copying \"$file\"..."
			cp "$fr_omegadir/$file" "$omegapath/src" || die "ERROR copying file!"
		fi
	done
	echo "Done. Remember you have to recompile O'Mega for any changes to the model files to"
	echo "take effect (recompiling WHIZARD automatically recompiles the internal O'Mega tree)."
	echo
fi

# Say goodby
echo "All Done!"
if [ -n "$conflicts" ]; then 
cat <<EOI

WARNING: conflicting files found (see above). Please remove these files either
manually or by running this script with the "--cleanup" option in order to
make sure that the model works as expected.
EOI
fi
if [ -n "$skipped" ]; then
	echo
	echo "WARNING: some files were skipped (see above); consider using \"--force\""
	echo "to force overwriting."
fi
