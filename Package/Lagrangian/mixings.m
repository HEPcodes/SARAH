(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
CalcGaugeMixing[type_, def_]:=Block[{i,ll,j,k,l},

PrintAll["Calc Mixings Gauge Sector"];

title = ToString[type];
subGauge = {}; subGhost = {};
subGaugeInv={}; subGhostInv={};
mixedGauge={}; mixedGhost={};
mixBosonBasis = {}; mixGhostBasis = {}; mixBasisNumbers={};
mixBosonFinal = {}; mixGhostFinal = {};

 For[i=1,i<=Length[def],
If[getType[def[[i,1]]]=!=F,
If[FreeQ[SGauge,def[[i,1]]]==False,
BrokenSymmetries=Join[BrokenSymmetries,{Position[SGauge,def[[i,1]]][[1,1]]}];
];
subGauge = Join[subGauge,{(getFull[def[[i,1]]] /. subIndizesMixStart) -> Sum[Delta[xgen,def[[i,j,1]]] Sum[def[[i,j,k,2]]*repl[xgen] (sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[def[[i,j,k,1]]],GetGen[def[[i,j,k,1]]]]def[[i,j,k,1]][(getIndizes[def[[i,1]]]/.subIndizesMixEnde)])  ,{k,2,Length[def[[i,j]]]}],{j,2,Length[def[[i]]]}]}];,
subGauge = Join[subGauge,{(getFull[def[[i,1]]][fNr_] /. subIndizesMixStart) -> Sum[Delta[xgen,def[[i,j,1]]] Sum[def[[i,j,k,2]]*repl[xgen] (sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[def[[i,j,k,1]]],GetGen[def[[i,j,k,1]]]]def[[i,j,k,1]][(getIndizes[def[[i,1]]]/.subIndizesMixEnde)][fNr])  ,{k,2,Length[def[[i,j]]]}],{j,2,Length[def[[i]]]}]}]; 
]; 
If[getType[def[[i,1]]]==V,
subGhost = Join[subGhost,{(getFull[getGhost[def[[i,1]]]] /. subIndizesMixStart) -> Sum[Delta[xgen,def[[i,j,1]]] Sum[def[[i,j,k,2]]*repl[xgen] (sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[getGhost[def[[i,j,k,1]]]],GetGen[getGhost[def[[i,j,k,1]]]]]getGhost[def[[i,j,k,1]]][(getIndizes[getGhost[def[[i,1]]]]/.subIndizesMixEnde)])  ,{k,2,Length[def[[i,j]]]}],{j,2,Length[def[[i]]]}]}];
mixedGauge=Join[mixedGauge,{def[[i,1]]}];
mixedGhost=Join[mixedGhost,{getGhost[def[[i,1]]]}];
];
For[j=2,j<=Length[def[[i]]],
If[getType[def[[i,1]]]===V,
mixBosonBasis=Join[mixBosonBasis,{getFull[def[[i,1]]]}];
mixGhostBasis=Join[mixGhostBasis,{getFull[getGhost[def[[i,1]]]]}];
mixBasisNumbers=Join[mixBasisNumbers,{def[[i,j,1]]}];
];
For[k=2,k<=Length[def[[i,j]]],
newSymbol= Cases[def[[i,j,k,2]],x_Symbol,2];
 For[ll=1,ll<=Length[newSymbol],
If[FreeQ[parameters,newSymbol[[ll]]]==True,
parameters=Join[parameters,{{newSymbol[[ll]],{},{1}}}];
realVar=Join[realVar,{newSymbol[[ll]]}];
rotationAngleGaugeBoson = Join[rotationAngleGaugeBoson,{newSymbol[[ll]]}];
];
ll++;]; 
 If[FreeQ[Particles[Current],def[[i,j,k,1]]]==True,
If[FreeQ[Particles[Current],RE[def[[i,j,k,1]]]]==True,
(* addParticle[RE[def[[i,j,k,1]]],getIndizesWI[def[[i,1]]], 1,getType[def[[i,1]]]]; *)
addParticle[RE[def[[i,j,k,1]]],{{lorentz,4}}, 1,getType[def[[i,1]]]];
For[l=1,l<=Length[Gauge],SA`DynL[RE[def[[i,j,k,1]]],Gauge[[l,2]]]={0};];
];
If[getType[def[[i,1]]]===V && FreeQ[Particles[Current],getGhost[def[[i,j,k,1]]]]==True,
(* addParticle[getGhost[def[[i,j,k,1]]],getIndizesWI[getGhost[def[[i,1]]]], 1,G]; *)
addParticle[getGhost[def[[i,j,k,1]]],{}, 1,G];
For[l=1,l<=Length[Gauge],SA`DynL[getGhost[def[[i,j,k,1]]],Gauge[[l,2]]]={0};];
];
If[getType[def[[i,1]]]===V, bosons = Join[bosons,{RE[def[[i,j,k,1]]]}]];
];
If[getType[def[[i,1]]]===V && FreeQ[mixBosonFinal,getFull[def[[i,j,k,1]]]]==True,
mixBosonFinal = Join[mixBosonFinal,{getFull[def[[i,j,k,1]]]}];
mixGhostFinal = Join[mixGhostFinal,{getFull[getGhost[def[[i,j,k,1]]]]}];
];
k++;];
j++;];
i++;];


SubGauge[Eigenstates]=subGauge;
SubGhost[Eigenstates]=subGhost;


MixingM=Table[Coefficient[replaceGen[ReleaseHold[mixBosonBasis[[i]] /.subGC[1]/. subGauge],0] /. i001->mixBasisNumbers[[i]],mixBosonFinal[[j]] /.subGC[1]],{i,1,Length[mixBosonBasis]},{j,1,Length[mixBosonFinal]}] /.sum[a_,b_,c_]->1;
If[Length[MixingM]>0,
InvMixingM = Simplify[Inverse[MixingM]];
];

For[i=1,i<=Length[mixBosonFinal],
subGaugeInv=Join[subGaugeInv,{(mixBosonFinal[[i]] /.subIndizesMixStart) -> Sum[InvMixingM[[i,j]] (mixBosonBasis[[j]] /.subIndizesMixEnde) Delta[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],mixBasisNumbers[[j]]],{j,1,Length[mixBosonBasis]}]}];
subGhostInv=Join[subGhostInv,{(mixGhostFinal[[i]] /.subIndizesMixStart) -> Sum[InvMixingM[[i,j]] (mixGhostBasis[[j]] /.subIndizesMixEnde) Delta[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],mixBasisNumbers[[j]]],{j,1,Length[mixGhostBasis]}]}];
mixedPart=replaceGen[ReleaseHold[mixBosonFinal[[i]] /. subGaugeInv],rgNr];
If[mixedPart==conj[mixedPart],
realVar = Join[realVar,{getBlank[mixBosonFinal[[i]]]}];
realVar = Join[realVar,{getBlank[mixGhostFinal[[i]]]}]; 
];
i++;];

If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[subGauge,subGaugeInv,UGTgaugeMM[rotNr]];
GaugeTransformation=replaceGen[ReleaseHold[GaugeTransformation /. subGhost /.subGauge],rgNr];
];

For[i=1,i<=Length[def],
If[getType[def[[i,1]]]==V,
delParticle[getGhost[def[[i,1]]]];
delParticle[getGhostBar[def[[i,1]]]];
];
delParticle[def[[i,1]]];
i++;];



];

(* --------------------------------------------------- *)
(* Calculate Mixed Lagrangians *)
(* --------------------------------------------------- *)


CalcMixedLagrangian:=Block[{i, rotNr,j,ll,add,newTerms},
EffectiveOperators=0;
EffectiveTheory=False;

rgNr=0;


(* ------------------------ SYMMETRY BREAKING -------------------------------- *)

LagReDef=0;

For[rotNr=1,rotNr<=Length[NameOfStates],

(* --------------------------- Mixings --------------------------------*)

title = ToString[NameOfStates[[rotNr]]];

SA`CurrentRotatedNr=rotNr;

PrintAll[""];
(*
Print["-----------------------------------"];
Print["Evolve States: ",title];
Print["-----------------------------------"];
*)
PrintAll[StyleForm["Evolve States: "<>ToString[title],"Section",FontSize->12]];
rgNr++;


If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][LagrangianInput]]]=!=DEFINITION,
DEFINITION[NameOfStates[[rotNr]]][Additional]=DEFINITION[NameOfStates[[rotNr]]][LagrangianInput];
];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Additional]]]=!=DEFINITION,
PrintAll["Adding terms to the Lagrangian: "];
add=DEFINITION[NameOfStates[[rotNr]]][Additional];
sumLagInput=0;
For[j=1,j<=Length[add],
Print[" ... adding: ",add[[j,1]], " (",Dynamic[DynamicStatusAddTerms[ADD]]/. ADD->add[[j,1]],")"];

PrintDebug[" ... adding: ",add[[j,1]]];
newTerms=CreateLagrangian[add[[j,1]],AddHC /. add[[j,2]] /. {AddHC->False},Overwrite /. add[[j,2]] /. {Overwrite->False}];
sumLagInput+=Plus@@newTerms;
LagReDef+=newTerms[[1]];
LagrangianVVV+=newTerms[[2]];
LagrangianVVVV+=newTerms[[3]];
Potential-=newTerms[[4]];
Kinetic +=newTerms[[5]];
j++;];
LagInput[NameOfStates[[rotNr]]]=sumLagInput;
];

If[rotNr===1 && Head[TensorRepToVector]===List && TensorRepToVector=!={},
ReplaceTensorRepsByVectors[TensorRepToVector];
];
If[rotNr===1 && AuxGaugesPresent===True,
RenameIndicesAux;
];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][VEVs]]]=!=DEFINITION,
GenerateVEVs[NameOfStates[[rotNr]]];,
vevSub={};
vevSubInverse={};
];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Complexify]]]=!=DEFINITION,
ComplexifyFields[NameOfStates[[rotNr]]];,
compSub={};
compSubInverse={};
];



If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][GaugeSectorOld]]]=!=DEFINITION,
CalcGaugeMixing[NameOfStates[[rotNr]],DEFINITION[NameOfStates[[rotNr]]][GaugeSectorOld]];,
subGauge = {};
];
If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][GaugeSector]]]=!=DEFINITION,
CalcGaugeMixing2[NameOfStates[[rotNr]],DEFINITION[NameOfStates[[rotNr]]][GaugeSector]];
];
BrokenGaugeSymmetries[NameOfStates[[rotNr]]] = Intersection[BrokenSymmetries];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Flavors]]]=!=DEFINITION,
GenerateFlavors[NameOfStates[[rotNr]]];
Potential=replaceGen[ReleaseHold[Potential /.flavorSub],rgNr];
Kinetic=replaceGen[ReleaseHold[Kinetic/.flavorSub],rgNr];
EffectiveOperators=replaceGen[ReleaseHold[EffectiveOperators/.flavorSub],rgNr];
LagrangianAux=replaceGen[ReleaseHold[LagrangianAux/.flavorSub],rgNr];
LagReDef=replaceGen[ReleaseHold[LagReDef/.flavorSub],rgNr];
flavorSub={};,
flavorSub={};];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Decompositions]]]=!=DEFINITION,
DecomposeStates[NameOfStates[[rotNr]]];
Potential=replaceGen[ReleaseHold[Potential /.decomposeSub],rgNr];
Kinetic=replaceGen[ReleaseHold[Kinetic/.decomposeSub],rgNr];
EffectiveOperators=replaceGen[ReleaseHold[EffectiveOperators/.decomposeSub],rgNr];
LagrangianAux=replaceGen[ReleaseHold[LagrangianAux/.decomposeSub],rgNr];
LagReDef=replaceGen[ReleaseHold[LagReDef/.decomposeSub],rgNr];
decomposeSub={};,
decomposeSub={};];



If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Phases]]]=!=DEFINITION,
GeneratePhases[NameOfStates[[rotNr]]];,
phaseSub={};];

PrintDebug["Rotate Lagrangian"];
Print["Rotate Lagrangian: ",Dynamic[DynamicRotateLag[ROTNR]]/. ROTNR->rotNr,"/",14];

DynamicRotateLag[rotNr]=1;
Potential=replaceGen[ReleaseHold[Potential /. SA`subDeleteParticles/.subGauge/.vevSub /. compSub/.flavorSub /. phaseSub /. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=2;
Kinetic=replaceGen[ReleaseHold[Kinetic/. SA`subDeleteParticles/.vevSub/.subGauge/. compSub/.flavorSub /. phaseSub/. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=3;
EffectiveOperators=replaceGen[ReleaseHold[EffectiveOperators/. SA`subDeleteParticles/.vevSub/. compSub/.subGauge/.flavorSub /. phaseSub/. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=4;
LagrangianVVV=replaceGen[ReleaseHold[LagrangianVVV/. SA`subDeleteParticles/.subGauge /. phaseSub/. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=5;
LagrangianVVVV=replaceGen[ReleaseHold[LagrangianVVVV/. SA`subDeleteParticles/.subGauge /. phaseSub/. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=6;
LagrangianAux=replaceGen[ReleaseHold[LagrangianAux/. SA`subDeleteParticles/.vevSub/. compSub/.subGauge/.flavorSub /. phaseSub/. DelPart->0],rgNr];
DynamicRotateLag[rotNr]=7;
LagReDef=replaceGen[ReleaseHold[LagReDef/. SA`subDeleteParticles/.vevSub/. compSub/.subGauge/.flavorSub /. phaseSub/. DelPart->0],rgNr];

(* -------------------------------- Effective after Gauge Bososn Mixing ------------------ *)

If[Length[IntegrateOut]>0,
ModelFile::IntegrateOut="The option to integrate out fields has been removed: SARAH is optimized to handle renormalisable models. You can use 'DeleteFields' to remove degrees of freedom from the model without the efforts to derive all induced, effective operators.";
Message[ModelFile::IntegrateOut];
Interrupt[];
Lagrangian = Kinetic - Potential + LagrangianVVV + LagrangianVVVV;
MakeEffective;
];
DynamicRotateLag[rotNr]=8;
Potential=Potential /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=9;
Kinetic = Kinetic /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=10;
LagrangianVVV = LagrangianVVV /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=11;
LagrangianVVVV = LagrangianVVVV /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=12;
EffectiveOperators  = EffectiveOperators  /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=13;
LagrangianAux  = LagrangianAux /.{GetGenStart->getGenStart,GetGen->getGen};
DynamicRotateLag[rotNr]=14;
LagReDef  = LagReDef /.{GetGenStart->getGenStart,GetGen->getGen};

(* If[rotNr\[Equal]2,Interrupt[];]; *)
Print["Derive ghost terms: "];
If[IgnoreGaugeFixing=!=True,
testAutomaticGF=GenerateGaugeFixing[Kinetic,NameOfStates[[rotNr]],rotNr];,
Print["   ... skipped."];
testAutomaticGF={};
];

If[IgnoreGaugeFixing=!=True,
CalcGhostLagrangian2[testAutomaticGF];,
LGhostSS=0;
];
Potential = Potential+LGhostSS;

PrintAll["Calc Mixings of Matter Fields"];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][MatterSector]]]=!=DEFINITION,
res=MakeStates[DEFINITION[NameOfStates[[rotNr]]][MatterSector]]; ,
res={{}};
];
rgNr++;

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][VEVs]]]=!=DEFINITION,
(* TEqu=CalcTadpoleEquations[Potential,DEFINITION[NameOfStates[[rotNr]]][VEVs]];, *)
TEqu=CalcTadpoleEquations[Potential,NameOfStates[[rotNr]]];,
Clear[TEqu];
];
EffectiveOperators  = replaceGen[ReleaseHold[EffectiveOperators  /. res[[1]]],rgNr];
Potential = replaceGen[ReleaseHold[ReleaseHold[Potential/. res[[1]]]],rgNr];
Kinetic = replaceGen[ReleaseHold[ReleaseHold[Kinetic/.res[[1]]]],rgNr];
LagrangianAux = replaceGen[ReleaseHold[ReleaseHold[LagrangianAux/.res[[1]]]],rgNr];
LagReDef = replaceGen[ReleaseHold[ReleaseHold[LagReDef/.res[[1]]]],rgNr];
LGhost = replaceGen[ReleaseHold[ReleaseHold[LGhost/.res[[1]]]],rgNr];

testAutomaticGF2 = replaceGen[ReleaseHold[ReleaseHold[testAutomaticGF/.res[[1]]]],rgNr];

SA`GaugeFixingTerms =  replaceGen[ReleaseHold[ReleaseHold[SA`GaugeFixingTerms/.res[[1]]]],rgNr];

If[Head[newRealStates]===List,
realVar=Join[realVar,newRealStates];
];

If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][AdditionalFinal]]]=!=DEFINITION,
PrintAll["Adding terms to the Lagrangian: "];
add=DEFINITION[NameOfStates[[rotNr]]][AdditionalFinal];
sumLagInput=0;
For[j=1,j<=Length[add],
Print[" ... adding: ",add[[j,1]], " (",Dynamic[DynamicStatusAddTerms[ADD]]/. ADD->add[[j,1]],")"];

PrintDebug[" ... adding: ",add[[j,1]]];
newTerms=CreateLagrangian[add[[j,1]],AddHC /. add[[j,2]] /. {AddHC->False},Overwrite /. add[[j,2]] /. {Overwrite->False}];
sumLagInput+=Plus@@newTerms;
LagReDef+=newTerms[[1]];
LagrangianVVV+=newTerms[[2]];
LagrangianVVVV+=newTerms[[3]];
Potential-=newTerms[[4]];
Kinetic +=newTerms[[5]];
j++;];
LagInput[NameOfStates[[rotNr]]]=sumLagInput;
];

(* -------------------------------- Effective after Particle Mixing ------------------ *)


If[(Length[IntegrateOut]>0) || (Length[DeleteParticles]>0),
PrintAll["Integrate out Particles after Symmetry Breaking: ", title];
Lagrangian = Kinetic - Potential + LagrangianVVV + LagrangianVVVV;
MakeEffective;
];

(*
If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][GaugeFixing]]]=!=DEFINITION,
CalcGhostLagrangian[DEFINITION[NameOfStates[[rotNr]]][GaugeFixing]];
];
*)
(*
If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][LagrangianInput]]]=!=DEFINITION,
DEFINITION[NameOfStates[[rotNr]]][Additional]=DEFINITION[NameOfStates[[rotNr]]][LagrangianInput];
];
*)
(*
If[Head[Head[DEFINITION[NameOfStates[[rotNr]]][Additional]]]=!=DEFINITION,
PrintAll["Adding terms to the Lagrangian: "];
add=DEFINITION[NameOfStates[[rotNr]]][Additional];
sumLagInput=0;
For[j=1,j\[LessEqual]Length[add],
Print[" ... adding: ",add[[j,1]], " (",Dynamic[DynamicStatusAddTerms[ADD]]/. ADD\[Rule]add[[j,1]],")"];

PrintDebug[" ... adding: ",add[[j,1]]];
newTerms=CreateLagrangian[add[[j,1]],AddHC /. add[[j,2]] /. {AddHC\[Rule]False},Overwrite /. add[[j,2]] /. {Overwrite\[Rule]False}];
sumLagInput+=newTerms[[1]];
LagReDef+=newTerms[[1]];
LagrangianVVV+=newTerms[[2]];
LagrangianVVVV+=newTerms[[3]];
Potential-=newTerms[[4]];
Kinetic +=newTerms[[5]];
j++;];
LagInput[NameOfStates[[rotNr]]]=sumLagInput;
];
*)
SaveModelParameters[NameOfStates[[rotNr]]];

rotNr++;
];

(* ---------------------------- Final Lagrangian ------------------------ *)
PrintAll[""];
(*
Print["-----------------------------------"];
Print["Finishing"];
Print["-----------------------------------"];
*)

PrintAll[StyleForm["Finishing","Section",FontSize->12]];

PrintAll["Calculate final Lagrangian"];
SetGenerations=True;
Update[];
CheckOne;
SetGenerations=False;

PrintAll["Cleaning up"];
AddMatrixProducts;

MakeParameterDependenceList;
If[SkipCheckMassless=!=True,CheckForMassless;];
CalculateTreeLevelMasses;
SimplifyMatrices;
CurrentStates = Last[NameOfStates];
PrintAll["Numerical calculations (if necessary)"];
GetNumericalValues[SpectrumFile];

If[(Length[makeOutput] > 0)   && (FirstRun==False),
PrintAll[""];
PrintAll[""];
PrintAll["Beginning with automatized Output"];

For[i=1,i<=Length[makeOutput],
If[FreeQ[makeOutput[[i,2]],TeX]==True,writetex=False;,writetex=True;];
If[FreeQ[makeOutput[[i,2]],FeynArts]==True,writefa=False;,writefa=True;];
If[FreeQ[makeOutput[[i,2]],CHep]==True,writech=False;,writech=True;];
ModelOutput[makeOutput[[i,1]],WriteTeX->writetex, WriteCHep->writech, WriteFeynArts->writefa];
i++;];
];
];


(* ::Input::Initialization:: *)


(* ----------------------------------------------- *)
(* Calculate Substitutions *)
(* ----------------------------------------------- *)


MakeStates[mixDef_]:=Block[{i,k,i2,j1,j2,gen,j3,ll,flavors},
mixES = {};
mixESnoFV = {};
mixBasis = {};
mixBasisNoFV = {};
mixMatES = {};
mixMatESnoFV = {};
dimMatrizes={};
subDef={};
subDefInverse={};
mixedNames={};
mixedNamesNoFV={};

For[i=1,i<=Length[mixDef],
If[FreeQ[mixDef[[i]],NoFlavorMixing]==False,
(* If[Length[Dimensions[mixDef[[i,1]]]]\[Equal]1, *)
If[Depth[mixDef[[i,1]]/. conj[x_]->x]<3,
mixESnoFV = Join[mixESnoFV,{mixDef[[i]]}];
If[FreeQ[parameters,mixDef[[i,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,1]]];];
mixedNamesNoFV = Join[mixedNamesNoFV,{mixDef[[i,2,1]]}];
 If[getType[mixDef[[i,1,1]]]===F,
mixBasisNoFV = Join[mixBasisNoFV,{{mixDef[[i,1]],mixDef[[i,1]]}}];,
mixBasisNoFV = Join[mixBasisNoFV,{{mixDef[[i,1]],conj[mixDef[[i,1]]]}}];
];,
mixESnoFV = Join[mixESnoFV,{{mixDef[[i,1,1]],mixDef[[i,2,1]]}}];
mixESnoFV = Join[mixESnoFV,{{mixDef[[i,1,2]],mixDef[[i,2,2]]}}];
If[FreeQ[parameters,mixDef[[i,1,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,1,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,1,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,1,1]]];];
If[FreeQ[parameters,mixDef[[i,2,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,2,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,2,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,2,1]]];];
mixedNamesNoFV = Join[mixedNamesNoFV,{{mixDef[[i,2,1]],mixDef[[i,2,2]]}}];
mixBasisNoFV = Join[mixBasisNoFV,{{mixDef[[i,1,1]],mixDef[[i,1,2]]}}];
];
mixMatESnoFV = Join[mixMatESnoFV,{mixDef[[i,2]]}];,
(* If[Length[Dimensions[mixDef[[i,1]]]]\[Equal]1, *)
If[Depth[mixDef[[i,1]]/. conj[x_]->x]<3,
mixES = Join[mixES,{mixDef[[i]]}];
If[FreeQ[parameters,mixDef[[i,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,1]]];];
mixedNames = Join[mixedNames,{mixDef[[i,2,1]]}];
 If[getType[mixDef[[i,1,1]]]===F,
mixBasis = Join[mixBasis,{{mixDef[[i,1]],mixDef[[i,1]]}}];,
mixBasis = Join[mixBasis,{{mixDef[[i,1]],conj[mixDef[[i,1]]]}}];
];,
mixES = Join[mixES,{{mixDef[[i,1,1]],mixDef[[i,2,1]]}}];
mixES = Join[mixES,{{mixDef[[i,1,2]],mixDef[[i,2,2]]}}];
If[FreeQ[parameters,mixDef[[i,1,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,1,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,1,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,1,1]]];];
If[FreeQ[parameters,mixDef[[i,2,2]]]===False, Message[ModelFile::ParameterNameExists,mixDef[[i,2,2]]];];
If[FreeQ[Particles[ALL],mixDef[[i,2,1]]]==False,Message[ModelFile::ParticleNameExists,mixDef[[i,2,1]]];];
mixBasis = Join[mixBasis,{{mixDef[[i,1,1]],mixDef[[i,1,2]]}}];
mixedNames = Join[mixedNames,{{mixDef[[i,2,1]],mixDef[[i,2,2]]}}];
];
mixMatES = Join[mixMatES,{mixDef[[i,2]]}];
];
i++;];

For[i=1,i<=Length[mixES],
gen=Sum[(getGen[mixES[[i,1,j]]]-getGenStart[mixES[[i,1,j]]]+1),{j,1,Length[mixES[[i,1]]]}];
(* addParticle[RE[mixES[[i,2,1]]],getFull[RE[mixES[[i,1,1]]]][[1]],gen, getType[mixES[[i,1,1]]]]; *)
indold=getIndizesOldWI[RE[mixES[[i,1,1]]]]/.{generation,a_}->{generation,gen};
If[FreeQ[indold,generation],indold=Join[{{generation,gen}},indold];];
addParticle[RE[mixES[[i,2,1]]],indold,gen, getType[mixES[[i,1,1]]]];
For[i2=1,i2<=AnzahlGauge,
 If[FreeQ[BrokenSymmetries,i2]==True,
SA`Casimir[RE[mixES[[i,2,1]]],Gauge[[i2,3]]]=SA`Casimir[mixES[[i,1,1]],Gauge[[i2,3]]];
SA`Dynkin[RE[mixES[[i,2,1]]],Gauge[[i2,3]]]=SA`Dynkin[mixES[[i,1,1]],Gauge[[i2,3]]];
SA`DimensionGG[RE[mixES[[i,2,1]]],Gauge[[i2,3]]]=SA`DimensionGG[mixES[[i,1,1]],Gauge[[i2,3]]];
SA`DynL[RE[mixES[[i,2,1]]],Gauge[[i2,3]]]=SA`DynL[mixES[[i,1,1]],Gauge[[i2,3]]];
]; 
MultiplicityFactor[mixES[[i,2,1]],Gauge[[i2,3]]]=MultiplicityFactor[mixES[[i,1,1]],Gauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[RE[mixES[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Casimir[mixES[[i,1,1]],AuxGauge[[i2,3]]];
SA`Dynkin[RE[mixES[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Dynkin[mixES[[i,1,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[RE[mixES[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DimensionGG[mixES[[i,1,1]],AuxGauge[[i2,3]]];
SA`DynL[RE[mixES[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DynL[mixES[[i,1,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[mixES[[i,2,1]],AuxGauge[[i2,3]]]=MultiplicityFactor[mixES[[i,1,1]],AuxGauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[Global],
If[Length[Intersection[SA`ChargeGlobal[#,Global[[i2,2]]]&/@mixES[[i,1]]]]=!=1,
PrintAll["Problem with deriving global charges for ",mixES[[i,2,1]]];,
SA`ChargeGlobal[RE[mixES[[i,2,1]]],Global[[i2,2]]] =SA`ChargeGlobal[mixES[[i,1,1]],Global[[i2,2]]];
];
i2++;];
If[TrueQ[conj[mixES[[i,1,1]]]==mixES[[i,1,1]]]==True || FreeQ[newRealStates,mixES[[i,1,1]]]==False,realVar=Join[realVar,{mixES[[i,2,1]]}];];
If[FreeQ[parameters,mixES[[i,2,2]]]==True,
If[gen<=4,
SA`subUnitaryCondition = Join[SA`subUnitaryCondition,{Sum[mixES[[i,2,2]][a_,k] conj[mixES[[i,2,2]][b_,k]],{k,1,gen}]-> Delta[a,b]}];
];
parameters=Join[parameters,{{mixES[[i,2,2]],{generation,generation},{gen,gen}}}];
SA`ListMixingMatrices = Join[SA`ListMixingMatrices,{mixES[[i,2,2]]}];
];
i++;];

For[i=1,i<=Length[mixESnoFV],
flavors=Length[mixESnoFV[[i,1]]];
gen=getGen[mixESnoFV[[i,1,1]]];
If[FreeQ[Particles[ALL],mixESnoFV[[i,2,1]]]==False,
Message[ModelFile::ParticleNameExists,mixESnoFV[[i,2,1]]];
];
(* addParticle[RE[mixESnoFV[[i,2,1]]],Insert[getFull[RE[mixESnoFV[[i,1,1]]]][[1]],flavor,2],gen, getType[mixESnoFV[[i,1,1]]],flavors]; *)
addParticle[RE[mixESnoFV[[i,2,1]]],Insert[getIndizesOldWI[RE[mixESnoFV[[i,1,1]]]]/.{generation,a_}->{generation,gen},{flavor,flavors},2],gen, getType[mixESnoFV[[i,1,1]]],flavors];

For[i2=1,i2<=AnzahlGauge,
 If[FreeQ[BrokenSymmetries,i2]==True,
SA`Casimir[mixESnoFV[[i,2,1]],Gauge[[i2,3]]]=SA`Casimir[mixESnoFV[[i,1,1]],Gauge[[i2,3]]];
SA`Dynkin[mixESnoFV[[i,2,1]],Gauge[[i2,3]]]=SA`Dynkin[mixESnoFV[[i,1,1]],Gauge[[i2,3]]];
SA`DimensionGG[mixESnoFV[[i,2,1]],Gauge[[i2,3]]]=SA`DimensionGG[mixESnoFV[[i,1,1]],Gauge[[i2,3]]];
SA`DynL[mixESnoFV[[i,2,1]],Gauge[[i2,3]]]=SA`DynL[mixESnoFV[[i,1,1]],Gauge[[i2,3]]];
]; 
MultiplicityFactor[mixESnoFV[[i,2,1]],Gauge[[i2,3]]]=MultiplicityFactor[mixESnoFV[[i,1,1]],Gauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[RE[mixESnoFV[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Casimir[mixESnoFV[[i,1,1]],AuxGauge[[i2,3]]];
SA`Dynkin[RE[mixESnoFV[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Dynkin[mixESnoFV[[i,1,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[RE[mixESnoFV[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DimensionGG[mixESnoFV[[i,1,1]],AuxGauge[[i2,3]]];
SA`DynL[RE[mixESnoFV[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DynL[mixESnoFV[[i,1,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[mixESnoFV[[i,2,1]],AuxGauge[[i2,3]]]=MultiplicityFactor[mixESnoFV[[i,1,1]],AuxGauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[Global],
If[Length[Intersection[SA`ChargeGlobal[#,Global[[i2,2]]]&/@mixES[[i,1]]]]=!=1,
PrintAll["Problem with deriving global charges for ",mixES[[i,2,1]]];,
SA`ChargeGlobal[RE[mixES[[i,2,1]]],Global[[i2,2]]] =SA`ChargeGlobal[mixES[[i,1,1]],Global[[i2,2]]];
];
i2++;];
If[TrueQ[conj[mixESnoFV[[i,1,1]]]==mixESnoFV[[i,1,1]]]==True || FreeQ[newRealStates,mixESnoFV[[i,1,1]]]==False,realVar=Join[realVar,{mixESnoFV[[i,2,1]]}];];
If[FreeQ[parameters,mixESnoFV[[i,2,2]]]==True,
SA`subUnitaryCondition = Join[SA`subUnitaryCondition,{Sum[mixESnoFV[[i,2,2]][c_][a_,k] conj[mixESnoFV[[i,2,2]][c_][b_,k]],{k,1,flavors}]-> Delta[a,b],Delta[c_,d_]Sum[mixESnoFV[[i,2,2]][c_][a_,k] conj[mixESnoFV[[i,2,2]][d_][b_,k]],{k,1,flavors}]-> Delta[a,b] Delta[c,d]}];
parameters=Join[parameters,{{mixESnoFV[[i,2,2]],{generation,flavor,flavor},{gen,flavors,flavors}}}];
SA`ListMixingMatrices = Join[SA`ListMixingMatrices,{mixESnoFV[[i,2,2]]}];
];
i++;];

(* Mixing Mass Definition *)
MatrixValues = {};
MatrixNames = Transpose[Transpose[mixES][[2]]][[2]];

For[i=1, i<=Length[ParameterDefinitions],
If[( (Dependence /.  ParameterDefinitions[[i,2]])  =!= None )&&  ((Dependence /.  ParameterDefinitions[[i,2]]) =!= Dependence),
If[FreeQ[MatrixNames,ParameterDefinitions[[i,1]]]==False,
MatrixValues = Join[MatrixValues,{{ParameterDefinitions[[i,1]], Dependence /.  ParameterDefinitions[[i,2]]}}];
];
];
i++;];

For[i=1,i<=Length[mixES],
If[FreeQ[MatrixValues,mixES[[i,2,2]]]==False,
maxX=0; maxY=0;newMatrixName=None;
matrixV=Extract[MatrixValues,Position[MatrixValues,mixES[[i,2,2]]][[1,1]]][[2]];
UsedDependences = Join[UsedDependences,{mixES[[i,2,2]]}];
For[j1=1,j1<=Length[matrixV],
For[j2=1,j2<=Length[matrixV[[j1]]],
subAlways=Join[subAlways,{mixES[[i,2,2]][j1,j2]-> matrixV[[j1,j2]]}];
newSymbols = Cases[matrixV[[j1,j2]],x_Symbol,2];
If[newSymbols=={},
If[NumericQ[matrixV[[j1,j2]]]==False,
newMatrixName = matrixV[[j1,j2]][[0]];
valX=matrixV[[j1,j2]][[1]];
valY=matrixV[[j1,j2]][[2]];
If[valX>maxX, maxX=valX;];
If[valY>maxY, maxY=valY;];
];
];
For[j3=1,j3<=Length[newSymbols],
If[FreeQ[parameters,newSymbols[[j3]]]==True, 
parameters=Join[parameters,{{newSymbols[[j3]],{},{1}}}];
realVar=Join[realVar,{newSymbols[[j3]]}];
];
j3++;];
Inv[mixES[[i,2,2]]][j1,j2]=Simplify[Inverse[matrixV]][[j1,j2]];
j2++;];
j1++;];
 If[newMatrixName=!=None,
parameters=Join[parameters,{{newMatrixName,{generation,generation},{maxX,maxY}}}];
SA`subUnitaryCondition = Join[SA`subUnitaryCondition,{Sum[newMatrixName[a_,i] conj[newMatrixName[b_,i]],{i,1,maxX}]-> Delta[a,b]}];
pos=Position[ParameterDefinitions,newMatrixName,2];
If[pos=!={},
If[(Real /. Extract[ParameterDefinitions,pos[[1,1]]][[2]])==True,
realVar=Join[realVar,{newMatrixName}];
];
];
];
];
If[FreeQ[ParameterDefinitions,mixES[[i,2,2]]]==False,
If[(Real /. Extract[ParameterDefinitions,Position[Transpose[ParameterDefinitions][[1]],mixES[[i,2,2]]][[1,1]]][[2]])==True,
realVar=Join[realVar,{mixES[[i,2,2]]}];
];
];

OffSetArray={0};
For[j=1,j<= Length[mixES[[i,1]]],
If[j==1,
OffSet=1-getGenStart[mixES[[i,1,j]]];,
OffSet+=(getGen[mixES[[i,1,j-1]]]-getGenStart[mixES[[i,1,j-1]]]+1);
OffSetArray=Join[OffSetArray,{OffSet}];
];
If[getElectricCharge[RE[mixES[[i,1,j]]]]===None,
If[(Head[mixES[[i,1,j]]]===conj || Head[mixES[[i,2,1]]] ===conj) && (Head[mixES[[i,1,j]]]=!=Head[mixES[[i,2,1]]]),
getElectricCharge[RE[mixES[[i,1,j]]]]=-Hold[getElectricCharge[FIELD]] /. FIELD->RE[mixES[[i,2,1]]];,
getElectricCharge[mixES[[i,1,j]]]=Hold[getElectricCharge[FIELD]]/. FIELD->mixES[[i,2,1]];
];
];
If[getType[mixES[[i,1,j]]]===F,
If[Head[mixES[[i,1,j]]]===conj,
subDef=Join[subDef,{Simplify[getFull[RE[mixES[[i,1,j]]]] /.subIndizesMixStart][fnr_]->sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[mixES[[i,2,1]]],GetGen[mixES[[i,2,1]]]]*repl[xgen] mixES[[i,2,2]][Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],OffSet+xgen] *conj[mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,j]]]]/.subIndizesMixEnde)][fnr]]} ],
subDef=Join[subDef,{Simplify[getFull[mixES[[i,1,j]]] /. subIndizesMixStart][fnr_]-> sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[mixES[[i,2,1]]],GetGen[mixES[[i,2,1]]]]*repl[xgen] conj[mixES[[i,2,2]][Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],OffSet+xgen]] *mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,j]]]]/.subIndizesMixEnde)][fnr]}];
];,

If[Head[mixES[[i,1,j]]]===conj,
subDef=Join[subDef,{Simplify[getFull[RE[mixES[[i,1,j]]]] /.subIndizesMixStart]->sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[mixES[[i,2,1]]],GetGen[mixES[[i,2,1]]]]*repl[xgen] mixES[[i,2,2]][Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],OffSet+xgen] *conj[mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,j]]]]/.subIndizesMixEnde)]]} ],
subDef=Join[subDef,{Simplify[getFull[mixES[[i,1,j]]] /. subIndizesMixStart]-> sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[mixES[[i,2,1]]],GetGen[mixES[[i,2,1]]]]*repl[xgen] conj[mixES[[i,2,2]][Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],OffSet+xgen]] *mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,j]]]]/.subIndizesMixEnde)]}];
];
];
j++;];

If[Head[mixES[[i,2,1]]]===conj,cH=conj;,cH=JustReturn;];
If[getType[mixES[[i,1,1]]]=!=F,
subDefInverse=Join[subDefInverse,{cH[mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,1]]]]/.subIndizesMixStart)]]-> Sum[cH[(getFull[mixES[[i,1,j]]]/.subIndizesMixEnde )sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],getGenStart[mixES[[i,1,j]]],getGen[mixES[[i,1,j]]]]*repl[xgen]*Inv[mixES[[i,2,2]]][OffSetArray[[j]]+Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],xgen]], {j,1,Length[mixES[[i,1]]]}]}];,
subDefInverse=Join[subDefInverse,{cH[mixES[[i,2,1]][(getIndizes[RE[mixES[[i,1,1]]]]/.subIndizesMixStart)][fnr_]]-> Sum[cH[(getFull[mixES[[i,1,j]]][fnr]/.subIndizesMixEnde )sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],getGenStart[mixES[[i,1,j]]],getGen[mixES[[i,1,j]]]]*repl[xgen]*Inv[mixES[[i,2,2]]][OffSetArray[[j]]+Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],xgen]], {j,1,Length[mixES[[i,1]]]}]}];
];
  i++;]; 


For[i=1,i<=Length[mixESnoFV],

If[FreeQ[ParameterDefinitions,mixESnoFV[[i,2,2]]]==False,
If[(Real /. Extract[ParameterDefinitions,Position[ParameterDefinitions,mixESnoFV[[i,2,2]]][[1,1]]][[2]])==True,
realVar=Join[realVar,{mixESnoFV[[i,2,2]]}];
];
];

OffSetArray={0};
OffSet=1;
For[j=1,j<= Length[mixESnoFV[[i,1]]],
If[getType[mixESnoFV[[i,1,j]]]===F,
If[Head[mixESnoFV[[i,1,j]]]===conj,
subDef=Join[subDef,{Simplify[getFull[RE[mixESnoFV[[i,1,j]]]] /.subIndizesMixStart][fnr_]->sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]*mixESnoFV[[i,2,2]][xgen][Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],OffSet] *conj[mixESnoFV[[i,2,1]][(Insert[getIndizes[RE[mixESnoFV[[i,1,j]]]],flavor,2]/.subIndizesMixEndeNoFV)][fnr]]} ],
subDef=Join[subDef,{Simplify[getFull[mixESnoFV[[i,1,j]]] /. subIndizesMixStart][fnr_]-> sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]mixESnoFV[[i,2,2]][xgen][Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],OffSet] *mixESnoFV[[i,2,1]][(Insert[getIndizes[RE[mixESnoFV[[i,1,j]]]],flavor,2]/.subIndizesMixEndeNoFV)][fnr]}];
];,
If[Head[mixESnoFV[[i,1,j]]]===conj,
subDef=Join[subDef,{Simplify[getFull[RE[mixESnoFV[[i,1,j]]]] /.subIndizesMixStart]->sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]mixESnoFV[[i,2,2]][xgen][Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],OffSet] *conj[mixESnoFV[[i,2,1]][(Insert[getIndizes[RE[mixESnoFV[[i,1,j]]]],flavor,2]/.subIndizesMixEndeNoFV)]]} ],
subDef=Join[subDef,{Simplify[getFull[mixESnoFV[[i,1,j]]] /. subIndizesMixStart]-> sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]conj[mixESnoFV[[i,2,2]][xgen][Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],OffSet]] *mixESnoFV[[i,2,1]][(Insert[getIndizes[RE[mixESnoFV[[i,1,j]]]],flavor,2]/.subIndizesMixEndeNoFV)]}];
];
]; 
If[getType[mixESnoFV[[i,1,1]]]=!=F,
subDefInverse=Join[subDefInverse,{mixESnoFV[[i,2,1]][(Insert[getIndizes[RE[mixESnoFV[[i,1,1]]]],flavor,2]/.subIndizesMixStart)]-> Sum[(getFull[mixESnoFV[[i,1,j]]]/.subIndizesMixEndeNoFV )sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]*Inv[mixESnoFV[[i,2,2]]][xgen][j,Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]]], {j,1,Length[mixESnoFV[[i,1]]]}]}];,
subDefInverse=Join[subDefInverse,{mixESnoFV[[i,2,1]][(getIndizes[RE[mixESnoFV[[i,1,1]]]]/.subIndizesMixStart)][fnr_]-> Sum[(getFull[mixESnoFV[[i,1,j]]][fnr]/.subIndizesMixEndeNoFV )sum[Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]],1,Length[mixESnoFV[[i,1]]]]*Inv[mixESnoFV[[i,2,2]]][xgen][j,Hold[ToExpression["fla"<>StringDrop[ToString[xgen],3]]]], {j,1,Length[mixESnoFV[[i,1]]]}]}];
];
OffSet++;
j++;];
  i++;]; 



MMatrices=CalcMassMatrices[mixBasis, Potential,Transpose[Transpose[mixES][[2]]][[2]],True];

If[mixBasisNoFV=!={},
MMatricesNo=CalcMassMatrices[mixBasisNoFV, Potential,Transpose[Transpose[mixESnoFV][[2]]][[2]],False];
];

If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[subDef,subDefInverse,UGTmatterMM[rotNr]];
];

For[i=1,i<=Length[mixES], For[j=1,j<= Length[mixES[[i,1]]],
If[FreeQ[Particles[Current],RE[mixES[[i,1,j]]]],Message[ModelFile::UnknownParticleRotations,RE[mixES[[i,1,j]]]];];
delParticle[RE[mixES[[i,1,j]]]]; 
j++;];i++;];

For[i=1,i<=Length[mixESnoFV], For[j=1,j<= Length[mixESnoFV[[i,1]]],
If[FreeQ[Particles[Current],RE[mixESnoFV[[i,1,j]]]],Message[ModelFile::UnknownParticleRotations,RE[mixESnoFV[[i,1,j]]]];];
delParticle[RE[mixESnoFV[[i,1,j]]]]; 
j++;];i++;];


If[mixBasisNoFV=!={},
Return[{subDef,Join[MMatrices[[1]],MMatricesNo[[1]]]/.subAlways,Join[MMatrices[[2]],MMatricesNo[[2]]]/.subAlways,Join[mixBasis,mixBasisNoFV],Join[mixMatES,mixMatESnoFV],Join[mixES,mixESnoFV],Join[mixedNames,mixedNamesNoFV],Join[MMatrices[[1]],MMatricesNo[[1]]]/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)],Join[MMatrices[[2]],MMatricesNo[[2]]]/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)]}];,
Return[{subDef,MMatrices[[1]]/.subAlways,MMatrices[[2]]/.subAlways,mixBasis,mixMatES,mixES,mixedNames,MMatrices[[1]]/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)],MMatrices[[2]]/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)]}];
];

];


(* ::Input::Initialization:: *)


(* ----------------------------------------------- *)
(* Calculate Effective Operators *)
(* ----------------------------------------------- *)

MakeEffective:=Block[{Masse, temp, i,l,allGenerations},
IntegrateOutNew={};
DeleteParticlesNew = {};

If[SA`CreatedsubDeleteParticles===False,
SA`subDeleteParticles = Table[DeleteParticles[[i]]->DelPart,{i,1,Length[DeleteParticles]}];
SA`CreatedsubDeleteParticles=True;
];

For[i=1,i<= Length[IntegrateOut],
EffectiveTheory=True;
genMax = 6;
If[MemberQ[Particles[Current],getBlank[IntegrateOut[[i]]],2]==True,
PrintAll["Integrate Out ", IntegrateOut[[i]]];
If[MemberQ[MajoranaPart,getBlank[IntegrateOut[[i]]]/.diracSubBack1[ALL]]===False,
Masse = DPV[DPV[Potential,getBlank[IntegrateOut[[i]]],1,1],conj[getBlank[IntegrateOut[[i]]]], 2,2] /. Flatten[Map[vacHead,vacuum]] /. zero[a_]->0*a /. subFinal ;,
Masse = DPV[DPV[Potential,getBlank[IntegrateOut[[i]]],1,1],getBlank[IntegrateOut[[i]]], 2,2] /. Flatten[Map[vacHead,vacuum]] /. zero[a_]->0 *a/. subFinal;
];


temp=DIntOut[Lagrangian,getFull[getBlank[IntegrateOut[[i]]]]];
If[getBlank[IntegrateOut[[i]]]===IntegrateOut[[i]],
OutGenStart=getGenStart[IntegrateOut[[i]]];
OutGenEnde=getGen[IntegrateOut[[i]]];,
OutGenStart=IntegrateOut[[i,1,1]];
OutGenEnde=IntegrateOut[[i,1,2]];
];


For[j=OutGenStart,j<= OutGenEnde,
If[(Masse /.subREfinal[2,1])=!=0,
If[getGen[IntegrateOut[[i]]]>1,
Mass[getBlank[IntegrateOut[[i]]][{j}]]  = (Masse /.subREfinal[2,1]) /. gIO1->j;,
Mass[getBlank[IntegrateOut[[i]]]]  = (Masse /.subREfinal[2,1]) /. gIO1->j;
];
];
j++;];


If[getGen[IntegrateOut[[i]]]>1,
EffectiveOperators += (1/Mass[getBlank[IntegrateOut[[i]]][{gIO1}]]*temp /.sum[gIO1,a_,b_]->1 )*sum[gIO1,OutGenStart,OutGenEnde];,
EffectiveOperators += (1/Mass[getBlank[IntegrateOut[[i]]]]*temp /.sum[gIO1,a_,b_]->1 )*sum[gIO1,OutGenStart,OutGenEnde];
];
allGenerations=Particles[Current];
If[OutGenStart==1,
pos = Position[Particles[Current],getBlank[IntegrateOut[[i]]]][[1,1]];
allGenerations[[pos]]={Extract[Particles[Current],{pos,1}],OutGenEnde+1,Extract[Particles[Current],{pos,3}],Extract[Particles[Current],{pos,4}],Extract[Particles[Current],{pos,5}]};,
pos = Position[Particles[Current],getBlank[IntegrateOut[[i]]]][[1,1]];
allGenerations[[pos]]={Extract[Particles[Current],{pos,1}],1,OutGenStart-1,Extract[Particles[Current],{pos,4}],Extract[Particles[Current],{pos,5}]};
];
Particles[Current]=allGenerations;,
 IntegrateOutNew=Join[IntegrateOutNew,{IntegrateOut[[i]]}]; 
];
i++;
];

IntegrateOut = IntegrateOutNew;

allGenerations=Particles[Current];

For[i=1,i<= Length[DeleteParticles],
If[MemberQ[Particles[Current],getBlank[DeleteParticles[[i]]],2]==True,
If[getBlank[DeleteParticles[[i]]]===DeleteParticles[[i]],
OutGenStart=getGenStart[DeleteParticles[[i]]];
OutGenEnde=getGen[DeleteParticles[[i]]];,
OutGenStart=DeleteParticles[[i,1,1]];
OutGenEnde=DeleteParticles[[i,1,2]];
];

If[OutGenStart==1,
pos = Position[Particles[Current],getBlank[DeleteParticles[[i]]]][[1,1]];
allGenerations[[pos]]={Extract[Particles[Current],{pos,1}],OutGenEnde+1,Extract[Particles[Current],{pos,3}],Extract[Particles[Current],{pos,4}],Extract[Particles[Current],{pos,5}]};,
pos = Position[Particles[Current],getBlank[DeleteParticles[[i]]]][[1,1]];
allGenerations[[pos]]={Extract[Particles[Current],{pos,1}],1,OutGenStart-1,Extract[Particles[Current],{pos,4}],Extract[Particles[Current],{pos,5}]};
];,
 DeleteParticlesNew=Join[DeleteParticlesNew,{DeleteParticles[[i]]}]; 
];
i++;];

Particles[Current]=allGenerations;


(* PrintAll[DeleteParticles]; *)

DeleteParticles = DeleteParticlesNew; 
];


(* ::Input::Initialization:: *)

(*-----------------------------------------------------------*)
(* Calculate Mass Matrices *)
(*-----------------------------------------------------------*)


(* ::Input::Initialization:: *)

CalcMassMatrices[basis_, potential_, names_,FV_]:=Block[{i1,j,i2,off,ll,m,k,n, MassMatrices, MassMatricesFull, subVac},

Print["   Calculate mass matrices ",Dynamic[DynamicNrMass[basis]],"/",Length[basis]," (",Dynamic[DynamicNameMass[basis]],")"];
PrintDebug["  Calculate mass matrices"];

pSave=potential;
bSave=basis;
subVac=Flatten[Map[vacHead,vacuum]];

MassMatrices=Table[{},{Length[basis]}];

For[i=1,i<=Length[basis],
DynamicNrMass[basis]=i;
If[RE[basis[[i,1]]]===RE[basis[[i,2]]],
DynamicNameMass[basis]=ToString[basis[[i,1]]];
PrintDebug["    For ",basis[[i,1]]];,
DynamicNameMass[basis]=ToString[basis[[i,1]]]<>ToString[basis[[i,2]]];
 PrintDebug["    For ",basis[[i,1]],basis[[i,2]]];
];

If[getType[basis[[i,1,1]]]===S,
MassMatrices[[i]]=Table[DMM[DMM[potential,conj[basis[[i,1,m]]],m,"m",1],conj[basis[[i,2,n]]],n,"n",2]/.subVac /. Mom[_]->0 /. zero[a_]->nix /. nix->0,{m,1,Length[basis[[i,1]]]},{n,1,Length[basis[[i,2]]]}];,
MassMatrices[[i]]=Table[DMM[DMM[potential,basis[[i,1,m]],m,"m",1],basis[[i,2,n]],n,"n",2]/.subVac /. Mom[_]->0 /. zero[a_]->nix /. nix->0,{m,1,Length[basis[[i,1]]]},{n,1,Length[basis[[i,2]]]}];
];
i++;];

SA`mSave=MassMatrices;

DynamicNameMass[basis]="All Done";
MassMatricesFull = Table[{},{Length[basis]}];

namecounter=1;

For[i=1,i<=Length[MassMatrices],
ltest=MassMatrices[[i]];
If[FV==True,
dim=Table[{getGenStart[basis[[i,1,n]]],getGen[basis[[i,1,n]]]},{n,1,Length[basis[[i,1]]]}];
dimTotal = Table[-getGenStart[basis[[i,1,n]]]+1+getGen[basis[[i,1,n]]],{n,1,Length[basis[[i,1]]]}];
dim2=Table[{getGenStart[basis[[i,2,n]]],getGen[basis[[i,2,n]]]},{n,1,Length[basis[[i,2]]]}];
dimTotal2 = Table[-getGenStart[basis[[i,2,n]]]+1+getGen[basis[[i,2,n]]],{n,1,Length[basis[[i,2]]]}];,
dim=Table[{1,1},{n,1,Length[basis[[i,1]]]}];
dimTotal = Table[1,{n,1,Length[basis[[i,1]]]}];
dim2=Table[{1,1},{n,1,Length[basis[[i,2]]]}];
dimTotal2 = Table[1,{n,1,Length[basis[[i,2]]]}];
];

If[RE[basis[[i,1]]]===RE[basis[[i,2]]],
dimMatrizes = Join[dimMatrizes,{{names[[namecounter]],Total[dimTotal]}}];
namecounter++;,
dimMatrizes = Join[dimMatrizes,{{names[[namecounter]],Total[dimTotal]}}];
namecounter++;
dimMatrizes = Join[dimMatrizes,{{names[[namecounter]],Total[dimTotal]}}];
namecounter++;
];


MassMatricesFull[[i]]=Table[0,{Total[dimTotal]},{Total[dimTotal]}];
zeile=0;
	For[k=1,k<=Length[dim],
For[ll=dim[[k,1]],ll<=dim[[k,2]],
zeile++;
spalte=0;
For[m=1,m<=Length[dim2],
For[n=dim2[[m,1]],n<=dim2[[m,2]],
spalte++;
If[FreeQ[OffSetFlavorsXXX,basis[[i,1,1]]], (* CHECK *)
If[FreeQ[ltest[[k,m]],Lam]==False,
ltest[[k,m]]=ltest[[k,m]]//. sum[a_,1,3] sum[b_,1,3] Lam[c_,a_,b_] Lam[d_,b_,a_]->Delta[c,d]*2 //.Delta[col1_,col2b_] Delta[col1b_,col2_] Lam[acm2_,col2_,col2b_] Lam[acn2_,col1_,col1b_] sum[col1_,1,3] sum[col1b_,1,3] sum[col2_,1,3] sum[col2b_,1,3]->Delta[acm2,acn2]*2;
];
If[FV==True,
tElement=ltest[[k,m]]/.{ToExpression["gm"<>ToString[k]]->ll,ToExpression["gn"<>ToString[m]]->n}
/.((#->1)&/@Intersection[getIndizes[basis[[i,1,k]]]]/. subGC[1]/. subIndFinalX[1,m,"n"] )
/.((#->1)&/@Intersection[getIndizes[basis[[i,2,m]]]]/. subGC[1]/. subIndFinalX[1,k,"m"] );
(*/. (Reverse/@subIndFinalX[1,m,"n"]) /. subValue[1,1] /. (Reverse/@subIndFinalX[1,k,"m"]) /. subValue[1,1]*);
MassMatricesFull[[i,zeile,spalte]]=CalcDelta[tElement/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)]];,
tElement=ltest[[k,m]]/.{ToExpression["fm"<>ToString[k]]->ll,ToExpression["fn"<>ToString[m]]->n}
/.((#->1)&/@Intersection[getIndizes[basis[[i,1,k]]]]/. subGC[1]/. subIndFinalX[1,m,"n"] )
/.((#->1)&/@Intersection[getIndizes[basis[[i,2,m]]]]/. subGC[1]/. subIndFinalX[1,k,"m"] )(*/. (Reverse/@subIndFinalX[1,m,"n"]) /. subValue[1,1]/. (Reverse/@subIndFinalX[1,k,"m"]) /. subValue[1,1]*);
MassMatricesFull[[i,zeile,spalte]]=CalcDelta[tElement/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)]];
];,
pos=Position[OffSetFlavors,basis[[i,1,1]]][[1,1]];
offset=Extract[OffSetFlavors,pos][[2]];
tElement=ltest[[k,m]]/.{ToExpression["gm"<>ToString[k]]->ll+offset,ToExpression["gn"<>ToString[m]]->n+offset}
/.((#->1)&/@Intersection[getIndizes[basis[[i,1,k]]]]/. subGC[1]/. subIndFinalX[1,m,"n"] )
/.((#->1)&/@Intersection[getIndizes[basis[[i,2,m]]]]/. subGC[1]/. subIndFinalX[1,k,"m"] )(* /. (Reverse/@subIndFinalX[1,m,"n"]) /. subValue[1,1]/. (Reverse/@subIndFinalX[1,k,"m"]) /. subValue[1,1]*);
MassMatricesFull[[i,zeile,spalte]]=CalcDelta[tElement/.DeleteCases[subAlways,x_?((FreeQ[#,sum]==False)&)]];
];
n++;];
m++;];
ll++;];
k++;];
i++;];


dimMatrizesAll = Join[dimMatrizesAll,dimMatrizes];

For[i=1,i<=Length[dimMatrizes],
ListMatrixProdukt = Join[ListMatrixProdukt,{{dimMatrizes[[i,1]],dimMatrizes[[i,1]],dimMatrizes[[i,2]],Delta}}];
i++;];

If[FV==False,
For[i=1,i<=Length[MassMatricesFull],
MassMatricesFull[[i]]=Table[MassMatricesFull[[i]] /. {gen1->k},{k,1,getGen[basis[[i,1,1]]]}];
i++;];
];

(*
For[i=1,i\[LessEqual]Length[MassMatrices],
If[Intersection[Flatten[MassMatrices[[i]]]]==={0} && getType[basis[[i,1,1]]]=!=A &&SA`CurrentRotatedNr\[Equal]Length[NameOfSates],
Message[MassMatrix::OnlyZero,basis[[i]]];
];
i++;];
*)
SA`MassMatricesFullSave=MassMatricesFull;
Return[{CalcDelta[MassMatrices],CalcDelta[MassMatricesFull]}];

];


 CalculateTreeLevelMasses:=Block[{i,j,k,mass,statelist,partList, states,defList,entry,pdgList={},doubleCheck,dc},
Print["   ... calculating tree level masses (",Dynamic[DynamicCalcTreeMasses],")"];
PrintDebug["   ...Calculating Tree Level Masses"];
LesHouchesListMasses={};
subNum={};
subNumDependencesMasses={};


For[j=1,j<=Length[NameOfStates],
DynamicCalcTreeMasses=NameOfStates[[j]];
listMasses={};
listWidth={};
states = NameOfStates[[j]];
PrintDebug["     For ",states];
pdgList={};
usedPDG={};
partList=Particles[NameOfStates[[j]]];
defList=ParticleDefinitions[NameOfStates[[j]]];
 For[i=1,i<=Length[partList],
auto=True;
pos=Position[Transpose[defList][[1]],partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states]];
If[pos=!={},
entry= Extract[defList,pos[[1,1]]][[2]];
massGiven = Mass /.entry;
widthGiven =  Width /. entry;
PDGNr = PDG/. entry;
doubleCheck=DeleteCases[DeleteCases[Intersection[Flatten[{pdgList}],Flatten[{PDGNr}]],0],PDG];
If[Length[doubleCheck]>0 && FreeQ[usedPDG,pos[[1,1]]],
For[dc=1,dc<=Length[doubleCheck],
Message[PDG::DoubleCheck,doubleCheck[[dc]]];
dc++
];
];

pdgList=Join[pdgList,{{partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states],PDGNr}}];
usedPDG=Join[usedPDG,{pos[[1,1]]}];
If[Length[widthGiven]>1,
For[k=1,k<=Length[widthGiven],
listWidth = Join[listWidth,{WidthUsed[partList[[i,1]][k]] ->widthGiven[[k]]}];
If[getTypeOld[partList[[i,1]]]===F,
listWidth = Join[listWidth,{WidthUsed[(partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states])[k]] ->widthGiven[[k]]}];
];
k++;];,
If[getGen[partList[[i,1]]]>1,
For[k=1,k<=Length[getGen[partList[[i,1]]]],
If[widthGiven[[k]]=!=External,
listWidth = Join[listWidth,{WidthUsed[partList[[i,1]][k]] ->widthGiven}];
If[getTypeOld[partList[[i,1]]]===F,
listWidth = Join[listWidth,{WidthUsed[(partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states])[k]] ->widthGiven}];
];
];
k++;];,
listWidth = Join[listWidth,{WidthUsed[partList[[i,1]]] ->widthGiven}];
If[getTypeOld[partList[[i,1]]]===F,
listWidth = Join[listWidth,{WidthUsed[(partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states])] ->widthGiven}];
];
];
];

	If[NumericQ[widthGiven] || Head[widthGiven]===List,
	If[Length[widthGiven]>1,
	For[k=1,k<=Length[widthGiven],
	If[NumericQ[widthGiven[[k]]],
	subNum=Join[subNum,{WidthGiven[partList[[i,1]][k] /.diracSubBack1[states]/.diracSubBack2[states]]->  widthGiven[[k]]}];
	listWidth = Join[listWidth,{WidthUsed[(partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states])[k]] ->widthGiven[[k]]}]
	];
	k++;];,
	subNum=Join[subNum,{WidthGiven[partList[[i,1]]/.diracSubBack1[states]/.diracSubBack2[states]]->  widthGiven}];
	listWidth = Join[listWidth,{WidthUsed[(partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states])] ->widthGiven}]
	];
];

Switch[massGiven,
Automatic,
	massCalc=TreeMass[partList[[i,1]],NameOfStates[[j]]];
	listMasses=Join[listMasses,{Mass[partList[[i,1]]] ->massCalc}];
	If[getType[partList[[i,1]]]===F,
	listMasses=Join[listMasses,{Mass[partList[[i,1]]/.diracSubBack1[states]/.diracSubBack2[states]] ->massCalc}];
	];,

LesHouches,
	If[Length[PDGNr]==1,
	listMasses=Join[listMasses,{Mass[partList[[i,1]] /.diracSubBack1[states]/.diracSubBack2[states]]-> MassRead[partList[[i,1]] /.diracSubBack1[states]/.diracSubBack2[states]]}];
	LesHouchesListMasses = Join[LesHouchesListMasses,
	{{MassRead[partList[[i,1]] /.diracSubBack1[states]/.diracSubBack2[states]],{{Mass,If[Head[PDGNr]===List,PDGNr[[1]],PDGNr]},1}}}];,
	listMasses=Join[listMasses,{Mass[(partList[[i,1]][gen_]) /.diracSubBack1[states]/.diracSubBack2[states]]-> MassRead[(partList[[i,1]][gen]) /.diracSubBack1[states]/.diracSubBack2[states]]}];
	For[k=1,k<=Length[PDGNr],
	LesHouchesListMasses = Join[LesHouchesListMasses,{{MassRead[partList[[i,1]][k]  /.diracSubBack1[states]/.diracSubBack2[states]],{{Mass,PDGNr[[k]]},1}}}];
	k++;];
	];,
Dependence,
subNumDependencesMasses=Join[subNumDependencesMasses,{Mass[partList[[i,1]]/.diracSubBack1[states] /.diracSubBack2[states]]->(MassDependence /.  defList[[pos[[1,1]],2]])}];,
_,
	If[Length[massGiven]>1,
	For[k=1,k<=Length[massGiven],
	If[massGiven[[k]]=!=LesHouches,
	subNum=Join[subNum,{MassGiven[partList[[i,1]][k] /.diracSubBack1[states]/.diracSubBack2[states]]->  massGiven[[k]]}];
	listMasses=Join[listMasses,{Mass[(partList[[i,1]][k] /.diracSubBack1[states]/.diracSubBack2[states])]-> MassGiven[partList[[i,1]][k] /.diracSubBack1[states]/.diracSubBack2[states]]}];,
	listMasses=Join[listMasses,{Mass[(partList[[i,1]][k]) /.diracSubBack1[states]/.diracSubBack2[states]]-> MassRead[(partList[[i,1]][k]) /.diracSubBack1[states]/.diracSubBack2[states]]}];
	LesHouchesListMasses = Join[LesHouchesListMasses,{{MassRead[partList[[i,1]][k]  /.diracSubBack1[states]/.diracSubBack2[states]],{{Mass,PDGNr[[k]]},1}}}];
	];
	k++;];,
subNum=Join[subNum,{MassGiven[partList[[i,1]]/.diracSubBack1[states]/.diracSubBack2[states]]->  massGiven}];
listMasses=Join[listMasses,{Mass[partList[[i,1]] /.diracSubBack1[states]/.diracSubBack2[states]]-> MassGiven[partList[[i,1]] /.diracSubBack1[states]/.diracSubBack2[states]]}];
	];
];
];
i++;];

PDGlist[states]=pdgList;

MassesTemp[states]=listMasses;
Width[states]=listWidth;

j++;];

For[i=1,i<=Length[subNumDependencesMasses],
subNumDependences = Join[subNumDependences,{subNumDependencesMasses[[i]]}];
If[FreeQ[parameters,subNumDependencesMasses[[i,1]]],parameters=Join[parameters,{{subNumDependencesMasses[[i,1]],{},{}}}]];
(* realVar=Join[realVar,{subNumDependencesMasses[[i,1]]}]; *)
addNewSym[subNumDependencesMasses[[i,1]], subNumDependencesMasses[[i,2]]];
i++;];
DynamicCalcTreeMasses="All Done";
]; 


GenerateFlavors[type_]:=Block[{i,j,i2},
PrintAll["Split Flavors"];
OffSetFlavors={};
flavorSub={};
flavorInverse={};
flav=DEFINITION[type][Flavors];

For[i=1,i<=Length[flav],
If[getType[flav[[i,1]]]===F,
flavorSub=Join[flavorSub,{flav[[i,1]][{x_,y___}][c_]->Sum[Delta[x,n]*repl[x]flav[[i,2,n]][{Hold[ToExpression["n"<>StringDrop[ToString[x],3]]],y}][c] Delta[Hold[ToExpression["n"<>StringDrop[ToString[x],3]]],1],{n,1,Length[flav[[i,2]]]}]}] ;,
flavorSub=Join[flavorSub,{flav[[i,1]][{x_,y___}]->Sum[Delta[x,n]*repl[x]*flav[[i,2,n]][{Hold[ToExpression["n"<>StringDrop[ToString[x],3]]],y}] Delta[Hold[ToExpression["n"<>StringDrop[ToString[x],3]]],1],{n,1,Length[flav[[i,2]]]}]}];
];



For[j=1,j<=Length[flav[[i,2]]],
addParticle[flav[[i,2,j]],getIndizesWI[flav[[i,1]]] /. {generation,x_}->{generation,1},1,getType[flav[[i,1]]]];
For[i2=1,i2<=Length[Gauge],
 If[FreeQ[BrokenSymmetries,i2]==True,
SA`Casimir[flav[[i,2,j]],Gauge[[i2,3]]]=SA`Casimir[flav[[i,1]],Gauge[[i2,3]]];
SA`Dynkin[flav[[i,2,j]],Gauge[[i2,3]]]=SA`Dynkin[flav[[i,1]],Gauge[[i2,3]]];
SA`DimensionGG[flav[[i,2,j]],Gauge[[i2,3]]]=SA`DimensionGG[flav[[i,1]],Gauge[[i2,3]]];
SA`DynL[flav[[i,2,j]],Gauge[[i2,3]]]=SA`DynL[flav[[i,1]],Gauge[[i2,3]]];
]; 
i2++ ];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[flav[[i,2,j]],AuxGauge[[i2,3]]]=SA`Casimir[flav[[i,1]],AuxGauge[[i2,3]]];
SA`Dynkin[flav[[i,2,j]],AuxGauge[[i2,3]]]=SA`Dynkin[flav[[i,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[flav[[i,2,j]],AuxGauge[[i2,3]]]=SA`DimensionGG[flav[[i,1]],AuxGauge[[i2,3]]];
SA`DynL[flav[[i,2,j]],AuxGauge[[i2,3]]]=SA`DynL[flav[[i,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[flav[[i,2,j]],AuxGauge[[i2,3]]]=MultiplicityFactor[flav[[i,1]],AuxGauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[Global],
SA`ChargeGlobal[RE[flav[[i,2,j]]],Global[[i2,2]]] =SA`ChargeGlobal[flav[[i,1]],Global[[i2,2]]];
i2++;];
If[getType[flav[[i,1]]]===F,
flavorInverse=Join[flavorInverse,{flav[[i,2,j]][{x_,y___}][c_]->Delta[x,j] flav[[i,1]][{x,y}][c]}];,
flavorInverse=Join[flavorInverse,{flav[[i,2,j]][{x_,y___}]->Delta[x,j] flav[[i,1]][{x,y}]}];
];
OffSetFlavors=Join[OffSetFlavors,{{flav[[i,2,j]],j-1}}];
If[FreeQ[realVar,flav[[i,1]]]==False,realVar=Join[realVar,{flav[[i,2,j]]}];];
j++;];
delParticle[flav[[i,1]]];
i++];
FlavorSub[type]=flavorSub;
FlavorSubInverse[type]=flavorInverse;
If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[flavorSub,flavorInverse,UGTflavorMM[rotNr]];
];
];

DecomposeStates[type_]:=Block[{i,j,k,decomp},
PrintAll["Decompose Fields"];
decomposeSub={};
decomposeInverse={};
decomp=DEFINITION[type][Decompositions];

For[i=1,i<=Length[decomp],
If[getType[decomp[[i,1]]]===F,
decomposeSub=Join[decomposeSub,{decomp[[i,1]][{y___}][c_]->Sum[decomp[[i,2,n,1]] decomp[[i,2,n,2]][{y}][c] ,{n,1,Length[decomp[[i,2]]]}]}];,
decomposeSub=Join[decomposeSub,{decomp[[i,1]][{y___}]->Sum[decomp[[i,2,n,1]] decomp[[i,2,n,2]][{y}] ,{n,1,Length[decomp[[i,2]]]}]}];
];



For[j=1,j<=Length[decomp[[i,2]]],
If[FreeQ[Particles[ALL],decomp[[i,2,j,2]]],
addParticle[decomp[[i,2,j,2]],getIndizesWI[decomp[[i,1]]] /. {generation,x_}->{generation,1},1,getType[decomp[[i,1]]]];
For[i2=1,i2<=Length[Gauge],
 If[FreeQ[BrokenSymmetries,i2]==True,
SA`Casimir[decomp[[i,2,j,2]],Gauge[[i2,3]]]=SA`Casimir[decomp[[i,1]],Gauge[[i2,3]]];
SA`Dynkin[decomp[[i,2,j,2]],Gauge[[i2,3]]]=SA`Dynkin[decomp[[i,1]],Gauge[[i2,3]]];
SA`DimensionGG[decomp[[i,2,j,2]],Gauge[[i2,3]]]=SA`DimensionGG[decomp[[i,1]],Gauge[[i2,3]]];
SA`DynL[decomp[[i,2,j,2]],Gauge[[i2,3]]]=SA`DynL[decomp[[i,1]],Gauge[[i2,3]]];
]; 
i2++ ];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[decomp[[i,2,j,2]],AuxGauge[[i2,3]]]=SA`Casimir[decomp[[i,2,j,2]],AuxGauge[[i2,3]]];
SA`Dynkin[decomp[[i,2,j,2]],AuxGauge[[i2,3]]]=SA`Dynkin[decomp[[i,2,j,2]],AuxGauge[[i2,3]]];
SA`DimensionGG[decomp[[i,2,j,2]],AuxGauge[[i2,3]]]=SA`DimensionGG[decomp[[i,2,j,2]],AuxGauge[[i2,3]]];
SA`DynL[decomp[[i,2,j,2]],AuxGauge[[i2,3]]]=SA`DynL[decomp[[i,2,j,2]],AuxGauge[[i2,3]]];
MultiplicityFactor[decomp[[i,2,j,2]],AuxGauge[[i2,3]]]=MultiplicityFactor[decomp[[i,2,j,2]],AuxGauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[Global],
SA`ChargeGlobal[RE[decomp[[i,2,j,2]]],Global[[i2,2]]] =SA`ChargeGlobal[decomp[[i,1]],Global[[i2,2]]];
i2++;];
If[getType[decomp[[i,1]]]===F,
decomposeInverse=Join[decomposeInverse,{decomp[[i,2,j,2]][{y___}][c_]->1/decomp[[i,2,j,1]] (decomp[[i,1]][{y}][c]-Sum[If[n!=j,decomp[[i,2,n,1]] decomp[[i,2,n,2]][{y}][c],0] ,{n,1,Length[decomp[[i,2]]]}])}];,
decomposeInverse=Join[decomposeInverse,{decomp[[i,2,j,2]][{y___}]->1/decomp[[i,2,j,1]](decomp[[i,1]][{y}]-Sum[If[n!=j,decomp[[i,2,n,1]] decomp[[i,2,n,2]][{y}][c],0] ,{n,1,Length[decomp[[i,2]]]}])}];
];
If[FreeQ[realVar,decomp[[i,1]]]==False,realVar=Join[realVar,{decomp[[i,2,j,2]]}];];
];
j++;];
delParticle[decomp[[i,1]]];
i++];
DecompSub[type]=decompSub;
DecompSubInverse[type]=decomposeInverse;
If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[decomposeSub,decomposeInverse,UGTflavorMM[rotNr]];
];
];


GeneratePhases[type_]:=Block[{i,j},
PrintAll["Add Phases"];
phaseSub={};
phaseInverse={};
phas=DEFINITION[type][Phases];

For[i=1,i<=Length[phas],
If[getType[phas[[i,1]]]===F,
ParticlePhases = Join[ParticlePhases,{phas[[i]]}];
ParticlePhases = Join[ParticlePhases,{{phas[[i,1]] /.diracSubBack1[type] /.diracSubBack2[type],phas[[i,2]]}}];
phaseSub=Join[phaseSub,{phas[[i,1]][{y___}][a_]->phas[[i,1]][{y}][a] phas[[i,2]]}];
phaseInverse=Join[phaseInverse,{phas[[i,1]][{y___}][a_]->phas[[i,1]][{y}][a] conj[phas[[i,2]]]}];,
ParticlePhases = Join[ParticlePhases,{phas[[i]]}];
phaseSub=Join[phaseSub,{phas[[i,1]][{y___}]->phas[[i,1]][{y}] phas[[i,2]]}];
phaseInverse=Join[phaseInverse,{phas[[i,1]][{y___}]->phas[[i,1]][{y}] conj[phas[[i,2]]]}];
];

PhasesToOneSub=Join[PhasesToOneSub,{phas[[i,2]]->1}];
If[Head[phas[[i,2]]]===Power,
If[FreeQ[parameters,phas[[i,2]]/. Exp[x_]->x /. I->1],
parameters = Join[parameters,{{phas[[i,2]]/. Exp[x_]->x /. I->1,{},{}}}];
realVar = Join[realVar,{phas[[i,2]]/. Exp[x_]->x /. I->1}];
];,
If[FreeQ[parameters,phas[[i,2]]],
parameters = Join[parameters,{{phas[[i,2]],{},{}}}];
];
];

i++;];
PhaseSub[type]=phaseSub;
PhaseSubInverse[type]=phaseInverse;
If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[phaseSub,phaseInverse,UGTphasesMM[rotNr]];
];
];




(* ::Input::Initialization:: *)
SaveModelParameters[name_]:=Block[{},

Print["Save information (",Dynamic[DynamicSaveInfo[name]],")"];
PrintDebug["Save information"];

DynamicSaveInfo[name]="Mass matrices";
If[Length[res]==9,

SubMatter[name]=res[[1]];
MassMatricesTemp[name]=res[[2]];
MassMatricesFullTemp[name]=res[[3]];
MixBasis[name]=res[[4]];
MixMatrix[name]=res[[5]];
MixES[name]=DeleteCases[res[[6]],NoFlavorMixing,2];
MixedNames[name]=res[[7]];

MassMatricesTempND[name]=res[[8]];
MassMatricesFullTempND[name]=res[[9]];



];

PrintDebug["      TadpoleEquations"];
DynamicSaveInfo[name]="Tadpole equations";
If[Head[TEqu]===List,
TadpoleEquations[name]=CalcDelta[TEqu /. Delta[a_Integer,gt1]->DELTA[a,gt1]] /. DELTA->Delta;
];

PrintDebug["      Interactions"];
DynamicSaveInfo[name]="Lagrangian";
Potential = Potential /.{GetGenStart ->getGenStart, GetGen->getGen};
Kinetic = Kinetic /.{GetGenStart ->getGenStart, GetGen->getGen};
LagrangianVVV = LagrangianVVV /.{GetGenStart ->getGenStart, GetGen->getGen};
LagrangianVVVV=LagrangianVVVV /.{GetGenStart ->getGenStart, GetGen->getGen};
EffectiveOperators = EffectiveOperators /.{GetGenStart ->getGenStart, GetGen->getGen};
LagrangianGhost = LGhost /.{GetGenStart ->getGenStart, GetGen->getGen};
LagrangianRe = LagReDef /.{GetGenStart ->getGenStart, GetGen->getGen};
LagrangianAux = LagrangianAux /.{GetGenStart ->getGenStart, GetGen->getGen};

CalcImp= True;
SetGenerations=True;
Update[];

PrintDebug["      Split Lagrangian"];
DynamicSaveInfo[name]="Generic parts of Lagrangian";

Pot[name]= Potential;
LagSSSS[name]=- (Potential /.vacuumF /. zero[x_] -> 0*x) + ( EffectiveOperators/.vacuumF /.vacuumV /. zero[x_] -> 0*x);
LagFFS[name]= - Potential /. vacuumV;
LagFFSV[name]= - Potential;

LagSV[name]=  Kinetic /.vacuumF /. zero[x_] -> 0*x;
LagFFV[name]=  Kinetic /.vacuumS /. zero[x_] -> 0*x;
LagFFVV[name]=  Kinetic /.vacuumS /. zero[x_] -> 0*x;

LagVVV[name]=  LagrangianVVV;
LagVVVV[name]= LagrangianVVVV;

LagFFSS[name]= -( EffectiveOperators /.vacuumV /. zero[x_] -> 0*x )- Potential;
LagFFVV[name]+= - EffectiveOperators/.vacuumS /. zero[x_] -> 0*x;
LagFFFF[name]=  - (EffectiveOperators/.vacuumS /.vacuumV /. zero[x_] -> 0*x )-(Potential /. vacuumS /.zero[x_]->0 x);
LagSSSSSS[name]= - EffectiveOperators/.vacuumF /.vacuumV /. zero[x_] -> 0*x;
LagSSSVVV[name]=  - EffectiveOperators /.vacuumF;

LagGGV[name]=  LagrangianGhost /.vacuumS /. zero[x_] -> 0*x;
LagGGS[name]=  LagrangianGhost /.vacuumV /. zero[x_] -> 0*x ;
LagRedefinition[name] = LagrangianRe *1;

LagSSA[name]=  LagrangianAux;

SA`GT[name]=GaugeTransformation;

LagrangianComplete[name]=  Kinetic - Potential + EffectiveOperators + LagrangianGhost;

DynamicSaveInfo[name]="Particles";
ParticlesTemp[name]= Particles[Current];

DynamicSaveInfo[name]="Goldstone bosons";
CheckGoldstoneGhosts[Current];
GoldstoneBosons[name]=GoldstoneGhost;

SetGenerations=False; 
CalcImp = False;
DynamicSaveInfo[name]="All Done";
];


SimplifyMatrices:=Block[{i,particles,para,temp,sub},
PrintAll["   ... simplify mass matrices"];
states=NameOfStates;

temp=Flatten[Table[{Flatten[listIndizes][[i]]/.subGC[1]/.subIndFinalX[1,j,"m"],Flatten[listIndizes][[i]]/.subGC[1]/.subIndFinalX[1,j,"n"]},{i,1,Length[Flatten[listIndizes]]},{j,1,4}]];

sub=Flatten[Table[{sum[temp[[i]],a_,b_]->1},{i,1,Length[temp]}]];

For[i=1,i<=Length[states],
matFull=MassMatricesFullTemp[states[[i]]]/.sub;
mat=MassMatricesTemp[states[[i]]]/.sub;
matFullND=MassMatricesFullTempND[states[[i]]]/.sub;
matND=MassMatricesTempND[states[[i]]]/.sub;
matFull=SimplifySARAH[matFull];
mat=SimplifySARAH[mat];
matFullND=SimplifySARAHnd[matFullND];
matND=SimplifySARAHnd[matND];

MassMatricesFull[states[[i]]]=matFull;
MassMatrices[states[[i]]]=mat;
MassMatricesFullND[states[[i]]]=matFullND;
MassMatricesND[states[[i]]]=matND;
i++;];
];





AddMatrixProducts:=Block[{i},

PrintAll["   ... add matrix products"];

For[i=1,i<=Length[ParameterDefinitions],
If[((MatrixProduct/. ParameterDefinitions[[i,2]])=!= MatrixProduct) &&
((MatrixProduct /. ParameterDefinitions[[i,2]])=!= None),
mat1 = (MatrixProduct/. ParameterDefinitions[[i,2]])[[1]];
mat2 = (MatrixProduct/. ParameterDefinitions[[i,2]])[[2]];
ListMatrixProdukt= Join[ListMatrixProdukt,{{mat1,mat2,getDim[mat1],ParameterDefinitions[[i,1]]},{mat2,mat1,getDim[mat1],conj[ParameterDefinitions[[i,1]]]}}];
parameters = Join[parameters,{{ParameterDefinitions[[i,1]],{generation,generation},{getDim[mat1],getDim[mat1]}}}];
];
i++;];


For[i=1,i<=Length[MayBeParameters],
If[FreeQ[parameters,MayBeParameters[[i,1]]],
parameters = Join[parameters,{MayBeParameters[[i]] /. GetDimParameters-> getDimParameters}];
];
i++;];


];

CheckForMassless:=Block[{i,j,particle,type},
PrintAll["   ... checking for massless particles"];

For[i=1,i<=Length[NameOfStates],
SA`CurrentStates=NameOfStates[[i]];
temp={};
If[i==1, 
firstStates=Particles[NameOfStates[[i]]];
Massless[NameOfStates[[i]]]=(SGauge /. A_[{b__}]->A);,
Particles[Current]=Particles[NameOfStates[[i]]];
For[j=1,j<=Length[Particles[Current]],
particle=Particles[Current][[j,1]];
type=getType[particle];
If[(FreeQ[firstStates,particle]==False  || type===V) &&type=!=A  && type=!=G,
 If[CheckForMasslessFast=!=True,mass=TreeMass[particle,NameOfStates[[i]]];,mass=1]; 
If[Simplify[mass/.subDependences] ===0 || GetEntryDef[particle,NameOfStates[[i]],Mass]===0,
temp=Join[temp,{particle /. diracSubBack1[NameOfStates[[i]]] /. diracSubBack2[NameOfStates[[i]]]}];
];
];
j++;];
Massless[NameOfStates[[i]]]=temp;
];
i++;];
];


CalcGaugeMixing2[name_, def_]:=Block[{temp,temp2,i,j,i1,i2,PartLag,subV={},subVI={},subG={},subGI={},todel},
Print["Calc mass matrices gauge sector: ",Dynamic[DynamicMMgaugeNr[name]],"/",Length[def],"(",Dynamic[DynamicMMgaugeName[name]],")"];
PrintDebug["Calc mass matrices gauge sector"];
SA`NewGaugeBosons={};
If[Head[def[[1,1]]]===Symbol,
Message[GaugeSector::NewSyntax ];
];
PartLagSave=Kinetic;
SA`NewGaugeSector=True;
MassMatricesGauge[name]={};
subVac=Flatten[Map[vacHead,vacuum]];

For[i=1,i<=Length[def],
DynamicMMgaugeNr[name]=i;
DynamicMMgaugeName[name]=def[[i,1]];
PrintDebug[def[[i,1]]];
If[getType[getBlank[def[[i,1,1]]]]===V,PartLag=Kinetic /.vacuumF  /. vevSub /.vacuumS /. Mom[_]->0  /.zero[a_]->0;,PartLag=Potential/. vevSub /.vacuumS /. Mom[_]->0;];
temp =Table[DMM[DMM[PartLag,def[[i,1,i1]] /. a_[b_Integer]->a,1,"t",1],def[[i,1,i2]] /. a_[b_Integer]->a,2,"t",2] /. {gt1-> ExtractGen[def[[i,1,i1]]],gt2-> ExtractGen[def[[i,1,i2]]]} /.subVac  /. zero[a_]->0 ,{i1,1,Length[def[[i,1]]]},{i2,1,Length[def[[i,1]]]}];
MassMatricesGauge[name]=Join[MassMatricesGauge[name],{temp}];

subV = Join[subV,GenerateSubGauge[def[[i]]]];
subVI = Join[subVI,GenerateSubGauge[{def[[i,2]],def[[i,1]],InvMT[def[[i,3]]]}] /. InvMT[A_][b_,c_]->conj[A[c,b]]] /. repl[a_]->1 /. Delta[1,xgen]->1;

If[getType[def[[i,1,1]]]===V,
AssociatedMixingAngles[def[[i,3]]]={};
subG = Join[subG, GenerateSubGauge[{getGhost /@ def[[i,1]],getGhost /@ def[[i,2]],def[[i,3]]}]];
subGI = Join[subGI, GenerateSubGauge[{getGhost /@ def[[i,2]],getGhost /@ def[[i,1]],InvMT[def[[i,3]]]}] /. InvMT[A_][b_,c_]->conj[A[c,b]]];
];




i++;];
DynamicMMgaugeName[name]="All Done";



subGauge = OrderSubstitutions[subV]; subGaugeInv=OrderSubstitutions[subVI];
subGhost=OrderSubstitutions[subG];subGhostInv=OrderSubstitutions[subGI];

If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[subGauge,subGaugeInv,UGTgaugeMM[rotNr]];
GaugeTransformation=replaceGen[ReleaseHold[GaugeTransformation /. subGhost /.subGauge],rgNr];
];
MassMatricesGaugeTEMP[name]=MassMatricesGauge[name];
MassMatricesGauge[name]=SimplifySARAH[MassMatricesGauge[name]] /. g[a__]->1 /.{ct1->1,ct2->1};

todel=Intersection[getBlank/@Flatten[Table[def[[i,1]],{i,1,Length[def]}]]];
delParticle/@(getGhost/@Select[todel,(getType[#]===V)&]);
delParticle/@todel;

SA`RemovedGaugeBosons=Select[todel,(getType[#]===V)&];
SA`RemovedGaugeBosons= Table[{SA`RemovedGaugeBosons[[i]][a__]->0,SA`RemovedGaugeBosons[[i]]->0},{i,1,Length[SA`RemovedGaugeBosons]}];

SA`RemovedGhosts=getGhost/@Select[todel,(getType[#]===V)&];
SA`RemovedGhosts= Table[{SA`RemovedGhosts[[i]][a__]->0,SA`RemovedGhosts[[i]]->0},{i,1,Length[SA`RemovedGhosts]}];
Flatten[SA`RemovedGaugeBosons];
Flatten[SA`RemovedGhosts];
];

GenerateSubGauge[{in_,out_,mat_}]:=Block[{i,j,k,ll,temp={},FermMix,gnr,a,b,listSub={},instate,outstate,div,i2},
If[FreeQ[parameters,mat] && Head[mat]=!=InvMT,parameters=Join[parameters,{{mat,{generation,generation},{Length[in],Length[in]}}}];];
If[getType[getBlank[in[[1]] /. a_[b_Integer]->a]]=!=F,FermMix=False;,FermMix=True];
If[FermMix==False,
For[i=1,i<=Length[in],
If[getElectricCharge[in[[i]]]===None,
If[(Head[in[[i]]]===conj || Head[out[[1]]] ===conj) && (Head[in[[i]]]=!=Head[out[[1]]]),
getElectricCharge[RE[in[[i]]]]=-Hold[getElectricCharge[FIELD]] /. FIELD->RE[out[[1]]];,
getElectricCharge[in[[i]]]=Hold[getElectricCharge[FIELD]]/. FIELD->out[[1]];
];
];
If[FreeQ[SGauge,getBlank[in[[i]]/. a_[b_Integer]->a]]==False,
BrokenSymmetries=Join[BrokenSymmetries,{Position[SGauge,getBlank[in[[i]] /.  a_[b_Integer]->a]][[1,1]]}];
];
i++;];
];

 
For[i=1,i<=Length[in],
If[FermMix==False,
instate=(getFull[(in[[i]] /. a_[b_Integer]->a)] /. subIndizesMixStart);
outstate=A[getIndizesOld[in[[i]]/. a_[b_Integer]->a] /. subIndizesMixEnde];,
instate=(getFull[(in[[i]] /. a_[b_Integer]->a)][fNr_] /. subIndizesMixStart);
outstate=A[getIndizesOld[in[[i]]/. a_[b_Integer]->a] /. subIndizesMixEnde][fNr];
];
listSub=Join[listSub,{instate-> Delta[xgen,ExtractInt[in[[i]]]]*Sum[mat[i,j] Delta[ExtractInt[out[[j]] ],Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]]] repl[xgen] sum[Hold[ToExpression["n"<>StringDrop[ToString[xgen],3]]],GetGenStart[getBlank[out[[j]]]],GetGen[getBlank[out[[j]]]]] (outstate /.{A->(out[[j]]/. a_[b_Integer]->a)}),{j,1,Length[out]}]}];
i++];

If[Head[mat]=!=InvMT,
If[FreeQ[parameters,mat],parameters=Join[parameters,{{mat,{generation,generation},{Length[in],Length[in]}}}];];
For[i=1,i<=Length[out],
If[FreeQ[Particles[Current],getBlank[out[[i]]]],
If[getType[getBlank[in[[i]]]]===V,
(* addParticle[getBlank[out[[i]]],{{lorentz,4},{generation,1}},1,getType[getBlank[in[[i]]]]]; *)
addParticle[getBlank[out[[i]]],getIndizesWI[getBlank[in[[i]]]] /. {generation,a_}->{generation,1},1,getType[getBlank[in[[i]]]]];
For[i2=1,i2<=Length[Global],
SA`ChargeGlobal[getBlank[out[[i]]],Global[[i2,2]]] =SA`ChargeGlobal[getBlank[in[[i]]],Global[[i2,2]]];
i2++;];
For[ll=1,ll<=Length[Gauge],
SA`DynL[getBlank[out[[i]]],Gauge[[ll,3]]]={0};
ll++;];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[getBlank[out[[i]]],AuxGauge[[i2,3]]]=SA`Casimir[getBlank[in[[i]]],AuxGauge[[i2,3]]];
SA`Dynkin[getBlank[out[[i]]],AuxGauge[[i2,3]]]=SA`Dynkin[getBlank[in[[i]]],AuxGauge[[i2,3]]];
SA`DimensionGG[getBlank[out[[i]]],AuxGauge[[i2,3]]]=SA`DimensionGG[getBlank[in[[i]]],AuxGauge[[i2,3]]];
SA`DynL[getBlank[out[[i]]],AuxGauge[[i2,3]]]=SA`DynL[getBlank[in[[i]]],AuxGauge[[i2,3]]];
MultiplicityFactor[getBlank[out[[i]]],AuxGauge[[i2,3]]]=MultiplicityFactor[getBlank[in[[i]]],AuxGauge[[i2,3]]];
i2++;];


If[FreeQ[out,conj[out[[i]]]],realVar = Join[realVar,{out[[i]],getGhost[out[[i]]]}]];
bosons=Join[bosons,{RE[out[[i]]]}];
SA`NewGaugeBosons = Join[SA`NewGaugeBosons,{RE[out[[i]]]}];,
If[getType[getBlank[in[[i]]]]===G,
addParticle[getBlank[out[[i]]],getIndizesWI[getBlank[in[[i]]]] /. {generation,a_}->{generation,1},1,getType[getBlank[in[[i]]]]];,
addParticle[getBlank[out[[i]]],{{generation,1}},1,getType[getBlank[in[[i]]]]];
];
For[i2=1,i2<=Length[Global],
SA`ChargeGlobal[getBlank[out[[i]]],Global[[i2,2]]] =SA`ChargeGlobal[getBlank[in[[i]]],Global[[i2,2]]];
i2++;];
For[ll=1,ll<=Length[Gauge],SA`DynL[getBlank[out[[i]]],Gauge[[ll,3]]]={0};ll++;];
];
];
i++;];
];

Return[listSub];



];

OrderSubstitutions[list_]:=Block[{div},
div=Intersection[Table[list[[i,1]],{i,1,Length[list]}]];
Return[Table[div[[i]]->Plus@@((Select[list,(#[[1]]==div[[i]])&]) /. {(div[[i]]->sub_) ->sub} ),{i,1,Length[div]}]];
];

ExtractGen[x_]:=If[ Cases[x,y_?IntegerQ]=={},Return[1],Return[Cases[x,y_?IntegerQ][[1]]]];


CheckHiggsStates:=Block[{i,j,k,temp},
PrintAll["Checking for CP even and odd scalars"];
SA`ScalarsCPeven = {};
SA`ScalarsCPodd={};

For[i=1,i<=Length[NameOfStates],
(*
If[Head[DEFINITION[NameOfStates[[i]]][VEVs]]===List,
SA`ScalarsCPeven = Join[SA`ScalarsCPeven,Transpose[Transpose[DEFINITION[NameOfStates[[i]]][VEVs] /. {b__,{a_}}\[Rule]{b}][[4]]][[1]]];
SA`ScalarsCPodd = Join[SA`ScalarsCPodd,Transpose[Transpose[DEFINITION[NameOfStates[[i]]][VEVs] /. {b__,{a_}}\[Rule]{b}][[3]]][[1]]];
];

*)


If[Head[DEFINITION[NameOfStates[[i]]][VEVs]]===List,
For[j=1,j<=Length[DEFINITION[NameOfStates[[i]]][VEVs]],
If[Length[DEFINITION[NameOfStates[[i]]][VEVs][[j]]]==4,
SA`ScalarsCPeven = Join[SA`ScalarsCPeven, {DEFINITION[NameOfStates[[i]]][VEVs][[j,4,1]]}];
SA`ScalarsCPodd = Join[SA`ScalarsCPodd, {DEFINITION[NameOfStates[[i]]][VEVs][[j,3,1]]}];,
If[Length[DEFINITION[NameOfStates[[i]]][VEVs][[j,5]]]==2,
SA`ScalarsCPeven = Join[SA`ScalarsCPeven, {DEFINITION[NameOfStates[[i]]][VEVs][[j,5,1]]}];
SA`ScalarsCPodd = Join[SA`ScalarsCPodd, {DEFINITION[NameOfStates[[i]]][VEVs][[j,4,1]]}];,
SA`ScalarsCPeven = Join[SA`ScalarsCPeven, {DEFINITION[NameOfStates[[i]]][VEVs][[j,4,1]]}];
SA`ScalarsCPodd = Join[SA`ScalarsCPodd, {DEFINITION[NameOfStates[[i]]][VEVs][[j,3,1]]}];
];
];
j++;];
];


If[Head[DEFINITION[NameOfStates[[i]]][MatterSector]]===List,
temp=Select[DEFINITION[NameOfStates[[i]]][MatterSector],(Intersection[#[[1]],SA`ScalarsCPeven]=!={})&];
SA`ScalarsCPeven = Join[SA`ScalarsCPeven ,Table[temp[[j,2,1]],{j,1,Length[temp]}]];
temp=Select[DEFINITION[NameOfStates[[i]]][MatterSector],(Intersection[#[[1]],SA`ScalarsCPodd]=!={})&];
SA`ScalarsCPodd = Join[SA`ScalarsCPodd ,Table[temp[[j,2,1]],{j,1,Length[temp]}]];
];

SA`CPodd[NameOfStates[[i]]]=Select[SA`ScalarsCPodd ,(FreeQ[Particles[NameOfStates[[i]]],#]==False)&];
SA`CPeven[NameOfStates[[i]]]=Select[SA`ScalarsCPeven ,(FreeQ[Particles[NameOfStates[[i]]],#]==False)&];

i++;];

];

ReplaceTensorRepsByVectors[def_]:=Block[{i,i2,j,indold,renameindices},

genMax=8;
For[i=1,i<=Length[def],

indold=Select[getIndizesWI[def[[i,1]]],getFundamentalIndex[#[[1]]]=!=def[[i,2,1]]&];
indold=Join[indold,{{def[[i,2,1]],SA`DimensionGG[def[[i,1]],def[[i,2,1]]]}}];

For[i2=1,i2<=AnzahlGauge,
 If[FreeQ[BrokenSymmetries,i2]==True,
SA`Casimir[def[[i,2,2]],Gauge[[i2,3]]]=SA`Casimir[def[[i,1]],Gauge[[i2,3]]];
SA`Dynkin[def[[i,2,2]],Gauge[[i2,3]]]=SA`Dynkin[def[[i,1]],Gauge[[i2,3]]];
SA`DimensionGG[def[[i,2,2]],Gauge[[i2,3]]]=SA`DimensionGG[def[[i,1]],Gauge[[i2,3]]];
SA`DynL[def[[i,2,2]],Gauge[[i2,3]]]=SA`DynL[def[[i,1]],Gauge[[i2,3]]];
]; 
MultiplicityFactor[def[[i,2,2]],Gauge[[i2,3]]]=MultiplicityFactor[def[[i,1]],Gauge[[i2,3]]];
i2++;];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[def[[i,2,2]],AuxGauge[[i2,3]]]=SA`Casimir[def[[i,1]],AuxGauge[[i2,3]]];
SA`Dynkin[def[[i,2,2]],AuxGauge[[i2,3]]]=SA`Dynkin[def[[i,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[def[[i,2,2]],AuxGauge[[i2,3]]]=SA`DimensionGG[def[[i,1]],AuxGauge[[i2,3]]];
SA`DynL[def[[i,2,2]],AuxGauge[[i2,3]]]=SA`DynL[def[[i,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[def[[i,2,2]],AuxGauge[[i2,3]]]=MultiplicityFactor[def[[i,1]],AuxGauge[[i2,3]]];
i2++;];

addParticle[def[[i,2,2]],indold,getGen[def[[i,1]]],getType[def[[i,1]]]];


If[FreeQ[realVar,def[[i,1]]]===False,realVar=Join[realVar,{def[[i,2,2]]}];];
delParticle[def[[i,1]]];
LagReDef=LagReDef/.def[[i,2,3]];
LagrangianVVV=LagrangianVVV/.def[[i,2,3]];
LagrangianVVVV=LagrangianVVVV/.def[[i,2,3]];
Potential=Potential/.def[[i,2,3]];
Kinetic=Kinetic/.def[[i,2,3]];
i++;];


If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformationsTensorToVector[def];
];

];

RenameIndicesAux:=Block[{i,j,jjj,sub,sub2},
Print["Rename indices"];
For[i=1,i<=Length[AuxGauge],
sub2=Reverse/@Flatten[Table[Delta[1,generation/.subGC[iii+jjj+10]]A[{generation/.subGC[iii+jjj+10],(AuxGauge[[i,3]]/.subGC[iii+jjj+10])}]->A_[{generation/.subGC[iii],ToExpression[ToString[AuxGauge[[i,3]]/.subGC[iii]]<>appendIndex[[jjj]]]}],{jjj,2,4},{iii,1,4}],1];

sub=Reverse/@Flatten[Table[(AuxGauge[[i,3]]/.subGC[iii+jjj+10])->ToExpression[ToString[AuxGauge[[i,3]]/.subGC[iii]]<>appendIndex[[jjj]]],{jjj,2,4},{iii,1,4}]];
LagReDef=LagReDef/.sub2/.sub;
LagrangianVVV=LagrangianVVV/.sub2/.sub;
LagrangianVVVV=LagrangianVVVV/.sub2/.sub;
Potential=Potential/.sub2/.sub;
Kinetic=Kinetic/.sub2/.sub;

Particles[SA`CurrentStates]=Particles[SA`CurrentStates]/.Reverse/@Flatten[Table[(AuxGauge[[i,3]])->ToExpression[ToString[AuxGauge[[i,3]]]<>appendIndex[[jjj]]],{jjj,2,4},{iii,1,1}]];
Particles[GaugeES]=Particles[GaugeES]/.Reverse/@Flatten[Table[(AuxGauge[[i,3]])->ToExpression[ToString[AuxGauge[[i,3]]]<>appendIndex[[jjj]]],{jjj,2,4},{iii,1,1}]];
Particles[Current]=Particles[Current]/.Reverse/@Flatten[Table[(AuxGauge[[i,3]])->ToExpression[ToString[AuxGauge[[i,3]]]<>appendIndex[[jjj]]],{jjj,2,4},{iii,1,1}]];
i++;];

genMax=20;




];


ComplexifyFields[type_] := Block[{i,j,i2,equ,iii,vev,pos,form,scalarform,alignment},

title=ToString[type];

PrintAll["Complexify Fields"];
newComplexStates={};

compSub={};
compSubInverse={};
vev = DEFINITION[type][Complexify] /. Delta[a__]->1;
oldfields={};
newfields={};

If[Head[Head[vev]]===DEFINITION,vev={}];

For[i=1,i<=Length[vev],
compSub = Join[compSub,{vev[[i,1]][x_]->vev[[i,2,2]]*vev[[i,2,1]][x]+vev[[i,3,2]]*vev[[i,3,1]][x]}];
oldfields=Join[oldfields,{vev[[i,1]]}];
If[vev[[i,2,1]]=!=0 && FreeQ[newfields,RE[vev[[i,2,1]]]],
Print["add", vev[[i,2,1]]];
addParticle[RE[vev[[i,2,1]]],getIndizesWI[vev[[i,1]]],getGen[vev[[i,1]]],getType[vev[[i,1]]]];
newfields=Join[newfields,{RE[vev[[i,2,1]]]}];
];
If[vev[[i,3,1]]=!=0 && FreeQ[newfields,RE[vev[[i,3,1]]]],
addParticle[RE[vev[[i,3,1]]],getIndizesWI[vev[[i,1]]],getGen[vev[[i,1]]],getType[vev[[i,1]]]];
newfields=Join[newfields,{RE[vev[[i,3,1]]]}];
];


For[i2=1,i2<=AnzahlGauge,
 If[FreeQ[BrokenSymmetries,i2]==True,
If[vev[[i,3,1]]=!=0,
SA`Casimir[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=SA`Casimir[vev[[i,1]],Gauge[[i2,3]]];
SA`Dynkin[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=SA`Dynkin[vev[[i,1]],Gauge[[i2,3]]];
MultiplicityFactor[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=MultiplicityFactor[vev[[i,1]],Gauge[[i2,3]]];
SA`DimensionGG[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=SA`DimensionGG[vev[[i,1]],Gauge[[i2,3]]];
SA`DynL[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=SA`DynL[vev[[i,1]],Gauge[[i2,3]]];
];
If[vev[[i,2,1]]=!=0,
SA`Casimir[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=SA`Casimir[vev[[i,1]],Gauge[[i2,3]]];
SA`Dynkin[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=SA`Dynkin[vev[[i,1]],Gauge[[i2,3]]];
MultiplicityFactor[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=MultiplicityFactor[vev[[i,1]],Gauge[[i2,3]]];
SA`DimensionGG[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=SA`DimensionGG[vev[[i,1]],Gauge[[i2,3]]];
SA`DynL[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=SA`DynL[vev[[i,1]],Gauge[[i2,3]]];
];
If[Gauge[[i2,2]]===U[1],
If[vev[[i,3,1]]=!=0,SA`ChargeGG[RE[vev[[i,3,1]]],Gauge[[i2,3]]]=SA`ChargeGG[vev[[i,1]],Gauge[[i2,3]]];];
If[vev[[i,2,1]]=!=0,SA`ChargeGG[RE[vev[[i,2,1]]],Gauge[[i2,3]]]=SA`ChargeGG[vev[[i,1]],Gauge[[i2,3]]];];
];
];
i2++;];

For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[RE[vev[[i,3,1]]],AuxGauge[[i2,3]]]=SA`Casimir[vev[[i,1]],AuxGauge[[i2,3]]];
SA`Dynkin[RE[vev[[i,3,1]]],AuxGauge[[i2,3]]]=SA`Dynkin[vev[[i,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[RE[vev[[i,3,1]]],AuxGauge[[i2,3]]]=SA`DimensionGG[vev[[i,1]],AuxGauge[[i2,3]]];
SA`DynL[RE[vev[[i,3,1]]],AuxGauge[[i2,3]]]=SA`DynL[vev[[i,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[RE[vev[[i,3,1]]],AuxGauge[[i2,3]]]=MultiplicityFactor[vev[[i,1]],AuxGauge[[i2,3]]];
i2++;];
If[vev[[i,2,1]]=!=0,
For[i2=1,i2<=Length[AuxGauge],
SA`Casimir[RE[vev[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Casimir[vev[[i,1]],AuxGauge[[i2,3]]];
SA`Dynkin[RE[vev[[i,2,1]]],AuxGauge[[i2,3]]]=SA`Dynkin[vev[[i,1]],AuxGauge[[i2,3]]];
SA`DimensionGG[RE[vev[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DimensionGG[vev[[i,1]],AuxGauge[[i2,3]]];
SA`DynL[RE[vev[[i,2,1]]],AuxGauge[[i2,3]]]=SA`DynL[vev[[i,1]],AuxGauge[[i2,3]]];
MultiplicityFactor[RE[vev[[i,2,1]]],AuxGauge[[i2,3]]]=MultiplicityFactor[vev[[i,1]],AuxGauge[[i2,3]]];
i2++;];
];


For[i2=1,i2<=Length[Global],
If[vev[[i,3,1]]=!=0,
SA`ChargeGlobal[RE[vev[[i,3,1]]],Global[[i2,2]]] =SA`ChargeGlobal[vev[[i,1]],Global[[i2,2]]];
 ];
If[vev[[i,2,1]]=!=0,
SA`ChargeGlobal[RE[vev[[i,2,1]]],Global[[i2,2]]] =SA`ChargeGlobal[vev[[i,1]],Global[[i2,2]]];
];
i2++;];
i++;];

For[i2=1,i2<=Length[oldfields],
delParticle[oldfields[[i2]]];
i2++;];



If[IgnoreGaugeFixing===True,
compSubInverse={};,
equ=compSub /. Rule->Equal /. A_[x_Symbol]->A /. A_[x_Pattern]->A /. conj[x_]:>ToExpression[ToString[x]<>"c"];
compSubInverse=Solve[equ,Join[newfields,ToExpression[ToString[#]<>"c"]&/@newfields]][[1]] /. Equal->Rule  /. Table[ToExpression[ToString[newfields[[iii]]]<>"c"]->conj[newfields[[iii]]],{iii,1,Length[newfields]}] /. Table[newfields[[iii]]->newfields[[iii]][x_],{iii,1,Length[newfields]}] /. Table[oldfields[[iii]]->oldfields[[iii]][x],{iii,1,Length[oldfields]}];
];

ComplexSub[type]=compSub;
ComplexSubInverse[type]=compSubInverse;


If[IgnoreGaugeFixing=!=True,
UpdateGaugeTransformations[compSub,compSubInverse,UGTvev[rotNr]];
];


];

 
