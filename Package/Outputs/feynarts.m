(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* Begin["`FeynArtsModel`"] *)


(*------------------------------------*)
(* Write FeynArts Model-File *)
(*------------------------------------*)



Options[MakeFeynArts]={AddCounterTerms->False};

MakeFeynArts[opt___]:=MakeFeynArtsFunc[AddCounterTerms /. {opt} /. Options[MakeFeynArts]];

MakeFeynArtsFunc[AddCounterT_]:=Block[{i,j,term,startedtime},
(*
Print["------------------------------"];
Print[" Creating FeynArts Model File "];
Print["------------------------------"];
*)
startedtime=TimeUsed[];
Print[StyleForm["Generate FeynArts model files","Section"]];

SA`subParameterNames={};

For[i=1,i<=Length[parameters],
If[parameters[[i,1]]=!=getOutputNameParameter[parameters[[i,1]]],
SA`subParameterNames=Join[SA`subParameterNames,{parameters[[i,1]]->getOutputNameParameter[parameters[[i,1]]]}];
];
i++;];


subGenInd={};
(* If[FreeQ[NameOfStates,InitalizedVertexCalculaton]\[Equal]True,
Message[ModelFile::NoVertices];,
*)

If[FreeQ[NameOfStates,InitalizedVertexCalculaton]==True,
Print["Have to calculate the vertices first..."];
ModelOutput[Last[NameOfStates]];
];

ClearAttributes[C,Orderless];
subFA={ThetaStep[a__]->1, Mass[a_[b_]]:>ToExpression["Mass"<>ToString[a]][b],Mass[a_]:>ToExpression["Mass"<>ToString[a]]};



If[FileExistsQ[$sarahCurrentFeynArtsDir]=!=True,
CreateDirectory[$sarahCurrentFeynArtsDir];
];

InitFA[InitalizedVertexCalculaton];

If[AddCounterT==True, 
SA`subCounterTerms  = CreateFACounterTerms;,
SA`subCounterTerms = {};
];

InitTrig;

CreateClassesFA[False];
FeynArtsVertices;
WriteModelFA;

Print[""];


Print["Done. FeynArts files generated in ",TimeUsed[]-startedtime,"s"];
Print["Output is saved in ", StyleForm[$sarahCurrentFeynArtsDir,"Section",FontSize->10]];

If[WriteModelDirectories==True,
WriteString[DirectoryNamesFile,"FeynArtsDir="<>ToString[$sarahCurrentFeynArtsDir] <>"\n"];
];

SetAttributes[C,Orderless];
(* ]; *)
];


MakeNameTrig[x_,start_]:=Block[{temp,sub},
temp=Intersection[Cases[x,y_Symbol,5]];
sub=Table[temp[[i]]->getOutputNameParameter[temp[[i]]],{i,1,Length[temp]}];
Return[ToExpression[start<>StringReplace[ToString[x[[1]] /. SA`subParameterNames /. subGreek],{"-"->"m","+"->"p"," "->""," "->"",")"->"","("->""}]]];
];

InitTrig:=Block[{i},
sinL=Intersection[Cases[VertexListNonCC,x_Sin,99]];
cosL=Intersection[Cases[VertexListNonCC,x_Cos,99]];
tanL=Intersection[Cases[VertexListNonCC,x_Tan,99]];
secL=Intersection[Cases[VertexListNonCC,x_Sec,99]];
cscL=Intersection[Cases[VertexListNonCC,x_Csc,99]];
cotL=Intersection[Cases[VertexListNonCC,x_Cot,99]];

TrigRepFA={};

For[i=1,i<=Length[sinL],
TrigRepFA = Join[TrigRepFA,{{sinL[[i]],MakeNameTrig[sinL[[i]],"S"]}}];
i++;];

For[i=1,i<=Length[cosL],
TrigRepFA = Join[TrigRepFA,{{cosL[[i]],MakeNameTrig[cosL[[i]],"C"]}}];
i++;];

For[i=1,i<=Length[tanL],
TrigRepFA = Join[TrigRepFA,{{tanL[[i]],MakeNameTrig[tanL[[i]],"T"]}}];
i++;];

For[i=1,i<=Length[secL],
TrigRepFA = Join[TrigRepFA,{{secL[[i]],1/MakeNameTrig[secL[[i]],"C"]}}];
i++;];

For[i=1,i<=Length[cscL],
TrigRepFA = Join[TrigRepFA,{{cscL[[i]],1/MakeNameTrig[cscL[[i]],"S"]}}];
i++;];

For[i=1,i<=Length[cotL],
TrigRepFA = Join[TrigRepFA,{{cotL[[i]],1/MakeNameTrig[cotL[[i]],"T"]}}];
i++;];


subFA = Join[subFA,Table[TrigRepFA[[i,1]]->TrigRepFA[[i,2]],{i,1,Length[TrigRepFA]}]];

];

InitFA[ES_]:=Block[{i,temp},

If[InitalizedVertexCalculaton=!=ES,
InitVertexCalculation[ES,False];
];

Print["Initialize Output"];

FAindices={};
For[i=1,i<=Length[Gauge],
If[Gauge[[i,2,1]]>2 && Gauge[[i,5]]=!= True,
FAindices=Join[FAindices,{{Gauge[[i,3]],Gauge[[i,2,1]], False,greekIndex}}];
FAindices=Join[FAindices,{{ToExpression["adj"<>ToString[Gauge[[i,3]]]],Gauge[[i,2,1]]^2-1, False,alphaIndex}}] //.adjcolor->Gluon; 
];
i++;];

FAindices = FAindices /. color->Colour /.adjcolor->Gluon;

Set[massList,Masses[ES]]; 

MassRules={};
LabelRules={};
ListofAllMasses ={};
ListofAllMassesOne ={};

subStringFA={};
subStringFA=Join[subStringFA,{"\\tilde{"->""}];
subStringFA=Join[subStringFA,{RegularExpression["_(.[^}]*)"]-> ""}];
subStringFA=Join[subStringFA,{RegularExpression["\\^(.[^}]*)"]-> ""}];
subStringFA=Join[subStringFA,{"}"->""}];

stringIndexExtract={};
stringIndexExtract=Join[stringIndexExtract,{"\\tilde{"->""}];
stringIndexExtract=Join[stringIndexExtract,{RegularExpression["\\^(.[^}]*)"]-> ""}];
stringIndexExtract=Join[stringIndexExtract,{RegularExpression["(.*)_"]-> ""}];

stringExpExtract={};
stringExpExtract=Join[stringExpExtract,{"\\tilde{"->""}];
stringExpExtract=Join[stringExpExtract,{RegularExpression["_(.[^}]*)"]-> ""}];
stringExpExtract=Join[stringExpExtract,{RegularExpression["(.*)\\^"]-> ""}];

temp=Cases[parameters,x_Q,5];
For[i=1,i<=Length[temp],
subFA = Join[subFA,{temp[[i]] ->  ToExpression["Q"<>ToString[temp[[i,1]] /. subGreek]]}];
i++;];
For[i=1,i<=Length[temp],
subFA = Join[subFA,{temp[[i]] ->  ToExpression["T"<>ToString[temp[[i,1]] /. subGreek]]}];
i++;];
temp=Cases[parameters,x_B,5];
For[i=1,i<=Length[temp],
subFA = Join[subFA,{temp[[i]] ->  ToExpression["B"<>ToString[temp[[i,1]] /. subGreek]]}];
i++;];
temp=Cases[parameters,x_L,5];
For[i=1,i<=Length[temp],
subFA = Join[subFA,{temp[[i]] ->  ToExpression["L"<>ToString[temp[[i,1]] /. subGreek]]}];
i++;];

temp=temp=Select[parameters,(FreeQ[#,flavor]==False)&];
For[i=1,i<=Length[temp],
subFA = Join[subFA,{temp[[i,1]][a__][b__]->temp[[i,1]][a,b]}];
i++;];

For[i=1,i<=Length[parameters],
If[FreeQ[parameters[[i]],{generation,flavor,flavor}]==False,
subFA = Join[subFA,{parameters[[i,1]][a_][b_,c_]->parameters[[i,1]][a,b,c]}];
];
i++;];

];


FAIndizes[x_,add_]:=Block[{ind},
(* ind=DeleteCases[getIndizes[x],lorentz,2] //. adjcolor\[Rule]Gluon; *)
ind=DeleteCases[TransposeChecked[getIndizesWI[x] //. {color,8}->{Gluon,8}][[1]],lorentz,2] ;

If[FreeQ[ind,generation]==False || FreeQ[ind,flavor]==False,
ind = ind //. {generation-> ToExpression["I"<>ToString[x]<>"Gen"],flavor-> ToExpression["Flavor"<>ToString[x]], color->Colour} /. {ToExpression["I"<>ToString[Gluino]<>"Gen"]-> Gluon, ToExpression["I"<>ToString[VG]<>"Gen"]-> Gluon,ToExpression["I"<>ToString[getGhost[VectorG]]<>"Gen"]-> Gluon} //. adjcolor->Gluon;
If[add==True,
If[(getType[x]===V) || (getType[x]===G) || FreeQ[Gauginos,getBlank[x]]==False,
FAindices=Join[FAindices,{{ToExpression["I"<>ToString[x]<>"Gen"],getGen[x],False, alphaIndex}}];,
If[getGen[x]>1,
FAindices=Join[FAindices,{{ToExpression["I"<>ToString[x]<>"Gen"],getGen[x],True, alphaIndex}}];
subGenInd =Join[subGenInd ,{ToExpression["I"<>ToString[x]<>"Gen"]->ToExpression["I"<>ToString[getGen[x]]<>"Gen"]}];
];
If[getFla[x]>1,
FAindices=Join[FAindices,{{ToExpression["Fl"<>ToString[x]],getFla[x],True, alphaIndex}}];
subGenInd =Join[subGenInd ,{ToExpression["Fl"<>ToString[x]]->ToExpression["Fl"<>ToString[getFla[x]]]}];
];
];
];
];
Return[Map[Index,ind /. color->Colour /. subGenInd]];
];

FALabel[x_]:=Block[{i,tex,basis,ind,res},
tex=TeXName[x];
basis=StringReplace[tex,subStringFA];
If[basis===tex,
If[Length[getIndizes[x]]==0,
Return[ToExpression["\""<>basis<>"\""]];,
ind=FAIndizes[x,False] /. subGenInd;
If[Length[ind]>2,ind=Take[ind,{1,2}];];
res ="ComposedChar[\""<>basis<>"\"";
For[i=1,i<=Length[ind],
res = res <>","<>ToString[ind[[i]]];
i++;];
Return[StringReplace[res<>"]",{"{"->"","}"->"","\\"->"\\\\"}]];
];,
ind=FAIndizes[x,False];
If[Length[ind]>2,ind=Take[ind,{1,2}];];
res ="ComposedChar[\""<>basis<>"\"";
For[i=1,i<=Length[ind],
res = res <>","<>ToString[ind[[i]]];
i++;];

If[StringFreeQ[tex,"^"]==False,
exp=StringReplace[tex,stringExpExtract];
If[exp=="", exp="Null";];
res=res<>",\""<>exp <>"\"";
];

If[StringFreeQ[tex,"_"]==False,
index=StringReplace[tex,stringIndexExtract];
If[index=="", index="Null";];
res=res<>",\""<>index <>"\"";
];

If[StringFreeQ[tex,"tilde"]==False,
res=res<>",\"\\tilde\"";
];
Return[StringReplace[res<>"]",{"{"->"","}"->"","\\"->"\\\\"}]];
];
];

FAMass[x_]:=Block[{},
Clear[gen];
If[Length[DeleteCases[DeleteCases[getIndizes[x],generation,2],lorentz,2]]>0,
Switch[Length[DeleteCases[DeleteCases[getIndizes[x],generation,2],lorentz,2]],
1,
MassRules = Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_],ToExpression["Mass"<>ToString[x]][gen]}}];,
2,
MassRules = Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_,z_],ToExpression["Mass"<>ToString[x]][gen]}}];,
3,
MassRules = Join[MassRules,{{ToExpression["Mass"<>ToString[x]][gen_,y_,z_,w_],ToExpression["Mass"<>ToString[x]][gen]}}];
];
];

If[getGen[x]>1,
ListofAllMasses =Join[ListofAllMasses,{ToExpression["Mass"<>ToString[x]]}];,
ListofAllMassesOne =Join[ListofAllMassesOne,{ToExpression["Mass"<>ToString[x]]}];
];
Return[ToExpression["Mass"<>ToString[x]]];
];

FAArrow[x_]:=Block[{},
If[getType[x]===F,
If[MemberQ[MajoranaPart,x],Return[None];,Return[Forward];];,
If[MemberQ[realVar,x],Return[None];,Return[Forward];];
];
];

FANumber[x_]:=Block[{pos,tempNr, FAnr},
pos = Position[partDefinition,x];

If[pos==={} ,
Message[FeynArts::NoNumber,x];
FAnr = Automatic;,
FAnr= FeynArtsNr /.Extract[partDefinition,pos[[1,1]]][[2]];
];

If[(FAnr===FeynArtsNr) || (FAnr ===Automatic),
If[FAnr===FeynArtsNr,Message[FeynArts::NoNumber,x];];
FAnr = AutoFAnr;
While[FreeQ[forbiddenFAnr,FAnr]==False,
FAnr++;];
AutoFAnr=FAnr+1;
];

Set[FeynArtsNr[x],FAnr];

Return[FAnr];
];

CreateClassesFA[FeynRules_]:=Block[{i,k,j,temp},


dummyPDG = 5000;
Print["Create Class Output"];

M$ClassesDescription={};

subFAFields = {conj[part_]->-part, bar[part_]->-part};
outputfile = OpenWrite[ToFileName[$sarahCurrentFeynArtsDir,"ParticleNamesFeynArts.dat"]];

WriteString[outputfile,"Names of Particles in SARAH and FeynArts for Model-file"<>modelName <>".mod"];

WriteString[outputfile,"\n \n"];
WriteString[outputfile,"Scalars: \n \n"];

indexS=1;

AutoFAnr = 1;
forbiddenFAnr={};
For[i=1,i<=Length[partDefinition],
If[getType[partDefinition[[i,1]]]===S,
forbiddenFAnr=Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
];
i++;];

forbiddenFAnr = DeleteCases[forbiddenFAnr,FeynArtsNr];

If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
Message[FeynArts::NumberDefinedTwiceS,Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
];

For[i=1,i<=Length[PART[S]],
faNr=FANumber[PART[S][[i,1]]];
If[FeynRules==False,
M$ClassesDescription=Join[M$ClassesDescription,
{S[faNr]== { SelfConjugate -> TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
                Indices -> FAIndizes[PART[S][[i,1]],True],
                 Mass -> FAMass[PART[S][[i,1]]],
                 PropagatorLabel-> FALabel[PART[S][[i,1]]],
                 PropagatorType-> ScalarDash,
                 PropagatorArrow ->FAArrow[PART[S][[i,1]]]
}}];,

temp=
{S[faNr]== {
		Classname ->  PART[S][[i,1]],
		ClassMember -> Table[getOutputName[PART[S][[i,1]],k],{k,1,PART[S][[i,2]]}],
		SelfConjugate -> TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
		Indices -> FAIndizes[PART[S][[i,1]],True],
		FlavorIndex -> ToExpression["I"<>ToString[PART[S][[i,1]]<>"Gen"]],
                   Mass -> Table[getMass[PART[S][[i,1]],k],{k,1,PART[S][[i,2]]}],
		Width -> Table[getWidth[PART[S][[i,1]],k],{k,1,PART[S][[i,2]]}],
		ParticleName -> Table[ToString[PART[S][[i,1]]]<>ToString[k],{k,1,PART[S][[i,2]]}],
		AntiParticleName -> Table["c"<>ToString[PART[S][[i,1]]]<>ToString[k],{k,1,PART[S][[i,2]]}],
		PDG -> getPDGList[PART[S][[i,1]]] /. {0-> dummyPDG++},
		PropagatorLabel->  Flatten[{ToString[PART[S][[i,1]]],Table[ToString[PART[S][[i,1]]]<>ToString[k],{k,1,PART[S][[i,2]]}]}],
		PropagatorType-> ScalarDash,
		PropagatorArrow ->FAArrow[PART[S][[i,1]]]
}};


If[ TrueQ[conj[PART[S][[i,1]]]===PART[S][[i,1]]],
temp=DeleteCases[temp,AntiParticleName->a_,5];,
subPartFR= Join[subPartFR,{conj[PART[S][[i,1]]]-> ToExpression["c"<>ToString[PART[S][[i,1]]]]}];

If[getGen[PART[S][[i,1]]]>1,
For[j=1,j<=getGen[PART[S][[i,1]]],
subPartWH = Join[subPartWH,{conj[PART[S][[i,1]][{j,a___}]]->ToExpression["c"<>ToString[PART[S][[i,1]]]<>ToString[j]] }];
j++;];,
subPartWH = Join[subPartWH,{conj[PART[S][[i,1]][{a___}]]->ToExpression["c"<>ToString[PART[S][[i,1]]]] }];
];

];
 M$ClassesDescription=Join[M$ClassesDescription,temp];


If[getGen[PART[S][[i,1]]]>1,
For[j=1,j<=getGen[PART[S][[i,1]]],
subPartWH = Join[subPartWH,{PART[S][[i,1]][{j,a___}]->ToExpression[ToString[PART[S][[i,1]]]<>ToString[j]] }];
j++;];,
subPartWH = Join[subPartWH,{PART[S][[i,1]][{a___}]->ToExpression[ToString[PART[S][[i,1]]]] }];
];


];


WriteString[outputfile,ToString[PART[S][[i,1]]]<>": S[" <>ToString[faNr]<>"] \n"];

If[Length[getIndizes[PART[S][[i,1]]]]>0,
subFA=Join[subFA,{PART[S][[i,1]][Flatten[Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,Length[getIndizes[PART[S][[i,1]]]]}]]]->S[faNr,Flatten[Table[{ToExpression["a"<>ToString[j]]},{j,1,Length[getIndizes[PART[S][[i,1]]]]}]]]}];,
subFA=Join[subFA,{PART[S][[i,1]]->S[faNr]}];
];
indexS++;
i++;
];

WriteString[outputfile,"\n \n"];
WriteString[outputfile,"Fermions: \n \n"];


indexF=1;

forbiddenFAnr = {};
AutoFAnr = 1;
For[i=1,i<=Length[partDefinition],
If[getType[partDefinition[[i,1]]]===F,
forbiddenFAnr=Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
];
i++;];

forbiddenFAnr = DeleteCases[forbiddenFAnr,FeynArtsNr];

If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
Message[FeynArts::NumberDefinedTwiceF,Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
];

For[i=1,i<=Length[PART[F]],
faNr=FANumber[PART[F][[i,1]]];
If[FeynRules==False,
M$ClassesDescription=Join[M$ClassesDescription,
{F[faNr]== { 
		SelfConjugate -> MemberQ[MajoranaPart,PART[F][[i,1]]],
                Indices -> FAIndizes[PART[F][[i,1]],True],
                 Mass -> FAMass[PART[F][[i,1]]],
                 PropagatorLabel-> FALabel[PART[F][[i,1]]],
                 PropagatorType-> Straight,
                 PropagatorArrow -> FAArrow[PART[F][[i,1]]]
}}];,
If[FreeQ[Gauginos,PART[F][[i,1]]]==False,
temp=
{F[faNr]== { 
		Classname ->  PART[F][[i,1]],
		SelfConjugate ->True,
		Indices -> FAIndizes[PART[F][[i,1]],True],
		Mass -> ToExpression["M"<>ToString[PART[F][[i,1]]]],
		Width -> ToExpression["W"<>ToString[PART[F][[i,1]]]],
		ParticleName -> ToString[PART[F][[i,1]]],
		PDG -> getPDGList[PART[F][[i,1]]] /. {0-> dummyPDG++},
		PropagatorLabel->ToString[PART[F][[i,1]]],
		PropagatorType-> Straight,
		PropagatorArrow ->FAArrow[PART[F][[i,1]]]
}};,

temp=
{F[faNr]== { 
		Classname ->  PART[F][[i,1]],
		ClassMember -> Table[ToExpression[ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,PART[F][[i,2]]}],
		SelfConjugate -> MemberQ[MajoranaPart,PART[F][[i,1]]],
		Indices -> FAIndizes[PART[F][[i,1]],True],
		FlavorIndex -> ToExpression["I"<>ToString[PART[F][[i,1]]]<>"Gen"],
                   Mass -> Table[ToExpression["M"<>ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,PART[F][[i,2]]}],
		Width -> Table[ToExpression["W"<>ToString[PART[F][[i,1]]]<>ToString[k]],{k,1,PART[F][[i,2]]}],
		ParticleName -> Table[ToString[PART[F][[i,1]]]<>ToString[k],{k,1,PART[F][[i,2]]}],
		AntiParticleName -> Table["b"<>ToString[PART[F][[i,1]]]<>ToString[k],{k,1,PART[F][[i,2]]}],
		PDG -> getPDGList[PART[F][[i,1]]],
		PropagatorLabel-> Flatten[{ToString[PART[F][[i,1]]],Table[ToString[PART[F][[i,1]]]<>ToString[k],{k,1,PART[F][[i,2]]}]}],
		PropagatorType-> Straight,
		PropagatorArrow ->FAArrow[PART[F][[i,1]]]
}};
];

For[j=1,j<=getGen[PART[F][[i,1]]],
subPartWH = Join[subPartWH,{PART[F][[i,1]][{j,a___}]->ToExpression[ToString[PART[F][[i,1]]]<>ToString[j]] }];
j++;];


If[ MemberQ[MajoranaPart,PART[F][[i,1]]],
temp=DeleteCases[temp,AntiParticleName->a_,5];,
subPartFR= Join[subPartFR,{bar[PART[F][[i,1]]]-> ToExpression[ToString[PART[F][[i,1]]]<>"bar"]}];

If[getGen[PART[F][[i,1]]]>1,
For[j=1,j<=getGen[PART[F][[i,1]]],
subPartWH = Join[subPartWH,{bar[PART[F][[i,1]][{j,a___}]]->ToExpression[ToString[PART[F][[i,1]]]<>ToString[j]<>"bar"] }];
j++;];,
subPartWH = Join[subPartWH,{bar[PART[F][[i,1]][{a___}]]->ToExpression[ToString[PART[F][[i,1]]]] }];
];

];
 M$ClassesDescription=Join[M$ClassesDescription,temp];

If[getGen[PART[F][[i,1]]]>1,
For[j=1,j<=getGen[PART[F][[i,1]]],
subPartWH = Join[subPartWH,{PART[F][[i,1]][{j,a___}]->ToExpression[ToString[PART[F][[i,1]]]<>ToString[j]] }];
j++;];,
subPartWH = Join[subPartWH,{PART[F][[i,1]][{a___}]->ToExpression[ToString[PART[F][[i,1]]]] }];
];


];




WriteString[outputfile,ToString[PART[F][[i,1]]]<>": F[" <>ToString[faNr]<>"] \n"];

If[Length[getIndizes[PART[F][[i,1]]]]>0,
subFA=Join[subFA,{PART[F][[i,1]][Flatten[Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,Length[getIndizes[PART[F][[i,1]]]]}]]]->F[faNr,Flatten[Table[{ToExpression["a"<>ToString[j]]},{j,1,Length[getIndizes[PART[F][[i,1]]]]}]]]}];,
subFA=Join[subFA,{PART[F][[i,1]]->F[faNr]}];
];
indexF++;
i++;
];

WriteString[outputfile,"\n \n"];
WriteString[outputfile,"Vector Bosons: \n \n"];

indexV=1;

forbiddenFAnr = {};
AutoFAnr = 1;
For[i=1,i<=Length[partDefinition],
If[getType[partDefinition[[i,1]]]===V,
forbiddenFAnr=Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
];
i++;];

forbiddenFAnr = DeleteCases[forbiddenFAnr,FeynArtsNr];

If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
Message[FeynArts::NumberDefinedTwiceV,Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
];


For[i=1,i<=Length[PART[V]],
faNr=FANumber[PART[V][[i,1]]];

If[Simplify[Mass[PART[V][[i,1]]] /. massList /. subDependences]===0,
massCurrent=0;
widthCurrent=0;,
massCurrent = FAMass[PART[V][[i,1]]];
widthCurrent = ToExpression["W"<>ToString[PART[V][[i,1]]]];
];

subFA=Join[subFA,{Mass[PART[V][[i,1]]]-> massCurrent}];

If[FeynRules==False,
M$ClassesDescription=Join[M$ClassesDescription,
{V[faNr]== { SelfConjugate -> TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
                Indices -> FAIndizes[PART[V][[i,1]],True],
                 Mass -> massCurrent,
                 PropagatorLabel-> FALabel[PART[V][[i,1]]],
                 PropagatorType-> Sine,
                 PropagatorArrow ->FAArrow[PART[V][[i,1]]]
}}];,
temp=
{V[faNr]== { 
		Classname ->  PART[V][[i,1]],
		SelfConjugate -> TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
	         Indices -> FAIndizes[PART[V][[i,1]],True],
      	    Mass ->massCurrent,
		Width -> widthCurrent,
		ParticleName ->ToString[PART[V][[i,1]]],
		AntiParticleName ->"c"<>ToString[PART[V][[i,1]]],
		PDG -> getPDGList[PART[V][[i,1]]]/. {0-> dummyPDG++},
		PropagatorLabel-> FALabel[PART[V][[i,1]]],
	         PropagatorType-> Sine,
                  PropagatorArrow ->FAArrow[PART[V][[i,1]]]
}};



If[ TrueQ[conj[PART[V][[i,1]]]===PART[V][[i,1]]],
temp=DeleteCases[temp,AntiParticleName->a_,5];,
subPartFR= Join[subPartFR,{conj[PART[V][[i,1]]]-> ToExpression["c"<>ToString[PART[V][[i,1]]]]}];

If[getGen[PART[V][[i,1]]]>1,
For[j=1,j<=getGen[PART[V][[i,1]]],
subPartWH = Join[subPartWH,{conj[PART[V][[i,1]][{j,a___}]]->ToExpression["c"<>ToString[PART[V][[i,1]]]<>ToString[j]] }];
j++;];,
subPartWH = Join[subPartWH,{conj[PART[V][[i,1]][{a___}]]->ToExpression["c"<>ToString[PART[V][[i,1]]]] }];
];

];

If[getGen[PART[V][[i,1]]]>1,
For[j=1,j<=getGen[PART[V][[i,1]]],
subPartWH = Join[subPartWH,{PART[V][[i,1]][{j,a___}]->ToExpression[ToString[PART[V][[i,1]]]<>ToString[j]] }];
j++;];,
subPartWH = Join[subPartWH,{PART[V][[i,1]][{a___}]->PART[V][[i,1]]}];
];

 M$ClassesDescription=Join[M$ClassesDescription,temp];

];





WriteString[outputfile,ToString[PART[V][[i,1]]]<>": V[" <>ToString[faNr]<>"] \n"];

If[Length[getIndizes[PART[V][[i,1]]]]>1,
subFA=Join[subFA,{PART[V][[i,1]][Flatten[Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,Length[getIndizes[PART[V][[i,1]]]]}]]]->V[faNr,Flatten[Table[{ToExpression["a"<>ToString[j]]},{j,1,Length[getIndizes[PART[V][[i,1]]]]-1}]]]}];,
subFA=Join[subFA,{PART[V][[i,1]][{lor_}]->V[faNr]}];
];
indexV++;
i++;
];

WriteString[outputfile,"\n \n"];
WriteString[outputfile,"Ghosts: \n \n"];



indexU=1;

forbiddenFAnr = {};
AutoFAnr = 1;
For[i=1,i<=Length[partDefinition],
If[getType[partDefinition[[i,1]]]===G,
forbiddenFAnr=Join[forbiddenFAnr,{FeynArtsNr /. partDefinition[[i,2]]}];
];
i++;];

forbiddenFAnr = DeleteCases[forbiddenFAnr,FeynArtsNr];

If[Length[forbiddenFAnr]=!=Length[Intersection[forbiddenFAnr]],
Message[FeynArts::NumberDefinedTwiceG,Intersection[Select[forbiddenFAnr,(Count[forbiddenFAnr,#]>1)&]]];
];

For[i=1,i<=Length[PART[G]],
If[Simplify[Mass[getVectorBoson[PART[G][[i,1]]]] /. massList /. subDependences]===0,
massCurrent=0;
widthCurrent=0;,
massCurrent = ToExpression["Mass"<>ToString[getVectorBoson[PART[G][[i,1]]]]];
widthCurrent = ToExpression["W"<>ToString[getVectorBoson[PART[G][[i,1]]]]];
];


faNr=FANumber[PART[G][[i,1]]];

If[FeynRules==False,
M$ClassesDescription=Join[M$ClassesDescription,
{U[faNr]== { SelfConjugate -> False,
                Indices -> FAIndizes[PART[G][[i,1]],True],
                 Mass -> massCurrent,
                 PropagatorLabel-> FALabel[PART[G][[i,1]]],
                 PropagatorType-> GhostDash,
                 PropagatorArrow -> Forward
}}];,

subPartFR= Join[subPartFR,{bar[PART[G][[i,1]]]-> ToExpression[ToString[PART[G][[i,1]]]<>"bar"]}];
];

WriteString[outputfile,ToString[PART[G][[i,1]]]<>": U[" <>ToString[faNr]<>"] \n"];

If[Length[getIndizes[PART[G][[i,1]]]]>0,
subFA=Join[subFA,{PART[G][[i,1]][Flatten[Table[{ToExpression["a"<>ToString[j]<>"_"]},{j,1,Length[getIndizes[PART[G][[i,1]]]]}]]]->U[faNr,Flatten[Table[{ToExpression["a"<>ToString[j]]},{j,1,Length[getIndizes[PART[G][[i,1]]]]}]]]}];,
subFA=Join[subFA,{PART[G][[i,1]]->U[faNr]}];
];
indexU++;
i++;
];

Close[outputfile];

 M$ClassesDescription=M$ClassesDescription/. subGenInd;

];

MakeGenericCouplingFA[fields_,suffix_]:=Block[{temp,ind},temp=cpl[ToExpression[(StringJoin[ToString/@(fields/.A_[{b___}]->A/.bar[x_]:>ToExpression["c"<>ToString[x]]/.conj[x_]:>ToExpression["c"<>ToString[x]])])<>suffix]];
ind=DeleteCases[DeleteCases[DeleteCases[DeleteCases[fields /. conj[x_]->x /. bar[x_]->x/.A_[{b___}]->b,lt1],lt2],lt3],lt4];
ind=DeleteCases[DeleteCases[DeleteCases[DeleteCases[ind,ct1],ct2],ct3],ct4];
If[ind=!={},Return[temp@@ind];,Return[temp];];];

FeynArtsVertices:=Block[{i,j},

subFA=Join[SA`subParameterNames,subFA];

Print["Create Coupling Output"];

M$CouplingMatrices={};

VList1=Join[SA`VertexList[SSS],SA`VertexList[SSV], SA`VertexList[SVV],SA`VertexList[SSSS], SA`VertexList[VVV]] //. subFA /. SA`subCounterTerms;
VList1names=Join[SA`VertexList[SSS],SA`VertexList[SSV], SA`VertexList[SVV],SA`VertexList[SSSS], SA`VertexList[VVV]] ;
VList2 = Join[SA`VertexList[FFS],SA`VertexList[FFV]] //. subFA/. SA`subCounterTerms;
VList2names = Join[SA`VertexList[FFS],SA`VertexList[FFV]];


For[i=1,i<=Length[SA`VertexList[VVVV]],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[SA`VertexList[VVVV][[i,1]]//.subFA //. subFAFields]=={{SA`VertexList[VVVV][[i,2,1]]//. subFA /. SA`subCounterTerms},{SA`VertexList[VVVV][[i,3,1]]//.subFA /. SA`subCounterTerms},{SA`VertexList[VVVV][[i,4,1]]//. subFA/. SA`subCounterTerms}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[SA`VertexList[VVVV][[i,1]]//.subFA //. subFAFields]=={{MakeGenericCouplingFA[SA`VertexList[VVVV][[i,1]],"1"]},{MakeGenericCouplingFA[SA`VertexList[VVVV][[i,1]],"2"]},{MakeGenericCouplingFA[SA`VertexList[VVVV][[i,1]],"3"]}}}];
];
i++;];

(*
For[i=1,i\[LessEqual]Length[SA`VertexList[SSVV]],
M$CouplingMatrices=Join[M$CouplingMatrices,{C[{SA`VertexList[SSVV][[i,1,1]],SA`VertexList[SSVV][[i,1,3]],SA`VertexList[SSVV][[i,1,2]],SA`VertexList[SSVV][[i,1,4]]}//. subFA//. subFAFields ]\[Equal]{{SA`VertexList[SSVV][[i,2,1]]//. subFA /. SA`subCounterTerms}}}];
i++;];
*)

For[i=1,i<=Length[SA`VertexList[SSVV]],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[{SA`VertexList[SSVV][[i,1,1]],SA`VertexList[SSVV][[i,1,2]],SA`VertexList[SSVV][[i,1,3]],SA`VertexList[SSVV][[i,1,4]]}//. subFA//. subFAFields ]=={{SA`VertexList[SSVV][[i,2,1]]//. subFA /. SA`subCounterTerms}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[{SA`VertexList[SSVV][[i,1,1]],SA`VertexList[SSVV][[i,1,2]],SA`VertexList[SSVV][[i,1,3]],SA`VertexList[SSVV][[i,1,4]]}//. subFA//. subFAFields ]=={{MakeGenericCouplingFA[SA`VertexList[SSVV][[i,1]],""]}}}];
];
i++;];

For[i=1,i<=Length[VList2],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[VList2[[i,1]]//. subFA//. subFAFields]=={{VList2[[i,2,1]]},{VList2[[i,3,1]]}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[VList2[[i,1]]//. subFA//. subFAFields]=={{MakeGenericCouplingFA[VList2names[[i,1]],"L"]},{MakeGenericCouplingFA[VList2names[[i,1]],"R"]}}}];
];
i++;];


For[j=1,j<=Length[VList1],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[VList1[[j,1]]//. subFA//. subFAFields]=={{VList1[[j,2,1]]}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[VList1[[j,1]]//. subFA//. subFAFields]=={{MakeGenericCouplingFA[VList1names[[i,1]],""]}}}];
];
j++;];

For[j=1,j<=Length[SA`VertexList[GGS]],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[{SA`VertexList[GGS][[j,1,3]],SA`VertexList[GGS][[j,1,1]],SA`VertexList[GGS][[j,1,2]]}//. subFA //. subFAFields]=={{(SA`VertexList[GGS][[j,2,1]] //. subFA /. SA`subCounterTerms)}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[{SA`VertexList[GGS][[j,1,3]],SA`VertexList[GGS][[j,1,1]],SA`VertexList[GGS][[j,1,2]]}//. subFA //. subFAFields]=={{MakeGenericCouplingFA[SA`VertexList[GGS][[j,1]],""]}}}];
];
j++;];

For[i=1,i<=Length[SA`VertexList[GGV]],
If[SA`FAgenericVertices=!=True,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[SA`VertexList[GGV][[i,1]]//. subFA//. subFAFields]=={{SA`VertexList[GGV][[i,2,1]] //. subFA /. SA`subCounterTerms},{0}}}];,
M$CouplingMatrices=Join[M$CouplingMatrices,{C[SA`VertexList[GGV][[i,1]]//. subFA//. subFAFields]=={{MakeGenericCouplingFA[SA`VertexList[GGV][[i,1]],""]},{0}}}];
];
i++;];


M$CouplingMatrices=M$CouplingMatrices //. C[{a_,b_,c_}]->C[a,b,c] /.C[{a_,b_,c_,d_}]->C[a,b,c,d] /.Delta[a_,b_]->IndexDelta[a,b] /.conj[a_]-> Conjugate[a] /.RXi[a_] ->GaugeXi[a] //. subGreek /. subGreek;


While[FreeQ[M$CouplingMatrices,sum]==False,
M$CouplingMatrices=ReleaseHold[M$CouplingMatrices /.sum[a_,b_,c_,d_]->Hold[Sum[d,{a,c}]]];
];


];


WriteModelFA:= Block[{Minutes},

Print["Write Model-File"];

outputfile = OpenWrite[ToFileName[$sarahCurrentFeynArtsDir,ModelName<>modelName<>".mod"]];

abbrfile = OpenWrite[ToFileName[$sarahCurrentFeynArtsDir,"Substitutions-"<>ModelName<>modelName<>".m"]];

WriteString[outputfile, "(* ----------------------------------------------------------------------------- *) \n"];
WriteString[outputfile, "(* This model file was automatically created by SARAH version"<>SA`Version<>"  *) \n"];
WriteString[outputfile, "(* SARAH References: arXiv:0806.0538, 0909.2863, 1002.0840, 1207.0906, 1309.7223 *) \n"];
WriteString[outputfile, "(* (c) Florian Staub, 2013  *) \n"];
WriteString[outputfile, "(* ----------------------------------------------------------------------------- *) \n"];
Minutes=If[Date[][[5]]<10,"0"<>ToString[Date[][[5]]],ToString[Date[][[5]]]];
WriteString[outputfile, "(* File created at "<>ToString[Date[][[4]]]<>":"<>Minutes<>" on "<>ToString[Date[][[3]]]<>"."<>ToString[Date[][[2]]]<>"."<>ToString[Date[][[1]]]<>"  *) \n"];
WriteString[outputfile, "(* ---------------------------------------------------------------------- *) \n \n \n"];

(* ---- Write Index Ranges ---- *)

FAindices = Intersection[FAindices/. {generation-> ToExpression["I"<>ToString[x]<>"Gen"], color->Colour} /. ToExpression["I"<>ToString[Gluino]<>"Gen"]-> Gluon /. ToExpression["I"<>ToString[VG]<>"Gen"]-> Gluon  /. ToExpression["I"<>ToString[getGhost[VectorG]]<>"Gen"]-> Gluon //. adjcolor->Gluon //. subGenInd  ];

For[i=1,i<= Length[FAindices],
WriteString[outputfile,"IndexRange[  Index["<>StringReplace[ToString[FAindices[[i,1]]],ToString[Gluon]->"Gluon"] <>"]  ] ="];
If[FAindices[[i,3]]==True,
 WriteString[outputfile,"Range["<>StringReplace[ToString[FAindices[[i,2]]],ToString[Gluon]->"Gluon"] <>"]; \n"];,
WriteString[outputfile,"NoUnfold[Range["<>StringReplace[ToString[FAindices[[i,2]]],ToString[Gluon]->"Gluon"] <>"]]; \n"];
];

If[FAindices[[i,4]]===greekIndex,
WriteString[outputfile,"IndexStyle[  Index["<>StringReplace[ToString[FAindices[[i,1]]],ToString[Gluon]->"Gluon"]  <>", i_Integer ] ] := Greek[i];  \n"];,
WriteString[outputfile,"IndexStyle[  Index["<>StringReplace[ToString[FAindices[[i,1]]],ToString[Gluon]->"Gluon"]  <>", i_Integer ] ] := Alph[ 8+i];  \n"];
];

i++;];
WriteString[outputfile, "\n \n"];

(* ---------- Write Trigonometric ------------ *)

WriteString[outputfile,"(* Definitions for trigonometric functions  \n"];
For[i=1,i<=Length[TrigRepFA],
WriteString[outputfile,ToString[InputForm[TrigRepFA[[i,1]]]]<>": "<> ToString[InputForm[TrigRepFA[[i,2]]]] <>"\n"];
i++;];
WriteString[outputfile,"*) \n \n"];

For[i=1,i<=Length[TrigRepFA],
If[Head[TrigRepFA[[i,2]]]===Power,
WriteString[outputfile,"Conjugate["<>ToString[InputForm[TrigRepFA[[i,2,1]]]]<>"] ^= "<> ToString[InputForm[TrigRepFA[[i,2,1]]]] <>"\n"];,
WriteString[outputfile,"Conjugate["<>ToString[InputForm[TrigRepFA[[i,2]]]]<>"] ^= "<> ToString[InputForm[TrigRepFA[[i,2]]]] <>"\n"];
];
i++;];

WriteString[outputfile," \n \n"];


(* ---------- Write Definitions ------------ *)

WriteString[outputfile,"Lam[a_,b_,c_]:=2*SUNT[a,b,c]; \n"];
WriteString[outputfile,"fSU3[a_,b_,c_]:=SUNF[a,b,c]; \n"];
WriteString[outputfile,"LambdaProd[a_,b_][c_,d_]:=4*SUNT[a,b,c,d]; \n \n \n"];




(* ----- Write Class Descriptions ---- *)

WriteString[outputfile,"M$ClassesDescription= {\n"];
For[i=1,i<= Length[M$ClassesDescription],
WriteString[outputfile, ToString[InputForm[M$ClassesDescription[[i,1]]]]<>" == {"];
For[j=1,j<=6,
If[j==4,
WriteString[outputfile,StringReplace[ ToString[InputForm[M$ClassesDescription[[i,2,j,1]]]] <>"->" <> M$ClassesDescription[[i,2,j,2]],ToString[Gluon]->"Gluon"]];
;,
WriteString[outputfile, StringReplace[ ToString[InputForm[M$ClassesDescription[[i,2,j]]]],ToString[Gluon]->"Gluon"]];
];
If[j==6,WriteString[outputfile,"}"];,WriteString[outputfile,",\n"];];
j++;];
If[i!= Length[M$ClassesDescription],WriteString[outputfile,",\n"];];
WriteString[outputfile,"\n \n"];
i++;];
WriteString[outputfile,"}\n"];
WriteString[outputfile, "\n \n"];


(* ---- Write Masses ---- *)

For[i=1,i<=Length[MassRules],
WriteString[outputfile, ToString[InputForm[MassRules[[i,1]]]]<>" = "];
WriteString[outputfile, ToString[InputForm[MassRules[[i,2]]]]<>"\n"];
i++;
];
WriteString[outputfile,"\n\n"];

For[i=1,i<=Length[PART[S]],
If[FreeQ[GoldstoneBosons[InitalizedVertexCalculaton],PART[S][[i,1]]],
WriteString[outputfile,"GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>",___]] = 1 \n"];,
WriteString[outputfile,"GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>",{a_Integer}]] = 1 /; a > 1 \n"];
WriteString[outputfile,"GaugeXi[S["<>ToString[FeynArtsNr[PART[S][[i,1]]]]<>",1]] = GaugeXi["<>ToString[Select[GoldstoneBosons[InitalizedVertexCalculaton],(FreeQ[#,PART[S][[i,1]]]==False)&][[1,1]]] <>"] /; a > 1 \n"];
];
i++;];
WriteString[outputfile,"\n\n"];

For[i=1,i<=Length[PART[V]],
WriteString[outputfile,"GaugeXi[V["<>ToString[FeynArtsNr[PART[V][[i,1]]]]<>",___]] = GaugeXi["<>ToString[GaugeFixingFactor[PART[V][[i,1]]]]<>"]\n"];
i++;];

WriteString[outputfile,"\n\n"];


(* ---- Write Couplings ---- *)

WriteString[outputfile,"M$CouplingMatrices= {\n"];
For[i=1,i<Length[M$CouplingMatrices],
WriteString[outputfile, ToString[InputForm[M$CouplingMatrices[[i]]]]<>",\n "];
i++;];
WriteString[outputfile, ToString[InputForm[Last[M$CouplingMatrices]]]<>"\n "];
WriteString[outputfile,"}\n"];
WriteString[outputfile, "\n \n"];



(* --------- FormCalc Abbreviations ------------ *)


WriteString[abbrfile,"(* Special Abbreviations for FormCalc *) \n \n \n"];

parametersFA = parameters /.subFA /. subGreek ;

For[i=1,i<=Length[parametersFA],
If[Head[parametersFA[[i,1]]]=!=A,
If[MemberQ[realVar,parametersFA[[i,1]]]==False,
If[Length[parametersFA[[i,2]]]>0,
WriteString[abbrfile,"Conjugate["<>ToString[parametersFA[[i,1]] /.subFA]<>"[a___]] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"C[a]; \n"];
WriteString[abbrfile,"Conjugate["<>ToString[parametersFA[[i,1]]/.subFA]<>"C[a___]] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"[a]; \n"];,
WriteString[abbrfile,"Conjugate["<>ToString[parametersFA[[i,1]]/.subFA]<>"] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"C; \n"];
WriteString[abbrfile,"Conjugate["<>ToString[parametersFA[[i,1]]/.subFA]<>"C] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"; \n"];
];,
If[Length[parametersFA[[i,2]]]>0,
WriteString[outputfile,"Conjugate["<>ToString[parametersFA[[i,1]]/.subFA]<>"[a___]] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"[a]; \n"];,
WriteString[outputfile,"Conjugate["<>ToString[parametersFA[[i,1]]/.subFA]<>"] ^= " <> ToString[parametersFA[[i,1]]/.subFA]<>"; \n"];
];
];
If[Length[parametersFA[[i,2]]]>0,
WriteString[abbrfile,"Sq["<>ToString[parametersFA[[i,1]]/.subFA]<>"[a___]] ^=" <> ToString[parametersFA[[i,1]]/.subFA]<>"2[a]; \n"];,
WriteString[abbrfile,"Sq["<>ToString[parametersFA[[i,1]]/.subFA]<>"] ^=" <> ToString[parametersFA[[i,1]]/.subFA]<>"2; \n"];
];,

If[Length[parametersFA[[i,2]]]>0,
WriteString[abbrfile,ToString[parametersFA[[i,1]]/.subFA]<>" ^= A"<> ToString[parametersFA[[i,1,1]]/.subFA]<> "; \n"]; 
WriteString[abbrfile,"Conjugate[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"[a___]] ^= A" <> ToString[parametersFA[[i,1,1]]/.subFA]<>"C[a]; \n"];
WriteString[abbrfile,"Conjugate[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"C[a___]] ^= " <> ToString[parametersFA[[i,1,1]]/.subFA]<>"[a]; \n"];
WriteString[abbrfile,"Sq[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"[a___]] ^= A" <> ToString[parametersFA[[i,1,1]]/.subFA]<>"2[a]; \n"];,
WriteString[abbrfile,"Sq["<>ToString[parametersFA[[i,1]]/.subFA]<>"[a___]] ^=" <> ToString[parametersFA[[i,1]]/.subFA]<>"2[a]; \n"];,
WriteString[abbrfile,ToString[parametersFA[[i,1]]/.subFA]<>"] ^= A"<> ToString[parametersFA[[i,1,1]]/.subFA]<> "; \n"]; 
WriteString[abbrfile,"Conjugate[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"] ^= A" <> ToString[parametersFA[[i,1,1]]/.subFA]<>"C; \n"];
WriteString[abbrfile,"Conjugate[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"C] ^= " <> ToString[parametersFA[[i,1,1]]/.subFA]<>"; \n"];
WriteString[abbrfile,"Sq[A"<>ToString[parametersFA[[i,1,1]]/.subFA]<>"] ^= A" <> ToString[parametersFA[[i,1,1]]/.subFA]<>"2; \n"];
];
];
i++;
];

For[i=1,i<=Length[ListofAllMasses],
WriteString[abbrfile,"Sq["<>ToString[ListofAllMasses[[i]]]<>"[a___]] =" <>ToString[ListofAllMasses[[i]]]<>"2[a]; \n"];
i++;];
For[i=1,i<=Length[ListofAllMassesOne],
WriteString[abbrfile,"Sq["<>ToString[ListofAllMassesOne[[i]]]<>"] =" <>ToString[ListofAllMassesOne[[i]]]<>"2; \n"];
i++;];

WriteString[abbrfile,"Cos[ThetaW] ^= CW; \n"];
WriteString[abbrfile,"Sin[ThetaW] ^= SW; \n"];


WriteString[abbrfile,"A[x_]:=ToExpression[\"A\"<>ToString[InputForm[x]]]; \n \n \n "];

WriteString[abbrfile,"(* Dependences *) \n \n"];
WriteString[abbrfile,"Dependences = \n "];
WriteString[abbrfile, ToString[InputForm[subAlways /.subGreek]] <>"\n \n"];

WriteString[abbrfile,"DependencesOptional = \n "];
WriteString[abbrfile, ToString[InputForm[subDependences  /.subGreek]] <>"\n \n"];

WriteString[abbrfile,"DependencesNum = \n "];
WriteString[abbrfile, ToString[InputForm[subNumDependences /.subGreek]] <>"\n \n \n"];


WriteString[abbrfile,"(* Masses *) \n \n"];
WriteString[abbrfile,"MassesSARAH = { \n "];
For[i=1,i<=Length[massList],
WriteString[abbrfile,"Mass"<>ToString[massList[[i,1,1]]]<>"[generation_] ->" <>ToString[InputForm[massList[[i,2]] /. subGreek]]];
If[i==Length[massList],
WriteString[abbrfile, "\n"];,
WriteString[abbrfile, ", \n"];
];
i++;];
WriteString[abbrfile,"}; \n \n \n"];

WriteString[abbrfile,"(* NumericalValues *) \n \n"];
WriteString[abbrfile,"NumericalValues = \n "];
WriteString[abbrfile, ToString[InputForm[subNum  /.subGreek]] <>"\n \n \n"];


Close[outputfile];
Close[abbrfile];


];

CreateFACounterTerms:=Block[{i,j,Cterm,temp={},list},
For[i=1,i<=Length[parameters],
Cterm = ToExpression["d"<>StringReplace[ToString[parameters[[i,1]]],{"["->"","]"->""}]];
If[FreeQ[realVar,parameters[[i,1]]]==False, realVar = Join[realVar,{Cterm}];];
If[parameters[[i,3]]==={} || parameters[[i,3]]==={1},
temp = Join[temp,{parameters[[i,1]]-> parameters[[i,1]]+Cterm}];,
temp = Join[temp,{parameters[[i,1]][a___]-> parameters[[i,1]][a]+Cterm[a]}];
];
i++;];

list={F,S,V};

For[j=1,j<=Length[list],
For[i=1,i<=Length[PART[list[[j]]]],
Cterm= ToExpression["d"<>ToString[FAMass[PART[list[[j]]][[i,1]]]]];
realVar=Join[realVar,{Cterm}];
If[getGen[PART[list[[j]]][[i,1]]]>1,
temp=Join[temp,{FAMass[PART[list[[j]]][[i,1]]][a___]-> FAMass[PART[list[[j]]][[i,1]]][a] + Cterm [a] }];,
temp=Join[temp,{FAMass[PART[list[[j]]][[i,1]]]-> FAMass[PART[list[[j]]][[i,1]]] + Cterm  }];
];
i++;];
j++;];

Return[temp];
];




(* End[] *)
