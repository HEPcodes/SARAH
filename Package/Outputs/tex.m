(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)






Options[MakeTeX]={FeynmanDiagrams ->True, effectiveOperators->False, SixParticleInteractions->False, ShortForm->False, WriteSARAH->False, IncludeVertices->True};

MakeTeX[opt___ ]:=MakeTeXOutput[effectiveOperators/.{opt}/.Options[MakeTeX],SixParticleInteractions/.{opt}/.Options[MakeTeX],FeynmanDiagrams/.{opt}/.Options[MakeTeX],ShortForm/.{opt}/.Options[MakeTeX],WriteSARAH/.{opt}/.Options[MakeTeX], IncludeVertices/.{opt}/.Options[MakeTeX]];


MakeTeXOutput[effectiveOperators_,SixParticleInteractions_,FeynmanDiagrams_,Short_,WriteSARAH_, IncludeVert_]:=Block[{},

Print[StyleForm["Generate LaTeX files","Section"]];

If[FreeQ[NameOfStates,InitalizedVertexCalculaton]==True && IncludeVert==True,
Print["No Output initialized"];
Print["Run First ModelOutput[Eigenstates]"];
Print["No Output created!"];,

MAXTEXLENGTH=120;

WithDiagramm = FeynmanDiagrams;
CreateTeXForm;

If[FileExistsQ[$sarahCurrentTeXDir]=!=True,
CreateDirectory[$sarahCurrentTeXDir];
];
If[FileExistsQ[$sarahDiagrams]=!=True,
CreateDirectory[$sarahDiagrams];
];

FirstLevel=True;
WriteTeXBasis[WriteSARAH,effectiveOperators,SixParticleInteractions];
WriteSF;
WriteParticleList;
maxNumberSymbols=14;

WriteVEVDecomp;
WriteFlavorDecomp;

WriteMatrices;

WriteTadpoleEquations;

maxNumberSymbols=16;
If[RGEsCalculated===True,
WriteRGEs;,
Message[TeXOutput::NoRGEs];
];


If[FreeQ[NameOfStates,CalculatedLoopCorrections]==True,
Message[TeXOutput::NoLoops];,
MAXTEXLENGTH=125;
WriteSelfEnergy;
];

 WriteCG; 

MAXTEXLENGTH=110;

If[IncludeVert==True,
WriteVerticesTeX[effectiveOperators,SixParticleInteractions,Short];
];

If[WriteSARAH ==True,
TeXforSARAH;
];

Print[""];
Print["Done. Output is in ", $sarahCurrentTeXDir];
Print["Use Script MakePDF.sh (Linux) or MakePDF.bat (Windows) to generate pdf file."];
];

];



TeXOutput[x_]:=StringReplace[ToString[TeXForm[x /. conj[y_] y_ -> abs[y] ]],StringReplaceFinal];

TeXOutput2[x_]:=ToString[TeXForm[x /. conj[y_] y_ -> abs[y]]];
TeXOutputRGEs[x_]:=TeXOutput[x];

WriteRGEs :=Block[{},
RGEsFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"rges.tex"]];

Print["Writing RGEs to TeX-File"]; 

If[Length[Gij3I]>2,
GijW=Gij3I;
TraceAbbrW = TraceAbbr3I;
BetaYijkW = BetaYijk3I;
BetaMuijW = BetaMuij3I;
BetaLiW = BetaLi3I;
BetaTijkW = BetaTijk3I;
BetaBijW = BetaBij3I;
BetaLSiW = BetaLSi3I;
Betam2ijW = Betam2ij3I;
BetaMiW = BetaMi3I;
BetaFIiW = BetaFIi3I;
BetaDGiW = BetaDGi3I;
BetaGaugeW=BetaGauge3I;
BetaVEVW = BetaVEV3I;
BetaLijklW = BetaLijkl3I;,
GijW=Gij;
TraceAbbrW = TraceAbbr;
BetaLijklW = BetaLijkl;
BetaYijkW = BetaYijk;
BetaMuijW = BetaMuij;
BetaLiW = BetaLi;
BetaTijkW = BetaTijk;
BetaBijW = BetaBij;
BetaLSiW = BetaLSi;
Betam2ijW = Betam2ij;
BetaMiW = BetaMi;
BetaFIiW = BetaFIi;
BetaDGiW = BetaDGi;
BetaGaugeW=BetaGauge;
BetaVEVW = BetaVEV;
];

If[Length[Gij]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Anomalous Dimensions}\n"];,
WriteString[RGEsFile,"\\subsection{Anomalous Dimensions of scalars}\n"];
];
WriteTeXGammaFunction[GijW];
];

If[Length[BetaGauge]>0,
WriteString[RGEsFile,"\\subsection{Gauge Couplings}\n"];
WriteTeXBetaFunction[BetaGaugeW];
];

If[Length[BetaMi]>0,
WriteString[RGEsFile,"\\subsection{Gaugino Mass Parameters}\n"];
WriteTeXBetaFunction[BetaMiW];
];

If[Length[BetaLijkl]>0,
WriteString[RGEsFile,"\\subsection{Quartic scalar couplings}\n"];
WriteTeXBetaFunction[BetaLijklW];
];

If[Length[BetaYijk]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Trilinear Superpotential Parameters}\n"];,
WriteString[RGEsFile,"\\subsection{Yukawa Couplings}\n"];
];
WriteTeXBetaFunction[BetaYijkW];
];

If[Length[BetaMuij]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Bilinear Superpotential Parameters}\n"];,
WriteString[RGEsFile,"\\subsection{Fermion Mass Terms}\n"];
];
WriteTeXBetaFunction[BetaMuijW];
];

If[Length[BetaLi]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Linear Superpotential Parameters}\n"];,
WriteString[RGEsFile,"\\subsection{Tadpole Terms}\n"];
];
WriteTeXBetaFunction[BetaLiW];
];

If[Length[BetaTijk]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Trilinear Soft-Breaking Parameters}\n"];,
WriteString[RGEsFile,"\\subsection{Trilinear Scalar couplings}\n"];
];
WriteTeXBetaFunction[BetaTijkW];
];

If[Length[BetaBij]>0,
If[SupersymmetricModel===True,
WriteString[RGEsFile,"\\subsection{Bilinear Soft-Breaking Parameters}\n"];,
WriteString[RGEsFile,"\\subsection{Scalar Mass Terms}\n"];
];
WriteTeXBetaFunction[BetaBijW];
];

If[Length[BetaLSi]>0,
WriteString[RGEsFile,"\\subsection{Linear Soft-Breaking Parameters}\n"];
WriteTeXBetaFunction[BetaLSiW];
];

If[Length[BetaDGiW]>0,
WriteString[RGEsFile,"\\subsection{Fayet-Iliopoulos $D$-terms}\n"];
WriteTeXBetaFunction[BetaDGiW];
];

If[Length[BetaFIiW]>0,
WriteString[RGEsFile,"\\subsection{Fayet-Iliopoulos $D$-terms}\n"];
WriteTeXBetaFunction[BetaFIiW];
];

If[Length[Betam2ij]>0,
WriteString[RGEsFile,"\\subsection{Soft-Breaking Scalar Masses}\n"];

tempSpuren = Flatten[TraceAbbrW,1];
maxNumberSymbols=13;
WriteString[RGEsFile,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[tempSpuren],
WriteString[RGEsFile,TeXOutputRGEs[tempSpuren[[i,1]]]<>" & = "<> TeXOutputRGEs[tempSpuren[[i,2]]] ];
If[i< Length[tempSpuren],WriteString[RGEsFile,"\\\\ \n"];,WriteString[RGEsFile,"\n"]];
i++;];
WriteString[RGEsFile,"\\end{align} \n"];
maxNumberSymbols=16;
WriteTeXBetaFunction[Betam2ijW];
];

If[Length[BetaVEVW]>0,
WriteString[RGEsFile,"\\subsection{Vacuum expectation values}\n"];
WriteTeXBetaFunction[BetaVEVW];
];


Close[RGEsFile];
];

WriteTeXBetaFunction[list_]:=Block[{i,tempList},
tempList = list;

WriteString[RGEsFile,"{\\allowdisplaybreaks  \\begin{align} \n"];
clines=1;
For[i=1,i<=Length[tempList],
WriteString[RGEsFile,"\\beta_{"<>TeXOutputRGEs[tempList[[i,1]]/. a_[i1,i2]->a]<>"}^{(1)} & =  \n"];
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,2]]/. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a]];
WriteString[RGEsFile,"\\\\ \n"];
WriteString[RGEsFile,"\\beta_{"<>TeXOutputRGEs[tempList[[i,1]]/. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a]<>"}^{(2)} & =  \n"];
If[i<Length[tempList],
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,3]]/. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a] <>"\\\\ \n"];,
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,3]]/. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a] <>"\n"];
];
i++;];
WriteString[RGEsFile,"\\end{align}} \n"];
];

WriteTeXGammaFunction[list_]:=Block[{i,tempList},

tempList = list;

WriteString[RGEsFile,"{\\allowdisplaybreaks \\begin{align} \n"];
clines=1;
For[i=1,i<=Length[tempList],
If[getBlankSF[tempList[[i,1,1]]]===getBlankSF[tempList[[i,1,2]]],
WriteString[RGEsFile,"\\gamma_{"<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>"}^{(1)} & =  \n"];,
WriteString[RGEsFile,"\\gamma_{"<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>","<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,2]]]]]]<>"}^{(1)} & =  \n"];
];
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,2]] /. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a]];
WriteString[RGEsFile,"\\\\ \n"];
If[getBlankSF[tempList[[i,1,1]]]===getBlankSF[tempList[[i,1,2]]],
WriteString[RGEsFile,"\\gamma_{"<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>"}^{(2)} & =  \n"];,
WriteString[RGEsFile,"\\gamma_{"<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,1]]]]]]<>","<>TeXOutputRGEs[SF[getSF[getBlankSF[tempList[[i,1,2]]]]]]<>"}^{(2)} & =  \n"];
];
If[i<Length[tempList],
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,3]] /. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a] <>"\\\\ \n"];,
WriteString[RGEsFile,TeXOutputRGEs[tempList[[i,3]] /. Kronecker[i1,i2]->UnitM /. a_[i1,i2]->a] <>"\n"];

];
i++;];
 WriteString[RGEsFile,"\\end{align} } \n"];
];

WriteVerticesTeX[effectiveOperators_,SixParticleInteractions_,Short_] :=Block[{i},
Print["Writing Vertices to TeX-File"];

diaNr=0;
ShortFormVertex=Short;

VertexSSS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSS.tex"]];
VertexSSV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSV.tex"]];
VertexSVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSVV.tex"]];
VertexFFV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFV.tex"]];
VertexFFS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFS.tex"]];
VertexSSSS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSS.tex"]];
VertexSSVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSVV.tex"]];
VertexVVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesVVV.tex"]];
VertexVVVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesVVVV.tex"]];
VertexGGV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesGGV.tex"]];
VertexGGS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesGGS.tex"]];

If[ShortFormVertex===True,
clines=1;
WriteString[VertexSSS,"\\begin{align} \n"];
WriteString[VertexSSV,"\\begin{align} \n"];
WriteString[VertexSVV,"\\begin{align} \n"];
WriteString[VertexFFV,"\\begin{align} \n"];
WriteString[VertexFFS,"\\begin{align} \n"];
WriteString[VertexSSSS,"\\begin{align} \n"];
WriteString[VertexSSVV,"\\begin{align} \n"];
WriteString[VertexVVV,"\\begin{align} \n"];
WriteString[VertexVVVV,"\\begin{align} \n"];
WriteString[VertexGGV,"\\begin{align} \n"];
WriteString[VertexGGS,"\\begin{align} \n"];
];

If[effectiveOperators==True,
VertexFFFF = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFFF.tex"]];
VertexFFSS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFSS.tex"]];
VertexFFVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesFFVV.tex"]];

If[ShortFormVertex===True,
clines=1;
WriteString[VertexFFFF,"\\begin{align} \n"];
WriteString[VertexFFSS,"\\begin{align} \n"];
WriteString[VertexFFVV,"\\begin{align} \n"];
];

If[SixParticleInteractions==True,
VertexSSSSSS = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSSSS.tex"]];
VertexSSSSVV = OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSSSVV.tex"]];
VertexSSVVVV= OpenWrite[ToFileName[$sarahCurrentTeXDir,"VerticesSSVVVV.tex"]];
If[ShortFormVertex===True,
clines=1;
WriteString[VertexSSSSSS,"\\begin{align} \n"];
WriteString[VertexSSSSVV,"\\begin{align} \n"];
WriteString[VertexSSVVVV,"\\begin{align} \n"];
];
];
];



For[i=1,i<=Length[VertexListNonCC],
If[VertexListNonCC[[i,2]]=!=ASS,
WriteCurrentVertexTeX[VertexListNonCC[[i,1]],VertexListNonCC[[i,2]]];
];
i++;];


If[effectiveOperators==True,
If[ShortFormVertex===True,
WriteString[VertexFFFF,"\\end{align} \n"];
WriteString[VertexFFSS,"\\end{align} \n"];
WriteString[VertexFFVV,"\\end{align} \n"];
];
Close[VertexFFFF]; Close[VertexFFSS];Close[VertexFFVV]; 
If[SixParticleInteractions==True,
If[ShortFormVertex===True,
WriteString[VertexSSSSSS,"\\end{align} \n"];
WriteString[VertexSSSSVV,"\\end{align} \n"];
WriteString[VertexSSVVVV,"\\end{align} \n"];
];
Close[VertexSSSSSS]; Close[VertexSSSSVV]; Close[VertexSSVVVV];
];
];


If[ShortFormVertex===True,
WriteString[VertexSSS,"\\end{align} \n"];
WriteString[VertexSSV,"\\end{align} \n"];
WriteString[VertexSVV,"\\end{align} \n"];
WriteString[VertexFFV,"\\end{align} \n"];
WriteString[VertexFFS,"\\end{align} \n"];
WriteString[VertexSSSS,"\\end{align} \n"];
WriteString[VertexSSVV,"\\end{align} \n"];
WriteString[VertexVVV,"\\end{align} \n"];
WriteString[VertexVVVV,"\\end{align} \n"];
WriteString[VertexGGV,"\\end{align} \n"];
WriteString[VertexGGS,"\\end{align} \n"];
];


Close[VertexSSS]; Close[VertexSSV]; Close[VertexSVV];Close[VertexFFS]; Close[VertexFFV]; Close[VertexSSSS]; Close[VertexSSVV]; Close[VertexVVV]; Close[VertexVVVV]; Close[VertexGGV]; Close[VertexGGS];

];


WriteCurrentVertexTeX[res_,Type_] :=Block[{i},
Switch[Type,
SSS, outputfile = VertexSSS;
		TeXLineBreak=8;,
SSV, outputfile = VertexSSV;
		TeXLineBreak=3;,
GGS, outputfile = VertexGGS;
		TeXLineBreak=2;
		maxNumberSymbols=16;,
GGV, outputfile = VertexGGV;
		TeXLineBreak=3;
		maxNumberSymbols=16;,
SVV, outputfile = VertexSVV;
		TeXLineBreak=2;
		maxNumberSymbols=16;,
VVV, outputfile = VertexVVV;
		TeXLineBreak=3;,
FFV, 
		maxNumberSymbols=16;
		outputfile = VertexFFV;
		TeXLineBreak=3;,
FFS, 
		maxNumberSymbols=16;
		outputfile = VertexFFS;
		TeXLineBreak=2;,
SSSS, 
		outputfile = VertexSSSS;
		If[res[[1]]===conj[res[[1]]],maxNumberSymbols=16;];
		TeXLineBreak=3;,
SSVV, outputfile = VertexSSVV;
		TeXLineBreak=2;
		If[res[[1]]===conj[res[[1]]],maxNumberSymbols=15;,maxNumberSymbols=18;];,
VVVV, outputfile = VertexVVVV;
		TeXLineBreak=2;
                  maxNumberSymbols=16;,
FFFF, outputfile = VertexFFFF;
		TeXLineBreak=2;,
FFSS, outputfile = VertexFFSS;
		TeXLineBreak=2;,
FFVV, outputfile = VertexFFVV;
		TeXLineBreak=2;,
SSSSSS, outputfile = VertexSSSSSS;
		TeXLineBreak=2;,
SSSSVV, outputfile = VertexSSSSVV;
		TeXLineBreak=2;,
SSVVVV, outputfile = VertexSSVVVV;
		TeXLineBreak=2;
];

If[WithDiagramm ==True && ShortFormVertex==False,
temp = res;
numPart=Length[res[[1]]];

line=Table[0,{numPart}];
For[i=1,i<=numPart,
Switch[getType[temp[[1,i]]],
S,If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="dashes";,line[[i]]="scalar";];,
F,If[MemberQ[MajoranaPart,getBlank[temp[[1,i]]]]==True,line[[i]]="plain";,line[[i]]="fermion";];, 
V,If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="wiggly";,line[[i]]="boson";];,
G,If[conj[temp[[1,i]]]===temp[[1,i]],line[[i]]="dots";,line[[i]]="ghost";];
];
i++;]; 

WriteString[outputfile, "\\begin{center} \n"];
WriteString[outputfile,"\\begin{fmffile}{Diagrams/FeynDia"<>ToString[diaNr] <>"} \n"];
WriteString[outputfile,"\\fmfframe(20,20)(20,20){ \n"];
WriteString[outputfile,"\\begin{fmfgraph*}(75,75) \n"];
		
		Switch[numPart,
		3,
			WriteString[outputfile,"\\fmfleft{l1}\n"];
			WriteString[outputfile,"\\fmfright{r1,r2}\n"];,
		4,
			WriteString[outputfile,"\\fmfleft{l1,l2}\n"];
			WriteString[outputfile,"\\fmfright{r1,r2}\n"];,
		6,
			WriteString[outputfile,"\\fmfleft{l1,l2,l3}\n"];
			WriteString[outputfile,"\\fmfright{r1,r2,r3}\n"];
		];

If[Head[res[[1,1]]]===conj || Head[res[[1,1]]]===bar,
WriteString[outputfile,"\\fmf{"<>line[[1]]<>"}{v1,l1}\n"];,
WriteString[outputfile,"\\fmf{"<>line[[1]]<>"}{l1,v1}\n"];
];

If[Head[res[[1,2]]]===conj || Head[res[[1,2]]]===bar,
WriteString[outputfile,"\\fmf{"<>line[[2]]<>"}{v1,r1}\n"];,
WriteString[outputfile,"\\fmf{"<>line[[2]]<>"}{r1,v1}\n"];
];

If[Head[res[[1,3]]]===conj || Head[res[[1,3]]]===bar,
WriteString[outputfile,"\\fmf{"<>line[[3]]<>"}{v1,r2}\n"];,
WriteString[outputfile,"\\fmf{"<>line[[3]]<>"}{r2,v1}\n"];
];
		
If[numPart>3,
If[Head[res[[1,4]]]===conj || Head[res[[1,4]]]===bar,
WriteString[outputfile,"\\fmf{"<>line[[4]]<>"}{v1,l2}\n"];,
WriteString[outputfile,"\\fmf{"<>line[[4]]<>"}{l2,v1}\n"];
];
];
If[numPart>4,
	If[Head[res[[1,5]]]===conj || Head[res[[1,5]]]===bar,
			WriteString[outputfile,"\\fmf{"<>line[[5]]<>"}{v1,r3}\n"];,
			WriteString[outputfile,"\\fmf{"<>line[[5]]<>"}{r3,v1}\n"];
	];

	If[Head[res[[1,6]]]===conj || Head[res[[1,6]]]===bar,
			WriteString[outputfile,"\\fmf{"<>line[[6]]<>"}{v1,l3}\n"];,
			WriteString[outputfile,"\\fmf{"<>line[[6]]<>"}{l3,v1}\n"];
	];
];

WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,1]]]  <>"$}{l1}\n"];
WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,2]]]  <>"$}{r1}\n"];
WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,3]]]  <>"$}{r2}\n"];

If[numPart>3,WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,4]]]  <>"$}{l2}\n"];];
If[numPart>4,
		WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,5]]]  <>"$}{r3}\n"];
		WriteString[outputfile,"\\fmflabel{$"<>TeXOutput[temp[[1,6]]] <>"$}{l3}\n"];
	];

WriteString[outputfile,"\\end{fmfgraph*}} \n"];
WriteString[outputfile,"\\end{fmffile} \n"];

WriteString[outputfile, "\\end{center}  \n"];

diaNr++;,
particleString = "";
For[i=1,i<=Length[res[[1]]],
particleString = particleString <>TeXOutput[res[[1,i]]];
i++;];
If[ShortFormVertex==True,
If[StreamPosition[outputfile]>15,
WriteString[outputfile,"\\\\ \n"];
];
Switch[Type,
FFS,
WriteString[outputfile, "\\Gamma^L_{"<>particleString<>"}  =  & \\,\n"];,
FFV,
WriteString[outputfile, "\\Gamma^L_{"<>particleString<>"}  =  & \\,\n"];,
VVVV,
WriteString[outputfile, "\\Gamma^1_{"<>particleString<>"}  =  & \\,\n"];,
_,
WriteString[outputfile, "\\Gamma_{"<>particleString<>"}  = & \\, \n"];
];,
WriteString[outputfile, "\\paragraph*{Vertex for $"<>particleString<>"$} \n"];
];
];

If[ShortFormVertex==False,
clines=1;
WriteString[outputfile,"\\begin{align} \n &"];
];
For[i=2,i<=Length[res],
If[res[[i,1]]=!=0  || ShortFormVertex==True,
If[ShortFormVertex==True,
Switch[Type,
FFS,
      If[i!= 2, WriteString[outputfile,"\\\\ \n \\Gamma^R_{"<>particleString<>"}  =  & \\,"];];,
FFV,
       If[i!= 2, WriteString[outputfile,"\\\\ \n \\Gamma^R_{"<>particleString<>"}  =  & \\,"];];,
VVVV,
      If[i!= 2, WriteString[outputfile,"\\\\ \n \\Gamma^"<>ToString[i-1]<>"_{"<>particleString<>"}  =  & \\,"];];
];,
If[i!= 2, WriteString[outputfile,"\\\\ \n  & + \\,"];];
];
If[res[[i,2]]=!=1 && Head[res[[i,1]]]===Plus && ShortFormVertex!= True,
WriteString[outputfile,"\\Big("<>TeXOutput[res[[i,1]]]<>"\\Big)"];,
WriteString[outputfile,TeXOutput[res[[i,1]]]];
];

If[res[[i,2]]=!=1 && ShortFormVertex!= True,
WriteString[outputfile,"\\Big("<>TeXOutput[res[[i,2]]]<>"\\Big)"];
];
];
i++;
];

If[ShortFormVertex==False,
WriteString[outputfile,"\\end{align} \n"];,
WriteString[outputfile," \n"];
];

If[WithDiagramm ==True && ShortFormVertex!=True,
WriteString[outputfile,"\\hrule \n"];
];

maxNumberSymbols=22;


]; 





WriteTeXBasis[WriteSARAH_,effectiveOperators_,SixParticleInteractions_]:=Block[{m},

TeXFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,ModelName<>"-"<>ToString[modelName]<>".tex"]];


WriteString[TeXFile,"\\documentclass[A4]{article} \n"];
WriteString[TeXFile,"\\usepackage{amsmath}\n"];
WriteString[TeXFile,"\\usepackage[T1]{fontenc}\n"];
WriteString[TeXFile,"\\usepackage{amssymb}\n"];
WriteString[TeXFile,"\\usepackage{feynmp}\n"];
WriteString[TeXFile,"\\usepackage{hyperref}\n"];
WriteString[TeXFile,"\\usepackage{longtable}\n"];
WriteString[TeXFile,"\\DeclareGraphicsRule{*}{mps}{*}{}\n"];
WriteString[TeXFile,"\\graphicspath{{./Diagrams/}}\n"];
WriteString[TeXFile,"\\newcommand{\\Tr}{\\mbox{Tr}}\n"];

WriteString[TeXFile,"\\textwidth 18cm\n"];
WriteString[TeXFile,"\\oddsidemargin -1.0cm\n"];
WriteString[TeXFile,"\\evensidemargin -1.0cm\n"];

WriteString[TeXFile,"\\renewcommand{\\arraystretch}{1.3} \n"];
WriteString[TeXFile,"\\setlength{\\parindent}{0em} \n"];



WriteString[TeXFile,"\\begin{document}\n"];

If[SupersymmetricModel==False,
WriteString[TeXFile, "\\title{"<>ModelNameLaTeX <> "\\\\ Lagrangian, Rotations and Interactions for eigenstates {\\tt'"<> modelName<> "'} \\\\ "];,
WriteString[TeXFile, "\\title{"<>ModelNameLaTeX <> "\\\\ Superpotential, Rotations and Interactions for eigenstates {\\tt'"<> modelName<> "'} \\\\ "];
];


If[RGEsCalculated==True,
WriteString[TeXFile, "including Renormalization Group Equations \\\\ \n"];
];

If[FreeQ[NameOfStates,CalculatedLoopCorrections]==False,
WriteString[TeXFile, "including one-loop Self-Energies \\\\ \n"];
];

WriteString[TeXFile, "} \n"];


WriteString[TeXFile, "\\author{SARAH "<>SA`Version<>"} \n"];

WriteString[TeXFile," \\maketitle \n"];

WriteString[TeXFile," \\vspace{10cm} \n"];

WriteString[TeXFile, "This file was automatically generated by SARAH version "<>SA`Version<>".  \\\\ \n"];
WriteString[TeXFile, "References: {\\bf arXiv: 1309.7223 }, {\\bf Comput.Phys.Commun.184:1792-1809,2011 (1207.0906) }, {\\bf Comput.Phys.Commun.182:808-833,2011 (1002.0840) }, {\\bf Comput.Phys.Commun.181:1077-1086,2010 (0909.2863) }, {\\bf arXiv: 0806.0538 } \\\\ \n"];
WriteString[TeXFile, "Package Homepage: projects.hepforge.org/sarah/ \\\\ \n"];
WriteString[TeXFile, "by {\\bf Florian Staub, florian.staub@cern.ch} \n"];

WriteString[TeXFile," \\pagebreak \n"];

WriteString[TeXFile," \\tableofcontents \n"];

WriteString[TeXFile," \\pagebreak \n"];

WriteString[TeXFile," \\allowdisplaybreaks \n"];


WriteString[TeXFile,"\\input{SF}\n"];

If[RGEsCalculated===True,
WriteString[TeXFile,"\\section{Renormalization Group Equations}\n"];
WriteString[TeXFile,"\\input{rges} \n"];
];

WriteString[TeXFile,"\\section{Field Rotations}\n"];

For[m=2,m<=Length[NameOfStates],
WriteString[TeXFile,"\\input{RotationsGauge"<>ToString[NameOfStates[[m]]] <>"} \n"];
WriteString[TeXFile,"\\input{matricesScalars"<>ToString[NameOfStates[[m]]] <>"} \n"];
WriteString[TeXFile,"\\input{matricesFermions"<>ToString[NameOfStates[[m]]] <>"} \n"];
m++;];

WriteString[TeXFile,"\\section{Vacuum Expectation Values}\n"];
For[m=2,m<=Length[NameOfStates],
WriteString[TeXFile,"\\input{VEVs"<>ToString[NameOfStates[[m]]] <>"} \n"];
m++;];

If[FlavorTeXFilesNeeded==True,
WriteString[TeXFile,"\\section{Flavor decomposition}\n"];
For[m=1,m<=Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[m]]][Flavors]]===List,
WriteString[TeXFile,"\\input{Flavor"<>ToString[NameOfStates[[m]]] <>"} \n"];
];
m++;];
];


WriteString[TeXFile,"\\section{Tadpole Equations}\n"];
WriteString[TeXFile,"\\input{TadpoleEquations} \n"];

WriteString[TeXFile,"\\section{Particle content for eigenstates {\\tt '"<>ToString[modelName]<>"'}}\n"];
WriteString[TeXFile,"\\input{particles} \n"];


If[FreeQ[NameOfStates,CalculatedLoopCorrections]==False,
WriteString[TeXFile,"\\section{One Loop Self-Energy and One Loop Tadpoles for eigenstates {\\tt '"<>ToString[modelName]<>"'}}\n"];
WriteString[TeXFile,"\\subsection{One Loop Self-Energy}\n"];
WriteString[TeXFile,"\\input{SelfEnergy1Loop} \n"];
WriteString[TeXFile,"\\subsection{Tadpoles}\n"];
WriteString[TeXFile,"\\input{Tadpoles1Loop} \n"];
];

WriteString[TeXFile,"\\section{Interactions for eigenstates {\\tt '"<>ToString[modelName]<>"'}}\n"];
WriteString[TeXFile,"\\subsection{Three Scalar-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSS}\n"];
WriteString[TeXFile,"\\subsection{Two Scalar-One Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSV}\n"];
WriteString[TeXFile,"\\subsection{One Scalar-Two Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSVV}\n"];
WriteString[TeXFile,"\\subsection{Two Fermion-One Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesFFV}\n"];
WriteString[TeXFile,"\\subsection{Two Fermion-One Scalar Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesFFS}\n"];
WriteString[TeXFile,"\\subsection{Three Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesVVV}\n"];
WriteString[TeXFile,"\\subsection{Four Scalar-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSSS}\n"];
WriteString[TeXFile,"\\subsection{Two Scalar-Two Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSVV}\n"];
WriteString[TeXFile,"\\subsection{Four Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesVVVV}\n"];

WriteString[TeXFile,"\\subsection{Two Ghosts-One Vector Boson-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesGGV}\n"];
WriteString[TeXFile,"\\subsection{Two Ghosts-One Scalar-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesGGS}\n"];

If[effectiveOperators==True,
WriteString[TeXFile,"\\subsection{Four Fermion-Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesFFFF}\n"];
WriteString[TeXFile,"\\subsection{Two Fermion - Two Scalar -Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesFFSS}\n"];
WriteString[TeXFile,"\\subsection{Two Fermion - Two Vector Boson -Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesFFVV}\n"];
If[SixParticleInteractions==True,
WriteString[TeXFile,"\\subsection{Six Scalar -Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSSSSS}\n"];
WriteString[TeXFile,"\\subsection{Four Scalar - Two Vector Boson -Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSSSVV}\n"];
WriteString[TeXFile,"\\subsection{Two Scalar - Four Vector Boson -Interaction}\n"];
WriteString[TeXFile,"\\input{VerticesSSVVVV}\n"];
];
];

WriteString[TeXFile,"\\input{CG}\n"];

If[WriteSARAH==True,
WriteString[TeXFile,"\\input{SARAH}\n"];
];


WriteString[TeXFile,"\\end{document}\n"];

Close[TeXFile];


WriteMakeFile;

];


WriteMakeFile:=Block[{},
makeFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"MakePDF.sh"]];
WriteString[makeFile,"#!/bin/bash \n"];
WriteString[makeFile,"pdflatex "<>ModelName <>"-"<>ToString[modelName]<>".tex \n"];
WriteString[makeFile,"cd Diagrams \n"];
WriteString[makeFile,"find . -name \"*.mp\" -exec mpost {} \\; \n"]; 
WriteString[makeFile,"cd .. \n"];
WriteString[makeFile,"pdflatex "<>ModelName <>"-"<>ToString[modelName]<>".tex \n"];
WriteString[makeFile,"echo \"\" \n"];
WriteString[makeFile,"echo \"PDF for Model finished\" \n"];
WriteString[makeFile,"echo \"Thanks for using SARAH\" \n"];
WriteString[makeFile,"echo \"\" \n"];
Close[makeFile];


makeFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"MakePDF.bat"]];
WriteString[makeFile,"pdflatex "<>ModelName <>"-"<>ToString[modelName]<>".tex \n"];
WriteString[makeFile,"cd Diagrams \n"];
WriteString[makeFile,"FOR %%I IN (*.mp) DO MPOST \"%%I\" \n"]; 
WriteString[makeFile,"cd .. \n"];
WriteString[makeFile,"pdflatex "<>ModelName <>"-"<>ToString[modelName]<>".tex \n"];
Close[makeFile];


];


WriteParticleList:=Block[{},

Print["Writing Particle Content to TeX-File"];
ParticleFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"particles.tex"]];

WriteString[ParticleFile,"\\begin{center}\n"];
WriteString[ParticleFile,"\\begin{longtable}{lcccc}\n"];
WriteString[ParticleFile,"\\hline \\hline \n"];
WriteString[ParticleFile,"Name & Type & complex/real & Generations & Indices \\\\ \n"];
WriteString[ParticleFile,"\\hline \\hline \n"];

For[i=1,i<=Length[PART[S]],
WriteString[ParticleFile,"\\(" <> TeXName[PART[S][[i,1]]] <> "\\) & Scalar &"];
  If[PART[S][[i,4]]==True, WriteString[ParticleFile,"real"];, WriteString[ParticleFile,"complex"];];
WriteString[ParticleFile,"&" <> TeXOutput[PART[S][[i,2]]] <> "&" <> TeXOutput[PART[S][[i,3]]] <> "\\\\ \n "];
i++; 
];
WriteString[ParticleFile,"\\hline \n"];

For[i=1,i<=Length[PART[F]],
WriteString[ParticleFile,"\\(" <>TeXName[PART[F][[i,1]]]<> "\\) & Fermion &"];
	  If[PART[F][[i,4]]==True, WriteString[ParticleFile,"Majorana"];, WriteString[ParticleFile,"Dirac"];];
	WriteString[ParticleFile,"&" <>TeXOutput[PART[F][[i,2]]] <> "&" <> TeXOutput[PART[F][[i,3]]] <> "\\\\ \n "];
	i++; 
];
WriteString[ParticleFile,"\\hline \n"];

For[i=1,i<=Length[PART[V]],
WriteString[ParticleFile,"\\(" <>TeXName[PART[V][[i,1]]] <> "\\) & Vector &"];
	  If[PART[V][[i,4]]==True, WriteString[ParticleFile,"real"];, WriteString[ParticleFile,"complex"];];
	WriteString[ParticleFile,"&" <> TeXOutput[PART[V][[i,2]]] <> "&" <> TeXOutput[PART[V][[i,3]]] <> "\\\\ \n "];
	i++; 
];

For[i=1,i<=Length[PART[G]],
WriteString[ParticleFile,"\\(" <>TeXName[PART[G][[i,1]]] <> "\\) & Ghost &"];
	  If[PART[G][[i,4]]==True, WriteString[ParticleFile,"real"];, WriteString[ParticleFile,"complex"];];
	WriteString[ParticleFile,"&" <>TeXOutput[PART[G][[i,2]]] <> "&" <> TeXOutput[PART[G][[i,3]]] <> "\\\\ \n "];
	i++; 
];

WriteString[ParticleFile,"\\hline \\hline \n"];
WriteString[ParticleFile,"\\end{longtable}\n "];
WriteString[ParticleFile,"\\end{center}\n \n"];

Close[ParticleFile];
];


WriteSF:=Block[{i,j,k,sign,gf,temp},
If[SupersymmetricModel==False,
Print["Writing Fields and Lagrangian to TeX-File"];,
Print["Writing Superfields and Superpotential to TeX-File"];
];
SFFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SF.tex"]];


If[SupersymmetricModel==False,
WriteString[SFFile,"\\section{Fields} \n"];
WriteString[SFFile,"\\subsection{Gauge Fields} \n"];,
WriteString[SFFile,"\\section{Superfields} \n"];
WriteString[SFFile,"\\subsection{Vector Superfields} \n"];
];

WriteString[SFFile,"\\begin{center} \n"];
If[SupersymmetricModel==False,
WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|} \n"];,
WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|c|c|} \n"];
];
WriteString[SFFile,"\\hline \\hline \n"];
If[SupersymmetricModel==False,
WriteString[SFFile,"Name & \\(SU(N)\\) & Coupling & Name \\\\ \n "];,
WriteString[SFFile,"SF & Spin \\(\\frac{1}{2}\\) & Spin 1 & \\(SU(N)\\) & Coupling & Name \\\\ \n "];
];
WriteString[SFFile ,"\\hline \n"];

For[i=1,i<=Length[Gauge],
If[SupersymmetricModel==False,
WriteString[SFFile, "\\("<>TeXOutput[ToExpression["V"<>ToString[Gauge[[i,1]]]]] <>"\\) & \\("  <> TeXOutput2[Gauge[[i,2]]] <> "\\) & \\(" <> TeXOutput[Gauge[[i,4]]] <> "\\) &" <> TeXOutput[Gauge[[i,3]]] <> "\\\\ \n"];,
WriteString[SFFile, "\\("<>TeXOutput[SF[Gauge[[i,1]]]] <>"\\) & \\(" <> TeXOutput[ToExpression["f"<>ToString[Gauge[[i,1]]]]] <> "\\) & \\("  <> TeXOutput[ToExpression["V"<>ToString[Gauge[[i,1]]]]] <> "\\) & \\("  <> TeXOutput2[Gauge[[i,2]]] <> "\\) & \\(" <> TeXOutput[Gauge[[i,4]]] <> "\\) &" <> TeXOutput[Gauge[[i,3]]] <> "\\\\ \n"];
];
i++;];
WriteString[SFFile,"\\hline \\hline\n"];
WriteString[SFFile,"\\end{tabular} \n"];
WriteString[SFFile,"\\end{center} \n"];

If[SupersymmetricModel==False,
WriteString[SFFile,"\\subsection{Matter Superfields} \n"];,
WriteString[SFFile,"\\subsection{Chiral Superfields} \n"];
];


WriteString[SFFile,"\\begin{center} \n"];
If[SupersymmetricModel==False,
WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|c|} \n"];,
WriteString[SFFile,"\\begin{tabular}{|c|c|c|c|c|c|} \n"];
];
WriteString[SFFile,"\\hline \\hline \n"];
If[SupersymmetricModel==False,
WriteString[SFFile,"Name & Spin  &  Generations & \\(("];,
WriteString[SFFile,"SF & Spin 0 & Spin \\(\\frac{1}{2}\\) & Generations & \\(("];
];
For[i=1,i<=Length[Gauge],
If[i=!=Length[Gauge],
WriteString[SFFile,TeXOutput2[Gauge[[i,2]]]<>"\\otimes\, "];,
WriteString[SFFile,TeXOutput2[Gauge[[i,2]]]<>")\\) \\\\ \n"];
];
i++;];
WriteString[SFFile ,"\\hline \n"];

For[i=1,i<=Length[Fields],
If[SupersymmetricModel==False,
WriteString[SFFile, "\\("<>TeXOutput[Fields[[i,3]]] <>"\\) & \\(" <> If[(SFields[[i]] /. a_[{b__}]->a /. a_[{b__}]->a)===0,"\\frac{1}{2}","0"] <> "\\)  & "  <> TeXOutput[Fields[[i,2]]] <> " & \\(("];,
WriteString[SFFile, "\\("<>TeXOutput[SF[Fields[[i,3]]]] <>"\\) & \\(" <> TeXOutput[SFields[[i]] /. a_[{b__}]->a /. a_[{b__}]->a] <> "\\) & \\("  <> TeXOutput[FFields[[i]] /. a_[{b__}]->a /. a_[{b__}]->a] <> "\\) & "  <> TeXOutput[Fields[[i,2]]] <> " & \\(("];
];

For[j=1,j<=Length[Gauge],
If[Gauge[[j,2]]=!=U[1],
If[Fields[[i,j+3]]<0,
WriteString[SFFile,"{\\bf \\overline{"<>ToString[Abs[Fields[[i,j+3]]]]<>"}}"];,
WriteString[SFFile,"{\\bf "<>ToString[Fields[[i,j+3]]]<>"}"];
];,
If[Fields[[i,j+3]]===-1,
WriteString[SFFile,"-1"];,
WriteString[SFFile,TeXForm[Fields[[i,j+3]]]];
];
];
If[j<Length[Gauge],
WriteString[SFFile,","];,
WriteString[SFFile,") \\) \\\\ \n"];
];
j++;];
i++;];
WriteString[SFFile,"\\hline \\hline\n"];
WriteString[SFFile,"\\end{tabular} \n"];
WriteString[SFFile,"\\end{center} \n"];


If[Length[SuperPotential]>0,
WriteString[SFFile,"\\section{Superpotential and Lagrangian} \n"];
WriteString[SFFile,"\\subsection{Superpotential} \n"];
clines=1;
WriteString[SFFile,"\\begin{align} \n"];
If[Length[SuperPotential]>7, WriteString[SFFile,"\\nonumber "];];
WriteString[SFFile,"W = & \,  " ];
For[i=1,i<=Length[SuperPotential],
If[StringTake[TeXOutput[SuperPotential[[i,1,1]]],1]=!="-" && i=!=1,sign="+";,sign="";];
WriteString[SFFile,sign<>TeXOutput[SuperPotential[[i,1,1]]*SuperPotential[[i,1,2]]] <>"\,"];
For[j=1,j<=Length[SuperPotential[[i,2]]],
WriteString[SFFile,TeXOutput[SF[SuperPotential[[i,2,j]]]]<>"\,"];
j++;];
If[Length[SuperPotential]>7 && Mod[i,7] ==0,
WriteString[SFFile,"\\\\ \n & "];
];
i++;];
WriteString[SFFile,"\\end{align} \n"];


WriteString[SFFile,"\\subsection{Softbreaking terms} \n"];

WriteString[SFFile,"\\begin{align} \n"];
clines=1;
WriteString[SFFile,"- L_{SB,W} = \, & "<>TeXOutput[SoftW /. sum[a__]->1 /. subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3]] <>"+ \\mbox{h.c.} \\\\ \n"];
WriteString[SFFile,"- L_{SB,\\phi} = \, & "<>TeXOutput[SoftScalarMass /. sum[a__]->1 /. subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3]] <>"\\\\ \n"];
WriteString[SFFile,"- L_{SB,\\lambda} = \, & \\frac{1}{2}\\left("<>TeXOutput[SoftGauginoMass  /. sum[a__]->1 /. conj[x_]->0/.a_[1]->a /. a_[2] ->a /. subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3]] <>"+ \\mbox{h.c.} \\right) \n"];

If[AddDiracGauginos===True,
WriteString[SFFile,"\\\\ - L_{SB,DG} = \, &"<>TeXOutput[(Simplify[SoftDG]  /. sum[a__]->1  /. conj[x_]->0/.a_[1]->a /. a_[2] ->a /. subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3] )//. a_ Sig[b_,c_,d_]:>Sum[a Sigma[[b,c,d]],{b,1,3}]] <>" \n"];
];
WriteString[SFFile,"\\end{align} \n"];,
WriteString[SFFile,"\\section{Lagrangian} \n"];
];

For[i=1,i<=Length[NameOfStates],
If[Head[LagInput[NameOfStates[[i]]]]=!=LagInput,
WriteString[SFFile,"\\subsection{Input Lagrangian for Eigenstates "<>ToString[NameOfStates[[i]]]<>"} \n"];
WriteString[SFFile,"\\begin{align} \n"];
clines=1;
WriteString[SFFile,"L = \, & "<>TeXOutput[LagInput[NameOfStates[[i]]]/. sum[a__]->1 //. (c_ A_[{a__}][1] conj[B_[{b__}][2]] +c_ A_[{a__}][2] conj[B_[{b__}][1]] ):>c A[{a}] conj[B[{b}]]  /. subIndFinal[1,1] /. subIndFinal[2,2] /. subIndFinal[3,3] /. subIndFinal[4,4] ]<> "\n"];
WriteString[SFFile,"\\end{align} \n"];
];
i++;];
WriteString[SFFile,"\\subsection{Gauge fixing terms} \n"];

(*
For[i=1,i\[LessEqual]Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[i]]][GaugeFixing]]===List,
WriteString[SFFile,"\\subsubsection{Gauge fixing terms for eigenstates {\\tt '"<>ToString[NameOfStates[[i]]] <>"'} } \n"];
gf = DEFINITION[NameOfStates[[i]]][GaugeFixing];
WriteString[SFFile,"\\begin{align} \n"];
WriteString[SFFile,"L_{GF} = \, &"];
temp = Sum[gf[[j,2]] abs[gf[[j,1]]],{j,1,Length[gf]}];
WriteString[SFFile,TeXOutput[temp] <>"\n"];
WriteString[SFFile,"\\end{align} \n"];
];
i++;];
*)

For[i=1,i<=Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[i]]][GeneratedGaugeFixing]]===List,
WriteString[SFFile,"\\subsubsection{Gauge fixing terms for eigenstates {\\tt '"<>ToString[NameOfStates[[i]]] <>"'} } \n"];
gf = Simplify[CalcDelta[DEFINITION[NameOfStates[[i]]][GeneratedGaugeFixing]] /. subAlways];
WriteString[SFFile,"\\begin{align} \n"];
clines=1;
WriteString[SFFile,"L_{GF} = \, &"];
temp = Sum[gf[[j,2]] abs[gf[[j,1]]],{j,1,Length[gf]}]//. sum[a_,b_,c_] d_ -> sum[a,b,c,d];
WriteString[SFFile,TeXOutput[temp] <>"\n"];
WriteString[SFFile,"\\end{align} \n"];
];
i++;];

WriteString[SFFile,"\\subsection{Fields integrated out} \n"];

If[Length[RemovedFields ]===0,
WriteString[SFFile, "None \n"];,
WriteString[SFFile, "\\begin{enumerate} \n"];
For[i=1,i<=Length[RemovedFields],
If[FreeQ[Fields,RemovedFields[[i]]],
WriteString[SFFile, "\\item \\("<>TeXOutput[RemovedFields[[i]]] <>"\\) \n"];,
WriteString[SFFile, "\\item \\("<>TeXOutput[SF[RemovedFields[[i]]]] <>"\\) \n"];
];
i++;];
WriteString[SFFile, "\\end{enumerate} \n"];

];
Close[SFFile];
];


WriteVEVDecomp:=Block[{i,j,k,m,list,temp},
Print["Write VEVs to TeX-File"];

For[m=2,m<=Length[NameOfStates],


vevFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"VEVs"<>ToString[NameOfStates[[m]]] <>".tex"]];


If[Head[DEFINITION[NameOfStates[[m]]][VEVs]]===List,
list = DEFINITION[NameOfStates[[m]]][VEVs];
If[Length[NameOfStates]>2,
WriteString[vevFile,"\\subsection{VEVs for eigenstates {\\tt '"<>ToString[NameOfStates[[m]]]<>"' }} \n"];
];
WriteString[vevFile,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[list],
If[Length[list[[i,-1]]]===2,
WriteString[vevFile, TeXOutput[list[[i,1]]] <> " = & \, " <> TeXOutput[Sum[list[[i,j,1]]*list[[i,j,2]],{j,2,Length[list[[i]]]}]]];,
WriteString[vevFile, TeXOutput[list[[i,1]]] <> " = & \, e^{i"<>TeXOutput[list[[i,-1,1]]]<>"} \\left(" <> TeXOutput[Sum[list[[i,j,1]]*list[[i,j,2]],{j,2,4}]]<>"\\right)"];
];
If[i==Length[list], WriteString[vevFile,"\n"];,WriteString[vevFile,"\\\\ \n"];];
i++;];
WriteString[vevFile,"\\end{align} \n"];
];
Close[vevFile];
m++;];

];

WriteFlavorDecomp:=Block[{i,j,k,m,list,temp},
Print["Write Flavor Decomposition to TeX-File"];

For[m=1,m<=Length[NameOfStates],


vevFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"Flavor"<>ToString[NameOfStates[[m]]] <>".tex"]];


If[Head[DEFINITION[NameOfStates[[m]]][Flavors]]===List,
list = DEFINITION[NameOfStates[[m]]][Flavors];
If[Length[NameOfStates]>2,
WriteString[vevFile,"\\subsection{Flavor decomposition for eigenstates {\\tt '"<>ToString[NameOfStates[[m]]]<>"' }} \n"];
];
WriteString[vevFile,"\\begin{align} \n"];
clines=1;
FlavorTeXFilesNeeded=True;
For[i=1,i<=Length[list],
WriteString[vevFile, TeXOutput[list[[i,1]]] <> " \\rightarrow & \, " <> TeXOutput[Table[list[[i,2,j]],{j,1,Length[list[[i,2]]]}]]];
If[i==Length[list], WriteString[vevFile,"\n"];,WriteString[vevFile,"\\\\ \n"];];
i++;];
WriteString[vevFile,"\\end{align} \n"];
];
Close[vevFile];
m++;];

];



WriteMatrices:=Block[{i,j,k,m,MMatrizes,mixings,mixedNames,rotG,sign,mixES,n1,n2},

Print["Writing Mass Matrices to TeX-File"];



For[m=2,m<=Length[NameOfStates],
GaugeRot=OpenWrite[ToFileName[$sarahCurrentTeXDir,"RotationsGauge"<>ToString[NameOfStates[[m]]] <>".tex"]];
MatricesFermions=OpenWrite[ToFileName[$sarahCurrentTeXDir,"matricesFermions"<>ToString[NameOfStates[[m]]] <>".tex"]];
MatricesScalars=OpenWrite[ToFileName[$sarahCurrentTeXDir,"matricesScalars"<>ToString[NameOfStates[[m]]] <>".tex"]];


If[Head[DEFINITION[NameOfStates[[m]]][GaugeSectorOld]]===List,
WriteString[GaugeRot,"\\subsection{Rotations in gauge sector for eigenstates {\\tt '"<>ToString[NameOfStates[[m]]] <>"'} } \n"];
rotG=DEFINITION[NameOfStates[[m]]][GaugeSectorOld];
WriteString[GaugeRot,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[rotG],
For[j=2,j<=Length[rotG[[i]]],
WriteString[GaugeRot, TeXOutput[getFullOld[rotG[[i,1]]] /. subGC[1] /. gen1 -> rotG[[i,j,1]]  /. subIndFinal[1,1]] <>" = & \," ];
WriteString[GaugeRot,TeXOutput[Sum[rotG[[i,j,k,2]] (getFullOld[rotG[[i,j,k,1]]] /. subGC[1] /. subIndFinal[1,1]),{k,2,Length[rotG[[i,j]]]}]]];
If[j<Length[rotG[[i]]] || i < Length[rotG],
WriteString[GaugeRot,"\\\\ \n"];,
WriteString[GaugeRot,"\n"];
];
j++;];
i++;];
WriteString[GaugeRot,"\\end{align} \n"];
];

If[Head[DEFINITION[NameOfStates[[m]]][GaugeSector]]===List,
WriteString[GaugeRot,"\\subsection{Rotations in gauge sector for eigenstates {\\tt '"<>ToString[NameOfStates[[m]]] <>"'} } \n"];
rotG=DEFINITION[NameOfStates[[m]]][GaugeSector];
WriteString[GaugeRot,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[rotG],
WriteString[GaugeRot,"\\left(\\begin{array}{c} \n"];
For[j=1,j<=Length[rotG[[i,1]]],
WriteString[GaugeRot,TeXOutput[getFullOld[getBlank[rotG[[i,1,j]]]] /. subGC[1] /. gen1->ExtractInt[rotG[[i,1,j]]]  /. subIndFinal[1,1]]];
If[j!= Length[rotG[[i,1]]],WriteString[GaugeRot,"\\\\ \n"];,WriteString[GaugeRot,"\\end{array} \\right) \n"];];
j++;];
WriteString[GaugeRot, " = & \,"<>TeXOutput[rotG[[i,3]]]<>"\n" ];
WriteString[GaugeRot,"\\left(\\begin{array}{c} \n"];
For[j=1,j<=Length[rotG[[i,2]]],
WriteString[GaugeRot,TeXOutput[getFullOld[getBlank[rotG[[i,2,j]]]] /. subGC[1] /. gen1->ExtractInt[rotG[[i,2,j]]] /. subIndFinal[1,1]]];
If[j!= Length[rotG[[i,2]]],WriteString[GaugeRot,"\\\\ \n"];,WriteString[GaugeRot,"\\end{array} \\right) \\\\ \n"];];
j++;];
i++;];
WriteString[GaugeRot,"\\end{align} \n"];

WriteString[GaugeRot,"The mixing matrices are parametrized by \\\\ \n"];
WriteString[GaugeRot,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[rotG],
If[FreeQ[subAlways,rotG[[i,3]]]==False,
WriteString[GaugeRot, TeXOutput[rotG[[i,3]]] <>"= \, "];
WriteString[GaugeRot,"\\left( \n"];
WriteString[GaugeRot,"\\begin{array}{"<>Nest[StringJoin[#1,"c"]&,"",getDimParameters[rotG[[i,3]]][[1]]]<>"} \n"];

For[n1=1,n1<=getDimParameters[rotG[[i,3]]][[1]],
For[n2=1,n2<=getDimParameters[rotG[[i,3]]][[1]],
WriteString[GaugeRot,TeXOutput[rotG[[i,3]][n1,n2] /. subAlways]];
If[n2<getDimParameters[rotG[[i,3]]][[1]],WriteString[GaugeRot," & "];,
If[n1<getDimParameters[rotG[[i,3]]][[1]],WriteString[GaugeRot," \\\\ \n "];];
];
n2++;];
n1++;];

WriteString[GaugeRot,"\\end{array} \n"];
WriteString[GaugeRot,"\\right) \\\\ \n"];
];
i++;];
WriteString[GaugeRot,"\\end{align} \n"];
];


subTeXMM={sum[a_,b_,c_,conj[B_[a_,e_]]  A_[a_,f_]]->MatMul[Adj[B],A][e,f],sum[a_,b_,c_,conj[B_[e_,a_]]  A_[f_,a_]]->MatMul[conj[B],Tp[A]][e,f],sum[a_,b_,c_,B_[e_,a_]  A_[f_,a_]]->MatMul[B,Tp[A]][e,f],sum[a_,b_,c_,B_[a_,e_]  A_[a_,f_]]->MatMul[Tp[B],A][e,f], sum[a_,b_,c_,B_[e_,a_]  A_[a_,f_]]->MatMul[B,A][e,f],sum[a_,b_,c_,conj[B_[e_,a_] ] A_[a_,f_]]->MatMul[conj[B],A][e,f],sum[a_,b_,c_,B_[e_,a_]  conj[A_[a_,f_]]]->MatMul[B,conj[A]][e,f]};


WriteString[MatricesScalars,"\\subsection{Rotations in Mass sector for eigenstates {\\tt '"<>ToString[NameOfStates[[m]]] <>"'} } \n"];
WriteString[MatricesScalars,"\\subsubsection{Mass Matrices for Scalars}\n"];
WriteString[MatricesFermions,"\\subsubsection{Mass Matrices for Fermions}\n"];

MMatrizen=MassMatrices[NameOfStates[[m]]] /. a_ conj[x_] + a_ x_ ->2 a Re[x];
mixings=MixBasis[NameOfStates[[m]]];
mixedNames=MixMatrix[NameOfStates[[m]]];
mixES = MixES[NameOfStates[[m]]];



If[Head[MMatrizen]===List,

WriteString[MatricesScalars,"\\begin{itemize} \n"];
WriteString[MatricesFermions,"\\begin{itemize} \n"];

NoScalar=True;
NoFermion=True;
posMixES=1;

For[i=1,i<=Length[MMatrizen],
If[getTypeOld[mixings[[i,1,1]]]===S || getTypeOld[mixings[[i,1,1]]]===F,
If[TrueQ[getTypeOld[mixings[[i,1,1]]]===S],
outputfile = MatricesScalars;
NoScalar=False;,
outputfile=MatricesFermions;
NoFermion=False;]; 

If[Length[RE[mixedNames[[i,1]]]]==0,
WriteString[outputfile,"\\item {\\bf Mass matrix for " <>getDescriptionField[getParticleNameDirac[mixedNames[[i,1]]]] <>"}, Basis: \\( \\left(" ];,
WriteString[outputfile,"\\item {\\bf Mass matrix for " <>getDescriptionField[getParticleNameDirac[mixedNames[[i,1,1]]]] <>"}, Basis: \\( \\left(" ];
];
For[j=1,j<=Length[mixings[[i,1]]],
WriteString[outputfile,TeXOutput[getFullOld[mixings[[i,1,j]]] //. {generation,a__}->{a} //. A_[{generation}]->A /. subGC[j]/. subIndFinalX[j,j,"m"] ]];
If[j!= Length[mixings[[i,1]]],WriteString[outputfile,", "];];
j++;];

WriteString[outputfile,"\\right), \\left(" ];
For[j=1,j<=Length[mixings[[i,2]]],
WriteString[outputfile,TeXOutput[getFullOld[mixings[[i,2,j]]] //. {generation,a__}->{a} //. A_[{generation}]->A /. subGC[j]/. subIndFinalX[j,j,"n"]  ]];
If[j!= Length[mixings[[i,1]]],WriteString[outputfile,", "];];
j++;];
WriteString[outputfile,"\\right) \\) \n \n"];

WriteMatrixToTeX[mixings[[i]],mixedNames[[i]],MMatrizen[[i]],False];

(*


WriteString[outputfile,"\\begin{equation} \n"];
If[getTypeOld[mixings[[i,1,1]]]===F,
If[Length[RE[mixedNames[[i,1]]]]\[Equal]0,
WriteString[outputfile,"m_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<> "} = \\left( \n"];,
WriteString[outputfile,"m_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1,1]]]]<> "} = \\left( \n"];
];,
WriteString[outputfile,"m^2_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<> "} = \\left( \n"];
];
WriteString[outputfile,"\\begin{array}{"];

For[j=1,j\[LessEqual]Length[mixings[[i,1]]],
WriteString[outputfile,"c"];
j++;];
WriteString[outputfile,"}\n"];

listAbbrEntries = {};

subRealSum={

MatMul[A_,B_]+MatMul[conj[A_],conj[B_]]\[Rule]2Re[MatMul[A,B]],
MatMul[A_,conj[B_]]+MatMul[conj[A_],B_]\[Rule]2Re[MatMul[A,conj[B]]],
MatMul[A_,Tp[B_]]+MatMul[conj[A_],Adj[B_]]\[Rule]2Re[MatMul[A,Tp[B]]],
MatMul[A_,Adj[B_]]+MatMul[conj[A_],Tp[B_]]\[Rule]2Re[MatMul[A,Adj[B]]],
MatMul[conj[A_],Tp[B_]]+MatMul[A_,Adj[B_]]\[Rule]2Re[MatMul[conj[A],Tp[B]]],
MatMul[conj[A_],B_]+MatMul[A_,conj[B_]]\[Rule]2Re[MatMul[conj[A],B]],
MatMul[conj[A_],Adj[B_]]+MatMul[A_,Tp[B_]]\[Rule]2Re[MatMul[conj[A],Adj[B]]],
MatMul[Tp[A_],B_]+MatMul[Adj[A_],conj[B_]]\[Rule]2Re[MatMul[Tp[A],B]],
MatMul[Tp[A_],conj[B_]]+MatMul[Adj[A_],B_]\[Rule]2Re[MatMul[Tp[A],conj[B]]],
MatMul[Tp[A_],Tp[B_]]+MatMul[Adj[A_],Adj[B_]]\[Rule]2Re[MatMul[Tp[A],Tp[B]]],
MatMul[Tp[A_],Adj[B_]]+MatMul[Adj[A_],Tp[B_]]\[Rule]2Re[MatMul[Tp[A],Adj[B]]],
MatMul[Adj[A_],B_]+MatMul[Tp[A_],conj[B_]]\[Rule]2Re[MatMul[Adj[A],conj[B]]],
MatMul[Adj[A_],Tp[B_]]+MatMul[Tp[A_],Adj[B_]]\[Rule]2Re[MatMul[Adj[A],Tp[B]]],
MatMul[Adj[A_],conj[B_]]+MatMul[Tp[A_],B_]\[Rule]2Re[MatMul[Adj[A],conj[B]]],
a_ MatMul[A_,B_]+a_ MatMul[conj[A_],conj[B_]]\[Rule]2 a Re[MatMul[A,B]],
a_ MatMul[A_,conj[B_]]+a_ MatMul[conj[A_],B_]\[Rule]2a Re[MatMul[A,conj[B]]],
a_ MatMul[A_,Tp[B_]]+a_ MatMul[conj[A_],Adj[B_]]\[Rule]2a Re[MatMul[A,Tp[B]]],
a_ MatMul[A_,Adj[B_]]+a_ MatMul[conj[A_],Tp[B_]]\[Rule]2a Re[MatMul[A,Adj[B]]],
a_ MatMul[conj[A_],Tp[B_]]+a_ MatMul[A_,Adj[B_]]\[Rule]2a Re[MatMul[conj[A],Tp[B]]],
a_ MatMul[conj[A_],B_]+a_ MatMul[A_,conj[B_]]\[Rule]2a Re[MatMul[conj[A],B]],
a_ MatMul[conj[A_],Adj[B_]]+a_ MatMul[A_,Tp[B_]]\[Rule]2 a Re[MatMul[conj[A],Adj[B]]],
a_ MatMul[Tp[A_],B_]+a_ MatMul[Adj[A_],conj[B_]]\[Rule]2a Re[MatMul[Tp[A],B]],
a_ MatMul[Tp[A_],conj[B_]]+a_ MatMul[Adj[A_],B_]\[Rule]2 a Re[MatMul[Tp[A],conj[B]]],
a_ MatMul[Tp[A_],Tp[B_]]+a_ MatMul[Adj[A_],Adj[B_]]\[Rule]2a Re[MatMul[Tp[A],Tp[B]]],
a_ MatMul[Tp[A_],Adj[B_]]+a_ MatMul[Adj[A_],Tp[B_]]\[Rule]2a Re[MatMul[Tp[A],Adj[B]]],
a_ MatMul[Adj[A_],B_]+a_ MatMul[Tp[A_],conj[B_]]\[Rule]2 a Re[MatMul[Adj[A],conj[B]]],
a_ MatMul[Adj[A_],Tp[B_]]+a_ MatMul[Tp[A_],Adj[B_]]\[Rule]2 a Re[MatMul[Adj[A],Tp[B]]],
a_ MatMul[Adj[A_],conj[B_]]+a_ MatMul[Tp[A_],B_]\[Rule]2 a Re[MatMul[Adj[A],conj[B]]],


A_ *conj[B_]+conj[A_] B_ \[Rule] 2 Re[A conj[B]],
a_ A_ *conj[B_]+a_ conj[A_] B_ \[Rule] 2 a Re[A conj[B]],
 A_ *Adj[B_]+conj[A_] Tp[B_] \[Rule] 2 Re[A Adj[B]],
a_ A_ *Adj[B_]+a_ conj[A_] Tp[B_] \[Rule] 2 a  Re[A Adj[B]],
 A_ *Tp[B_]+conj[A_] Adj[B_] \[Rule] 2 Re[A Tp[B]],
a_ A_ *Tp[B_]+a_ conj[A_] Adj[B_] \[Rule] 2 a  Re[A Tp[B]]

};


For[j=1,j\[LessEqual] Length[mixings[[i,1]]],
For[k=1,k\[LessEqual] Length[mixings[[i,1]]],
value = FullSimplify[MMatrizen[[i,j,k]] /. ThetaStep[a___]\[Rule]1] //. subTeXMM //. Delta[ToExpression["gm"<>ToString[k]],ToExpression["gn"<>ToString[j]]]\[Rule]UnitM //. A_[ToExpression["gm"<>ToString[j]],ToExpression["gn"<>ToString[k]]]\[Rule] A //. A_[ToExpression["gn"<>ToString[k]],ToExpression["gm"<>ToString[j]]]\[Rule]Tp[A] //. Conj\[Rule]conj //. a_ conj[x_] + a_ x_ \[Rule]2 a Re[x] //. a_ x_ + a_ conj[x_] \[Rule]2 a Re[x] //. conj[x_] +  x_ \[Rule]2 Re[x]//. x_ + conj[x_]\[Rule] 2 Re[x] //. conj[x_]x_ \[Rule] abs[x] //. x_ conj[x_]\[Rule]abs[x] //. conj[Tp[x_]]\[Rule]Adj[x] //. Tp[conj[x_]]\[Rule]Adj[x] //. conj[Adj[x_]]\[Rule]Tp[x] //. Adj[conj[x_]]\[Rule]Tp[x] //.(a_-b_)(a_+b_)\[Rule](a^2-b^2) //. subRealSum //.RXl[_]\[Rule]0;
 If[getLaTeXlength[value]*Length[mixings[[i,1]]] < 100, 
WriteString[outputfile,TeXOutput[value]];,
If[Length[mixedNames[[i,1]]]\[Equal]0 && j<k,
If[getTypeOld[mixings[[i,1,1]]]===S,
If[conj[mixings[[i,1,1]]]===mixings[[i,1,1]],
If[getGenALL[mixings[[i,1,1]]]===1,
WriteString[outputfile,"m_{"<>ToString[k] <> ToString[j] <> "}"];,
WriteString[outputfile,"m^T_{"<>ToString[k] <> ToString[j] <> "}"];
];,
If[getGenALL[mixings[[i,1,1]]]===1,
WriteString[outputfile,"m^*_{"<>ToString[k] <> ToString[j] <> "}"];,
WriteString[outputfile,"m^\\dagger_{"<>ToString[k] <> ToString[j] <> "}"];
];
];,
WriteString[outputfile,"m_{"<>ToString[k] <> ToString[j] <> "}"];
];,
WriteString[outputfile,"m_{"<>ToString[j] <> ToString[k] <> "}"];
listAbbrEntries = Join[listAbbrEntries,{{"m_{"<>ToString[j] <> ToString[k] <> "}",value}}];
];
];
If[k\[Equal]Length[mixings[[i,1]]],
If[j\[NotEqual] Length[mixings[[i,1]]],
WriteString[outputfile,"\\\\ \n"];
];,
WriteString[outputfile," &"];
];
k++;];
j++;];
WriteString[outputfile,"\\end{array} \n"];
WriteString[outputfile,"\\right) "];
If[FreeQ[MMatrizen[[i]],RXi]\[Equal]False,
rxis=Intersection[Select[MMatrizen[[i]],((Head[#]===RXi)&),10];];
For[j=1,j\[LessEqual]Length[rxis],
WriteString[outputfile,"+  "<>TeXOutput[rxis[[j]]]<>"m^2("<>TeXOuptut[rxis[[j,1]]]<>") "];
j++;];
];
WriteString[outputfile,"\\right) \n"];
WriteString[outputfile,"\\end{equation} \n"];


 If[Length[listAbbrEntries]>0,
WriteString[outputfile,"\\begin{align} \n"];
For[j=1,j\[LessEqual]Length[listAbbrEntries],
If[j<Length[listAbbrEntries],
WriteString[outputfile, listAbbrEntries[[j,1]]<>" &= " <> TeXOutput[listAbbrEntries[[j,2]]] <> "\\\\ \n"];,
WriteString[outputfile, listAbbrEntries[[j,1]]<>" &= " <> TeXOutput[listAbbrEntries[[j,2]]] <> "\n"];
];
j++;];
WriteString[outputfile,"\\end{align} \n"];
];
*)

If[Length[RE[mixedNames[[i,1]]]]==0,
WriteString[outputfile,"This matrix is diagonalized by \\("<>TeXOutput[mixedNames[[i,2]]] <>"\\): \n"];
WriteString[outputfile,"\\begin{equation} \n"];
If[getType[mixedNames[[i,1]]]===F,
WriteString[outputfile,TeXOutput[conj[mixedNames[[i,2]]]]<>" m_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} "<>TeXOutput[Adj[mixedNames[[i,2]]]]<>" = m^{dia}_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} \n"];,
WriteString[outputfile,TeXOutput[mixedNames[[i,2]]]<>" m^2_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} "<>TeXOutput[Adj[mixedNames[[i,2]]]]<>" = m^{dia}_{2,"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1]]]]<>"} \n"];
];
WriteString[outputfile,"\\end{equation} \n"];
WriteString[outputfile,"with \n"];

WriteString[outputfile,"\\begin{align} \n"];
clines=1;
start =1;
For[j=1,j<=Length[mixES[[posMixES,1]]],
ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
If[ende === start, subS={gt1->ende};, subS={}; ];
sumS = "\\sum_{j}";
If[Head[mixES[[posMixES,1,j]]]===conj,
WriteString[outputfile, TeXOutput[getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS <>TeXOutput[mixES[[posMixES,2,2]][gt2,gt1] /. subS]  <>TeXOutput[conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[2] /. DeleteCases[subREfinal[2,1],gen2->x_]/.subIndFinal[2,2]  /.subIndFinal[1,1] /. subS]]];,

WriteString[outputfile,TeXOutput[getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS<>TeXOutput[conj[mixES[[posMixES,2,2]][gt2,gt1]] /. subS] <>TeXOutput[getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. DeleteCases[subREfinal[2,1],gen2->x_] /.subIndFinal[2,2] /.subIndFinal[1,1]  /. subS]];
];
If[j<Length[mixES[[posMixES,1]]],
If[Mod[j,3]===0,
WriteString[outputfile,"\\\\ \n"];,
WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
];,
WriteString[outputfile,"\n"];];
start = ende+1;
j++;];
WriteString[outputfile,"\\end{align} \n"];

If[FreeQ[Table[subAlways[[mm,1]],{mm,1,Length[subAlways]}],mixES[[posMixES,2,2]]]==False,
WriteString[outputfile,"The mixing matrix can be parametrized by \n"];

WriteString[outputfile,"\\begin{equation} \n"];
WriteString[outputfile,TeXOutput[mixES[[posMixES,2,2]]]<> "= \, "];
WriteString[outputfile,"\\left( \n"];
WriteString[outputfile,"\\begin{array}{"<>Nest[StringJoin[#1,"c"]&,"",getDim[mixES[[posMixES,2,2]]]]<>"} \n"];
For[n1=1,n1<=getDim[mixES[[posMixES,2,2]]],
For[n2=1,n2<=getDim[mixES[[posMixES,2,2]]],
WriteString[outputfile,TeXOutput[mixES[[posMixES,2,2]][n1,n2] /. subAlways]];
If[n2<getDim[mixES[[posMixES,2,2]]],WriteString[outputfile," & "];,
If[n1<getDim[mixES[[posMixES,2,2]]],WriteString[outputfile," \\\\ \n "];];
];
n2++;];
n1++;];
WriteString[outputfile,"\\end{array} \n"];
WriteString[outputfile,"\\right) \n"];
WriteString[outputfile,"\\end{equation} \n"];
];


posMixES++;,
WriteString[outputfile,"This matrix is diagonalized by \\("<>TeXOutput[mixedNames[[i,1,2]]] <>"\\) and \\("<>TeXOutput[mixedNames[[i,2,2]]] <>"\\) \n"];
WriteString[outputfile,"\\begin{equation} \n"];
WriteString[outputfile,TeXOutput[conj[mixedNames[[i,1,2]]]]<>" m_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1,1]]]]<>"} "<>TeXOutput[Adj[mixedNames[[i,2,2]]]]<>" = m^{dia}_{"<>TeXOutput[getParticleNameDirac[mixedNames[[i,1,1]]]]<>"} \n"];
WriteString[outputfile,"\\end{equation} \n"];


WriteString[outputfile,"with \n"];

WriteString[outputfile,"\\begin{align} \n"];
clines=1;
start =1;
For[j=1,j<=Length[mixES[[posMixES,1]]],
ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
If[ende === start, subS={gt1->ende};, subS={}; ];
sumS = "\\sum_{t_2}";
If[Head[mixES[[posMixES,1,j]]]===conj,
WriteString[outputfile,TeXOutput[getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS<>TeXOutput[mixES[[posMixES,2,2]][gt2,gt1] /. subS]  <>TeXOutput[conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[2] /.DeleteCases[subREfinal[2,1],gen2->x_] /.subIndFinal[2,2]/.subIndFinal[1,1]  /.subS]]];,
WriteString[outputfile,TeXOutput[getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS <>TeXOutput[conj[mixES[[posMixES,2,2]][gt2,gt1]] /. subS]  <>TeXOutput[getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. DeleteCases[subREfinal[2,1],gen2->x_] /.subIndFinal[2,2]/.subIndFinal[1,1]  /.subS]];
];
If[Mod[j,3]===0 || j===Length[mixES[[posMixES,1]]],
WriteString[outputfile,"\\\\ \n"];,
WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
];
start = ende+1;
j++;];
posMixES++;
start =1;
For[j=1,j<=Length[mixES[[posMixES,1]]],
ende = start-1+getGenALL[mixES[[posMixES,1,j]]];
If[ende === start, subS={gt1->ende};, subS={}; ];
sumS = "\\sum_{t_2}";
If[Head[mixES[[posMixES,1,j]]]===conj,
WriteString[outputfile,TeXOutput[getFullOld[conj[mixES[[posMixES,1,j]]]]/.subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS <>TeXOutput[mixES[[posMixES,2,2]][gt1,gt2] /. subS] <>TeXOutput[conj[getFullOld[mixES[[posMixES,2,1]]]/.subGC[2] /. DeleteCases[subREfinal[2,1],gen2->x_] /.subIndFinal[2,2] /.subIndFinal[1,1]  /. subS]]];,

WriteString[outputfile,TeXOutput[getFullOld[mixES[[posMixES,1,j]]]/. subGC[1] /. subIndFinal[1,1]]<> " = "<> sumS<>TeXOutput[conj[mixES[[posMixES,2,2]][gt1,gt2] /. subS]] <>TeXOutput[getFullOld[mixES[[posMixES,2,1]]] /.subGC[2] /. DeleteCases[subREfinal[2,1],gen2->x_]/.subIndFinal[2,2]/.subIndFinal[1,1]  /. subS]];
];
If[j<Length[mixES[[posMixES,1]]],
If[Mod[j,3]===0 || j===Length[mixES[[posMixES,1]]],
WriteString[outputfile,"\\\\ \n"];,
WriteString[outputfile,"\\,, \\hspace{1cm} \n"];
];,
WriteString[outputfile,"\n"];];
start = ende+1;
j++;];

WriteString[outputfile,"\\end{align} \n"];
posMixES++;

];,
posMixES++;
];
i++;];

If[NoScalar==True,
WriteString[MatricesScalars,"\\item No Scalar Mixings \n"];
];

If[NoFermion==True,
WriteString[MatricesFermions,"\\item No Fermion Mixings \n"];
];

WriteString[MatricesScalars,"\\end{itemize} \n"];
WriteString[MatricesFermions,"\\end{itemize} \n"];

];

Close[MatricesFermions];
Close[MatricesScalars];
Close[GaugeRot];

m++;];




];

WriteMatrixToTeX[mixIN_,mixedIN_,matIN_,RXiIN_]:=Block[{i,j,k,rxis},

WriteString[outputfile,"\\begin{equation} \n"];
If[getTypeOld[mixIN[[1,1]]]===F,
If[Length[RE[mixedIN[[1]]]]==0,
WriteString[outputfile,"m_{"<>TeXOutput[getParticleNameDirac[mixedIN[[1]]]]<> "} = \\left( \n"];,
WriteString[outputfile,"m_{"<>TeXOutput[getParticleNameDirac[mixedIN[[1,1]]]]<> "} = \\left( \n"];
];,
If[RXiIN===False,
WriteString[outputfile,"m^2_{"<>TeXOutput[getParticleNameDirac[mixedIN[[1]]]]<> "} = \\left( \n"];,
WriteString[outputfile,"m^2 ("<>TeXOutput[RXiIN]<> ") = \\left( \n"];
];
];
WriteString[outputfile,"\\begin{array}{"];

For[j=1,j<=Length[mixIN[[1]]],
WriteString[outputfile,"c"];
j++;];
WriteString[outputfile,"}\n"];

listAbbrEntries = {};

subRealSum={

MatMul[A_,B_]+MatMul[conj[A_],conj[B_]]->2Re[MatMul[A,B]],
MatMul[A_,conj[B_]]+MatMul[conj[A_],B_]->2Re[MatMul[A,conj[B]]],
MatMul[A_,Tp[B_]]+MatMul[conj[A_],Adj[B_]]->2Re[MatMul[A,Tp[B]]],
MatMul[A_,Adj[B_]]+MatMul[conj[A_],Tp[B_]]->2Re[MatMul[A,Adj[B]]],
MatMul[conj[A_],Tp[B_]]+MatMul[A_,Adj[B_]]->2Re[MatMul[conj[A],Tp[B]]],
MatMul[conj[A_],B_]+MatMul[A_,conj[B_]]->2Re[MatMul[conj[A],B]],
MatMul[conj[A_],Adj[B_]]+MatMul[A_,Tp[B_]]->2Re[MatMul[conj[A],Adj[B]]],
MatMul[Tp[A_],B_]+MatMul[Adj[A_],conj[B_]]->2Re[MatMul[Tp[A],B]],
MatMul[Tp[A_],conj[B_]]+MatMul[Adj[A_],B_]->2Re[MatMul[Tp[A],conj[B]]],
MatMul[Tp[A_],Tp[B_]]+MatMul[Adj[A_],Adj[B_]]->2Re[MatMul[Tp[A],Tp[B]]],
MatMul[Tp[A_],Adj[B_]]+MatMul[Adj[A_],Tp[B_]]->2Re[MatMul[Tp[A],Adj[B]]],
MatMul[Adj[A_],B_]+MatMul[Tp[A_],conj[B_]]->2Re[MatMul[Adj[A],conj[B]]],
MatMul[Adj[A_],Tp[B_]]+MatMul[Tp[A_],Adj[B_]]->2Re[MatMul[Adj[A],Tp[B]]],
MatMul[Adj[A_],conj[B_]]+MatMul[Tp[A_],B_]->2Re[MatMul[Adj[A],conj[B]]],
a_ MatMul[A_,B_]+a_ MatMul[conj[A_],conj[B_]]->2 a Re[MatMul[A,B]],
a_ MatMul[A_,conj[B_]]+a_ MatMul[conj[A_],B_]->2a Re[MatMul[A,conj[B]]],
a_ MatMul[A_,Tp[B_]]+a_ MatMul[conj[A_],Adj[B_]]->2a Re[MatMul[A,Tp[B]]],
a_ MatMul[A_,Adj[B_]]+a_ MatMul[conj[A_],Tp[B_]]->2a Re[MatMul[A,Adj[B]]],
a_ MatMul[conj[A_],Tp[B_]]+a_ MatMul[A_,Adj[B_]]->2a Re[MatMul[conj[A],Tp[B]]],
a_ MatMul[conj[A_],B_]+a_ MatMul[A_,conj[B_]]->2a Re[MatMul[conj[A],B]],
a_ MatMul[conj[A_],Adj[B_]]+a_ MatMul[A_,Tp[B_]]->2 a Re[MatMul[conj[A],Adj[B]]],
a_ MatMul[Tp[A_],B_]+a_ MatMul[Adj[A_],conj[B_]]->2a Re[MatMul[Tp[A],B]],
a_ MatMul[Tp[A_],conj[B_]]+a_ MatMul[Adj[A_],B_]->2 a Re[MatMul[Tp[A],conj[B]]],
a_ MatMul[Tp[A_],Tp[B_]]+a_ MatMul[Adj[A_],Adj[B_]]->2a Re[MatMul[Tp[A],Tp[B]]],
a_ MatMul[Tp[A_],Adj[B_]]+a_ MatMul[Adj[A_],Tp[B_]]->2a Re[MatMul[Tp[A],Adj[B]]],
a_ MatMul[Adj[A_],B_]+a_ MatMul[Tp[A_],conj[B_]]->2 a Re[MatMul[Adj[A],conj[B]]],
a_ MatMul[Adj[A_],Tp[B_]]+a_ MatMul[Tp[A_],Adj[B_]]->2 a Re[MatMul[Adj[A],Tp[B]]],
a_ MatMul[Adj[A_],conj[B_]]+a_ MatMul[Tp[A_],B_]->2 a Re[MatMul[Adj[A],conj[B]]],


A_ *conj[B_]+conj[A_] B_ -> 2 Re[A conj[B]],
a_ A_ *conj[B_]+a_ conj[A_] B_ -> 2 a Re[A conj[B]],
 A_ *Adj[B_]+conj[A_] Tp[B_] -> 2 Re[A Adj[B]],
a_ A_ *Adj[B_]+a_ conj[A_] Tp[B_] -> 2 a  Re[A Adj[B]],
 A_ *Tp[B_]+conj[A_] Adj[B_] -> 2 Re[A Tp[B]],
a_ A_ *Tp[B_]+a_ conj[A_] Adj[B_] -> 2 a  Re[A Tp[B]]

};


For[j=1,j<= Length[mixIN[[1]]],
For[k=1,k<= Length[mixIN[[1]]],
value = TeXSimplify[matIN[[j,k]] /. ThetaStep[a___]->1] //. subTeXMM //. Delta[ToExpression["gm"<>ToString[k]],ToExpression["gn"<>ToString[j]]]->UnitM //. A_[ToExpression["gm"<>ToString[j]],ToExpression["gn"<>ToString[k]]]-> A //. A_[ToExpression["gn"<>ToString[k]],ToExpression["gm"<>ToString[j]]]->Tp[A] //. Conj->conj //. a_ conj[x_] + a_ x_ ->2 a Re[x] //. a_ x_ + a_ conj[x_] ->2 a Re[x] //. conj[x_] +  x_ ->2 Re[x]//. x_ + conj[x_]-> 2 Re[x] //. conj[x_]x_ -> abs[x] //. x_ conj[x_]->abs[x] //. conj[Tp[x_]]->Adj[x] //. Tp[conj[x_]]->Adj[x] //. conj[Adj[x_]]->Tp[x] //. Adj[conj[x_]]->Tp[x] //.(a_-b_)(a_+b_)->(a^2-b^2) //. subRealSum //.RXi[_]->0 ;
 If[getLaTeXlength[value]*Length[mixIN[[1]]] < 100, 
WriteString[outputfile,TeXOutput[value]];,
If[Length[mixedIN[[1]]]==0 && j<k,
If[getTypeOld[mixIN[[1,1]]]===S,
If[conj[mixIN[[1,1]]]===mixIN[[1,1]],
If[getGenALL[mixIN[[1,1]]]===1,
(* WriteString[outputfile,"m_{"<>ToString[k] <> ToString[j] <> "}"];,
WriteString[outputfile,"m^T_{"<>ToString[k] <> ToString[j] <> "}"]; *)
WriteString[outputfile,"m_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]  <> "}"];,
WriteString[outputfile,"m^T_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]  <> "}"];
];,
If[getGenALL[mixIN[[1,1]]]===1,
WriteString[outputfile,"m^*_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]   <> "}"];,
WriteString[outputfile,"m^\\dagger_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]   <> "}"];
];
];,
WriteString[outputfile,"m_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]   <> "}"];
];,
WriteString[outputfile,"m_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]  <> "}"];
listAbbrEntries = Join[listAbbrEntries,{{"m_{"<>TeXOutput[mixIN[[1,k]]] <> TeXOutput[mixIN[[2,j]]]  <> "}",value}}];
];
];
If[k==Length[mixIN[[1]]],
If[j!= Length[mixIN[[1]]],
WriteString[outputfile,"\\\\ \n"];
];,
WriteString[outputfile," &"];
];
k++;];
j++;];
WriteString[outputfile,"\\end{array} \n"];
WriteString[outputfile,"\\right) "];
If[FreeQ[matIN,RXi]==False,
rxis=Intersection[Cases[matIN,x_RXi,10]];
For[j=1,j<=Length[rxis],
WriteString[outputfile,"+  "<>TeXOutput[rxis[[j]]]<>"m^2("<>TeXOutput[ToExpression["V"<>ToString[rxis[[j,1]]]]]<>") "];
j++;];
];
(* WriteString[outputfile,"\\right) \n"]; *)
WriteString[outputfile,"\n \\end{equation} \n"];


 If[Length[listAbbrEntries]>0,
WriteString[outputfile,"\\begin{align} \n"];
clines=1;
For[j=1,j<=Length[listAbbrEntries],
If[j<Length[listAbbrEntries],
WriteString[outputfile, listAbbrEntries[[j,1]]<>" &= " <> TeXOutput[listAbbrEntries[[j,2]]] <> "\\\\ \n"];,
WriteString[outputfile, listAbbrEntries[[j,1]]<>" &= " <> TeXOutput[listAbbrEntries[[j,2]]] <> "\n"];
];
j++;];
WriteString[outputfile,"\\end{align} \n"];
];

If[Length[rxis]>0,
WriteString[outputfile,"Gauge fixing contributions: \n"];
];
For[j=1,j<=Length[rxis],
WriteMatrixToTeX[mixIN,mixedIN,D[matIN,rxis[[j]]]  //.RXi[_]->0,rxis[[j]]];
j++;];

];



WriteSelfEnergy:=Block[{i,j,k},
Print["Writing One Loop Tadpoles to TeX-File"];

SelfE=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SelfEnergy1Loop.tex"]];
Tad1L=OpenWrite[ToFileName[$sarahCurrentTeXDir,"Tadpoles1Loop.tex"]];


For[i=1,i<=Length[TadpolesLoop],
WriteString[Tad1L,"\\begin{align} \n"];
WriteString[Tad1L, "\\delta t^{(1)}_{"<>TeXOutput[TadpolesLoop[[i,1]]] <>"} = & \, "<>TeXOutput[TadpolesLoop[[i,2]]] <> " \n"];
WriteString[Tad1L,"\\end{align} \n"];
i++;];

Close[Tad1L]; 

Print["Writing One Loop Self Energy to TeX-File"];


WriteString[SelfE,"\\begin{itemize} \n"];


For[i=1,i<=Length[SelfEnergy],
(*
If[Length[mixedNames[[i,1]]]\[Equal]0,
WriteString[SelfE,"\\item {\\bf Self-Energy for "<>getDescriptionField[getParticleNameDirac[mixedNames[[i,1]]]]  <>"} \\thickspace (\\("<> TeXOutput[mixedNames[[i,1]] /. diracSubBack1[ALL] /. diracSubBack2[ALL]] <>"\\)) \n\n"];,
WriteString[SelfE,"\\item {\\bf Self-Energy for "<>getDescriptionField[getParticleNameDirac[mixedNames[[i,1,1]]]]  <>"} \\thickspace (\\("<> TeXOutput[mixedNames[[i,1,1]] /. diracSubBack1[ALL] /. diracSubBack2[ALL]] <>"\\)) \n\n"];
];
*)

WriteString[SelfE,"\\item {\\bf Self-Energy for "<>getDescriptionField[getParticleNameDirac[ParticlesSelfE[[i]]]]  <>"} \\thickspace (\\("<> TeXOutput[ParticlesSelfE[[i]] /. diracSubBack1[ALL] /. diracSubBack2[ALL]] <>"\\)) \n\n"];

WriteString[SelfE,"\\begin{align} \n"];
clines=1;
If[getTypeOld[ParticlesSelfE[[i]]]===S,
WriteString[SelfE, "\\Pi_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i]]] <> " \n"];,
WriteString[SelfE, "\\Sigma^S_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,1]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^R_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,2]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^L_{i,j}(p^2) &= "<>TeXOutput[SelfEnergy[[i,3]]] <> " \n"];
];
WriteString[SelfE,"\\end{align} \n"];
i++;];


For[i=1,i<=Length[UnmixedFields],
If[FreeQ[massless,UnmixedFields[[i,1]]]==True,
WriteString[SelfE,"\\item {\\bf Self-Energy for "<>getDescriptionField[getParticleNameDirac[UnmixedFields[[i,1]]]]  <>"} \\thickspace (\\("<> TeXOutput[UnmixedFields[[i,1]]] <>"\\)) \n\n"];
WriteString[SelfE,"\\begin{align} \n"];
clines=1;
If[getGen[UnmixedFields[[i,1]]]>1,
If[getTypeOld[UnmixedFields[[i,1]]]===S || getTypeOld[UnmixedFields[[i,1]]]===V,
WriteString[SelfE, "\\Pi_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i]]] <> "\\\\ \n"];,
WriteString[SelfE, "\\Sigma^S_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^R_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,2]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^L_{i,j}(p^2) &= "<>TeXOutput[SelfEunmixed[[i,3]]] <> " \n"];
];,
If[getTypeOld[UnmixedFields[[i,1]]]===S || getTypeOld[UnmixedFields[[i,1]]]===V,
WriteString[SelfE, "\\Pi(p^2) &= "<>TeXOutput[SelfEunmixed[[i]]] <> " \n"];,
WriteString[SelfE, "\\Sigma^S(p^2) &= "<>TeXOutput[SelfEunmixed[[i,1]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^R(p^2) &= "<>TeXOutput[SelfEunmixed[[i,2]]] <> "\\\\ \n"];
WriteString[SelfE, "\\Sigma^L(p^2) &= "<>TeXOutput[SelfEunmixed[[i,3]]] <> "\n"];
];
];
WriteString[SelfE,"\\end{align} \n"];
];
i++;];


WriteString[SelfE,"\\end{itemize} \n"];
Close[SelfE];

TeXLineBreak=3;

];

WriteCG:=Block[{i,j},
Print["Write Clebsch-Gordan Coefficients"];
cgtex=OpenWrite[ToFileName[$sarahCurrentTeXDir,"CG.tex"]];
WriteString[cgtex,"\\section{Clebsch-Gordan Coefficients} \n"];
If[Length[SA`ClebschGordon]>0,
WriteString[cgtex,"\\begin{itemize} \n"];
For[i=1,i<=Length[SA`ClebschGordon],
WriteString[cgtex,"\\item: Gauge group:"<>ToString[SA`ClebschGordon[[i,1,1]]]<>", Dynkin labels: "];
Switch[Length[SA`ClebschGordon[[i,1,2]]],
2,
WriteString[cgtex,StringReplace[ToString[SA`ClebschGordon[[i,1,2,1]]],{","->" ","{"->"(","}"->")"}]<>","<>StringReplace[ToString[SA`ClebschGordon[[i,1,2,2]]],{","->" ","{"->"(","}"->")"}]<> "\n"];
WriteString[cgtex,"\\begin{equation} \n"];
WriteString[cgtex,TeXOutput[SA`ClebschGordon[[i,1]][a,b]]<>" = "<>ToString[TeXForm[MatrixForm[SA`ClebschGordon[[i,2]]]]] <>"_{ab} \n"];
WriteString[cgtex,"\\end{equation} \n"];,
3,
WriteString[cgtex,StringReplace[ToString[SA`ClebschGordon[[i,1,2,1]]],{","->" ","{"->"(","}"->")"}]<>","<>StringReplace[ToString[SA`ClebschGordon[[i,1,2,2]]],{","->" ","{"->"(","}"->")"}]<>","<>StringReplace[ToString[SA`ClebschGordon[[i,1,2,3]]],{","->" ","{"->"(","}"->")"}]<> "\n"];
WriteString[cgtex,"\\begin{align} \n"];
clines=1;
For[j=1,j<=Length[SA`ClebschGordon[[i,2]]],
WriteString[cgtex,TeXOutput[SA`ClebschGordon[[i,1]][j,a,b]]<>" = & "<>ToString[TeXForm[MatrixForm[SA`ClebschGordon[[i,2,j]]]]] <>"_{ab} \\\\ \n"];
j++;];
WriteString[cgtex,"\\end{align} \n"];
];
i++;];
WriteString[cgtex,"\\end{itemize} \n"];
];
Close[cgtex];
];

WriteTadpoleEquations:=Block[{TadEqu,m,i,j},

Print["Writing Tadpole Equations to TeX-File"];


TFile=OpenWrite[ToFileName[$sarahCurrentTeXDir,"TadpoleEquations.tex"]];

For[j=2,j<=Length[NameOfStates],
If[Head[TadpoleEquations[NameOfStates[[j]]]]===List,
TadEqu = TadpoleEquations[NameOfStates[[j]]]  /. a_ conj[x_] + a_ x_ ->2 a Re[x];

If[Length[NameOfStates]>2,
WriteString[TFile,"\\subsection{Tadpole Equations for eigenstates {\\tt '"<>ToString[NameOfStates[[j]]]<>"'}}\n"];
];

(*
WriteString[TFile,"\\begin{align} \n"];
vev=DEFINITION[NameOfStates[[j]]][VEVs];
For[i=1,i\[LessEqual]Length[TadEqu],
If[getDimParameters[vev[[i,2,1]]]==={},
WriteString[TFile,"\\frac{\\partial V}{\\partial "<>TeXOutput[vev[[i,2,1]]] <>"} &= "];,
If[getDimParameters[vev[[i,2,1]]][[1]]>1,
WriteString[TFile,"\\frac{\\partial V}{\\partial {"<>TeXOutput[vev[[i,2,1]]] <>"}_i} &= "];,
WriteString[TFile,"\\frac{\\partial V}{\\partial "<>TeXOutput[vev[[i,2,1]]] <>"} &= "];
];
];
WriteString[TFile,TeXOutput[Simplify[TadEqu[[i]]]]];
If[i<Length[TadEqu],
WriteString[TFile,"\\\\ \n"];,
WriteString[TFile,"\n"];
];
i++;];

WriteString[TFile,"\\end{align} \n"]; *)

WriteString[TFile,"\\begin{align} \n"];
clines=1;
For[i=1,i<=Length[SA`ScalarHF[NameOfStates[[j]]]],
If[getGenALL[SA`ScalarHF[NameOfStates[[j]]][[i]]]===1,
WriteString[TFile,"\\frac{\\partial V}{\\partial "<>TeXOutput[SA`ScalarHF[NameOfStates[[j]]][[i]]] <>"} &= "];,
WriteString[TFile,"\\frac{\\partial V}{\\partial {"<>TeXOutput[SA`ScalarHF[NameOfStates[[j]]][[i]]] <>"}_i} &= "];
];
WriteString[TFile,TeXOutput[TeXSimplify[TadpoleEquation[SA`ScalarHF[NameOfStates[[j]]][[i]]]  /. a_ conj[x_] + a_ x_ ->2 a Re[x] ] /. a_ conj[x_] + a_ x_ ->2 a Re[x] ]];
If[i<Length[TadEqu],
WriteString[TFile,"\\\\ \n"];,
WriteString[TFile,"\n"];
];
i++;];

WriteString[TFile,"\\end{align} \n"];
];
j++;];


Close[TFile];

];


TeXforSARAH:=Block[{i,j,PARTF,PARTS,PARTV,PARTG},
Print["Write Implementation in SARAH to TeX file"];

sarah=OpenWrite[ToFileName[$sarahCurrentTeXDir,"SARAH.tex"]];

WriteString[sarah,"\\section{Implementation in {\\tt SARAH} }\n"];
WriteString[sarah,"Model directory: {\\tt "<> StringReplace[modDir,{"_"->"\\_"}] <>"} \n"];

For[i=1,i<=Length[NameOfStates],
WriteString[sarah,"\\subsection{Particles for eigenstates {\\tt '"<> ToString[NameOfStates[[i]]]<>"'}} \n"];
PARTF = Intersection[Transpose[Take[#,{1,4}]&/@Select[Particles[NameOfStates[[i]]],TrueQ[#1[[4]]===F]&]][[1]] /. diracSubBack1[NameOfStates[[i]]] /. diracSubBack2[NameOfStates[[i]]]];
PARTS = Transpose[Take[#,{1,4}]&/@Select[Particles[NameOfStates[[i]]],TrueQ[#1[[4]]===S]&]][[1]];
PARTV = Transpose[Take[#,{1,4}]&/@Select[Particles[NameOfStates[[i]]],TrueQ[#1[[4]]===V]&]][[1]];
PARTG = Transpose[Take[#,{1,4}]&/@Select[Particles[NameOfStates[[i]]],TrueQ[#1[[4]]===G]&]][[1]];

WriteString[sarah,"\\begin{itemize} \n"];
WriteString[sarah,"\\item Fermions \\\\ \n"];

WriteString[sarah,"\\begin{center} \n"];
WriteString[sarah,"\\begin{longtable}{|ccc|} \n"];
WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\LaTeX & SARAH & Output \\\\ \n"];
WriteString[sarah,"\\hline \n"];
For[j=1,j<=Length[PARTF],
WriteString[sarah,"\\("<>TeXOutput[getFullOld[PARTF[[j]]]/. subGC[1] /. subIndFinal[1,1]] <>" = \\left( \\begin{array}{c} "];
WriteString[sarah, TeXOutput[getFullOld[(PARTF[[j]] /. diracSub[NameOfStates[[i]]])[[1]]] /. subGC[1] /. subIndFinal[1,1]] <>"\\\\"<> TeXOutput[getFullOld[(PARTF[[j]] /. diracSub[NameOfStates[[i]]])[[2]] ]/. subGC[1] /. subIndFinal[1,1]]];
WriteString[sarah,"\\end{array} \\right) \\) & "];

WriteString[sarah,"\\( \\verb\""<>ToString[getFullOld[PARTF[[j]]]] <>"\" = \\left( \\begin{array}{c} "];
WriteString[sarah, "\\verb\""<>ToString[getFullOld[(PARTF[[j]] /. diracSub[NameOfStates[[i]]])[[1]]] ] <>"\" \\\\ \\verb\""<>  ToString[getFullOld[(PARTF[[j]] /. diracSub[NameOfStates[[i]]])[[2]]]] <>"\""];
WriteString[sarah,"\\end{array} \\right) \\)  & "];
WriteString[sarah,"\\verb\""<>ToString[getOutputName[PARTF[[j]]]] <>"\" \\\\ \n  "];
j++;];

WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\end{longtable} \n"];
WriteString[sarah,"\\end{center} \n"];

WriteString[sarah,"\\item Scalars \\\\ \n"];
WriteParticleListSARAH[PARTS];

WriteString[sarah,"\\item Vector Bosons \\\\ \n"];
WriteParticleListSARAH[PARTV];

WriteString[sarah,"\\item Ghosts \\\\ \n"];
WriteParticleListSARAH[PARTG];

WriteString[sarah,"\\end{itemize} \n"];
i++;];


WriteString[sarah,"\\subsection{Parameters} \n"];

WriteString[sarah,"\\begin{center} \n"];
WriteString[sarah,"\\begin{longtable}{|ccc|ccc|ccc|} \n"];
WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\LaTeX & SARAH & Output & \\LaTeX & SARAH & Output & \\LaTeX & SARAH & Output \\\\ \n"];
WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\hline \n"];
For[i=1,i<=Length[parameters],

WriteString[sarah,"\\("<>TeXOutput[parameters[[i,1]]] <>"\\) & "];
WriteString[sarah,"\\verb\""<>ToString[parameters[[i,1]]] <>"\" & "];
WriteString[sarah,"\\verb\""<>ToString[getOutputNameParameter[parameters[[i,1]]]] <>"\" "];
If[Mod[i,3]==0 ,
WriteString[sarah,"\\\\ \n"];,
If[i==Length[parameters],
WriteString[sarah,Nest[StringJoin[#1,"& & &"]&,"",3-Mod[i,3]] <> " \\\\ \n "];,
WriteString[sarah," & "];
];
];
i++;];
WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\end{longtable} \n"];
WriteString[sarah,"\\end{center} \n"];
Close[sarah];
];

WriteParticleListSARAH[list_]:=Block[{j},

WriteString[sarah,"\\begin{center} \n"];
WriteString[sarah,"\\begin{longtable}{|ccc|ccc|} \n"];
WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\LaTeX & SARAH & Output & \\LaTeX & SARAH & Output \\\\ \n"];
WriteString[sarah,"\\hline \n"];
For[j=1,j<=Length[list],

WriteString[sarah,"\\("<>TeXOutput[getFullOld[list[[j]]]/. subGC[1] /. subIndFinal[1,1]] <>"\\) & "];
WriteString[sarah,"\\verb\""<>ToString[getFullOld[list[[j]]]] <>"\" &"];
WriteString[sarah,"\\verb\""<>ToString[getOutputName[list[[j]]]] <>"\" "];
If[Mod[j,2]==0 ,
WriteString[sarah,"\\\\ \n"];,
If[j==Length[list],
WriteString[sarah,Nest[StringJoin[#1,"& & &"]& ,"",2-Mod[j,2]] <> " \\\\ \n "];,
WriteString[sarah," & "];
];
];
j++;];

WriteString[sarah,"\\hline \n"];
WriteString[sarah,"\\end{longtable} \n"];
WriteString[sarah,"\\end{center} \n"];
];

TeXName[part_]:=Block[{},
If[FreeQ[TeXParticles,part]==False,
pos = Position[TeXParticles,part,2,1][[1,1]];
Return[Extract[TeXParticles,pos][[2]]];,
Return[ToString[part]];
];
];

TeXNameP[part_]:=Block[{pos},
If[FreeQ[TeXParameters,part]==False,
pos = Position[TeXParameters,part,2,1][[1,1]];
Return[Extract[TeXParameters,pos][[2]]];,
Return[ToString[part]];
];
];

TeXSimplify[expr_]:=Block[{i,j,k,temp,atom,gaugec,supc,dterms,nodterms},
If[AtomQ[expr],Return[expr];];
If[Head[Expand[expr]]=!=Plus,Return[expr]];
temp=List@@Expand[expr];
atom=Select[temp,AtomQ[#]&,1];
temp=Complement[temp,atom];
gaugec=Transpose[Transpose[SA`ListGaugeMixedAll][[2]]][[2]];
supc=Flatten[{WCouplingsTri,WCouplingsBi,WCouplingsLin,WCouplingsQuad}];
dterms=Select[temp,(Length[Complement[gaugec,List@@(#) /. a_^x_ ->a]]=!=Length[gaugec])&];
nodterms=Select[temp,(Length[Complement[gaugec,List@@(#) /. a_^x_ ->a]]===Length[gaugec])&];

Return[Plus@@atom+(FullSimplify[Plus@@nodterms]//. a_ b_ + a_ c_ -> (c+b)a //. a_ b_ - a_ c_ -> (b-c)a)+(FullSimplify[Plus@@dterms]//. a_ b_ + a_ c_ -> (c+b)a//. a_ b_ - a_ c_ -> (b-c)a)];
];



