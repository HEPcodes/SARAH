(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



CreateTeXNameList[Eigenstates_]:=Block[{i,j,k},

particleList=WeylFermionAndIndermediate;

For[i=1,i<=Length[NameOfStates],
If[Head[ParticleDefinitions[NameOfStates[[i]]]]===List,
particleList = Join[particleList,ParticleDefinitions[NameOfStates[[i]]]];
];
i++;];

TeXParticles = {};
TeXParameters = {};

For[i=1,i<=Length[particleList],
If[((LaTeX /. particleList[[i,2]])=!=LaTeX) && ( (LaTeX /. particleList[[i,2]])=!=None),
If[FreeQ[Transpose[Fields][[3]],particleList[[i,1]]] && FreeQ[Table[Gauge[[j,1]],{j,1,Length[Gauge]}],particleList[[i,1]]],
If[Length[(LaTeX /. particleList[[i,2]])]=!=2,
TeXParticles= Join[TeXParticles,{{particleList[[i,1]], LaTeX /. particleList[[i,2]]}}];
TeXLength[particleList[[i,1]]]=3+StringCount[LaTeX /. particleList[[i,2]],"_"]+StringCount[LaTeX /. particleList[[i,2]],"^"];
TeXParticles= Join[TeXParticles,{{ToExpression["U"<>ToString[particleList[[i,1]]]],HattedField[LaTeX /. particleList[[i,2]]]}}];
TeXLength[ToExpression["U"<>ToString[particleList[[i,1]]]]]=1+StringCount[HattedField[LaTeX /. particleList[[i,2]]],"_"]+StringCount[HattedField[LaTeX /. particleList[[i,2]]],"^"];
If[getType[particleList[[i,1]]]===F && FreeQ[Table[diracSub[ALL][[i,1]],{i,1,Length[diracSub[ALL]]}],particleList[[i,1]]]===False,
If[FreeQ[MajoranaPart,particleList[[i,1]]],
TeXParticles= Join[TeXParticles,{{bar[particleList[[i,1]]],BaredField[LaTeX /. particleList[[i,2]]]}}];
TeXParticles= Join[TeXParticles,{{bar[ToExpression["U"<>ToString[particleList[[i,1]]]]], HattedField[BaredField[LaTeX /. particleList[[i,2]]]]}}];
];,
If[FreeQ[realVar,particleList[[i,1]]],
TeXParticles= Join[TeXParticles,{{conj[particleList[[i,1]]],ConjField[LaTeX /. particleList[[i,2]]]}}];
TeXParticles= Join[TeXParticles,{{conj[ToExpression["U"<>ToString[particleList[[i,1]]]]],HattedField[ConjField[LaTeX /. particleList[[i,2]]]]}}];
];
];,
TeXParticles= Join[TeXParticles,{{particleList[[i,1]], (LaTeX /. particleList[[i,2]])[[1]]}}];
TeXLength[particleList[[i,1]]]=3+StringCount[(LaTeX /. particleList[[i,2]])[[1]],"_"]+StringCount[(LaTeX /. particleList[[i,2]])[[1]],"^"];
TeXParticles= Join[TeXParticles,{{ToExpression["U"<>ToString[particleList[[i,1]]]],HattedField[(LaTeX /. particleList[[i,2]])[[1]]]}}];
TeXLength[ToExpression["U"<>ToString[particleList[[i,1]]]]]=1+StringCount[HattedField[(LaTeX /. particleList[[i,2]])[[1]]],"_"]+StringCount[HattedField[(LaTeX /. particleList[[i,2]])[[1]]],"^"];

If[getType[particleList[[i,1]]]===F && FreeQ[Table[diracSub[ALL][[i,1]],{i,1,Length[diracSub[ALL]]}],particleList[[i,1]]]===False,
If[FreeQ[MajoranaPart,particleList[[i,1]]],
TeXParticles= Join[TeXParticles,{{bar[particleList[[i,1]]],(LaTeX /. particleList[[i,2]])[[2]]}}];
TeXParticles= Join[TeXParticles,{{bar[ToExpression["U"<>ToString[particleList[[i,1]]]]], HattedField[(LaTeX /. particleList[[i,2]])[[2]]]}}];
];,
If[FreeQ[realVar,particleList[[i,1]]],
TeXParticles= Join[TeXParticles,{{conj[particleList[[i,1]]],(LaTeX /. particleList[[i,2]])[[2]]}}];
TeXParticles= Join[TeXParticles,{{conj[ToExpression["U"<>ToString[particleList[[i,1]]]]],HattedField[(LaTeX /. particleList[[i,2]])[[2]]]}}];
];
];
];,
TeXParticles= Join[TeXParticles,{{SF[particleList[[i,1]]], LaTeX /. particleList[[i,2]]}}];
];
];
i++;];


For[i=1,i<=Length[ParameterDefinitions],
If[( (LaTeX /. ParameterDefinitions[[i,2]])=!=LaTeX) && (( LaTeX /. ParameterDefinitions[[i,2]])=!=None),
TeXParameters= Join[TeXParameters,{{ParameterDefinitions[[i,1]], LaTeX /. ParameterDefinitions[[i,2]]}}];
If[FreeQ[ParameterDefinitions[[i,1]], A_[b_Integer]],
TeXLength[ParameterDefinitions[[i,1]]]=3+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"_"]+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"^"];,
TeXLength[ParameterDefinitions[[i,1]]]=5+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"_"]+StringCount[ LaTeX /. ParameterDefinitions[[i,2]],"^"];
];

If[FreeQ[parameters,ParameterDefinitions[[i,1]]]==False,
If[Length[getDimParameter[ParameterDefinitions[[i,1]]]]===3 && FreeQ[Transpose[ParameterDefinitions][[1]],ParameterDefinitions[[i,1]][1]],
For[j=1,j<=getDimParameter[ParameterDefinitions[[i,1]]][[3]],
TeXParameters= Join[TeXParameters,{{ParameterDefinitions[[i,1]][j], (LaTeX /. ParameterDefinitions[[i,2]])<>"^"<>ToString[j]<>""}}];
j++;];
];
];
]; 
i++;];

];

BaredField[field_]:=StringReplace[StringReplace["\\bar{"<>field<>"}",RegularExpression["\\\\bar{(.[^\\]]*)\\^(.[^\\]]*)}"]:>"\\bar{$1}^$2"],RegularExpression["\\\\bar{(.[^\\]]*)\\_(.[^\\]]*)}"]:>"\\bar{$1}_$2"];
ConjField[field_]:=StringReplace[field<>"^*",{RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$3}",RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$4}_$3"}];
HattedField[field_]:=StringReplace[StringReplace["\\check{"<>field<>"}",RegularExpression["\\\\check{(.[^\\]]*)\\^(.[^\\]]*)}"]:>"\\check{$1}^$2"],RegularExpression["\\\\check{(.[^\\]]*)\\_(.[^\\]]*)}"]:>"\\check{$1}_$2"];

CreateTeXForm:=Block[{i,ii},
 TeXLineBreak=3; 

Unprotect[TeXForm];
Unprotect[Power];

(* TeXForm[x_Times]:=Block[{i,temp},
temp="";
For[i=1,i\[LessEqual]Length[x],
If[Head[x[[i]]]===Plus,
temp =temp<>"("<>ToString[TeXForm[x[[i]]]] <>")";,
temp =temp<>ToString[TeXForm[x[[i]]]]<>" ";
];
i++;];
Return[temp];
]; *)

TeXForm[x_Times]:=Block[{i,temp},
temp="";
For[i=1,i<=Length[x],
If[Head[x[[i]]]===Plus,
temp =temp<>"("<>ToString[TeXForm[x[[i]]]] <>")";,
If[x[[i]]===-1,
temp =temp<>"- ";,
temp =temp<>ToString[TeXForm[x[[i]]]]<>" ";
];
];
i++;];
Return[temp];
]; 

maxNumberSymbols =22;

TeXForm[x_Plus]:=Block[{i,j,tempString,final, rest,term},
If[getLaTeXlength[x]<=MAXTEXLENGTH,
tempString=TeXForm/@x;,
tempString="";term=0;
For[i=1,i<=Length[x],
If[getLaTeXlength[(term+x[[i]])]>MAXTEXLENGTH&& term =!=0,
If[clines<100,
tempString=tempString <> "\\nonumber \\\\ \n &";
clines++;,
tempString=tempString <> "\\nonumber \n";
tempString=tempString <> "\\end{align} \n \\begin{align} \n & ";
clines=0;
];
tempString = tempString <>"+"<>ToString[TeXForm[x[[i]]]];
term=x[[i]];,
term +=x[[i]];
tempString = tempString <>"+"<>ToString[TeXForm[x[[i]]]];
];
i++;];
];
Return[tempString];
];

TeXTimes[x_]:=Block[{i,j,tempString,final, rest,term,currentLength},
If[getLaTeXlength[x]<=MAXTEXLENGTH,
tempString=TeXForm/@x;,
tempString="";term=0;
currentLength=0;
For[i=1,i<=Length[x],
If[Head[x[[i]]]===Plus,
tempString = tempString <>"(";
For[j=1,j<=Length[x[[i]]],
If[(currentLength+getLaTeXlength[x[[i,j]]])<MAXTEXLENGTH,
currentLength +=getLaTeXlength[x[[i,j]]];
tempString = tempString <>"+"<>ToString[TeXForm[x[[i,j]]]];,
currentLength = getLaTeXlength[x[[i,j]]];
tempString = tempString <>"\\\\ & +"<>ToString[TeXForm[x[[i,j]]]];
];
j++;];
tempString = tempString <>")";,
If[(currentLength+getLaTeXlength[x[[i]]])<MAXTEXLENGTH,
currentLength +=getLaTeXlength[x[[i]]];
tempString = tempString <>ToString[TeXForm[x[[i]]]];,
currentLength = getLaTeXlength[x[[i]]];
tempString = tempString <>"\\\\ & "<>ToString[TeXForm[x[[i,j]]]];
];
];
i++;];
];
Return[tempString];
];



TeXForm[x_List]:=TeXForm/@x;

Format[bar[x_],TeXForm]:=Format["\\bar{"<>ToString[TeXForm[x]]<>"}",OutputForm];
Format[Adj[x_],TeXForm]:=Format[AddExp[ToString[TeXForm[x]],"\\dagger",""],OutputForm];
Format[Tp[x_],TeXForm]:=Format[AddExp[ToString[TeXForm[x]],"T",""],OutputForm];
Format[x_Power,TeXForm]:=If[Head[x[[1]]]===Plus ||  Head[x[[1]]]===MatMul || Head[x[[1]]] ===trace || Head[x[[1]]] === ScalarProd,
Format["("<>ToString[TeXForm[x[[1]]]]<>")^{"<>ToString[x[[2]]]<>"}",OutputForm],
Format[AddExp[ToString[TeXForm[x[[1]]]],ToString[x[[2]]],""],OutputForm]
] /;Head[x[[2]]]===Integer; 
Format[x_Power,TeXForm]:=Format["{"<>ToString[TeXForm[x[[1]]]]<>"}^{"<>ToString[TeXForm[x[[2]]]]<>"}",OutputForm] /;(Head[x[[1]]]===Cos || Head[x[[1]]]===Sin || Head[x[[1]]]===Csc || Head[x[[1]]]===Tan || Head[x[[1]]]===Sec || Head[x[[1]]]===Cot  );
Format[ThetaW,TeXForm]:=Format["\\Theta_W",OutputForm];

Unprotect[Integer,Re];
(* Format[-1,TeXForm]:=Format["-",OutputForm];*)
Protect[Integer];
Protect[Power];

Format[Cp[a_,b_,c_][PL],TeXForm]:=Format["{\\Gamma^L_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[Cp[a_,b_,c_][PR],TeXForm]:=Format["{\\Gamma^R_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[Cp[a_,b_,c_],TeXForm]:=Format["{\\Gamma_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[Cp[a_,b_,c_,d_][e_],TeXForm]:=Format["{\\Gamma^{"<>ToString[e]<>"}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}}",OutputForm];
Format[Cp[a_,b_,c_,d_],TeXForm]:=Format["{\\Gamma_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}}",OutputForm];

Format[conj[CG[a___][b__]],TeXForm]:=Format["("<>TeXOutput[CG[a][b]]<>")^*",OutputForm];

Format[conj[Cp[a_,b_,c_][PL]],TeXForm]:=Format["{\\Gamma^{L*}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[conj[Cp[a_,b_,c_][PR]],TeXForm]:=Format["{\\Gamma^{R*}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[conj[Cp[a_,b_,c_]],TeXForm]:=Format["{\\Gamma^*_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}}",OutputForm];
Format[conj[Cp[a_,b_,c_,d_]],TeXForm]:=Format["{\\Gamma^*_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}}",OutputForm];

Format[B0[a_,b_,c_],TeXForm]:=Format["{B_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[B1[a_,b_,c_],TeXForm]:=Format["{B_1("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[B22[a_,b_,c_],TeXForm]:=Format["{B_{22}("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[B00[a_,b_,c_],TeXForm]:=Format["{B_{00}("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[F0[a_,b_,c_],TeXForm]:=Format["{F_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[G0[a_,b_,c_],TeXForm]:=Format["{G_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[H0[a_,b_,c_],TeXForm]:=Format["{H_0("<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>")}",OutputForm];
Format[A0[a_],TeXForm]:=Format["{A_0("<>ToString[TeXForm[a]]<>")}",OutputForm];
Format[Re[a_],TeXForm]:=Format["{\\Re("<>ToString[TeXForm[a]]<>")}",OutputForm];

Format[Generator[a_,b_][i1_,i2_,i3_],TeXForm]:=Format["T^{"<>ToString[TeXForm[a]]<>","<>TeXOutput[DimR[SusynoForm[a],b]]<>"}_{"<>ToString[TeXForm[i1]]<>ToString[TeXForm[i2]]<>ToString[TeXForm[i3]]<>"}",OutputForm];

Format[conj[Generator[a_,b_][i1_,i2_,i3_]],TeXForm]:=Format["T^{"<>ToString[TeXForm[a]]<>","<>TeXOutput[DimR[SusynoForm[a],b]]<>"\\, *}_{"<>ToString[TeXForm[i1]]<>ToString[TeXForm[i2]]<>ToString[TeXForm[i3]]<>"}",OutputForm];

Format[FST[a_][i1___],TeXForm]:=Format["f^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[{i1}]]<>"}",OutputForm];

StringDimDynkin[group_,dyn_]:=Block[{dim},
dim=DimR[SusynoForm[group],dyn];
If[getDynkinLabels[dim,group]===dyn,
Return[ToString[dim]];,
If[getDynkinLabels[-dim,group]===dyn,
Return["\\bar{"<>ToString[dim]<>"}"];,
Return[ToString[dim]];
];
];
];

For[i=1,i<=Length[SA`ClebschGordon],
Switch[Length[SA`ClebschGordon[[i,1,2]]],
2,
temp=ReplaceAll[Hold[SetDelayed[Format[SA`ClebschGordon[[ii,1]][a_,b_],TeXForm],Format["K^{"<>ToString[SA`ClebschGordon[[ii,1,1]]]<>","<>StringReplace[StringDrop[StringDrop[ToString[StringDimDynkin[SA`ClebschGordon[[ii,1,1]],#]&/@SA`ClebschGordon[[ii,1,2]]],1],-1],{","->"\\times"}]<>"}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",OutputForm]]],{ii->i}];,
3,
temp=ReplaceAll[Hold[SetDelayed[Format[SA`ClebschGordon[[ii,1]][a_,b_,c_],TeXForm],Format["K^{"<>ToString[SA`ClebschGordon[[ii,1,1]]]<>","<>StringReplace[StringDrop[StringDrop[ToString[StringDimDynkin[SA`ClebschGordon[[ii,1,1]],#]&/@SA`ClebschGordon[[ii,1,2]]],1],-1],{","->"\\times"}]<>"}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm]]],{ii->i}];,
4,
temp=ReplaceAll[Hold[SetDelayed[Format[SA`ClebschGordon[[ii,1]][a_,b_,c_,d_],TeXForm],Format["K^{"<>ToString[SA`ClebschGordon[[ii,1,1]]]<>","<>StringReplace[StringDrop[StringDrop[ToString[StringDimDynkin[SA`ClebschGordon[[ii,1,1]],#]&/@SA`ClebschGordon[[ii,1,2]]],1],-1],{","->"\\times"}]<>"}_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}",OutputForm]]],{ii->i}];
];
ReleaseHold[temp];
i++;];

Format[gI1,TeXForm]:=Format["a",OutputForm];
Format[gI2,TeXForm]:=Format["b",OutputForm];
Format[gO1,TeXForm]:=Format["i",OutputForm];
Format[gO2,TeXForm]:=Format["j",OutputForm];
Format[RXi[a_],TeXForm]:=Format["\\xi_{"<>TeXOutput[ToExpression["V"<>ToString[a]]]<>"}",OutputForm];



For[i=1,i<=9,
Format[ToExpression["ct"<>ToString[i]],TeXForm]=Format["{\\alpha_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["in"<>ToString[i]],TeXForm]=Format["{n_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["i"<>ToString[i]],TeXForm]=Format["{i_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["j"<>ToString[i]],TeXForm]=Format["{j_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["gm"<>ToString[i]],TeXForm]=Format["{o_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["gn"<>ToString[i]],TeXForm]=Format["{p_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["cm"<>ToString[i]],TeXForm]=Format["{\\alpha_"<>ToString[i]<>"}",OutputForm];
Format[ToExpression["cn"<>ToString[i]],TeXForm]=Format["{\\beta_"<>ToString[i]<>"}",OutputForm];
i++;];

Format[gt1,TeXForm]=Format["i",OutputForm];
Format[gt2,TeXForm]=Format["j",OutputForm];
Format[gt3,TeXForm]=Format["k",OutputForm];
Format[gt4,TeXForm]=Format["l",OutputForm];
Format[gt5,TeXForm]=Format["m",OutputForm];
Format[gt6,TeXForm]=Format["n",OutputForm];

Format[iProp,TeXForm]=Format["p",OutputForm];

Format[j1,TeXForm]=Format["a",OutputForm];
Format[j2,TeXForm]=Format["b",OutputForm];
Format[j3,TeXForm]=Format["c",OutputForm];
Format[j4,TeXForm]=Format["d",OutputForm];
Format[j5,TeXForm]=Format["e",OutputForm];
Format[j6,TeXForm]=Format["f",OutputForm];

Format[ct1,TeXForm]=Format["\\alpha",OutputForm];
Format[ct2,TeXForm]=Format["\\beta",OutputForm];
Format[ct3,TeXForm]=Format["\\gamma",OutputForm];
Format[ct4,TeXForm]=Format["\\delta",OutputForm];
Format[ct5,TeXForm]=Format["\\epsilon",OutputForm];



 For[i=1,i<=Length[parameters],
Format[parameters[[i,1]],TeXForm]=Format[TeXNameP[parameters[[i,1]]],OutputForm];
If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],TeXForm],Format[AddExp[TeXNameP[parameters[[nr,1]]],"",StringReplace[ToString[TeXForm/@{a}],","->""]],OutputForm]]], nr->i];,

temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],TeXForm],Format[AddExp[TeXNameP[parameters[[nr,1]]],"",StringReplace[ToString[TeXForm/@{a}],","->""]],OutputForm]]], nr->i];
];
ReleaseHold[temp]; 



If[FreeQ[realVar,parameters[[i,1]]],
If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
temp=ReplaceAll[Hold[SetDelayed[Format[conj[parameters[[i,1]][a__]],TeXForm],Format[StringReplace[TeXNameP[parameters[[nr,1]]]<>"^*",{RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]:>"$1^{$2,$3}",RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$4}_$3"}]<>"_"<>StringReplace[ToString[TeXForm/@{a}],","->""],OutputForm]]], nr->i]; ,
 temp=ReplaceAll[Hold[SetDelayed[Format[conj[parameters[[i,1]][a__]],TeXForm],Format[StringReplace[StringReplace[TeXNameP[parameters[[nr,1]]]<>"^*",{RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]:>"$1^{$2,$3}",RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$4}_$3"}]<>"_"<>StringReplace[ToString[TeXForm/@{a}],","->""],{RegularExpression["(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]:>"$1_{$2,$3}",RegularExpression["(.[^\\_]*)\\_(.[^\\_]*)\\^(.[^\\_]*)\\_(.[^\\]]*)"]:>"$1^$3_{$2,$4}"}],OutputForm]]], nr->i];
]; 
ReleaseHold[temp];
If[StringFreeQ[TeXNameP[parameters[[i,1]]],"_"],
temp=ReplaceAll[Hold[SetDelayed[Format[conj[parameters[[i,1]]],TeXForm],Format[StringReplace[TeXNameP[parameters[[nr,1]]]<>"^*",{RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_]*)\\^(.[^\\]]*)"]:>"$1^{$2,$3}",RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$4}_$3"}],OutputForm]]], nr->i]; ,
 temp=ReplaceAll[Hold[SetDelayed[Format[conj[parameters[[i,1]]],TeXForm],Format[StringReplace[StringReplace[TeXNameP[parameters[[nr,1]]]<>"^*",{RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$3}",RegularExpression["(.[^\\_\\^]*)\\^(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\^(.[^\\]]*)"]:>"$1^{$2,$4}_$3"}],{RegularExpression["(.[^\\_\\^]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]:>"$1_{$2,$3}",RegularExpression["(.[^\\_]*)\\_(.[^\\_]*)\\^(.[^\\_]*)\\_(.[^\\]]*)"]:>"$1^$3_{$2,$4}"}],OutputForm]]], nr->i];
];
ReleaseHold[temp];
];
i++;]; 

For[i=1,i<=Length[threeIndexParameter],
For[j=1,j<=5,
Format[conj[threeIndexParameter[[i]][j]], TeXForm]=Format["("<>ToString[TeXForm[threeIndexParameter[[i]][j]]]<>")^*",OutputForm];

temp=ReplaceAll[Hold[SetDelayed[Format[conj[threeIndexParameter[[nr]][nr2][a__]],TeXForm],Format["("<>ToString[TeXForm[threeIndexParameter[[nr]][nr2]]]<>")^*_"<>StringReplace[ToString[TeXForm/@{a}],","->""],OutputForm]]], {nr->i,nr2->j}];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[threeIndexParameter[[nr]][nr2][a__],TeXForm],Format["("<>ToString[TeXForm[threeIndexParameter[[nr]][nr2]]]<>")_"<>StringReplace[ToString[TeXForm/@{a}],","->""],OutputForm]]], {nr->i,nr2->j}];
ReleaseHold[temp];

j++;];
i++;];

 For[i=1,i<=Length[TeXParameters],
Format[TeXParameters[[i,1]],TeXForm]=Format[TeXParameters[[i,2]],OutputForm];
i++;];


For[i=1,i<=Length[TeXParticles],
If[getIndizesOld[getBlank[TeXParticles[[i,1]]]]=!={},
Format[TeXParticles[[i,1]],TeXForm]=Format[TeXParticles[[i,2]],OutputForm];
If[StringFreeQ[TeXParticles[[i,2]],"_"],
temp=ReplaceAll[Hold[SetDelayed[Format[TeXParticles[[i,1]][{a__}],TeXForm],Format[TeXParticles[[nr,2]]<>"_{"<>StringReplace[ToString[TeXForm/@{a}],","->""] <>"}",OutputForm]]], nr->i];,
temp=ReplaceAll[Hold[SetDelayed[Format[TeXParticles[[i,1]][{a__}],TeXForm],Format[StringReplace[TeXParticles[[nr,2]]<>"_"<>StringReplace[ToString[TeXForm/@{a}] ,","->""],{RegularExpression["(.[^\\_]*)\\_(.[^\\_\\^]*)\\_(.[^\\]]*)"]:>"$1_{$2,$3}",RegularExpression["(.[^\\_]*)\\_(.[^\\]]*)\\^(.[^\\]^\\_]*)\\_(.[^\\]]*)"]:>"$1^$3_{$2,$4}"}],OutputForm]]], nr->i];
];,
temp=ReplaceAll[Hold[SetDelayed[Format[TeXParticles[[i,1]],TeXForm],Format[TeXParticles[[nr,2]],OutputForm]]], nr->i];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[TeXParticles[[i,1]][{a__}],TeXForm],Format[TeXParticles[[nr,2]],OutputForm]]], nr->i];
];
ReleaseHold[temp];

i++;];

StringReplaceFinal = {};
StringReplaceFinal = Join[StringReplaceFinal,{"(+"->"\\Big("}];
StringReplaceFinal = Join[StringReplaceFinal,{"( +"->"\\Big("}];
StringReplaceFinal = Join[StringReplaceFinal,{"("->"\\Big("}];
StringReplaceFinal = Join[StringReplaceFinal,{")"->"\\Big)"}];
StringReplaceFinal = Join[StringReplaceFinal,{"I"->"i"}];
StringReplaceFinal = Join[StringReplaceFinal,{"+ -"->"-"}];
StringReplaceFinal = Join[StringReplaceFinal,{"+-"->"-"}];


Format[lt1,TeXForm]:=Format["\\rho",OutputForm];
Format[lt2,TeXForm]:=Format["\\sigma",OutputForm];
Format[lt3,TeXForm]:=Format["\\mu",OutputForm];
Format[lt4,TeXForm]:=Format["\\nu",OutputForm];

Format[PL,TeXForm]:=Format["\\frac{1-\\gamma_5}{2}",OutputForm];
Format[PR,TeXForm]:=Format["\\frac{1+\\gamma_5}{2}",OutputForm];
Format[gamma[a_],TeXForm]:=Format["\\gamma_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
Format[abs[a_],TeXForm]:=Format["|"<>ToString[TeXForm[a]]<>"|^2",OutputForm];
Format[Delta[a_,b_],TeXForm]:=Format["\\delta_{"<>ToString[TeXForm[a]]<>" "<>ToString[TeXForm[b]]<>"}",OutputForm];
Format[Der[a_],TeXForm]:=Format["\\partial_{\\mu}"<>TeXOutput[a],OutputForm];
Format[epsTensor[a__],TeXForm]:=Format["\\epsilon^{"<>StringReplace[ToString[TeXForm/@{a}] ,","->""]<>"}",OutputForm];
Format[ThetaStep[a_,b_],TeXForm]:=Format["\\Theta_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",OutputForm];
Format[Kronecker[a_,b_],TeXForm]:=Format["\\delta_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",OutputForm];
Format[g[a_,b_],TeXForm]:=Format["g_{"<>ToString[TeXForm[a]]<>" "<>ToString[TeXForm[b]]<>"}",OutputForm];

Format[fSU2[a_,b_,c_],TeXForm]:=Format["\\epsilon_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm];
Format[fSU3[a_,b_,c_],TeXForm]:=Format["f_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm];
Format[Lam[a_,b_,c_],TeXForm]:=Format["\\lambda^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm];
Format[Sig[a_,b_,c_],TeXForm]:=Format["\\sigma^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[b]]<>","<>ToString[TeXForm[c]]<>"}",OutputForm];
Format[LambdaProd[a_,b_][c_,d_],TeXForm]:=Format["(\\lambda^{"<>ToString[TeXForm[a]]<>"} \\lambda^{"<>ToString[TeXForm[b]]<>"})_{"<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}",OutputForm];
Format[SigmaProd[a_,b_][c_,d_],TeXForm]:=Format["(\\sigma^{"<>ToString[TeXForm[a]]<>"} \\sigma^{"<>ToString[TeXForm[b]]<>"})_{"<>ToString[TeXForm[c]]<>","<>ToString[TeXForm[d]]<>"}",OutputForm];


Format[LorentzProduct[a_,b_],TeXForm]:=Format[ToString[TeXForm[a]]<>"\\cdot"<>ToString[TeXForm[b]],OutputForm];
Format[sum[a_,b_,c_,d_+e_],TeXForm]:=Format["\\sum_{"<>ToString[TeXForm[a]]<>"="<>ToString[TeXForm[b]]<>"}^{"<>ToString[TeXForm[c]]<>"} \\Big["<>ToString[TeXForm[d]] <>"\\nonumber \\\\ & +"<>ToString[TeXForm[e]] <>"\\Big]",OutputForm];
Format[sum[a_,b_,c_,d_],TeXForm]:=Format["\\sum_{"<>ToString[TeXForm[a]]<>"="<>ToString[TeXForm[b]]<>"}^{"<>ToString[TeXForm[c]]<>"}"<>ToString[TeXForm[d]],OutputForm];


Format[Mass2[a_],TeXForm]:=Format["m^2_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
Format[Mass[a_],TeXForm]:=Format["m_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
Format[Mom[a_,b_],TeXForm]:=Format["p^{"<>ToString[TeXForm[a]]<>"}_{"<>ToString[TeXForm[b]]<>"}",OutputForm];
Format[trace[x__],TeXForm]:=Format["\\mbox{Tr}("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")",OutputForm];
Format[ScalarProd[x__],TeXForm]:=Format["("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")",OutputForm];
Format[NumberGenerations[x__],TeXForm]:=Format["N_{"<>ToString[TeXForm[x]]<>"}",OutputForm];

Format[MatMul[x__][a_,b_],TeXForm]:=Format["("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")_{"<>ToString[TeXForm[a]]<>","<>ToString[TeXForm[b]]<>"}",OutputForm];
Format[MatMul[x__][a_],TeXForm]:=Format["("<>StringReplace[ToString[TeXForm/@{x}],","->" "]<>")_{"<>ToString[TeXForm[a]]<>"}",OutputForm];
Format[MatMul[x__],TeXForm]:=Format[StringReplace[ToString[TeXForm/@{x}],","->" "],OutputForm];
Format[Tr1[x__],TeXForm]:=Format["\\sigma_{1,"<>ToString[x]<>"}",OutputForm];
Format[Tr2[x__],TeXForm]:=Format["\\sigma_{2,"<>ToString[x]<>"}",OutputForm];
Format[Tr2U1[x_,y_],TeXForm]:=Format["\\sigma_{2,"<>ToString[x]<>ToString[y]<>"}",OutputForm];
Format[Tr3[x__],TeXForm]:=Format["\\sigma_{3,"<>ToString[x]<>"}",OutputForm];
Format[UnitM,TeXForm]:=Format["{\\bf 1}",OutputForm];

 Unprotect[Cos, Sin, Tan, Csc,Sec,Cot];
Format[Sin[x_],TeXForm]:=Format["\\sin"<>ToString[TeXForm[x]]<>" ",OutputForm];
Format[Tan[x_],TeXForm]:=Format["\\tan"<>ToString[TeXForm[x]]<>" ",OutputForm];
Format[Cos[x_],TeXForm]:=Format["\\cos"<>ToString[TeXForm[x]]<>" ",OutputForm];
Format[Csc[x_],TeXForm]:=Format["\\csc"<>ToString[TeXForm[x]]<>" ",OutputForm];
Format[Sec[x_],TeXForm]:=Format["\\sec"<>ToString[TeXForm[x]]<>" ",OutputForm];
Format[Cot[x_],TeXForm]:=Format["\\cot"<>ToString[TeXForm[x]]<>" ",OutputForm];
Protect[Cos,Sin,Tan, Csc,Sec,Cot,Re];


Format[\[Alpha],TeXForm]:=Format["\\alpha",OutputForm];
Format[\[Beta],TeXForm]:=Format["\\beta",OutputForm];
Format[\[Gamma],TeXForm]:=Format["\\gamma",OutputForm];
Format[\[Delta],TeXForm]:=Format["\\delta",OutputForm];
Format[\[Phi],TeXForm]:=Format["\\phi",OutputForm];
Format[\[Mu],TeXForm]:=Format["\\mu",OutputForm];
Format[\[Epsilon],TeXForm]:=Format["\\epsilon",OutputForm];
Format[\[Kappa],TeXForm]:=Format["\\kappa",OutputForm];
Format[\[Lambda],TeXForm]:=Format["\\lambda",OutputForm];
Format[\[Sigma],TeXForm]:=Format["\\sigma",OutputForm];
Format[\[Rho],TeXForm]:=Format["\\rho",OutputForm];
Format[\[Nu],TeXForm]:=Format["\\nu",OutputForm];
Format[\[Eta],TeXForm]:=Format["\\eta",OutputForm];
Format[\[Zeta],TeXForm]:=Format["\\zeta",OutputForm];
Format[\[Tau],TeXForm]:=Format["\\tau",OutputForm];
Format[\[Omega],TeXForm]:=Format["\\omega",OutputForm];
Format[\[Xi],TeXForm]:=Format["\\xi",OutputForm];
Format[\[Psi],TeXForm]:=Format["\\psi",OutputForm];
Format[\[Theta],TeXForm]:=Format["\\theta",OutputForm];
	


];


ToStringFNr[x_]:=Block[{ex,nr,abs,sign},
If[Abs[x] <10^-99, Return["0.0000000E+00"];];
If[x<0,sign="-";,sign="";];
abs = Abs[x];
ex = Floor[Log[10,abs]];
nr = abs/(10^ex);
If[ex<0,
If[Abs[ex]<9,
Return[sign<>ToString[SetPrecision[nr,8]]<>"E-0"<>ToString[Abs[ex]]];,
Return[sign<>ToString[SetPrecision[nr,8]]<>"E-"<>ToString[Abs[ex]]];
];,
If[Abs[ex]<9,
Return[sign<>ToString[SetPrecision[nr,8]]<>"E+0"<>ToString[ex]];,
Return[sign<>ToString[SetPrecision[nr,8]]<>"E+"<>ToString[ex]];
];
];
];


subGreek = {\[Mu] -> mue, \[Alpha] -> alpha, \[Beta] -> beta, \[Gamma] -> gamma, \[Delta] -> delta, \[Epsilon] -> epsilon, \[Phi] ->phi, \[Kappa] -> kappa, \[Lambda] ->lambda, \[Xi]->xi, \[Tau]->tau, \[Sigma]->sigma,\[Rho]->rho, \[Eta]->eta,\[Zeta]->zeta, \[Omega]->omega,\[Theta]->theta}; 


CreateCForm[CPV_,CalcMM_,SLHA_]:=Block[{i,temp},
Print["Create C Form"];
Unprotect[CForm, Power, Cos, Sin, Tan,Csc,Sec,Cot,ArcCos,ArcSin,ArcTan];
For[i=1,i<=Length[subGreek],
temp= ReplaceAll[Hold[SetDelayed[Format[subGreek[[i,1]],CForm],Format[ToString[subGreek[[nr,2]]],OutputForm]]], {nr->i}];
ReleaseHold[temp];
i++;
];

Format[Cos[x_],CForm]:=Format["cos("<>ToString[CForm[x]]<>")",OutputForm];
Format[Sin[x_],CForm]:=Format["sin("<>ToString[CForm[x]]<>")",OutputForm];
Format[Tan[x_],CForm]:=Format["tan("<>ToString[CForm[x]]<>")",OutputForm];

Format[ArcCos[x_],CForm]:=Format["acos("<>ToString[CForm[x]]<>")",OutputForm];
Format[ArcSin[x_],CForm]:=Format["asin("<>ToString[CForm[x]]<>")",OutputForm];
Format[ArcTan[x_],CForm]:=Format["atan("<>ToString[CForm[x]]<>")",OutputForm];

Format[Sqrt[x_],CForm]:=Format["sqrt("<>ToString[CForm[x]]<>")",OutputForm];

Format[Csc[x_],CForm]:=Format["1/sin("<>ToString[CForm[x]]<>")",OutputForm];
Format[Sec[x_],CForm]:=Format["1/cos("<>ToString[CForm[x]]<>")",OutputForm];
Format[Cot[x_],CForm]:=Format["1/tan("<>ToString[CForm[x]]<>")",OutputForm];
Format[x_Power,CForm]:=Format[ToString[CForm[x[[1]]]]<>"^"<>ToString[CForm[x[[2]]]],OutputForm]/;(Head[x[[2]]]===Integer && Head[x[[1]]]=!= Plus &&  Head[x[[1]]]=!=Times  && x[[2]]=!=-1);
Format[x_Power,CForm]:=Format["1/"<>ToString[CForm[x[[1]]]],OutputForm]/;(Head[x[[2]]]===Integer && Head[x[[1]]]=!= Plus &&  Head[x[[1]]]=!=Times  && x[[2]]===-1);
Format[x_Power,CForm]:=Format["("<>ToString[CForm[x[[1]]]]<>")^"<>ToString[CForm[x[[2]]]],OutputForm]/;(Head[x[[2]]]===Integer && (Head[x[[1]]]===Plus || Head[x[[1]]]===Times));

Format[x_Mass,CForm]:=Format[CalcHepMass[x[[1]],1],OutputForm];


Format[Sqrt[2],CForm]:=Format["sqrt2",OutputForm] /; UseCHForm ==True;

For[i=1,i<=Length[parameters],
If[(FreeQ[parDepNeeded,parameters[[i,1]]]==False ||FreeQ[parDep,parameters[[i,1]]]==False || FreeQ[parNum,parameters[[i,1]]]==False  || FreeQ[VertexList3,parameters[[i,1]]]==False || FreeQ[VertexList4,parameters[[i,1]]] ==False  || (CalcMM==True && SLHA==False)), 
If[Length[parameters[[i,2]]]>0,
If[parameters[[i,3,1]]>9,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],CForm],Format[CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"k","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(6-Length[(parameters[[i,2]] /. {1}->{})])}];
ReleaseHold[temp];,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],CForm],Format[CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(6-Length[(parameters[[i,2]] /. {1}->{})])}];
ReleaseHold[temp];
];
If[CPV==True && FreeQ[realVar,parameters[[i,1]]],
If[parameters[[i,3,1]]>9,
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Im"<>ToString[parameters[[i,1]]]][a__],CForm],Format["I"<>CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"k","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Re"<>ToString[parameters[[i,1]]]][a__],CForm],Format["R"<>CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"k","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];,
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Im"<>ToString[parameters[[i,1]]]][a__],CForm],Format["I"<>CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Re"<>ToString[parameters[[i,1]]]][a__],CForm],Format["R"<>CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
];
];,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]],CForm],Format[CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->(6-Length[(parameters[[i,2]] /. {1}->{})])}];
ReleaseHold[temp];
If[CPV==True && FreeQ[realVar,parameters[[i,1]]],
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Im"<>ToString[parameters[[i,1]]]],CForm],Format["I"<>CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Re"<>ToString[parameters[[i,1]]]],CForm],Format["R"<>CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->(5-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
];
];
];
i++;];

Protect[CForm,Power,Cos, Sin, Tan,Csc,Sec,Cot,ArcCos,ArcSin,ArcTan];
];

CreateUfoForm:=Block[{},
subindufo={gt1->1,gt2->2,gt3->3,gt4->4,ct1->1,ct2->2,ct3->3,ct4->4};
Format[LamHlf[a_,b_,c_], CForm]:=Format["T("<>ToString[a/. subindufo]<>","<>ToString[c /.subindufo]<>","<>ToString[b/.subindufo]<>")",OutputForm]/;UfoActive==True;

Format[RXi[a_], CForm]:=Format["RXi"<>ToString[a],OutputForm]/;UfoActive==True;

Format[Delta[a_,b_], CForm]:=Format["Identity("<>ToString[a /. subindufo]<>","<>ToString[b/.subindufo]<>")",OutputForm]/;UfoActive==True;

Format[fSU3[a_,b_,c_], CForm]:=Format["f("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;

(*
Format[epsTensor[a_,b_,c_], CForm]:=Format["Epsilon("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive\[Equal]True;
*)


Format[epsTensor[a_,b_,c_], CForm]:=Format["Epsilon("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;

Format[epsTensorBar[a_,b_,c_], CForm]:=Format["EpsilonBar("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;


Format[K6[a_,b_,c_], CForm]:=Format["K6("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;



Format[K6Bar[a_,b_,c_], CForm]:=Format["K6Bar("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;

Format[T6[a_,b_,c_], CForm]:=Format["T6("<>ToString[a/.subindufo]<>","<>ToString[b /.subindufo]<>","<>ToString[c/.subindufo]<>")",OutputForm]/;UfoActive==True;




Unprotect[Complex,Rational];

Unprotect[CForm, Power];

Format[x_Power,CForm]:=Format[ToString[CForm[x[[1]]]]<>"^"<>ToString[CForm[x[[2]]]],OutputForm]/;(Head[x[[2]]]===Integer && Head[x[[1]]]=!= Plus &&  Head[x[[1]]]=!=Times  && x[[2]]=!=-1);
Format[x_Power,CForm]:=Format["1/"<>ToString[CForm[x[[1]]]],OutputForm]/;(Head[x[[2]]]===Integer && Head[x[[1]]]=!= Plus &&  Head[x[[1]]]=!=Times  && x[[2]]===-1);
Format[x_Power,CForm]:=Format["("<>ToString[CForm[x[[1]]]]<>")^"<>ToString[CForm[x[[2]]]],OutputForm]/;(Head[x[[2]]]===Integer && (Head[x[[1]]]===Plus || Head[x[[1]]]===Times));

Format[x_Power,CForm]:=Format["cmath.exp("<>ToString[CForm[x[[2]]]]<>")",OutputForm]/;(x[[1]]===E );

Format[x_Mass,CForm]:=Format[CalcHepMass[x[[1]],1],OutputForm];

Format[Sqrt[2],CForm]:=Format["sqrt2",OutputForm] /; UseCHForm ==True;

For[i=1,i<=Length[parameters],
If[(FreeQ[parDepNeeded,parameters[[i,1]]]==False ||FreeQ[parDep,parameters[[i,1]]]==False || FreeQ[parNum,parameters[[i,1]]]==False  || FreeQ[VertexList3,parameters[[i,1]]]==False || FreeQ[VertexList4,parameters[[i,1]]] ==False ), 
If[Length[parameters[[i,2]]]>0,
If[parameters[[i,3,1]]>9,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],CForm],Format[CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"k","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->99}];
ReleaseHold[temp];,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]][a__],CForm],Format[CHName[parameters[[nr,1]],maxLength]<>StringReplace[ToString[CForm/@{a}],{" "->"",","->"","{"->"","}"->""}],OutputForm]]], {nr->i,maxLength->99}];
ReleaseHold[temp];
];,
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]],CForm],Format[CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->99}];
ReleaseHold[temp];
If[CPV==True && FreeQ[realVar,parameters[[i,1]]],
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Im"<>ToString[parameters[[i,1]]]],CForm],Format["I"<>CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->99}];
ReleaseHold[temp];
temp=ReplaceAll[Hold[SetDelayed[Format[ToExpression["Re"<>ToString[parameters[[i,1]]]],CForm],Format["R"<>CHName[parameters[[nr,1]],maxLength],OutputForm]]], {nr->i,maxLength->99}];
ReleaseHold[temp];
];
];
];
i++;];

Protect[CForm,Power];

Format[x_Complex, CForm]:=
Which[Re[x]===0,
Format[ToString[CForm[Im[x]]]<>"*complex(0,1)",OutputForm],
Im[x]===0,Format[ToString[CForm[Re[x]]]<>"*complex(1,0)",OutputForm];,
Re[x]=!=0 && Im[x]=!=0,Format["("<>ToString[CForm[Re[x]]]<>"*complex(1,0)+"<>ToString[CForm[Im[x]]]<>"*complex(0,1))",OutputForm]
]/;UfoActive==True;

Format[x_Rational, CForm]:=Format[ToString[Numerator[x]]<>"./"<>ToString[Denominator[x]]<>".", OutputForm]/;UfoActive==True;
Potect[Complex,Rational];

UfoForm[Mass[x_[b_]]]:=UfoForm[getMassW[x,b]];
UfoForm[Mass[x_]]:=UfoForm[getMassW[x]] /; Head[x]===Symbol;

Unprotect[Sin,Cos,Tan,Csc,Sec,ArcSec,ArcCsc,Sqrt,Pi,ArcSin, ArcCos, ArcTan,Power,Complex];
Format[Sqrt[x_],CForm]:=Format["cmath.sqrt("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Sec[x_],CForm]:=Format["1./cmath.cos("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[ArcSec[x_],CForm]:=Format["1./cmath.acos("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Csc[x_],CForm]:=Format["1./cmath.sin("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[ArcCsc[x_],CForm]:=Format["1./cmath.asin("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Sin[x_],CForm]:=Format["cmath.sin("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Cos[x_],CForm]:=Format["cmath.cos("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Tan[x_],CForm]:=Format["cmath.tan("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[ArcSin[x_],CForm]:=Format["cmath.asin("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[ArcCos[x_],CForm]:=Format["cmath.acos("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[ArcTan[x_],CForm]:=Format["cmath.atan("<>ToString[CForm[x]]<>")",OutputForm]/;UfoActive==True;
Format[Pi,CForm]:=Format["cmath.pi",OutputForm]/;UfoActive==True;
(* Format[I,CForm]:=Format["j",OutputForm]/;UfoActive\[Equal]True;
Format[Complex[0,a_Integer],CForm]:=Format[ToString[a]<>"*j",OutputForm]/;UfoActive\[Equal]True; *)
Protect[Sin,Cos,Tan,Sqrt,Pi,Csc,Sec,ArcSec,ArcCsc,ArcSin, ArcCos, ArcTan,Power,Complex];
];

StringReCH[CPV_]:=Block[{i},

StringReplaceConj={};
StringReplaceConj=Join[StringReplaceConj,{RegularExpression["conj\\[(.[^\\]]*)\\]"]:>"$1c"}];

StringReplacementsCH={};
StringReplacementsCH=Join[StringReplacementsCH,{"Sqrt[2]"->"sqrt2"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Alpha]"->"alpha"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Beta]"->"beta"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Psi]"->"gamma"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Delta]"->"delta"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Mu]"->"mu"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Vee]"->"nu"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Kappa]"->"kappa"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Lambda]"->"lambda"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Rho]"->"rho"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Sigma]"->"sigma"}];
StringReplacementsCH=Join[StringReplacementsCH,{"\[Phi]"->"phi"}];
StringReplacementsCH=Join[StringReplacementsCH,{RegularExpression["Cos\\[(.[^\\]]*)\\]"]:>"cos($1)"}];
StringReplacementsCH=Join[StringReplacementsCH,{RegularExpression["Sin\\[(.[^\\]]*)\\]"]:>"sin($1)"}];
StringReplacementsCH=Join[StringReplacementsCH,{RegularExpression["Tan\\[(.[^\\]]*)\\]"]:>"tan($1)"}];

StringReplacementsCH=Join[StringReplacementsCH,{"sin(alpha)"->"sa"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(beta)"->"sb"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(gamma)"->"sg"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(delta)"->"sd"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(epsilon)"->"se"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(xi)"->"sx"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(phi)"->"sf"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(alpha)"->"ca"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(beta)"->"cb"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(gamma)"->"cg"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(delta)"->"cd"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(epsilon)"->"ce"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(xi)"->"cx"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(phi)"->"cf"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(alpha)"->"ta"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(beta)"->"tb"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(gamma)"->"tg"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(delta)"->"td"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(epsilon)"->"te"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(xi)"->"tx"}];
StringReplacementsCH=Join[StringReplacementsCH,{"tan(phi)"->"tf"}];
StringReplacementsCH=Join[StringReplacementsCH,{"cos(ThetaW)"->"CW"}];
StringReplacementsCH=Join[StringReplacementsCH,{"sin(ThetaW)"->"SW"}];


 For[i=1,i<=Length[parameters],
If[Head[parameters[[i,1]]]=!=Mass,
If[(FreeQ[parDepNeeded,parameters[[i,1]]]==False ||FreeQ[parDep,parameters[[i,1]]]==False || FreeQ[parNum,parameters[[i,1]]]==False  || FreeQ[VertexList3,parameters[[i,1]]]==False || FreeQ[VertexList4,parameters[[i,1]]] ==False ), 
ind = parameters[[i,2]];
Switch[Length[ind],
0, StringReplacementsCH = Join[StringReplacementsCH,{ToString[InputForm[parameters[[i,1]]]]->CHName[parameters[[i,1]],6]}];,
1, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace[ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*)\\]"]-> CHName[parameters[[i,1]],5]<>"$1"}];,
2, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace[ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*)\\]"]->CHName[parameters[[i,1]],4]<>"$1$2"}];,
3, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace[ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]-> CHName[parameters[[i,1]],3]<>"$1$2$3"}];,
4, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace[ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]-> CHName[parameters[[i,1]],2]<>"$1$2$3$4"}];
]; 
If[FreeQ[realVar,parameters[[i,1]]] && CPV==True,
Switch[Length[ind],
0, StringReplacementsCH = Join[StringReplacementsCH,{"Re"<>ToString[InputForm[parameters[[i,1]]]]->"R"<>CHName[parameters[[i,1]],5]}];
StringReplacementsCH = Join[StringReplacementsCH,{"Im"<>ToString[InputForm[parameters[[i,1]]]]->"I"<>CHName[parameters[[i,1]],5]}];,
1, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*)\\]"]->"R"<> CHName[parameters[[i,1]],4]<>"$1"}];
StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*)\\]"]->"I"<> CHName[parameters[[i,1]],4]<>"$1"}];,
2, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*)\\]"]->"R"<> CHName[parameters[[i,1]],3]<>"$1$2"}];
StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*)\\]"]->"I"<> CHName[parameters[[i,1]],3]<>"$1$2"}];,
3, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]->"R"<> CHName[parameters[[i,1]],2]<>"$1$2$3"}];
StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]->"I"<> CHName[parameters[[i,1]],2]<>"$1$2$3"}];,
4, StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Re"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]-> "R"<>CHName[parameters[[i,1]],1]<>"$1$2$3$4"}];
StringReplacementsCH = Join[StringReplacementsCH,{RegularExpression[StringReplace["Im"<>ToString[InputForm[parameters[[i,1]]]],{"]"->"\\]","["->"\\["}]<>"\\[(.[^\\]]*),(.[^\\]]*),(.[^\\]]*),(.[^\\]]*)\\]"]-> "I"<>CHName[parameters[[i,1]],1]<>"$1$2$3$4"}]; 
];
];
];
];
i++;];
];

MakeSPhenoFortran:=Block[{i,j,pos,temp,nr,POS},

For[i=1,i<=Length[parameters],
If[FreeQ[RenameParameters,parameters[[i,1]]],
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]],FortranForm],Format[CHName[parameters[[nr,1]],99],OutputForm]]/;SARAHFortran==True], {nr->i,maxLength->(6-Length[parameters[[i,2]]])}];
ReleaseHold[temp];,
pos=Position[RenameParameters,parameters[[i,1]]][[1,1]];
temp=ReplaceAll[Hold[SetDelayed[Format[parameters[[i,1]],FortranForm],Format[Extract[RenameParameters,POS][[2]],OutputForm]]/;SARAHFortran==True], {nr->i,POS->pos,maxLength->(6-Length[parameters[[i,2]]])}];
ReleaseHold[temp];
];
i++;];

For[i=1,i<=Length[Particles[ALL]],
If[Particles[ALL][[i,4]]===G,
temp=ReplaceAll[Hold[SetDelayed[Format[Particles[ALL][[POS,1]],FortranForm],Format[ToExpression[getOutputName[Particles[ALL][[POS,1]]]],OutputForm]]/;SARAHFortran==True], {POS->i}];
ReleaseHold[temp];
(* Format[Particles[ALL][[i,1]],FortranForm]=ToExpression[getOutputName[Particles[ALL][[i,1]]]]; *)
];
i++;];

Format[x_Adj, FortranForm]:=Format["adj"<>ToString[FortranForm[x[[1]]]],OutputForm]/;SARAHFortran==True;
Format[x_re, FortranForm]:=Format["Real("<>ToString[FortranForm[x[[1]]]]<>",dp)",OutputForm]/;SARAHFortran==True;
Format[x_im, FortranForm]:=Format["Aimag("<>ToString[FortranForm[x[[1]]]]<>")",OutputForm]/;SARAHFortran==True;

Unprotect[Span];
Format[x_Span, FortranForm]:=Format[ToString[FortranForm[x[[1]]]]<>":"<>ToString[FortranForm[x[[2]]]],OutputForm]/;SARAHFortran==True;
Protect[Span];

For[i=1,i<=Length[threeIndexParameter],
For[j=1,j<=5,
Format[threeIndexParameter[[i]][j], FortranForm]=Format[SPhenoForm[threeIndexParameter[[i]]]<>ToString[j],OutputForm] ;
j++;];
i++;];

For[i=1,i<=Length[SA`GaugeFixingRXi],
Format[SA`GaugeFixingRXi[[i,1]],FortranForm]=Format["RXi"<>ToString[SA`GaugeFixingRXi[[i,1,1]]],OutputForm];
i++;];


For[i=1,i<=Length[SA`ClebschGordon],
Format[SA`ClebschGordon[[i,1]],FortranForm]=Format["CG"<>ToString[i],OutputForm];
i++;];

];

AdditionalFortranForm:=Block[{i,pos},

For[i=1,i<=Length[ListOfAdditionalParameters],
temp=ReplaceAll[Hold[SetDelayed[Format[ListOfAdditionalParameters[[i,1]],FortranForm],Format[ListOfAdditionalParameters[[nr,2]],OutputForm]]], {nr->i}];
ReleaseHold[temp];
i++;];


];

CreateWOForm:=Block[{i,j,k,j1,j2,j3},
ReplacementsWO = {};

For[i=1,i<=Length[parameters],
If[Head[parameters[[i,1]]]=!=Mass,
Switch[Length[parameters[[i,2]]],
0,
	ReplacementsWO=Join[ReplacementsWO,{parameters[[i,1]]->ToExpression[CHName[parameters[[i,1]]]]}];,
1,
	ReplacementsWO=Join[ReplacementsWO,Table[parameters[[i,1]][j1]->ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]],{j1,1,parameters[[i,3,1]]}]];,

2,
	If[parameters[[i,3,1]]>9,
	ReplacementsWO=Join[ReplacementsWO,Table[parameters[[i,1]][j1,j2]->ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]<>"k"<>ToString[j2]],{j1,1,parameters[[i,3,1]]},{j2,1,parameters[[i,3,2]]}]];,
	ReplacementsWO=Join[ReplacementsWO,Table[parameters[[i,1]][j1,j2]->ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]<>ToString[j2]],{j1,1,parameters[[i,3,1]]},{j2,1,parameters[[i,3,2]]}]];
	];,
3,
	ReplacementsWO=Join[ReplacementsWO,Table[parameters[[i,1]][j1,j2,j3]->ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]<>ToString[j2]<>ToString[j3]],{j1,1,parameters[[i,3,1]]},{j2,1,parameters[[i,3,2]]},{j3,1,parameters[[i,3,3]]}]];
	If[FreeQ[parameters[[i,2]],flavor]==False,
	ReplacementsWO=Join[ReplacementsWO,Table[parameters[[i,1]][j1][j2,j3]->ToExpression[CHName[parameters[[i,1]]]<>ToString[j1]<>ToString[j2]<>ToString[j3]],{j1,1,parameters[[i,3,1]]},{j2,1,parameters[[i,3,2]]},{j3,1,parameters[[i,3,3]]}]];
	];
];
];
i++;];

ReplacementsWO = Flatten[ReplacementsWO];

];







CHName[part_]:=Block[{pos,temp},
temp=getEntryParameter[part,OutputName];
If[Head[part]===Mass,
Return[CalcHepMass[part,1]];
];
If[temp===None,
temp=ToString[part];
temp=StringReplace[temp,{"["->"","]"->""}];,
temp=ToString[temp];
];
Return[temp];
];

CHName[part_,maxL_]:=Block[{pos,temp},
If[Head[part]===Mass,
temp=CalcHepMass[part[[1]],1];,
temp=getEntryParameter[part,OutputName];
If[temp===None,
temp=ToString[part];
temp=StringReplace[temp,{"["->"","]"->""}];,
temp=ToString[temp];
];
];
If[StringLength[temp]>maxL,
Message[CHName::VariableTooLong,part,maxL];
temp=StringTake[temp,maxL];
];
If[WritingCalcHep===True,
If[temp=="M1",temp="MG1";]; (* name occupied by CalcHep *)
If[temp=="M2",temp="MG2";];(* name occupied by CalcHep *)
If[temp=="M3",temp="MG3";];(* name occupied by CalcHep *)
];
Return[temp];
];


ExportModelInformation:=Block[{i,particles, para},
Print["Writing Information about Particles"];

particles=OpenWrite[ToFileName[$sarahCurrentOutputMainDir,"ParticlesList.m"]];
para=OpenWrite[ToFileName[$sarahCurrentOutputMainDir,"ParametersList.m"]];


(*
states = {GaugeES};

For[i=1,i\[LessEqual]Length[Rotation],
states=Join[states,{Rotation[[i,1]]}];
i++;
];
*)
states = NameOfStates;
For[j=1,j<=Length[states],
(*
Set[Particles[Current], ToExpression["Particles"<>ToString[states[[j]]  ] ] ];
Set[defInput,ToExpression["ParticleDefinitions"<>ToString[states[[j]]]]];
*)
Particles[Current] = Particles[states[[j]]];
defInput=ParticleDefinitions[states[[j]]];
defInput = defInput /.diracSub[states[[j]]];

partS={}; partV={}; partF={}; partG={}; partA={}; partList={};
diracTemp = diracFermions[states];

For[i=1,i<=Length[Particles[Current]],
If[FreeQ[defInput,Particles[Current][[i,1]]]==False,
pos=Position[defInput,Particles[Current][[i,1]]][[1,1]];
moreInfo = Extract[defInput,pos][[2]];,
moreInfo = {};
];

 partList = Join[partList,{{Particles[Current][[i,1]],Flatten[{Generations-> Particles[Current][[i,3]], Type ->Particles[Current][[i,4]],  Indizes -> Particles[Current][[i,5]],Selfconjugate-> TrueQ[Particles[Current][[i,1]]== conj[Particles[Current][[i,1]]]],moreInfo}]}}];
i++;];

Print[partList];


 If[Length[partList]>0,
WriteString[particles, "Particle Definitions in "<>ToString[states[[j]]]<> ": \n"];

For[i=1,i<=Length[partList],
WriteString[particles, "{"<>ToString[InputForm[partList[[i,1]]]] <> ",         {"];
For[k=1,k<=Length[partList[[i,2]]],
WriteString[particles,  "                " <>ToString[InputForm[partList[[i,2,k]]]]];
If[k==Length[partList[[i,2]]],
WriteString[particles,"} \n \n"];,
WriteString[particles,", \n"];
];
k++;];
i++;];
];

j++;];

Print["Writing Information about Parameters"];


defInput = ParameterDefinitions;
paraList = {};




For[i=1,i<=Length[parameters],

If[FreeQ[defInput,parameters[[i,1]]]==False,
pos=Position[defInput,parameters[[i,1]]][[1,1]];
moreInfo = Extract[defInput,pos][[2]];,
moreInfo = {};
];

 paraList = Join[paraList,{{parameters[[i,1]],Flatten[{Dimensions-> parameters[[i,3]], Real ->MemberQ[realVar,parameters[[i,1]]],moreInfo}]}}];
i++;];


WriteString[para, "Defined Parameters : \n"];

For[i=1,i<=Length[paraList],
WriteString[para, "{" <> ToString[InputForm[paraList[[i,1]]]] <> ",   { \n"];
For[j=1,j<=Length[paraList[[i,2]]],
WriteString[para,"                                   "<>ToString[InputForm[paraList[[i,2,j]]]]]; 
If[j==Length[paraList[[i,2]]],
WriteString[para,"} \n \n"];,
WriteString[para,", \n"];
];
j++;];
i++;];





Close[particles];
Close[para];

Print["Done. Output is in ",$sarahCurrentOutputMainDir ];

];

AddExp[string_,exp_,down_]:=Block[{basis="",super="", sub="",temp,temp2,res,next},
temp=string;
next = StringTake[temp,1];

While[next=!="_" &&  next=!="^"  && temp=!="",
basis= basis <>StringTake[temp,1];
temp=StringDrop[temp,1];
If[temp=!="",
next = StringTake[temp,1];,
next "";
];
];

If[temp=!="",
temp2 = StringTake[temp,1];
temp = StringDrop[temp,1];
res = ExtractSubSuper[temp];
temp=res[[1]];
Switch[temp2,
"_", sub = res[[2]];,
"^", super=res[[2]];
];
];
If[temp=!="",
temp2 = StringTake[temp,1];
temp = StringDrop[temp,1];
If[temp=!="",
res = ExtractSubSuper[temp];,
res={"",""};
];
temp=res[[1]];
Switch[temp2,
"_", sub =res[[2]];,
"^", super=res[[2]];
];
];
If[StringTake[basis,{1}]==="{",
If[(StringCount[basis,"{"])===1+(StringCount[basis,"}"]),basis=StringDrop[basis,{1}];];
];

res = basis;


If[down =!="" || sub =!= "",
res = StringReplace[res <>"_{"<>sub <>","<>down <>"}",{"{,"->"{",",}"->"}"}];
];

If[exp =!="" || super =!= "",
res = StringReplace[ res <>"^{"<>super <>","<>exp <>"}",{"{,"->"{",",}"->"}"}];
];

Return[res];

];

ExtractSubSuper[string_]:=Block[{temp,open,temp3,next},
temp=string;

If[StringTake[temp,1]==="{",
open=1;
temp3="";
temp=StringDrop[temp,1];
While[StringTake[temp,1]=!="}" || open =!= 1,
If[StringTake[temp,1]==="}",open--;];
If[StringTake[temp,1]==="{",open++;];
temp3 = temp3<>StringTake[temp,1];
temp = StringDrop[temp,1];
];
temp = StringDrop[temp,1];,
temp3="";
next = StringTake[temp,1];
While[temp=!="" && next=!="^" &&  next=!="_",
temp3 = temp3<>StringTake[temp,1];
temp = StringDrop[temp,1];
If[temp=!="",
next=StringTake[temp,1];,
next="";
];
];
];

Return[{temp,temp3}];

];

getLaTeXlength[exp_Times]:=Plus@@getLR/@Plus@@exp;
getLaTeXlength[exp_Plus]:=Plus@@getLR/@exp;
getLaTeXlength[exp_List]:=Plus@@getLR[Plus@@exp];
getLaTeXlength[exp_Power]:=Plus@@getLR/@Plus@@exp;
getLaTeXlength[exp_]:=Plus@@getLR[exp];


getLR[x_Plus]:=getLR/@x;
getLR[x_Power]:=1+getLR/@Plus@@x;
getLR[x_Times]:=1+getLR/@Plus@@x;
getLR[x_Rational]:=2;
getLR[x_List]:=1+getLR[Plus@@x];
getLR[x_conj]:=1+getLR[x[[1]]];
getLR[x_Mom]:=3+getLR[x[[1]]];
getLR[x_Der]:=3+getLR[x[[1]]];
getLR[x_RXi]:=1+getLR[x[[1]]];
getLR[x_Cp]:=2+getLR/@Plus@@x;

getLR[x_B1]:=2+getLR/@Plus@@x;
getLR[x_B0]:=2+getLR/@Plus@@x;
getLR[x_B22]:=10+getLR/@Plus@@x;
getLR[x_B00]:=10+getLR/@Plus@@x;
getLR[x_F0]:=2+getLR/@Plus@@x;
getLR[x_G0]:=2+getLR/@Plus@@x;
getLR[x_H0]:=2+getLR/@Plus@@x;
getLR[x_A0]:=10+getLR[x[[1]]];
getLR[x_Sin]:=7+getLR[x[[1]]];
getLR[x_Cos]:=7+getLR[x[[1]]];
getLR[x_Tan]:=7+getLR[x[[1]]];
getLR[x_Cot]:=7+getLR[x[[1]]];
getLR[x_Sec]:=7+getLR[x[[1]]];
getLR[x_Csc]:=7+getLR[x[[1]]];
getLR[x_sum]:=4+getLR[x[[4]]];
getLR[x_MatMul]:=3+getLR[Plus@@x];
getLR[x_trace]:=4+getLR[Plus@@x];
getLR[x_Tp]:=2+getLR[x[[1]]];
getLR[x_Adj]:=3+getLR[x[[1]]];

getLR[x_Delta]:=3+getLR/@Plus@@x;
getLR[x_Kronecker]:=1+getLR/@Plus@@x;
getLR[x_Mass]:=1+getLR[x[[1]]];
getLR[x_Mass2]:=2+getLR[x[[1]]];
getLR[x_abs]:=5+getLR[x[[1]]];

getLR[x_]:=Block[{},
If[Head[Head[x]]==MatMul, Return[8+getLR[Plus@@x[[1]]]]];
If[Head[x]==Integer, If[x>= 0,Return[1+Floor[Log[10.,Abs[x]]]], Return[2+Floor[Log[10.,Abs[x]]]]]];
If[Head[x]==Complex, If[Im[x]>0 && Re[x]>0,Return[2], If[x/I>= 0,Return[1], Return[2]]]];
If[Head[TeXLength[x]]===Integer,Return[TeXLength[x]]];
If[Head[TeXLength[Head[x]]]===Integer,Return[TeXLength[Head[x]] + Plus@@getLR[Plus@@x]]];
If[FreeQ[x,PL]==False || FreeQ[x,PR]==False, Return[getLR[x[[0]]]]];
If[AtomQ[x],
Return[1.];,
Return[1.5 + getLR[Plus@@x] ];
];
];




