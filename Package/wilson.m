(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



InitDiagramGeneration:=Block[{i,j,k,l,temp,pos},
OneKnown={};
TwoKnown={};
ThreeKnown={};
OneKnownIns={};
TwoKnownIns={};
ThreeKnownIns={};

temp =Join[VertexList3,VertexList4]/. a_[{b__}]->a;


For[i=1,i<=Length[temp],
For[j=1,j<=Length[temp[[i,1]]],
If[FreeQ[OneKnownIns,C[temp[[i,1,j]]]],
OneKnown = Join[OneKnown,{Delete[temp[[i,1]],j]}];
OneKnownIns= Join[OneKnownIns,{C[temp[[i,1,j]]]}];,
pos= Position[OneKnownIns,C[temp[[i,1,j]]],1,1][[1,1]];
OneKnown[[pos]] = Join[OneKnown[[pos]],Delete[temp[[i,1]],j]];
];
For[k=j+1,k<=Length[temp[[i,1]]],
If[FreeQ[TwoKnownIns,C[temp[[i,1,j]],temp[[i,1,k]]]],
TwoKnown = Join[TwoKnown,{Delete[temp[[i,1]],{{j},{k}}]}];
TwoKnownIns= Join[TwoKnownIns,{C[temp[[i,1,j]],temp[[i,1,k]]]}];,
pos= Position[TwoKnownIns,C[temp[[i,1,j]],temp[[i,1,k]]],1,1][[1,1]];
TwoKnown[[pos]] = Join[TwoKnown[[pos]],Delete[temp[[i,1]],{{j},{k}}]];
];
For[l=k+1,l<=Length[temp[[i,1]]],
If[FreeQ[ThreeKnownIns,C[temp[[i,1,j]],temp[[i,1,k]],temp[[i,1,l]]]],
ThreeKnown = Join[ThreeKnown,{Delete[temp[[i,1]],{{j},{k},{l}}]}];
ThreeKnownIns= Join[ThreeKnownIns,{C[temp[[i,1,j]],temp[[i,1,k]],temp[[i,1,l]]]}];,
pos= Position[ThreeKnownIns,C[temp[[i,1,j]],temp[[i,1,k]],temp[[i,1,l]]],1,1][[1,1]];
ThreeKnown[[pos]] = Join[ThreeKnown[[pos]],Delete[temp[[i,1]],{{j},{k},{l}}]];
];
l++;];
k++;];
j++;];
i++;];


OneKnown=Intersection/@OneKnown;
TwoKnown=Intersection/@TwoKnown;
ThreeKnown=Intersection/@ThreeKnown;

];

InsFields[process_]:=Block[{i},
DiagramList={};
ListInsertedVertices={};
AddFieldToDiagram[process];
Return[DiagramList];
];


AddFieldToDiagram[process_]:=Block[{pos, possFields,i,possFieldsSub, newProcess},
currentInsertion = Cases[process,FieldToInsert[_],3,1][[1]];
pos = Position[process[[1]],currentInsertion];
For[i=1,i<=Length[pos],
currentVertex=Extract[process[[1]],pos[[i,1]]];
If[Length[pos[[i]]]==2,
If[i==1,
possFields=getPossibleFields[currentVertex];,
possFields=Intersection[possFields,getPossibleFields[currentVertex]];
];,
If[i==1,
possFields=AntiField/@getPossibleFields[currentVertex];,
possFields=Intersection[possFields,AntiField/@getPossibleFields[currentVertex]];
];
];
i++;];
If[Length[possFields]>0,
possFieldsSub=Flatten[Table[{currentInsertion->possFields[[i]]},{i,1,Length[possFields]}]];
For[i=1,i<=Length[possFieldsSub],
newProcess= process /. possFieldsSub[[i]];
Switch[CheckVertex[newProcess],
Finished,
   
		If[FreeQ[ListInsertedVertices,newProcess[[1]]] || SA`CheckSameVertices===False,
		DiagramList = Join[DiagramList,{newProcess}];
		ListInsertedVertices=Join[ListInsertedVertices,{newProcess[[1]]}];
		];,
GoOn,
		AddFieldToDiagram[newProcess];
];
i++];
];
];



CheckVertex[process_]:=Block[{goOn,i},
finishedVertices =Cases[process[[1]],x_?FieldToInsertQ,1];
If[Length[finishedVertices]==0,
Return[GoOn];,
goOn = True;
 For[i=1,i<=Length[finishedVertices],
If[FreeQ[VerticesInv[All],finishedVertices[[i]]],
goOn=False;
];
i++;]; 
If[goOn==True,
If[Length[finishedVertices]==Length[process[[1]]],
Return[Finished];,
Return[GoOn];
];,
Return[stop];
];
];
];

FieldToInsertQ[x_]:=Return[FreeQ[x,FieldToInsert]];

getPossibleFields[vertex_]:=Block[{temp,pos},
temp = DeleteCases[vertex,FieldToInsert[_]];
temp = DeleteCases[temp,AntiField[FieldToInsert[_]]];
Switch[Length[temp],
0, Return[OneKnownIns /. C->Plus];,
1,
	pos=Position[OneKnownIns,temp,1,1];
	If[pos=!={},Return[Extract[OneKnown,pos[[1,1]]]];,Return[{}];];,
2,
	pos=Position[TwoKnownIns,temp,1,1];
	If[pos=!={},Return[Extract[TwoKnown,pos[[1,1]]]];,Return[{}];];,
3,
	pos=Position[ThreeKnownIns,temp,1,1];
	If[pos=!={},Return[Extract[ThreeKnown,pos[[1,1]]]];,Return[{}];];
];
];


GenerateBoxDiagrams[f1_,f2_,f3_,f4_]:=Block[{},
AllBoxDiagrams={};

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f3,External[4]->f4,Index[1]->gt1,Index[2]->gt2,Index[3]->gt3,Index[4]->gt4, InsertionOrder ->1}};
AllBoxDiagrams=InsFields[currentTop];


currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f4,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f2,External[3]->f4,External[4]->f3,Index[1]->gt1,Index[2]->gt2,Index[3]->gt4,Index[4]->gt3, InsertionOrder ->2}};
AllBoxDiagrams=Join[AllBoxDiagrams,InsFields[currentTop]];


currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f4,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f3,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f2,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f4,External[3]->f3,External[4]->f2,Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2, InsertionOrder ->3}};
InsFields[currentTop];
AllBoxDiagrams=Join[AllBoxDiagrams,InsFields[currentTop]]; 

currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[4]]],C[f3,AntiField[FieldToInsert[1]],FieldToInsert[2]],C[f2,AntiField[FieldToInsert[2]],FieldToInsert[3]],C[f4,AntiField[FieldToInsert[3]],FieldToInsert[4]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],Internal[4]->FieldToInsert[4],External[1]->f1,External[2]->f3,External[3]->f2,External[4]->f4,Index[1]->gt1,Index[2]->gt4,Index[3]->gt3,Index[4]->gt2, InsertionOrder ->4}};
InsFields[currentTop];
AllBoxDiagrams=Join[AllBoxDiagrams,InsFields[currentTop]]; 


Return[AllBoxDiagrams];
];




GeneratePenguinDiagrams[f1_,f2_,f3_]:=Block[{},
currentTop={{C[f1,FieldToInsert[1],AntiField[FieldToInsert[2]]],C[f2,AntiField[FieldToInsert[1]],FieldToInsert[3]],C[f3,AntiField[FieldToInsert[3]],FieldToInsert[2]]},{Internal[1]->FieldToInsert[1],Internal[2]->FieldToInsert[2],Internal[3]->FieldToInsert[3],External[1]->f1,External[2]->f2,External[3]->f3}};
Return[InsFields[currentTop]];
];



