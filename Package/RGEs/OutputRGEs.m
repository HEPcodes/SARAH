(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
Options[PrepareRGEs]={OnlyDiagonal->True,BetaFunctions->ALL,ComplexPhases->False};
PrepareRGEs[opt___]:=PrepareRGEsFunc[OnlyDiagonal/.{opt}/.Options[PrepareRGEs],BetaFunctions/.{opt}/.Options[PrepareRGEs],ComplexPhases/.{opt}/.Options[PrepareRGEs]  ];
PrepareRGEsFunc[OnlyDiag_,set_,complex_]:=Block[{i,j1,j2,j3,j4,dim,all},
(* UseSymmASymm=True;  *)
SA`Doc`File = "Package/RGEs/OutputRGEs.nb";
SA`Doc`Name = "PrepareRGEsFunc";
SA`Doc`Info = "This function first collects all parameters for which the beta-function need to be translated. Afterwards, it call the main function (InitEquations) to translate the expression into proper Mathematica syntax. By default, only diagonal entries are considered because the RGE evaluation with Mathematica is pretty slow. This can be changed by the options. Also only a subset of parameters could be included via the second input.";
SA`Doc`Input={"OnlyDiag"->"Consider only diagonal entries in matrices","set"->"Considered set of parameters","complex"->"consider complex parameters"};
SA`Doc`GenerateEntry[];

If[set===ALL,
If[SupersymmetricModel=!=False,
all={BetaLSi, BetaBij, BetaTijk,BetaVEV,Betam2ij/.Flatten[Flatten[TraceAbbr,1] /.{a_,b_Times|b_Plus |b_Symbol |b_trace}->(a->b)]/. Kronecker->Delta, BetaMi,BetaGauge,BetaYijk,BetaMuij,BetaLi};
If[AddDiracGauginos===True,all=Join[all,{BetaDGi}];];
If[AddRGEsNonHolomorphic===True,all=Join[Join[all,{BetaRijk}],{BetaMFij}];];
AllRGEs=Flatten[all,1];,
AllRGEs=Flatten[{ BetaBij, BetaTijk,BetaVEV,BetaGauge,BetaYijk,BetaMFij,BetaLijkl},1];
];,
AllRGEs=Flatten[set,1];
];
AllParameters=Transpose[AllRGEs][[1]]/. A_[i1,___]->A;

subParScale={};
AllParametersEx={};
For[i=1,i<=Length[AllParameters],
dim=getDimParameter[AllParameters[[i]]];
If[dim==={1} || dim==={0} ,dim={};];
Switch[Length[dim],
0,
	subParScale=Join[subParScale,{AllParameters[[i]]->AllParameters[[i]][t]}];
	AllParametersEx=Join[AllParametersEx,{AllParameters[[i]]}];,
1,
	subParScale=Join[subParScale,{AllParameters[[i]]->Table[AllParameters[[i]][i1][t],{i1,1,dim[[1]]}]}];
	AllParametersEx=Join[AllParametersEx,Table[AllParameters[[i]][i1],{i1,1,dim[[1]]}]];,
2,
	subParScale=Join[subParScale,{AllParameters[[i]]->Table[AllParameters[[i]][i1,i2][t] If[OnlyDiag,Delta[i1,i2],1],{i1,1,dim[[1]]},{i2,1,dim[[2]]}]}];
	AllParametersEx=Join[AllParametersEx,Table[AllParameters[[i]][i1,i2] If[OnlyDiag,Delta[i1,i2],1],{i1,1,dim[[1]]},{i2,1,dim[[2]]}]];,
3,
	subParScale=Join[subParScale,{AllParameters[[i]]->Table[AllParameters[[i]][i1,i2,i3][t],{i1,1,dim[[1]]},{i2,1,dim[[2]]},{i3,1,dim[[2]]}]}];
	AllParametersEx=Join[AllParametersEx,Table[AllParameters[[i]][i1,i2,i3],{i1,1,dim[[1]]},{i2,1,dim[[2]]},{i3,1,dim[[3]]}]];,
4,subParScale=Join[subParScale,{AllParameters[[i]]->Table[AllParameters[[i]][i1,i2,i3,i4][t],{i1,1,dim[[1]]},{i2,1,dim[[2]]},{i3,1,dim[[3]]}],{i4,1,dim[[4]]}}];	AllParametersEx=Join[AllParametersEx,Table[AllParameters[[i]][i1,i2,i3,i4],{i1,1,dim[[1]]},{i2,1,dim[[2]]},{i3,1,dim[[3]]},{i4,1,dim[[4]]}]];
];
i++;];
AllParametersEx=DeleteCases[Flatten[AllParametersEx],0];


InitEquations[OnlyDiag,complex];
SA`Doc`EndEntry[];
(*  UseSymmASymm=False;  *)
];




(* ::Input::Initialization:: *)
InitEquations[OnlyDiag_,complex_]:=Block[{i,jj1,jj2,jj3,jj4,dim,temp,tempNew},
SA`Doc`File = "Package/RGEs/OutputRGEs.nb";
SA`Doc`Name = "InitEquations";
SA`Doc`Info = "This function takes the beta-function in SARAH format and translates them into Mathematica format. All sums/matrix mulitplications are performed and an explicit scale index 't' is attached to all parameters.";
SA`Doc`Input={"OnlyDiag"->"Consider only diagonal entries in matrices","set"->"Considered set of parameters","complex"->"consider parameters to be complex"};
SA`Doc`GenerateEntry[];

AllEquations={};
subExpandRGEs = {trace[a__]:>Tr[Dot[a]], MatMul->Dot,Adj[x_]:>Transpose[Conjugate[x]],Tp[x_]:>Transpose[x], conj->Conjugate, sum[a_,b_,c_,d_]:>Sum[d,{a,b,c}], ScalarProd[x__]:>Dot[x]};
If[complex=!=True,
subExpandRGEs=Join[{Conjugate[x___]->x},subExpandRGEs]
];
pre1Loop=Log[10]/(16 Pi^2);
pre2Loop=Log[10]/(16 Pi^2)^2;
For[i=1,i<=Length[AllRGEs],
If[FreeQ[AllRGEs[[i,1]],i1],
UseSymmASymm=True;
temp=pre1Loop *(AllRGEs[[i,2]]//.subExpandRGEs /. subParScale//. A_List[b__Integer]:>A[[b]])+inc2L pre2Loop*(AllRGEs[[i,3]]//.subExpandRGEs /. subParScale//. A_List[b__Integer]:>A[[b]]) //.(-a__)[t]->(-a[t]) //.0[t]->0;
UseSymmASymm=False;
AllEquations=Join[AllEquations,{AllRGEs[[i,1]]'[t]==temp}];,
UseSymmASymm=True;
temp=pre1Loop *(AllRGEs[[i,2]] //. subExpandRGEs/. subParScale)+ inc2L pre2Loop*(AllRGEs[[i,3]]//.subExpandRGEs/. subParScale) //.(-a__)[t]->(-a[t]) //.0[t]->0;
UseSymmASymm=False;
dim=getDimParameter[AllRGEs[[i,1]] /. A_[i1,b___]->A];
Switch[Length[dim],
1,
	For[jj1=1,jj1<=dim[[1]],
	UseSymmASymm=True;
	Update[];
	tempNew=temp /. i1->jj1//. A_List[b__Integer]:>A[[b]]//.(-a__)[t]->(-a[t]) //.0[t]->0;
	UseSymmASymm=False;
	AllEquations=Join[AllEquations,{(AllRGEs[[i,1]]'[t] /. i1->jj1) ==tempNew }];
	jj1++;];,
2,
	For[jj1=1,jj1<=dim[[1]],
	For[jj2=1,jj2<=dim[[2]],
	If[jj1==jj2 || OnlyDiag==False,
	UseSymmASymm=True;
	Update[];
	tempNew=(temp /. {i1->jj1,i2->jj2} )//. A_List[b__Integer]:>A[[b]]//.(-a__)[t]->(-a[t]) //.0[t]->0;
	UseSymmASymm=False;
	AllEquations=Join[AllEquations,{(AllRGEs[[i,1]]'[t] /. {i1->jj1, i2->jj2}) ==tempNew}];
	];
	jj2++;];
	jj1++;];,

3,
	For[jj1=1,jj1<=dim[[1]],
	For[jj2=1,jj2<=dim[[2]],
	For[jj3=1,jj3<=dim[[3]],
	UseSymmASymm=True;
	Update[];
	tempNew=temp /. {i1->jj1,i2->jj2,i3->jj3} //. A_List[b__Integer]:>A[[b]]//.(-a__)[t]->(-a[t]) //.0[t]->0;
	UseSymmASymm=False;
	AllEquations=Join[AllEquations,{(AllRGEs[[i,1]]'[t] /. {i1->jj1, i2->jj2, i3->jj3}) ==tempNew}];
	jj3++;];
	jj2++;];
	jj1++;];,

4,
	For[jj1=1,jj1<=dim[[1]],
	For[jj2=1,jj2<=dim[[2]],
	For[jj3=1,jj3<=dim[[3]],
	For[jj4=1,jj4<=dim[[4]],
	UseSymmASymm=True;
	Update[];
	tempNew=temp /. {i1->jj1,i2->jj2,i3->jj3,i4->jj4} //. A_List[b__Integer]:>A[[b]]//.(-a__)[t]->(-a[t]) //.0[t]->0;
	UseSymmASymm=False;
	AllEquations=Join[AllEquations,{(AllRGEs[[i,1]]'[t] /. {i1->jj1, i2->jj2, i3->jj3, i4->jj4}) ==tempNew }];
	jj4++;];
	jj3++;];
	jj2++;];
	jj1++;];
	
];
];
i++;];

SA`Doc`EndEntry[];
];


(* ::Input::Initialization:: *)
Options[RunRGEs]={TwoLoop->True};
RunRGEs[input_,start_,finish_,opt___]:=RunRGEsFunc[input,start,finish,TwoLoop/.{opt}/.Options[RunRGEs]];
RunRGEsFunc[input_,start_,finish_,twoloop_]:=Block[{init,coeff2L},
If[twoloop=!=False,coeff2L=1;,coeff2L=0;];
init={};
For[i=1,i<=Length[AllParametersEx],
init=Join[init,{AllParametersEx[[i]][start]==(AllParametersEx[[i]] /. input /. (AllParametersEx[[i]]->0))}];
i++;];
equations=Join[AllEquations /. inc2L->coeff2L/. Xi->0,init];
sol=NDSolve[equations,AllParametersEx,{t,start,finish}];
Return[sol];

];

OutputRGEsFile[file_]:=Block[{i,j,out},
SA`Doc`File = "Package/RGEs/OutputRGEs.nb";
SA`Doc`Name = "OutputRGEsFile";
SA`Doc`Info = "This routines writes the RGEs to an external file together with a function (RunRGEs) to run them.";
SA`Doc`Input={"file"->"output file name"};
SA`Doc`GenerateEntry[];


out=OpenWrite[file];
WriteString[out, "(* ---------------------------------------------------------------------- *) \n"];
WriteString[out, "(* This model file was automatically created by SARAH version"<>SA`Version<>" *) \n"];
WriteString[out, "(* SARAH References: arXiv:0806.0538, 0909.2863, 1002.0840, 1207.0906   *) \n"];
WriteString[out, "(* (c) Florian Staub, 2013  *) \n"];
WriteString[out, "(* ---------------------------------------------------------------------- *) \n"];
Minutes=If[Date[][[5]]<10,"0"<>ToString[Date[][[5]]],ToString[Date[][[5]]]];
WriteString[out, "(* File created at "<>ToString[Date[][[4]]]<>":"<>Minutes<>" on "<>ToString[Date[][[3]]]<>"."<>ToString[Date[][[2]]]<>"."<>ToString[Date[][[1]]]<>"  *) \n"];
WriteString[out, "(* ---------------------------------------------------------------------- *) \n \n \n"];

WriteString[out,"(* ###################### *)\n"];
WriteString[out,"(* All running parameters *)\n"];
WriteString[out,"(* ###################### *)\n\n"];
WriteString[out,"AllParametersEx = "];(* <>ToString[InputForm[AllParametersEx]]<>"; \n\n"]; *)
Write[out,AllParametersEx];
WriteString[out,"\n\n"];
WriteString[out,"(* ###################### *)\n"];
WriteString[out,"(*   All Beta Functions   *)\n"];
WriteString[out,"(* ###################### *)\n\n"];
WriteString[out,"AllEquations = "]; (*<>ToString[InputForm[AllEquations]]<>"; \n\n"]; *)
Write[out,AllEquations];
WriteString[out,"\n\n"];
WriteString[out,"(* ###################### *)\n"];
WriteString[out,"(*  Function to run RGEs  *)\n"];
WriteString[out,"(* ###################### *)\n\n"];
WriteString[out,"Options[RunRGEs]={TwoLoop\[Rule]True}; \n"];
WriteString[out,"RunRGEs[input_,start_,finish_,opt___]:=RunRGEsFunc[input,start,finish,TwoLoop/.{opt}/.Options[RunRGEs]]; \n"];
WriteString[out,"RunRGEsFunc[input_,start_,finish_,twoloop_]:=Block[{init}, \n"];
WriteString[out,"If[twoloop=!=False,coeff2L=1;,coeff2L=0;]; \n"];
WriteString[out,"init={}; \n"];
WriteString[out,"For[i=1,i\[LessEqual]Length[AllParametersEx], \n"];
WriteString[out,"init=Join[init,{AllParametersEx[[i]][start]\[Equal](AllParametersEx[[i]] /. input /. (AllParametersEx[[i]]\[Rule]0))}]; \n"];
WriteString[out,"i++;]; \n"];
WriteString[out,"equations=Join[AllEquations/. inc2L\[Rule]coeff2L /. Xi->0,init]; \n"];
WriteString[out,"sol=NDSolve[equations,AllParametersEx,{t,start,finish}]; \n"];
WriteString[out,"Return[sol]; \n"];
WriteString[out,"]; \n"];
Close[out];

SA`Doc`EndEntry[];
];

CreateFileForRunning:=Block[{},
SA`Doc`File = "Package/RGEs/OutputRGEs.nb";
SA`Doc`Name = "CreateFileForRunning";
SA`Doc`Info = "This function translates the calculated RGEs into a format which can be used by NDSolve and stores the output in a separate file 'RunRGEs.m'. This file can then independently of SARAH be loaded in Mathematica to perform an RGE running (and do some plots of the scale dependencen of parameters).";
SA`Doc`GenerateEntry[];

Print["Writing Mathematica code to evaluate RGEs"];
PrepareRGEs[];
OutputRGEsFile[ToFileName[$sarahCurrentRGEDir,"RunRGEs.m"]];

SA`Doc`EndEntry[];
];


