(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)




Options[CalcRGEs]={TwoLoop->True,ReadLists->False, VariableGenerations->{}, NoMatrixMultiplication->False, SimplifyExpressions->True, ForceMatMul->False, IgnoreAt2Loop->{},WriteFunctionsToRun->True};

CalcRGEs[opt___ ]:=If[SupersymmetricModel=!=False,CalculateRGEs[TwoLoop/.{opt}/.Options[CalcRGEs],ReadLists/.{opt}/.Options[CalcRGEs],VariableGenerations/.{opt}/.Options[CalcRGEs],NoMatrixMultiplication/.{opt}/.Options[CalcRGEs],SimplifyExpressions/.{opt}/.Options[CalcRGEs], ForceMatMul/.{opt}/.Options[CalcRGEs], IgnoreAt2Loop/.{opt}/.Options[CalcRGEs],WriteFunctionsToRun/.{opt}/.Options[CalcRGEs]];,
CalcRGEsNonSUSY[TwoLoop/.{opt}/.Options[CalcRGEs],ReadLists/.{opt}/.Options[CalcRGEs],VariableGenerations/.{opt}/.Options[CalcRGEs],NoMatrixMultiplication/.{opt}/.Options[CalcRGEs],SimplifyExpressions/.{opt}/.Options[CalcRGEs], ForceMatMul/.{opt}/.Options[CalcRGEs], IgnoreAt2Loop/.{opt}/.Options[CalcRGEs],WriteFunctionsToRun/.{opt}/.Options[CalcRGEs]];
];

MakeDummyListRGEs:=If[SupersymmetricModel=!=False,MakeDummyListRGEsSUSY,MakeDummyListRGEsNonSUSY];


CalculateRGEs[TwoL_, ReadLists_,VarGens_, NoMatMul_,Simp_, Force_,IgnoreAt2L_,WriteRunning_]:=Block[{i,startedtime},

Off[CreateDirectory::ioerr];

(*
Print["--------------------------------"];
Print["Calculate supersymmetric RGEs   "];
Print["--------------------------------"];
*)
Print[StyleForm["Calculate supersymmetric RGEs","Section",FontSize->12]];
startedtime=TimeUsed[];
SA`SubIgnore2L=Table[IgnoreAt2L[[i]]->0,{i,1,Length[IgnoreAt2L]}];


$sarahCurrentRGEDir=ToFileName[{$sarahCurrentOutputMainDir,"RGEs"}];
RGEsCalculated = True;
If[FileExistsQ[$sarahCurrentOutputMainDir]=!=True,
CreateDirectory[$sarahCurrentOutputMainDir];
];
If[FileExistsQ[$sarahCurrentRGEDir]=!=True,
CreateDirectory[$sarahCurrentRGEDir];
];


GenerateCouplingList[NoMatMul, Force];
MakeParticleLists;
InitBetaFunctions;
CalcGroupFactors[VarGens];


If[ReadLists==False,
CalcGammaij[TwoL,Simp];
CalcBetaTriSuperpotential[TwoL,Simp];
CalcBetaBiSuperpotential[TwoL,Simp];
CalcBetaOneSuperpotential[TwoL,Simp];
CalcBetaTriSoftBreaking[TwoL,Simp];
CalcBetaTriSoftBreakingNew[TwoL,Simp];
CalcBetaBiSoftBreaking[TwoL,Simp];
CalcBetaBiSoftBreakingNew[TwoL,Simp];
CalcBetaOneSoftBreaking[TwoL,Simp]; 
CalcBetaOneSoftBreakingNew[TwoL,Simp]; 
CalcRGEtraces[TwoL,Simp];
CalcBetaScalarMass[TwoL,Simp];
If[AddDiracGauginos===True,CalcBetaDiracGauginos[TwoL,Simp]];
If[AddFIU1===True,CalcBetaFI[TwoL,Simp]];
CalcBetaGaugino[TwoL,Simp];
CalcBetaGauge[TwoL,Simp];
CalcBetaQuadSuperpotential[TwoL,Simp];
CalcBetaQuadSoftBreaking[TwoL,Simp];
CalcBetaVEVs[TwoL,Simp];

If[FileExistsQ[$sarahCurrentOutputMainDir]=!=True,
CreateDirectory[$sarahCurrentOutputMainDir];
];

If[ThreeIndexParametersInvolved===True,
Put[BetaMi3I,ToFileName[$sarahCurrentRGEDir,"BetaMi3I.m"]];
Put[BetaGauge3I,ToFileName[$sarahCurrentRGEDir,"BetaGauge3I.m"]];
Put[BetaWijkl3I,ToFileName[$sarahCurrentRGEDir,"BetaWijkl3I.m"]];
Put[BetaVEV3I,ToFileName[$sarahCurrentRGEDir,"BetaVEV3I.m"]];
];,
ReadBetaFunctions;
];

If[WriteRunning,
CreateFileForRunning;
];

Print[""];
Print["Finished with the calculation of the RGEs. Time needed: ",TimeUsed []-startedtime,"s"];
Print["The results are saved in ",StyleForm[ToString[$sarahCurrentRGEDir],"Section",FontSize->10]];

];

ReadBetaFunctions:=Block[{},
Print["Read Beta Functions"];
BetaYijk=Get[ToFileName[$sarahCurrentRGEDir,"BetaYijk.m"]];
BetaTijk=Get[ToFileName[$sarahCurrentRGEDir,"BetaTijk.m"]];
BetaBij=Get[ToFileName[$sarahCurrentRGEDir,"BetaBij.m"]];
BetaMuij=Get[ToFileName[$sarahCurrentRGEDir,"BetaMuij.m"]];
BetaLi=Get[ToFileName[$sarahCurrentRGEDir,"BetaLi.m"]];
BetaLSi=Get[ToFileName[$sarahCurrentRGEDir,"BetaLSi.m"]]; 
Betam2ij=Get[ToFileName[$sarahCurrentRGEDir,"Betam2ij.m"]]; 
BetaMi=Get[ToFileName[$sarahCurrentRGEDir,"BetaMi.m"]];
If[AddFIU1===True,BetaFIi=Get[ToFileName[$sarahCurrentRGEDir,"BetaFIi.m"]];];
If[AddDiracGauginos===True,BetaDGi=Get[ToFileName[$sarahCurrentRGEDir,"BetaDGi.m"]]];
BetaGauge=Get[ToFileName[$sarahCurrentRGEDir,"BetaGauge.m"]];
BetaWijkl=Get[ToFileName[$sarahCurrentRGEDir,"BetaWijkl.m"]];
BetaQijkl=Get[ToFileName[$sarahCurrentRGEDir,"BetaQijkl.m"]];
BetaVEV=Get[ToFileName[$sarahCurrentRGEDir,"BetaVEV.m"]];
TraceAbbr=Get[ToFileName[$sarahCurrentRGEDir,"RGEtraces.m"]];
Gij=Get[ToFileName[$sarahCurrentRGEDir,"Gij.m"]];

If[ThreeIndexParametersInvolved===True,
BetaYijk3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaYijk3I.m"]];
BetaTijk3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaTijk3I.m"]];
BetaBij3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaBij3I.m"]];
BetaMuij3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaMuij3I.m"]];
BetaLi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaLi3I.m"]];
 BetaLSi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaLSi3I.m"]]; 
Betam2ij3I=Get[ToFileName[$sarahCurrentRGEDir,"Betam2ij3I.m"]]; 
BetaMi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaMi3I.m"]];
If[AddFIU1===True,BetaFIi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaFIi3I.m"]];];
If[AddDiracGauginos===True,BetaDGi3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaDGi3I.m"]]];
BetaGauge3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaGauge3I.m"]];
BetaWijkl3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaWijkl3I.m"]];
BetaQijkl3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaQijkl3I.m"]];
BetaVEV3I=Get[ToFileName[$sarahCurrentRGEDir,"BetaVEV3I.m"]];
Gij3I=Get[ToFileName[$sarahCurrentRGEDir,"Gij3I.m"]];
TraceAbbr3I=Get[ToFileName[$sarahCurrentRGEDir,"RGEtraces3I.m"]];
];

];


GenerateCouplingList[NoMatMul_,Force_]:=Block[{i,indices,indNr},
If[NoMatMul,MakeMatrixMul=False;,MakeMatrixMul=True;];

threeIndexParameter={};
subForce = {};

UseMatMul2=True;

For[i=1,i<=Length[listWtriOne],
If[FreeQ[listWtriOne[[i]],a_[gen1,gen2,gen3]]==False,threeIndexParameter=Join[threeIndexParameter,{Head[listWtriOne[[i,2,2]]/.Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1],T[Head[listWtriOne[[i,2,2]]/.Delta[a__]->1 /. epsTensor[a__]->1 /. InvMat[a__][b__]->1]]}];
]; 
i++;];

subThreeIndices  = {};

If[threeIndexParameter=!={},
MakeMatrixMul=False;
ThreeIndexParametersInvolved=True;
For[i=1,i<=Length[threeIndexParameter],
subThreeIndices  =Join[subThreeIndices ,{threeIndexParameter[[i]][b_,c_,s1_]-> Sum[threeIndexParameter[[i]][j][b,c] DeltaKronecker[j,s1],{j,1,getDimParameter[threeIndexParameter[[i]]][[3]]}]}];
For[j=1,j<= getDimParameter[threeIndexParameter[[i]]][[3]],
parameters = Join[parameters,{{threeIndexParameter[[i]][j],{generation,generation},{getDimParameter[threeIndexParameter[[i]]][[1]],getDimParameter[threeIndexParameter[[i]]][[2]]}}}];
j++;];
i++;];

If[Force==True,MakeMatrixMul=True;subForce = subThreeIndices;ThreeIndexParametersInvolved=False;];
If[NoMatMul==True,ThreeIndexParametersInvolved=False;subForce = {};];

];

MakeMatrixMulSave = MakeMatrixMul;

For[i=1,i<=Length[listWtri],
Yijk[listWtri[[i,1,1]]/.subGCRule[1],listWtri[[i,1,2]]/.subGCRule[2],listWtri[[i,1,3]]/.subGCRule[3]]=listWtri[[i,2,1]]*listWtri[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x] /. subForce ;
i++;];

For[i=1,i<=Length[listAtri],
Aijk[listAtri[[i,1,1]]/.subGCRule[1],listAtri[[i,1,2]]/.subGCRule[2],listAtri[[i,1,3]]/.subGCRule[3]]=listAtri[[i,2,1]]*listAtri[[i,2,2]]/. Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x] /. subForce;
i++;];

For[i=1,i<=Length[listWbi],
Muij[listWbi[[i,1,1]]/.subGCRule[1],listWbi[[i,1,2]]/.subGCRule[2]]=listWbi[[i,2,1]]*listWbi[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x];
i++;];
For[i=1,i<=Length[listAbi],
Bij[listAbi[[i,1,1]]/.subGCRule[1],listAbi[[i,1,2]]/.subGCRule[2]]=listAbi[[i,2,1]]*listAbi[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x];
i++];


For[i=1,i<=Length[listWone],
Li[listWone[[i,1,1]]/.subGCRule[1]]=listWone[[i,2,1]]*listWone[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x];
i++;];
For[i=1,i<=Length[listAone],
LSi[listAone[[i,1,1]]/.subGCRule[1]]=listAone[[i,2,1]]*listAone[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&]/. conj[x_]->Conj[x];
i++;];

For[i=1,i<=Length[listSM],
If[listSMadd[[i,3]]===False,
m2ij[listSM[[i,1,1]] /.subGCRule[1],listSM[[i,1,2]]/.subGCRule[2]]=conj[listSM[[i,2]]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x];,
m2ij[listSM[[i,1,1]] /.subGCRule[1],listSM[[i,1,2]]/.subGCRule[2]]=listSM[[i,2]] /.Select[subAlways,FreeQ[#1,sum]&] /. conj[x_]->Conj[x];
];
i++;];

For[i=1,i<=Length[listGMall],
Mi[i]=listGMall[[i,2]] /.Select[subAlways,FreeQ[#1,sum]&]/. conj[x_]->Conj[x];
i++;];

For[i=1,i<=Length[SA`DiracGauginosInfo],
DGi[SA`DiracGauginosInfo[[i,1,1]]/.subGCRule[1],SA`DiracGauginosInfo[[i,1,2]]]=SA`DiracGauginosInfo[[i,2,2]] /.Select[subAlways,FreeQ[#1,sum]&]/. conj[x_]->Conj[x];
i++;];

For[i=1,i<=Length[listW4],
Wijkl[listW4[[i,1,1]]/.subGCRule[1],listW4[[i,1,2]]/.subGCRule[2],listW4[[i,1,3]]/.subGCRule[3],listW4[[i,1,4]]/.subGCRule[4]]=listW4[[i,2,1]]*listW4[[i,2,2]]/.Select[subAlways,FreeQ[#1,sum]&]/. conj[x_]->Conj[x];
i++;];

For[i=1,i<=Length[listA4],
Qijkl[listA4[[i,1,1]]/.subGCRule[1],listA4[[i,1,2]]/.subGCRule[2],listA4[[i,1,3]]/.subGCRule[3],listA4[[i,1,4]]/.subGCRule[4]]=listA4[[i,2,1]]*listA4[[i,2,2]]/.Select[subAlways,FreeQ[#1,sum]&]/. conj[x_]->Conj[x];
i++;];


listSMOne = listSM;

NeededAnaDimsForVEVs={};
listVEVi={};
SA`ListVEVi={};
Clear[VEVi];

For[j=1,j<=Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[j]]][VEVs]]===List,
For[i=1,i<=Length[DEFINITION[NameOfStates[[j]]][VEVs]],
If[FreeQ[listVEVi,DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]] && DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]=!=0 && DEFINITION[NameOfStates[[j]]][VEVs][[i,2,2]]=!=0,
pos=Position[SFieldsMultiplets,DEFINITION[NameOfStates[[j]]][VEVs][[i,1]]];
If[Head[SFieldsMultiplets[[pos[[1,1]]]]]===List,
indNr=Position[SFieldsMultiplets[[pos[[1,1]]]],DEFINITION[NameOfStates[[j]]][VEVs][[i,1]]];
];
NeededAnaDimsForVEVs=Join[NeededAnaDimsForVEVs,{{getBlankSF[Extract[SFields,pos[[1,1]]]],DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]] /.{A_[b_Integer]->A,A_[b_Integer,c_Integer]->A}}}];
sf=RE[getFullSF[Extract[SFields,pos[[1,1]]]]];
indices=ListFields[[pos[[1,1]],2,1]];
deltaInd=makeDelta[pos[[1,1]],1,2,{generation}];
(* deltaInd=1; *)
For[k=1,k<=Length[indices],
deltaInd=deltaInd*Delta[indices[[k]]/.subGC[1],indNr[[1,k]]];
k++;
];
listVEVi = Join[listVEVi,{{sf  deltaInd ,getFull[DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]/.{A_[b_Integer]->A,A_[b_Integer,c_Integer]->A},ALL]/.subGC[1]}}];
SA`ListVEVi = Join[SA`ListVEVi,{{sf, {-1,deltaInd  getFull[DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]/.{A_[b_Integer]->A,A_[b_Integer,c_Integer]->A},ALL]/.subGC[1]}}}];
If[Head[VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGC[1]]]===Times ||Head[VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGC[1]]]===Plus,
VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGCRule[1]]=VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGC[1]]+ deltaInd getFull[DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]/.{A_[b_Integer]->A,A_[b_Integer,c_Integer]->A},ALL] /. subGC[1];,
VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGCRule[1]]= deltaInd getFull[DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]/.{A_[b_Integer]->A,A_[b_Integer,c_Integer]->A},ALL] /. subGC[1];

];
];
i++;];
];
j++;];

];



MakeParticleLists :=Block[{i,j},

Print["Making Lists of Particles and Couplings"];

LPName = SFields /. A_[{a__}]->A /. A_[{a__}]->A /. conj[x_]-> x;
LP = SFields /. conj[x_]-> x;


listQuad = Table[{},{Length[LP]}];
listTri = Table[{},{Length[LP]}];
listTri2 ={};
listBi = Table[{},{Length[LP]}];



For[i=1,i<=Length[listW4],
For[j=1,j<=4,
pos=Position[LP,listW4[[i,1,j]]];
listQuad[[pos[[1,1]]]]=Join[listQuad[[pos[[1,1]]]],Delete[listW4[[i,1]],j]];
j++;];
i++;];

For[i=1,i<=Length[listWtri],
pos=Position[LP,listWtri[[i,1,1]]];listTri[[pos[[1,1]]]]=Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,2]],listWtri[[i,1,3]]}];
pos=Position[LP,listWtri[[i,1,2]]];listTri[[pos[[1,1]]]]=Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,1]],listWtri[[i,1,3]]}];
pos=Position[LP,listWtri[[i,1,3]]];listTri[[pos[[1,1]]]]=Join[listTri[[pos[[1,1]]]],{listWtri[[i,1,2]],listWtri[[i,1,1]]}];

For[j=1,j<=3,
If[FreeQ[listTri2,C[getBlankSF[listWtri[[i,1,j]]],getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]]],
listTri2 = Join[listTri2,{{C[getBlankSF[listWtri[[i,1,j]]],getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]],{getBlankSF[listWtri[[i,1,Mod[j+2,3,1]]]]}}}];,
pos=Position[listTri2,C[getBlankSF[listWtri[[i,1,j]]],getBlankSF[listWtri[[i,1,Mod[j+1,3,1]]]]]][[1,1]];
listTri2[[pos,2]]=Intersection[Join[listTri2[[pos,2]],{getBlankSF[listWtri[[i,1,Mod[j+2,3,1]]]]}]];
];
j++;];

i++;];

listTri2=Map[getBlankSF,listTri2];

For[i=1,i<=Length[listWbi],
pos=Position[LP,listWbi[[i,1,1]]];
listBi[[pos[[1,1]]]]=Join[listBi[[pos[[1,1]]]],{listWbi[[i,1,2]]}];

pos=Position[LP,listWbi[[i,1,2]]];
listBi[[pos[[1,1]]]]=Join[listBi[[pos[[1,1]]]],{listWbi[[i,1,1]]}];
i++;];

For[i=1,i<=Length[LP],
listBi[[i]]=Join[listBi[[i]],{LP[[i]]}];
i++;];

For[i=1,i<=Length[LP],
listBi[[i]]=Union[listBi[[i]]];
listTri[[i]]=Union[listTri[[i]]];
listQuad[[i]]=Union[listQuad[[i]]];
i++;];

];



CalcGroupFactors[VarGens_]:=Block[{i,j,k,l,sum,gNr2},
GaugeInteractionMatrix[#[[1]],#[[2]]]&/@ SA`ListRepresentations;

For[i=1,i<=AnzahlGauge,
For[j=1,j<=AnzahlChiral,
If[Gauge[[i,2]]===U[1], fin=1;,fin=Gauge[[i,2,1]]^2-1;];
sum=0;
If[Gauge[[i,2]]===U[1],
sum +=  getGenerator[i,FieldDim[j,i],10,1,2]*Gauge[[i,4]]*GUTren[i];
For[gNr2=1,gNr2<=AnzahlGauge,
If[Gauge[[gNr2,2]]===U[1] && gNr2!= i && NoU1Mixing=!=True,sum +=  getGenerator[gNr2,FieldDim[j,gNr2],10,1,2]GaugesU1[gNr2,i]*GUTren[gNr2];];
gNr2++;];
TA[i,RE[SFields[[j]]] /. subGCRule[1],RE[SFields[[j]]] /. subGCRule[2]] = sum /. Delta[a__]->Delta[a,rge];,
If[FieldDim[j,i]==1,
TA[i,RE[SFields[[j]]] /. subGCRule[1],RE[SFields[[j]]] /. subGCRule[2]] =0;,
TA[i,RE[SFields[[j]]] /. subGCRule[1],RE[SFields[[j]]] /. subGCRule[2]] =0*GINV[Gauge[[i,2]],FieldDim[j,i]][Gauge[[i,3]] /. subGC[1],Gauge[[i,3]] /. subGC[2]]; (* TOCHECK *)
];
];

states = 1;
For[k=1,k<=AnzahlGauge,
If[(k=!=i) && (Gauge[[k,2]]=!=U[1]), states *= Abs[FieldDim[j,k]];];
k++;];
MulFactor[getBlankSF[Fields[[j,3]]],i]=states;
If[FreeQ[VarGens,Fields[[j,3]]],
MulFactor[getBlankSF[SFields[[j]]],i]=states*Fields[[j,2]];
SA`NumberGen[getBlankSF[SFields[[j]]]]=Fields[[j,2]];,
MulFactor[getBlankSF[SFields[[j]]],i]=states*NumberGenerations[Fields[[j,3]]];
SA`NumberGen[getBlankSF[SFields[[j]]]]=NumberGenerations[Fields[[j,3]]];
];
j++];

SA`Dynkin[i] = Gauge[[i,2,1]];
If[Gauge[[i,2]]=!=U[1],
If[Head[Gauge[[i,2]]]===SU,
SA`Casimir[i] = Gauge[[i,2,1]];
dimAdj[i] = Gauge[[i,2,1]]^2-1;,
SA`Casimir[i] =Casimir[SusynoForm[Gauge[[i,2]]],Adjoint[SusynoForm[Gauge[[i,2]]]]];
dimAdj[i] = DimR[SusynoForm[Gauge[[i,2]]],Adjoint[SusynoForm[Gauge[[i,2]]]]];
];,
SA`Casimir[i]=0;
dimAdj[i]=1;
];
gc[i] = Gauge[[i,4]];
i++;];

(*
For[i=1,i<=AnzahlGauge,
SA`Dynkin[rep,i]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[getBlankSF[LP[[n1]]],i],{n1,1,Length[LP]}];
SA`Casimir[rep,i]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Casimir[getBlankSF[LP[[n1]]],i],{n1,1,Length[LP]}];
For[j=1,j<=AnzahlGauge,
SA`CasimirDynkin[rep,i,j]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[getBlankSF[LP[[n1]]],i] SA`Casimir[getBlankSF[LP[[n1]]],j],{n1,1,Length[LP]}];
j++;];
i++;];
*)


For[i=1,i<=AnzahlGauge,
SA`Dynkin[rep,i]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[getBlankSF[LP[[n1]]],Gauge[[i,3]]],{n1,1,Length[LP]}];
SA`Casimir[rep,i]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Casimir[getBlankSF[LP[[n1]]],Gauge[[i,3]]],{n1,1,Length[LP]}];
For[j=1,j<=AnzahlGauge,
SA`CasimirDynkin[rep,i,j]=
Sum[MulFactor[getBlankSF[LP[[n1]]],i]SA`Dynkin[getBlankSF[LP[[n1]]],Gauge[[i,3]]] SA`Casimir[getBlankSF[LP[[n1]]],Gauge[[j,3]]],{n1,1,Length[LP]}];
j++;];
i++;];


GenerateGroupFactorsMixed;

For[i=1,i<=AnzahlChiral,
For[j=1,j<=AnzahlChiral,
For[k=1,k<=AnzahlGauge,
For[l=1,l<=AnzahlGauge,
DGDG2[RE[SFields[[i]]/. subGCRule[1]],k,RE[SFields[[j]]/. subGCRule[2]],l]=DGi[SFields[[i]]/.subGC[1],k] DGi[SFields[[j]]/.subGC[2],l] /. Delta[1,a_] Delta[1,b_]->Delta[a,b] /. DGi[a__]->0;
l++;];
k++;];
j++;];
i++;];

For[i=1,i<=Length[Gauge],
If[Gauge[[i,2]]===U[1],
SA`CheckU1[i]=1;,
SA`CheckU1[i]=0;
];
i++;];

];

GenerateGroupFactorsMixed:=Block[{i,j,k,sum,sum2,sum3,sum2c,Y1,Y2},
For[i=1,i<=Length[SA`ListGaugeMixedAll],
SA`gCoup[SA`ListGaugeMixedAll[[i,1,1]],SA`ListGaugeMixedAll[[i,1,2]]]=SA`ListGaugeMixedAll[[i,2,2]];
i++;];

For[i=1,i<=Length[SA`ListGauginoMixed],
SA`Gaugino[SA`ListGauginoMixed[[i,1,1]],SA`ListGauginoMixed[[i,1,2]]]=SA`ListGauginoMixed[[i,2,2]];
If[SA`ListGauginoMixed[[i,1,1]]=!=SA`ListGauginoMixed[[i,1,2]],
SA`Gaugino[SA`ListGauginoMixed[[i,1,2]],SA`ListGauginoMixed[[i,1,1]]]=SA`ListGauginoMixed[[i,2,2]];
];
i++;];

For[i=1,i<=Length[Gauge],
If[Gauge[[i,2]]===U[1],
For[j=1,j<=Length[Gauge],
If[Gauge[[j,2]]===U[1],
sum=0;
For[k=1,k<=Length[Gauge],
If[Gauge[[k,2]]===U[1],
sum += SA`Gaugino[i,k] conj[SA`Gaugino[k,j]];
];
k++;];
SA`GauginoGauginoC[i,j]=sum  //.  SA`Gaugino[a__]->0 //.  Conj[SA`Gaugino][a__]->0;
];
j++];,
SA`GauginoGauginoC[i,i]=SA`Gaugino[i,i] conj[SA`Gaugino[i,i]];
];
i++;];

For[i=1,i<=Length[Fields],
For[j=1,j<=Length[Gauge],
sum=0;
If[Gauge[[j,2]]===U[1],
For[k=1,k<=Length[Gauge],
If[Gauge[[k,2]]===U[1],
sum += GUTren[k] FieldDim[i,k] SA`gCoup[k,j] //. SA`gCoup[a__]->0;
];
k++;];
YBar[Fields[[i,3]],j]=sum;
YBar[getBlankSF[SFields[[i]]],j]=sum;
];
j++;];
i++;];

For[i=1,i<=Length[Gauge],
If[Gauge[[i,2]]===U[1],
For[j=1,j<=Length[Gauge],
If[Gauge[[j,2]]===U[1],
QBar[i,j]=Sum[MulFactor[getBlankSF[LP[[n1]]],i] YBar[getBlankSF[LP[[n1]]],i] YBar[getBlankSF[LP[[n1]]],j],{n1,1,Length[LP]}];
];
j++;];,
QBar[i,i]= SA`Dynkin[rep,i] SA`gCoup[i,i]^2 //. SA`gCoup[a__]->0;
];
i++;];

For[i=1,i<=Length[Fields],
sum=0;sum2c=0;sum2=0;sum3=0;
For[j=1,j<=Length[Gauge],
If[Gauge[[j,2]]===U[1],
sum+=YBar[Fields[[i,3]],j]^2;
SA`Casimir2[Fields[[i,3]],j]=YBar[Fields[[i,3]],j]^2;
SA`Casimir2[getBlankSF[SFields[[i]]],j]=YBar[Fields[[i,3]],j]^2;
For[k=1,k<=Length[Gauge],
If[Gauge[[k,2]]===U[1],
sum2 += SA`Gaugino[k,j] YBar[Fields[[i,3]],k]YBar[Fields[[i,3]],j];
sum2c += Conj[SA`Gaugino[j,k]] YBar[Fields[[i,3]],k]YBar[Fields[[i,3]],j];
sum3 += SA`GauginoGauginoC[k,j] YBar[Fields[[i,3]],k]YBar[Fields[[i,3]],j];
];
k++;];,
sum+=SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
SA`Casimir2[Fields[[i,3]],j]=SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
SA`Casimir2[getBlankSF[SFields[[i]]],j]=SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
sum2+=SA`Gaugino[j,j] SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
sum2c+=Conj[SA`Gaugino[j,j]] SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
sum3+=SA`Gaugino[j,j] conj[SA`Gaugino[j,j]]SA`Casimir[Fields[[i,3]],j] SA`gCoup[j,j]^2;
];
j++;];
SA`CasimirBar[getBlankSF[SFields[[i]]]]=sum //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0//.  Conj[SA`Gaugino][a__]->0; 
SA`CasimirMBar[getBlankSF[SFields[[i]]]]=sum2 //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0//.  Conj[SA`Gaugino][a__]->0;
SA`CasimirMCBar[getBlankSF[SFields[[i]]]]=sum2c //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0//.  Conj[SA`Gaugino][a__]->0;
SA`CasimirMMBar[getBlankSF[SFields[[i]]]]=sum3 //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0//.  Conj[SA`Gaugino][a__]->0;
i++;];



SA`DynkinCasimirU1[p1_]:= Sum[Sum[ SA`CheckU1[n1] SA`CheckU1[n2] QBar[n1,n2] YBar[p1,n1] YBar[p1,n2],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}] //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0;
SA`DynkinMCasimirU1[p1_]:=Sum[Sum[Sum[SA`CheckU1[n1] SA`CheckU1[n2] SA`CheckU1[n3] QBar[n1,n3]SA`Gaugino[n3,n2] YBar[p1,n1] YBar[p1,n2],{n3,1,AnzahlGauge}] ,{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}] //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0;


SA`CasimirTrDynkinm2U1:= Sum[Sum[SA`CheckU1[n1] SA`CheckU1[n2] QBar[n1,n2] YBar[pP,n1] YBar[pP,n2] m2ij[pP,pP],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}] //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0;

SA`DynkinMMCasimirU1[p1_]:=(Sum[Sum[Sum[Sum[SA`CheckU1[n1] SA`CheckU1[n2] SA`CheckU1[n3] SA`CheckU1[n4]YBar[p1,n1] SA`Gaugino[n1,n2] Conj[SA`Gaugino[n4,n2]] QBar[n4,n3]  YBar[p1,n3],{n3,1,AnzahlGauge}] ,{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}],{n4,1,AnzahlGauge}]+Sum[Sum[Sum[Sum[SA`CheckU1[n1] SA`CheckU1[n2] SA`CheckU1[n3] SA`CheckU1[n4]YBar[p1,n1] Conj[SA`Gaugino[n2,n1]] SA`Gaugino[n2,n4] QBar[n4,n3]  YBar[p1,n3],{n3,1,AnzahlGauge}] ,{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}],{n4,1,AnzahlGauge}]+
Sum[Sum[Sum[Sum[SA`CheckU1[n1] SA`CheckU1[n2] SA`CheckU1[n3] SA`CheckU1[n4]YBar[p1,n1] SA`Gaugino[n1,n2]  QBar[n2,n3] Conj[SA`Gaugino[n4,n3]]  YBar[p1,n4],{n3,1,AnzahlGauge}] ,{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}],{n4,1,AnzahlGauge}]) //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0 //. Conj[SA`Gaugino][a__]->0;

SA`DynkinRCasimirRM[gnr1_,gnr2_]:=8 (ExpandTerm[Sum[SA`NumberGen[pP] (SA`Gaugino[gnr1,n1] YBar[pP,n1] YBar[pP,gnr2]+SA`Gaugino[gnr2,n1] YBar[pP,n1] YBar[pP,gnr1])/2SA`CasimirBar[pP],{n1,1,AnzahlGauge}]]+ExpandTerm[SA`NumberGen[pP] YBar[pP,gnr1] YBar[pP,gnr2] SA`CasimirMBar[pP]]) //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0;

SA`MMCasimir2[p1_]:=  makeDelta[i,1,2,{}]Sum[Sum[(1-SA`CheckU1[gn])(1- SA`CheckU1[gnr]) makeDelta[i,1,2,{}]  gc[gnr]^2 gc[gn]^2 (32 Mi[gnr] Conj[Mi[gnr]]+8 Mi[gnr] Conj[Mi[gn]]+8 Mi[gn] Conj[Mi[gnr]]) SA`Casimir[getBlankSF[p1],gnr] SA`Casimir[getBlankSF[p1],gn],{gnr,1,AnzahlGauge}],{gn,1,AnzahlGauge}]+ 
Sum[(1-SA`CheckU1[gn])  gc[gn]^2  SA`Casimir[p1,gn](32 Mi[gn] Conj[Mi[gn]] Sum[SA`CheckU1[n1]  YBar[p1,n1] YBar[p1,n1],{n1,1,AnzahlGauge}]+Sum[Sum[16 Mi[gn]  YBar[p1,n1] Conj[SA`Gaugino[n2,n1]] YBar[p1,n2]+16 Conj[Mi[gn]] YBar[p1,n1] SA`Gaugino[n1,n2] YBar[p1,n2],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}]+32 Sum[Sum[Sum[ YBar[p1,n1] SA`Gaugino[n1,n2] Conj[SA`Gaugino[n3,n2]] YBar[p1,n3],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}],{n3,1,AnzahlGauge}]),{gn,1,AnzahlGauge}]+
  32 Sum[Sum[Sum[YBar[p1,n1] SA`Gaugino[n1,n2] Conj[SA`Gaugino[n3,n2]] YBar[p1,n3],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}],{n3,1,AnzahlGauge}] Sum[YBar[p1,n1] YBar[p1,n1],{n1,1,AnzahlGauge}] + 16 Sum[Sum[YBar[p1,n1] SA`Gaugino[n1,n2] YBar[p1,n2],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}] Sum[Sum[YBar[p1,n1] Conj[SA`Gaugino[n2,n1]] YBar[p1,n2],{n1,1,AnzahlGauge}],{n2,1,AnzahlGauge}] /. SA`Gaugino[a__]->0 /. YBar[a__]->0 //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0//. Conj[SA`Gaugino][a__]->0;


SA`CasimirDynkinU1Summed[gnr1_,gnr2_]:=Sum[Sum[MulFactor[getBlankSF[LP[[i]]],gnr1] SA`Casimir2[LP[[i]],n1]  ,{n1,1,AnzahlGauge}]  YBar[LP[[i]],gnr1] YBar[LP[[i]],gnr2] ,{i,1,Length[LP]}] /. YBar[a__]->0 //. SA`gCoup[a__]->0 //. SA`Gaugino[a__]->0;

];




CalcGammaij[TwoLoop_,Simp_]:=Block[{i,j,subChargeInd},
UseSymmASymm=True;
Gij={};
Gij1={};
subRGE = subRGEDelta;

Print["Calculating anomalous Dimensions"];

For[i=1,i<=Length[LP],
For[j=1,j<=Length[LP],
If[Drop[Fields[[i]],3]===Drop[Fields[[j]],3],
 If[i==j, 
gaugePart = -2 SA`CasimirBar[getBlankSF[LP[[i]]]] makeDelta[i,1,2,{}];
gaugePartScalar = -(1-Xi) SA`CasimirBar[getBlankSF[LP[[i]]]] makeDelta[i,1,2,{}];
gaugePartHat = -2 Xi SA`CasimirBar[getBlankSF[LP[[i]]]] makeDelta[i,1,2,{}];
gaugePart1 = 0;
If[TwoLoop==True,
gaugePart2L = makeDelta[i,1,2,{}](2 Sum[gc[n1]^4 *(SA`Dynkin[rep,n1]*SA`Casimir[getBlankSF[LP[[i]]],n1]*(1-SA`CheckU1[n1])- 3 SA`Casimir[getBlankSF[LP[[i]]],n1] SA`Casimir[n1]),{n1,1,AnzahlGauge}]+2 SA`DynkinCasimirU1[LP[[i]]]+
4 SA`CasimirBar[getBlankSF[LP[[i]]]] SA`CasimirBar[getBlankSF[LP[[i]]]]);
gaugePart2LScalar = makeDelta[i,1,2,{}]( Sum[gc[n1]^4 *(SA`Dynkin[rep,n1]*SA`Casimir[getBlankSF[LP[[i]]],n1]*(1-SA`CheckU1[n1])- (9/4-5/3 Xi - Xi^2/4) SA`Casimir[getBlankSF[LP[[i]]],n1] SA`Casimir[n1]),{n1,1,AnzahlGauge}]+ SA`DynkinCasimirU1[LP[[i]]]+
2 SA`CasimirBar[getBlankSF[LP[[i]]]] SA`CasimirBar[getBlankSF[LP[[i]]]]);
gaugePart2L1=0;,
gaugePart2L=0;
gaugePart2LScalar=0;
gaugePart2L1=0; 
];,
gaugePart2L=0;
gaugePart=0;
gaugePart2L1=0; 
gaugePart2LScalar=0;
gaugePartScalar=0;
gaugePartHat=0;
gaugePart1=0; 
];


gammaij[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 1/2 ExpandTerm[Conj[Yijk[LP[[i]]/.subGC[1],pP,pQ]] Yijk[LP[[j]]/.subGC[2],pP,pQ]]+ gaugePart;
gammaijScalar[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 1/2 ExpandTerm[Conj[Yijk[LP[[i]]/.subGC[1],pP,pQ]] Yijk[LP[[j]]/.subGC[2],pP,pQ]]+ gaugePartScalar;
gammaijHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=  gaugePartHat;
gammaij1[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]] = 0;
If[TwoLoop==True,
gammaij2L[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=-1/2 ExpandTerm[Conj[Yijk[LP[[i]]/.subGC[1],pW,pX]] Yijk[pX,pY,pZ] Conj[Yijk[pY,pZ,pR]] Yijk[pW,pR,LP[[j]]/.subGC[2]]] + ExpandTerm[  Conj[Yijk[LP[[i]]/.subGC[1],pY,pZ]] Yijk[LP[[j]]/.subGC[2],pY,pZ](2 SA`CasimirBar[pY]-SA`CasimirBar[LP[[i]]/.subGC[1]])] + gaugePart2L /. SA`SubIgnore2L;
gammaij2LScalar[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=-1/2 ExpandTerm[Conj[Yijk[LP[[i]]/.subGC[1],pW,pX]] Yijk[pX,pY,pZ] Conj[Yijk[pY,pZ,pR]] Yijk[pW,pR,LP[[j]]/.subGC[2]]] + ExpandTerm[  Conj[Yijk[LP[[i]]/.subGC[1],pY,pZ]] Yijk[LP[[j]]/.subGC[2],pY,pZ](2 SA`CasimirBar[pY]-SA`CasimirBar[LP[[i]]/.subGC[1]])] + gaugePart2LScalar /. SA`SubIgnore2L;

If[i===j,
(*
gammaij2LHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=ExpandTerm[1/2 Sum[Xi Xip ThS[nr,LP[[i]]/.subGC[1],pX] (Conj[Yijk[pY,pZ,pX]] Yijk[pY,pZ,pW]+Yijk[pY,pZ,pX] Conj[Yijk[pY,pZ,pW]]) ThS[nr,pW,LP[[j]]/. subGC[2]],{nr,1,AnzahlGauge}]]  /. SA`SubIgnore2L; *)

gammaij2LHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=
 Xi ((1-Xi) SA`CasimirBar[LP[[i]]/.subGC[1]]SA`CasimirBar[LP[[j]]/.subGC[2]]makeDelta[i,1,2,{}]- makeDelta[i,1,2,{}](7-Xi)/2 Sum[gc[n1]^4 *  SA`Casimir[getBlankSF[LP[[i]]],n1] SA`Casimir[n1],{n1,1,AnzahlGauge}]) +ExpandTerm[1/2 Xi SA`CasimirBar[LP[[i]]/.subGC[1]] (Conj[Yijk[pY,pZ,LP[[i]]/.subGC[1]]] Yijk[pY,pZ,LP[[j]]/.subGC[2]]+Yijk[pY,pZ,LP[[i]]/.subGC[1]] Conj[Yijk[pY,pZ,LP[[j]]/.subGC[2]]])]  /. SA`SubIgnore2L;,
gammaij2LHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]=0;
];

gammaij2L1[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;,
gammaij2L[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij2LScalar[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij2LHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
];

If[DeleteCases[DeleteCases[Intersection[Flatten[{ListFields[[i,2]],ListFields[[i,3]]}]],generation],x_Integer,4]=!={},
subChargeInd = Flatten[makeDelta[i,1,2,{generation}] /.Times->List /. Delta[a_,b_] -> {a->1,b->1}];,
subChargeInd={};
];
res1Loop = CalcRGEValue[gammaij[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. subChargeInd /. Delta[gen1,gen2]->Kronecker[i1,i2] /. {gen1->i1,gen2->i2}  ];
If[TwoLoop==True,
res2Loop = CalcRGEValue[gammaij2L[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. subChargeInd/. Delta[gen1,gen2]->Kronecker[i1,i2] /. {gen1->i1,gen2->i2} ];,
res2Loop=0;
];

res1Loop1 = CalcRGEValue[gammaij1[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. subChargeInd /. Delta[gen1,gen2]->Kronecker[i1,i2] /. {gen1->i1,gen2->i2}  ];
If[TwoLoop==True,
res2Loop1 = CalcRGEValue[gammaij2L1[LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]] /. subChargeInd/. Delta[gen1,gen2]->Kronecker[i1,i2] /. {gen1->i1,gen2->i2} ];,
res2Loop1=0;
];


If[Fields[[i,2]]==1,
res1Loop = res1Loop /. Kronecker[a__]->1;
res2Loop = res2Loop /. Kronecker[a__]->1;

res1Loop1 = res1Loop1 /. Kronecker[a__]->1;
res2Loop1 = res2Loop1 /. Kronecker[a__]->1;

];

If[res1Loop=!=0 || res2Loop =!=0,
If[Simp===True && ThreeIndexParametersInvolved=!=True,
 Gij = Join[Gij,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},Simplify[res1Loop],Simplify[res2Loop] }}];
 Gij1 = Join[Gij1,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},Simplify[res1Loop1],Simplify[res2Loop1] }}];,
 Gij = Join[Gij,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},res1Loop,res2Loop }}];
 Gij1 = Join[Gij1,{{{LP[[i]]/. subGC[1],LP[[j]]/. subGC[2]},res1Loop1,res2Loop1 }}];
];
If[j=!=i,
listBi[[i]]=Join[listBi[[i]],{LP[[j]]}];
listBi[[j]]=Join[listBi[[j]],{LP[[i]]}];
];
];,
gammaij2L[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaijScalar[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaijHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij2L1[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij1[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij2LScalar[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
gammaij2LHat[LP[[i]]/. subGCRule[1],LP[[j]]/. subGCRule[2]]= 0;
];
 j++];
i++];

If[ThreeIndexParametersInvolved===True,
Gij3I={};
Gij3I1={};
MakeMatrixMul=True;
For[i=1,i<=Length[Gij],
Gij3I=Join[Gij3I,{{Gij[[i,1]],Split3IndexParameter[Gij[[i,2]]],Split3IndexParameter[Gij[[i,3]]]}}];
Gij3I1=Join[Gij3I1,{{Gij1[[i,1]],Split3IndexParameter[Gij1[[i,2]]],Split3IndexParameter[Gij1[[i,3]]]}}];
i++;];
MakeMatrixMul=False;
Put[Gij3I,ToFileName[$sarahCurrentRGEDir,"Gij3I.m"]];
Put[Gij3I1,ToFileName[$sarahCurrentRGEDir,"Gij3I1.m"]];
];


Put[Gij,ToFileName[$sarahCurrentRGEDir,"Gij.m"]];
Put[Gij1,ToFileName[$sarahCurrentRGEDir,"Gij1.m"]];
UseSymmASymm=False;

];




InitBetaFunctions:=Block[{},
betaFuncWijkl[p1_,p2_,p3_,p4_] := ExpandTerm[Wijkl[p1,p2,p3,pZ] gammaij[pZ,p4]];
betaFuncWijkl2L[p1_,p2_,p3_,p4_] := ExpandTerm[Wijkl[p1,p2,p3,pP] gammaij2L[pP,p4]];

betaFuncQijkl[p1_,p2_,p3_,p4_] := ExpandTerm[Qijkl[p1,p2,p3,pZ] gammaij[pZ,p4]];
betaFuncQijkl2L[p1_,p2_,p3_,p4_] := ExpandTerm[Qijkl[p1,p2,p3,pP] gammaij2L[pP,p4]];

betaFuncYijk[p1_,p2_,p3_] := ExpandTerm[Yijk[p1,p2,pN] gammaij[pN,p3]];
betaFuncYijk2L[p1_,p2_,p3_] := ExpandTerm[Yijk[p1,p2,pP] gammaij2L[pP,p3]];

betaFuncMuij[p1_,p2_] :=  ExpandTerm[ Muij[p1,pN] gammaij[pN,p2]];
betaFuncMuij2L[p1_,p2_] :=  ExpandTerm[ Muij[p1,pN] gammaij2L[pN,p2]];

betaFuncLi[p1_] :=  ExpandTerm[Li[pN] gammaij[pN,p1]];
betaFuncLi2L[p1_] :=  ExpandTerm[Li[pN] gammaij2L[pN,p1]];

betaFuncAijkNew[p1_,p2_,p3_]:= ExpandTerm[Aijk[p1,p2,pN] gammaij[pN,p3]]-2 ExpandTerm[Yijk[p1,p2,pN] gammaij1[pN,p3]];
betaFuncAijk2LNew[p1_,p2_,p3_]:= ExpandTerm[Aijk[p1,p2,pN] gammaij2L[pN,p3]]-2 ExpandTerm[Yijk[p1,p2,pN] gammaij2L1[pN,p3]];

betaFuncBijNew[p1_,p2_]:= ExpandTerm[Bij[p1,pN] gammaij[pN,p2]]-2 ExpandTerm[Muij[p1,pN] gammaij1[pN,p2]];
betaFuncBij2LNew[p1_,p2_]:= ExpandTerm[Bij[p1,pN] gammaij2L[pN,p2]]-2 ExpandTerm[Muij[p1,pN] gammaij2L1[pN,p2]];

betaFuncAijk[p1_,p2_,p3_]:=1/2 Aijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Yijk[pM,pN,p3]+ Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Aijk[pM,pN,p3]-
2(Aijk[p1,p2,p3]SA`CasimirBar[p3]-2  Yijk[p1,p2,p3]SA`CasimirMBar[p3]) ;
betaFuncAijk2L[p1_,p2_,p3_]:=-1/2 Aijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Yijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,p3]-Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Yijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Aijk[pM,pR,p3]-Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Aijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,p3]+(* Sum[(1-SA`CheckU1[gnr])(Aijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p3]+2 Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p3]-2 Mi[gnr] Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p3])gc[gnr]^2 (2 SA`Casimir[getBlankSF[pP],gnr]-SA`Casimir[getBlankSF[p3],gnr]),{gnr,1,AnzahlGauge}] *)+
(Aijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p3]+2 Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p3])(2 SA`CasimirBar[pP]-SA`CasimirBar[p3])+(-2  Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p3]) (2 SA`CasimirMBar[getBlankSF[pP]]-SA`CasimirMBar[getBlankSF[p3]])+ Sum[(1-SA`CheckU1[gnr])(2 Aijk[p1,p2,p3]-8 Mi[gnr] Yijk[p1,p2,p3]) gc[gnr]^4 ( SA`Casimir[getBlankSF[p3],gnr] SA`Dynkin[rep,gnr]-3 SA`Casimir[gnr] SA`Casimir[getBlankSF[p3],gnr]),{gnr,1,AnzahlGauge}]+
(2 Aijk[p1,p2,p3]SA`DynkinCasimirU1[p3]-8SA`DynkinMCasimirU1[p3] Yijk[p1,p2,p3]) +(* Sum[Sum[2 gc[gnr]^2 gc[gnr2]^2 (2 Aijk[p1,p2,p3]-8 Mi[gnr] Yijk[p1,p2,p3]) SA`Casimir[getBlankSF[p3],gnr] SA`Casimir[getBlankSF[p3],gnr2],{gnr2,1,AnzahlGauge}],{gnr,1,AnzahlGauge}] *)
2  (2 Aijk[p1,p2,p3] SA`CasimirBar[p3] SA`CasimirBar[p3]-8  SA`CasimirMBar[p3] SA`CasimirBar[p3] Yijk[p1,p2,p3]);

betaFuncBij[p1_,p2_]:=1/2Bij[p1,pL] Conj[Yijk[pL,pM,pN]] Yijk[pM,pN,p2]+1/2  Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Bij[pM,pN]+Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Aijk[pM,pN,p2]-2 (Bij[p1,p2]SA`CasimirBar[p2]-2 SA`CasimirMBar[p2] Muij[p1,p2]);
betaFuncBij2L[p1_,p2_]:=-1/2 Bij[p1,pL] Conj[Yijk[pL,pM,pN]] Yijk[pP,pQ,pN] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,p2]-1/2 Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Bij[pM,pR] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,pN]-1/2 Yijk[p1,p2,pL] Conj[Yijk[pL,pM,pN]] Muij[pM,pR] Conj[Yijk[pP,pQ,pR]] Aijk[pP,pQ,pN]-Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Aijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Yijk[pM,pR,p2]-Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Yijk[pN,pP,pQ] Conj[Yijk[pP,pQ,pR]] Aijk[pM,pR,p2]+(* 2 Sum[Sum[Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] (Bij[pP,pQ]-Muij[pP,pQ] Mi[gnr]) gc[gnr]^2 SA`Casimir[getBlankSF[pP],gnr],{gn,1,AnzahlGauge}],{gnr,1,AnzahlGauge}] *)
2 Sum[Sum[Yijk[p1,p2,pL] Conj[Yijk[pL,pP,pQ]] (Bij[pP,pQ]-Muij[pP,pQ] Mi[gnr]) gc[gnr]^2 SA`Casimir[getBlankSF[pP],gnr],{gn,1,AnzahlGauge}],{gnr,1,AnzahlGauge}]+(* Sum[(Bij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2]+2 Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p2]-2 Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2] Mi[gnr])gc[gnr]^2 (2 SA`Casimir[getBlankSF[pP],gnr]-SA`Casimir[p1,gnr]),{gnr,1,AnzahlGauge}] *)
(Bij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2]+2 Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Aijk[pP,pQ,p2]) (2 SA`CasimirBar[getBlankSF[pP]]-SA`CasimirBar[p1])+(-2 Muij[p1,pL] Conj[Yijk[pL,pP,pQ]] Yijk[pP,pQ,p2] )(2 SA`CasimirMBar[getBlankSF[pP]]-SA`CasimirMBar[p1])+Sum[(1-SA`CheckU1[gnr])(2 Bij[p1,p2]-8 Muij[p1,p2] Mi[gnr]) gc[gnr]^4 (SA`Casimir[getBlankSF[p1],gnr] SA`Dynkin[rep,gnr]-3 SA`Casimir[gnr] SA`Casimir[getBlankSF[p1],gnr]),{gnr,1,AnzahlGauge}]+
(2 Bij[p1,p2]SA`DynkinCasimirU1[p1]-8 Muij[p1,p2] SA`DynkinMCasimirU1[p1])+ (* Sum[Sum[(2 Bij[p1,p2]-8 Muij[p1,p2] Mi[gnr]) gc[gnr]^2 gc[gn]^2 2 SA`Casimir[getBlankSF[p1],gnr] SA`Casimir[getBlankSF[p1],gn],{gn,1,AnzahlGauge}],{gnr,1,AnzahlGauge}]  *)
 2 (2 Bij[p1,p2]SA`CasimirBar[p1] SA`CasimirBar[p1]-8 Muij[p1,p2] SA`CasimirMBar[p1] SA`CasimirBar[p1]) ;

(*
betaFuncLSiNew[p1_]:= ExpandTerm[LSi[pN] gammaij[pN,p1]]-2 ExpandTerm[Li[pN] gammaij1[pN,p1]];
betaFuncLSi2LNew[p1_]:= ExpandTerm[LSi[pN] gammaij2L[pN,p1]]-2 ExpandTerm[Li[pN] gammaij2L1[pN,p1]];
*)

betaFuncLSiNew[p1_]:=1/2 LSi[pL] Conj[Yijk[pL,pM,pN]] Yijk[p1,pM,pN]+Li[pL] Conj[Yijk[pL,pM,pN]] Aijk[p1,pM,pN]+Muij[p1,pL] Conj[Yijk[pL,pM,pN]] Bij[pM,pN]+2Yijk[p1,pL,pM] m2ij[pM,pN] Conj[Muij[pN,pL]]+Aijk[p1,pL,pM] Conj[Bij[pL,pM]] + Sum[Sum[2 Sqrt[2]  DGi[p1,gnr] GUTren[gnr] SA`gCoup[gnr,gnr2] Tr1[gnr2], {gnr,1,AnzahlGauge}],{gnr2,1,AnzahlGauge}]+2 (Sum[Sum[ conj[DGDG2[pN,gnr,pM,gnr2]] (Delta[gnr,gnr2] Aijk[p1,pN,pM] + SA`Gaugino[gnr,gnr2] Yijk[p1,pN,pM]),{gnr,1,AnzahlGauge}],{gnr2,1,AnzahlGauge}] + Sum[Conj[Yijk[pN,pM,pP]] Muij[pP,p1]  DGDG2[pN,gnr,pM,gnr],{gnr,1,AnzahlGauge}]) //.SA`gCoup[a__]->0;

betaFuncLSi2LNew[p1_]:=2 Sum[gc[gnr]^2 SA`Casimir[pL,gnr]Yijk[p1,pO,pL]Conj[Yijk[pW,pO,pL]]LSi[pW],{gnr,1,AnzahlGauge}]-1/2 Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Yijk[pW,pO,pL]] LSi[pW]-4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pL] Mi[gnr] Conj[Yijk[pW,pO,pL]] Li[pW],{gnr,1,AnzahlGauge}]+4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[Yijk[pW,pO,pL]] Li[pW],{gnr,1,AnzahlGauge}]-Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[Yijk[pW,pO,pL]] Li[pW]-Aijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Yijk[pW,pO,pL]] Li[pW]-4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Conj[Yijk[pZ,pN,pL]] Muij[pN,pL] Mi[gnr] Muij[p1,pZ],{gnr,1,AnzahlGauge}]+4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Conj[Yijk[pZ,pN,pL]] Bij[pN,pL] Muij[p1,pZ],{gnr,1,AnzahlGauge}]-Conj[Yijk[pZ,pN,pQ]] Aijk[pQ,pX,pY] Conj[Yijk[pL,pX,pY]] Muij[pN,pL] Muij[p1,pZ]-Conj[Yijk[pZ,pN,pQ]] Yijk[pQ,pX,pY] Conj[Yijk[pL,pX,pY]] Bij[pN,pL] Muij[p1,pZ]+4Sum[gc[gnr]^2 SA`Casimir[pL,gnr] 2 Yijk[p1,pO,pL] Conj[Muij[pO,pL]] Mi[gnr] Conj[Mi[gnr]],{gnr,1,AnzahlGauge}]-4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pL] Conj[Bij[pO,pL]] Mi[gnr],{gnr,1,AnzahlGauge}]-4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[Muij[pO,pL]] Mi[gnr],{gnr,1,AnzahlGauge}]+4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Aijk[p1,pO,pL] Conj[Bij[pO,pL]],{gnr,1,AnzahlGauge}]+4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pL] m2ij[pO,pR] Conj[Muij[pR,pL]],{gnr,1,AnzahlGauge}]+4 Sum[gc[gnr]^2 SA`Casimir[pL,gnr] Yijk[p1,pO,pR] m2ij[pR,pL] Conj[Muij[pO,pL]],{gnr,1,AnzahlGauge}]-Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[Bij[pO,pL]]-Aijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Bij[pO,pL]]-Yijk[p1,pO,pQ] Conj[Aijk[pQ,pX,pY]] Aijk[pL,pX,pY] Conj[Muij[pO,pL]]-Aijk[p1,pO,pQ] Conj[Aijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Muij[pO,pL]]-Yijk[p1,pR,pQ] m2ij[pR,pO] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Muij[pO,pL]]-Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pY]] Yijk[pR,pX,pY] m2ij[pL,pR] Conj[Muij[pO,pL]]-Yijk[p1,pO,pR] m2ij[pQ,pR] Conj[Yijk[pQ,pX,pY]] Yijk[pL,pX,pY] Conj[Muij[pO,pL]]-2 Yijk[p1,pO,pQ] Conj[Yijk[pQ,pX,pR]] m2ij[pY,pR] Yijk[pL,pX,pY] Conj[Muij[pO,pL]]+ Sum[Sum[2 Sqrt[2] GUTren[gnr] SA`gCoup[gnr,gnr2] DGi[p1,gnr] Tr3[gnr2], {gnr,1,AnzahlGauge}], {gnr2,1,AnzahlGauge}]+4 Sum[gammaij[pL,pO](Sum[conj[DGDG2[pP,gnr,pL,gnr2]](Delta[gnr,gnr2] Aijk[p1,pP,pO] + SA`Gaugino[gnr,gnr2] Yijk[p1,pP,pO]),{gnr2,1,AnzahlGauge}] + Conj[Yijk[pZ,pL,pP]] Muij[pP,p1] DGDG2[pZ,gnr,pL,gnr]),{gnr,1,AnzahlGauge}]+4 Sum[Sum[(QBar[gnr,gnr2]-3 gc[gnr]^2 SA`Casimir[gnr])(conj[DGDG2[pP,gnr,pL,gnr2]](Delta[gnr,gnr2] Aijk[p1,pP,pL] + SA`Gaugino[gnr,gnr2] Yijk[p1,pP,pL]) + Conj[Yijk[pZ,pL,pP]] Muij[pP,p1] DGDG2[pZ,gnr,pL,gnr]),{gnr2,1,AnzahlGauge}],{gnr,1,AnzahlGauge}] /. SA`Gaugino[a__]->0 /. QBar[a__]->0 /. SA`gCoup[a__]->0;

betaFuncm2ij[p1_,p2_]:=
1/2 Conj[Yijk[p1,pP,pQ]] Yijk[pP,pQ,pN] m2ij[p2,pN] +1/2 m2ij[pN,p1] Conj[Yijk[pP,pQ,pN]] Yijk[p2,pP,pQ] +
2Conj[Yijk[p1,pP,pQ]] Yijk[p2,pP,pR]m2ij[pQ,pR]+  Conj[Aijk[p1,pP,pQ]] Aijk[p2,pP,pQ]-
8listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]] (makeDelta[i,1,2,{}] /.Delta[a_,b_]->Delta[a,b,rge])  SA`CasimirMMBar[getBlankSF[p1]] +listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]] Sum[2 TA[n1,p1,p2] Tr1[n1],{n1,1,AnzahlGauge}];
betaFuncm2ij2L[p1_,p2_]:=
-1/2 m2ij[pL,p1] Conj[Yijk[pL,pM,pN]] Yijk[pM,pR,p2] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,pN]  - 
1/2  m2ij[p2,pL] Yijk[pL,pM,pN] Conj[Yijk[pM,pR,p1]] Yijk[pP,pQ,pR] Conj[Yijk[pP,pQ,pN]]- 
 Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pM] m2ij[pL,pR] Conj[Yijk[pN,pP,pQ]] Yijk[pR,pP,pQ] -  Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pM] m2ij[pR,pN] Conj[Yijk[pR,pP,pQ]] Yijk[pL,pP,pQ]-  Conj[Yijk[p1,pL,pM]] Yijk[p2,pN,pR] m2ij[pL,pN] Conj[Yijk[pP,pQ,pR]] Yijk[pP,pQ,pM]-2 Conj[Yijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[Yijk[pN,pP,pQ]] Yijk[pM,pP,pR] m2ij[pQ,pR]- Conj[Yijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[Aijk[pN,pP,pQ]] Aijk[pM,pP,pQ]-  Conj[Aijk[p1,pL,pM]] Aijk[p2,pL,pN] Conj[Yijk[pN,pP,pQ]] Yijk[pM,pP,pQ] -  Conj[Aijk[p1,pL,pM]] Yijk[p2,pL,pN] Conj[Yijk[pN,pP,pQ]] Aijk[pM,pP,pQ]-  Conj[Yijk[p1,pL,pM]] Aijk[p2,pL,pN] Conj[Aijk[pN,pP,pQ]] Yijk[pM,pP,pQ]+ (SA`CasimirBar[pP] + SA`CasimirBar[pQ] - SA`CasimirBar[p1]) m2ij[pL,p1] Conj[Yijk[pL,pP,pQ]] Yijk[p2,pP,pQ] + (SA`CasimirBar[pP] + SA`CasimirBar[pQ] - SA`CasimirBar[p1])Conj[Yijk[p1,pP,pQ]] Yijk[pL,pP,pQ] m2ij[p2,pL] + 4 (SA`CasimirBar[pP] + SA`CasimirBar[pQ] - SA`CasimirBar[p1])Conj[Yijk[p1,pP,pQ]] Yijk[p2,pP,pL] m2ij[pQ,pL]+ 2   (SA`CasimirBar[pP] + SA`CasimirBar[pQ] - SA`CasimirBar[p1])Conj[Aijk[p1,pP,pQ]] Aijk[p2,pP,pQ]- 2  (SA`CasimirMBar[pP] + SA`CasimirMBar[pQ] - SA`CasimirMBar[p1])Conj[Aijk[p1,pP,pQ]] Yijk[p2,pP,pQ] - 2  (SA`CasimirMCBar[pP] + SA`CasimirMCBar[pQ] - SA`CasimirMCBar[p1])Conj[Yijk[p1,pP,pQ]] Aijk[p2,pP,pQ]  + 4  (SA`CasimirMMBar[pP] + SA`CasimirMMBar[pQ] - SA`CasimirMMBar[p1])Conj[Yijk[p1,pP,pQ]] Yijk[p2,pP,pQ]; 
betaFuncm2ij2Lb[p1_,p2_]:=  listSMadd[[i,1]] EMatrix[listSMadd[[i,2]]](Sum[8  TA[gnr,p1,p2] Tr3[gnr],{gnr,1,AnzahlGauge}] + 8 SA`DynkinMMCasimirU1[p1] makeDelta[i,1,2,{}] +Sum[makeDelta[i,1,2,{}] (gc[gnr]^4 Mi[gnr] Conj[Mi[gnr]](24 SA`Casimir[getBlankSF[p1],gnr] SA`Dynkin[rep,gnr]*(1-SA`CheckU1[gnr]) - 72 SA`Casimir[gnr] SA`Casimir[getBlankSF[p1],gnr]) +8   gc[gnr]^4 SA`Casimir[getBlankSF[p1],gnr]*(1-SA`CheckU1[gnr])*(Tr2[gnr] - SA`Casimir[gnr] Mi[gnr] Conj[Mi[gnr]])) + 8 Sum[YBar[p1,gnr] YBar[p1,gnr2]Tr2U1[gnr,gnr2] *SA`CheckU1[gnr] *SA`CheckU1[gnr2],{gnr2,1,AnzahlGauge}],{gnr,1,AnzahlGauge}] + 
 + SA`MMCasimir2[p1]) /.subValue[1,1] /. subValue[2,1];


betaFuncMi[gnr1_,gnr2_]:=  2 Sum[(SA`Gaugino[gnr1,gSUM]  QBar[gSUM,gnr2]+SA`Gaugino[gSUM,gnr2]  QBar[gnr1,gSUM])/2 - 3 SA`Gaugino[gnr1,gSUM] SA`gCoup[gSUM,gnr2]^2 SA`Casimir[gnr1],{gSUM,1,Length[Gauge]}] //.  SA`Gaugino[a__]->0 //. QBar[a__]->0;
betaFuncMiU12L[gnr1_,gnr2_] := (SA`DynkinRCasimirRM[gnr1,gnr2]  /.sumRGE[a__]->1)+ 2 (Aijk[pL,pM,pN] YBar[pN,gnr1] YBar[pN,gnr2] - Sum[(SA`Gaugino[gnr1,n1]  YBar[pN,n1] YBar[pN,gnr2]+SA`Gaugino[n1,gnr2]  YBar[pN,n1] YBar[pN,gnr1])/2 Yijk[pL,pM,pN],{n1,1,AnzahlGauge}]) Conj[Yijk[pN,pM,pL]] /. SA`Gaugino[a__]->0;
betaFuncMi2L[gnr_,gnr2_] := gc[gnr]^4 Mi[gnr] ( - 24 SA`Casimir[gnr]^2 + 8 SA`Casimir[gnr] SA`Dynkin[rep,gnr]) + gc[gnr]^2 Sum[gc[gn]^2  8(SA`CasimirDynkin[rep,gnr,gn]) (Mi[gnr]+Mi[gn]),{gn,1,AnzahlGauge}] + 2 gc[gnr]^2 (Aijk[pL,pM,pN] - Mi[gnr] Yijk[pL,pM,pN]) Conj[Yijk[pN,pM,pL]] SA`Casimir[pN,gnr]/(dimAdj[gnr]);


betaFuncGauge[gnr1_,gnr2_] := Sum[SA`gCoup[gnr1,gSUM] (  QBar[gSUM,gnr2] - 3 SA`gCoup[gSUM,gnr2]^2 SA`Casimir[gnr1]),{gSUM,1,Length[Gauge]}] //.  SA`gCoup[a__]->0 //. QBar[a__]->0;
betaFuncGauge2L[gnr_,gnr2_]:= gc[gnr]^5 ( - 6 SA`Casimir[gnr]^2 + 2 SA`Casimir[gnr] SA`Dynkin[rep,gnr]) + gc[gnr]^3 Sum[gc[gn]^2( 4 SA`CasimirDynkin[rep,gnr,gn] ),{gn,1,AnzahlGauge}] - gc[gnr]^3 Yijk[pL,pM,pN] Conj[Yijk[pN,pM,pL]] SA`Casimir[pN,gnr]/(dimAdj[gnr]);
betaFuncGaugeU12L[gnr1_,gnr2_] := -2 Sum[SA`gCoup[gnr1,gSUM]  ((1/2 Conj[Yijk[pL,pP,pQ]] Yijk[pL,pP,pQ] YBar[pL,gSUM] YBar[pL,gnr2]-2 SA`CasimirDynkinU1Summed[gSUM,gnr2] ) ),{gSUM,1,Length[Gauge]}] //.  SA`gCoup[a__]->0 //. QBar[a__]->0;

betaFuncGauge3L[gnr1_,gnr2_] := If[gnr1===gnr2,betaFuncGauge3L[gnr1],0];
betaFuncGauge3L[gnr_]:=
3 gc[gnr]^3  Yijk[pL,pM,pP] Conj[Yijk[pL,pM,pQ]] Yijk[pP,pS,pT] Conj[Yijk[pS,pT,pQ]] SA`Casimir[pL,gnr]+6 gc[gnr]^5 Yijk[pL,pM,pN] Conj[Yijk[pN,pM,pL]] SA`Casimir[pL,gnr]^2 + gc[gnr]^3 Yijk[pL,pM,pN] Conj[Yijk[pN,pM,pR]] Yijk[pR,pQ,pS] Conj[Yijk[pS,pQ,pL]] SA`Casimir[pL,gnr] - 6 (SA`Dynkin[rep,gnr]-3 SA`Casimir[gnr]) gc[nr]^7 SA`Casimir[pN,gnr]^2- 4 gc[gnr]^5 SA`Casimir[gnr] Yijk[pL,pM,pN] Conj[Yijk[pN,pM,pL]] SA`Casimir[pL,gnr]+gc[gnr]^7 (SA`Dynkin[rep,i]-3 SA`Casimir[gnr]) SA`Casimir[gnr](4 SA`Casimir[gnr]-(SA`Dynkin[rep,gnr]-3 SA`Casimir[gnr]));

(*
betaFuncVEV[p1_] := VEVi[pZ] gammaij[pZ,p1];
betaFuncVEV2L[p1_] := VEVi[pP] gammaij2L[pP,p1];
*)


betaFuncVEV[p1_] := VEVi[pX] gammaijScalar[pX,p1]+ VEVi[pX]gammaijHat[pX,p1];
betaFuncVEV2L[p1_] := VEVi[pP] gammaij2LScalar[pP,p1]+ VEVi[pP]gammaij2LHat[pP,p1];

betaFuncFIi1L[gNr_]:=Sum[2   GUTren[gNr] SA`gCoup[gNr,gnr2] Tr1[gnr2],{gnr2,1,AnzahlGauge}]+Sum[Sum[1/( SA`gCoup[gNr,gnr2]) betaFuncGauge[gnr2,gnr1] Xi[Gauge[[gnr1,1]]],{gnr2,1,AnzahlGauge}],{gnr1,1,AnzahlGauge}]/. 1/SA`gCoup[__]->0/. SA`gCoup[__]->0;
betaFuncFIi2L[gNr_]:=Sum[2   GUTren[gNr] SA`gCoup[gNr,gnr2] Tr3[gnr2],{gnr2,1,AnzahlGauge}]+ExpandTerm[Sum[Sum[1/( SA`gCoup[gNr,gnr2]) betaFuncGaugeU12L[gnr2,gnr1] Xi[Gauge[[gnr1,1]]],{gnr2,1,AnzahlGauge}],{gnr1,1,AnzahlGauge}]] /. 1/SA`gCoup[__]->0/. SA`gCoup[__]->0 /. YBar[a__]->0 ;

betaFuncDGi[p1_,gNr_]:=ExpandTerm[DGi[pN,gNr] gammaij[pN,p1]]+Sum[DGi[p1,gSUM] (QBar[gSUM,gNr] - 3 SA`gCoup[gSUM,gNr]^2 SA`Casimir[gNr]),{gSUM,1,Length[Gauge]}] //.  SA`gCoup[a__]->0 //. QBar[a__]->0;
betaFuncDGi2L[p1_,gNr_]:=ExpandTerm[DGi[pN,gNr] gammaij2L[pN,p1]]+DGi[p1,gNr] betaFuncGauge2L[gNr,gNr]/SA`gCoup[gNr,gNr];
betaFuncDGiU12L[p1_,gNr_]:=ExpandTerm[DGi[pN,gNr] gammaij2L[pN,p1]] -2 Sum[DGi[p1,gSUM]  ((1/2 Conj[Yijk[pL,pP,pQ]] Yijk[pL,pP,pQ] YBar[pL,gSUM] YBar[pL,gNr]-2 SA`CasimirDynkinU1Summed[gSUM,gNr] ) ),{gSUM,1,Length[Gauge]}] //.  SA`gCoup[a__]->0 //. QBar[a__]->0;
];



BetaFunctionVEV1L[term_]:=betaFuncVEV[term /. subGC[1]];
BetaFunctionVEV2L[term_]:=betaFuncVEV2L[term/. subGC[1]];


BetaFunctionGaugino1L[term_]:=betaFuncMi[term[[1]],term[[2]]];
BetaFunctionGaugino2L[term_]:=Block[{},
If[Gauge[[term[[1]],2]]===U[1],
Return[betaFuncMiU12L[term[[1]],term[[2]]]];,
Return[betaFuncMi2L[term[[1]],term[[2]]]];
];
];


BetaFunctionGauge1L[term_]:=betaFuncGauge[term[[1]],term[[2]]];
BetaFunctionGauge2L[term_]:=Block[{},
If[Gauge[[term[[1]],2]]===U[1],
Return[betaFuncGaugeU12L[term[[1]],term[[2]]]];,
Return[betaFuncGauge2L[term[[1]],term[[2]]]];
];
];

BetaFunctionGauge3L[term_]:=betaFuncGauge3L[term[[1]],term[[2]]];


BetaFunctionWijkl1L[term_]:=Block[{beta},
beta = betaFuncWijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
beta += betaFuncWijkl[term[[4]]/.subGC[4],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
beta += betaFuncWijkl[term[[1]]/.subGC[1],term[[4]]/.subGC[4],term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
beta += betaFuncWijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
Return[beta];
];

BetaFunctionWijkl2L[term_]:=Block[{beta},
beta = betaFuncWijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
beta += betaFuncWijkl2L[term[[4]]/.subGC[4],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
beta += betaFuncWijkl2L[term[[1]]/.subGC[1],term[[4]]/.subGC[4],term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
beta += betaFuncWijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
Return[beta];
];

BetaFunctionQijkl1L[term_]:=Block[{beta},
beta = betaFuncQijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
beta += betaFuncQijkl[term[[4]]/.subGC[4],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
beta += betaFuncQijkl[term[[1]]/.subGC[1],term[[4]]/.subGC[4],term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
beta += betaFuncQijkl[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
Return[beta];
];

BetaFunctionQijkl2L[term_]:=Block[{beta},
beta = betaFuncQijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[4]]/.subGC[4]];
beta += betaFuncQijkl2L[term[[4]]/.subGC[4],term[[2]]/.subGC[2],term[[3]]/.subGC[3],term[[1]]/.subGC[1]];
beta += betaFuncQijkl2L[term[[1]]/.subGC[1],term[[4]]/.subGC[4],term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
beta += betaFuncQijkl2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[4]]/.subGC[4],term[[3]]/.subGC[3]]; 
Return[beta];
];

BetaFunctionYijk1L[term_]:=Block[{beta},
beta =  betaFuncYijk[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3]];
beta += betaFuncYijk[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncYijk[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]]; 
Return[beta];
];

BetaFunctionYijk2L[term_]:=Block[{beta},
beta = betaFuncYijk2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3]];
beta += betaFuncYijk2L[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncYijk2L[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]];
Return[beta];
];

BetaFunctionMuij1L[term_]:=Block[{beta},
beta =betaFuncMuij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta +=betaFuncMuij[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionMuij2L[term_]:=Block[{beta},
beta =betaFuncMuij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta +=betaFuncMuij2L[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionLi1L[term_]:=Block[{beta},
Return[betaFuncLi[term[[1]]/.subGC[1]]];
];

BetaFunctionLi2L[term_]:=Block[{beta},
Return[betaFuncLi2L[term[[1]]/.subGC[1]]];
];

BetaFunctionFIi1L[term_]:=Block[{beta},
Return[betaFuncFIi1L[term]];
];

BetaFunctionFIi2L[term_]:=Block[{beta},
Return[betaFuncFIi2L[term]];
];

BetaFunctionTijk1L[term_]:=Block[{beta},
beta = betaFuncAijk[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3] ];
beta +=betaFuncAijk[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncAijk[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]];
Return[beta];
];

(*
BetaFunctionTijk1LNew[term_]:=Block[{beta},
beta = betaFuncAijkNew[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3] ];
beta +=betaFuncAijkNew[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncAijkNew[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]];
Return[beta];
];
*)

BetaFunctionTijk2L[term_]:=Block[{beta},
beta = betaFuncAijk2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3] ];
beta +=betaFuncAijk2L[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncAijk2L[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]];
Return[beta];
];

BetaFunctionTijk2LNew[term_]:=Block[{beta},
beta = betaFuncAijk2LNew[term[[1]]/.subGC[1],term[[2]]/.subGC[2],term[[3]]/.subGC[3] ];
beta +=betaFuncAijk2LNew[term[[3]]/.subGC[3],term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
beta += betaFuncAijk2LNew[term[[1]]/.subGC[1],term[[3]]/.subGC[3],term[[2]]/.subGC[2]];
Return[beta];
];

BetaFunctionBij1L[term_]:=Block[{beta},
beta = betaFuncBij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta += betaFuncBij[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionBij2L[term_]:=Block[{beta},
beta = betaFuncBij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta += betaFuncBij2L[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionBij1LNew[term_]:=Block[{beta},
beta = betaFuncBijNew[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta += betaFuncBijNew[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionBij2LNew[term_]:=Block[{beta},
beta = betaFuncBij2LNew[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
beta += betaFuncBij2LNew[term[[2]]/.subGC[2],term[[1]]/.subGC[1]];
Return[beta];
];

BetaFunctionSi1L[term_]:=betaFuncLSi[term[[1]] /. subGC[1]];
BetaFunctionSi2L[term_]:=betaFuncLSi2L[term[[1]] /. subGC[1]];

BetaFunctionSi1LNew[term_]:=betaFuncLSiNew[term[[1]] /. subGC[1]];
BetaFunctionSi2LNew[term_]:=betaFuncLSi2LNew[term[[1]] /. subGC[1]];

BetaFunctionm2ij1L[term_]:=betaFuncm2ij[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];
BetaFunctionm2ij2L[term_]:=betaFuncm2ij2L[term[[1]]/.subGC[1],term[[2]]/.subGC[2]]+betaFuncm2ij2Lb[term[[1]]/.subGC[1],term[[2]]/.subGC[2]];

BetaFunctionDGi1L[term_]:=betaFuncDGi[term[[1]] /. subGC[1],term[[2]]];
BetaFunctionDGi2L[term_]:=Block[{},
If[Gauge[[term[[2]],2]]===U[1],
Return[betaFuncDGiU12L[term[[1]] /. subGC[1],term[[2]]]];,
Return[betaFuncDGi2L[term[[1]] /. subGC[1],term[[2]]]];
];
];







CalcBetaFunctions[type_,fields_,filename_,filename3I_,twoloop_,Simp_]:=Block[{i,factor,res,subNonZero,coup,SaveArray={},SaveArray3I={},startedtime},
startedtime=TimeUsed[];
Switch[type,
WIJKL, Print[StyleForm["Calculate Beta Functions for 4-point Superpotential parameters","Section",FontSize->12]];,
QIJKL, Print[StyleForm["Calculate Beta Functions for 4-point soft breaking parameters","Section",FontSize->12]];,
YIJK, Print[StyleForm["Calculate Beta Functions for trilinear Superpotential parameters","Section",FontSize->12]];,
MUIJ,Print[StyleForm["Calculate Beta Functions for bilinear Superpotential parameters","Section",FontSize->12]];,
LI,Print[StyleForm["Calculate Beta Functions for linear Superpotential parameters","Section",FontSize->12]];,
TIJK,Print[StyleForm["Calculate Beta Functions for trilinear soft breaking parameters","Section",FontSize->12]];,
BIJ,Print[StyleForm["Calculate Beta Functions for bilinear soft breaking parameters","Section",FontSize->12]];,
LSI,Print[StyleForm["Calculate Beta Functions for linear soft breaking parameters","Section",FontSize->12]];,
M2IJ,Print[StyleForm["Calculate Beta Functions for scalar soft breaking masses","Section",FontSize->12]];,
GAUGE,Print[StyleForm["Calculate Beta Functions for Gauge Couplings","Section",FontSize->12]];,
FI,Print[StyleForm["Calculate Beta Functions for Fayet-Iliopoulos D-terms","Section",FontSize->12]];,
MI,Print[StyleForm["Calculate Beta Functions for Gaugino masses","Section",FontSize->12]];,
DGI,Print[StyleForm["Calculate Beta Functions for Dirac Gaugino masses","Section",FontSize->12]];,
VEV,Print[StyleForm["Calculate Beta Functions for VEVs","Section",FontSize->12]];
];

If[Length[fields]>0,
DynamicProgressRGE[type]=0;
Print["   Calculating ",Dynamic[DynamicProgressRGE[type]],"/",Length[fields],".(",Dynamic[DynamicCoupProgess[type]],")"];,
Print["   Nothing to do."];
];

For[i=1,i<=Length[fields],
DynamicProgressRGE[type]=i;
UseSymmASymm=True;
Switch[type,
WIJKL,
	coup=Wijkl[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],fields[[i,1,3]]/.subGC[3],fields[[i,1,4]]/.subGC[4]];
	betaFunction=BetaFunctionWijkl1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionWijkl2L[fields[[i,1]]];,betaFunction2L=0];,
QIJKL,
	coup=Qijkl[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],fields[[i,1,3]]/.subGC[3],fields[[i,1,4]]/.subGC[4]];
	betaFunction=BetaFunctionQijkl1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionQijkl2L[fields[[i,1]]];,betaFunction2L=0];,
YIJK,
	coup=Yijk[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],fields[[i,1,3]]/.subGC[3]];
	betaFunction=BetaFunctionYijk1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionYijk2L[fields[[i,1]]];,betaFunction2L=0];,
MUIJ,
	coup=Muij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
	betaFunction=BetaFunctionMuij1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionMuij2L[fields[[i,1]]];,betaFunction2L=0];,
LI,
	coup=Li[fields[[i,1,1]]/.subGC[1]];
	betaFunction=BetaFunctionLi1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionLi2L[fields[[i,1]]];,betaFunction2L=0];,
TIJK,
	coup=Aijk[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2],fields[[i,1,3]]/.subGC[3]];
	betaFunction=BetaFunctionTijk1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionTijk2L[fields[[i,1]]];,betaFunction2L=0];,
BIJ,
	coup=Bij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
	betaFunction=BetaFunctionBij1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionBij2L[fields[[i,1]]];,betaFunction2L=0];,
LSI,
	coup=LSi[fields[[i,1,1]]/.subGC[1]];
	betaFunction=BetaFunctionSi1LNew[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionSi2LNew[fields[[i,1]]];,betaFunction2L=0];,
M2IJ,
	coup=m2ij[fields[[i,1,1]]/.subGC[1],fields[[i,1,2]]/.subGC[2]];
	betaFunction=BetaFunctionm2ij1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionm2ij2L[fields[[i,1]]];,betaFunction2L=0];,
GAUGE,
	coup=1;
	betaFunction=BetaFunctionGauge1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionGauge2L[fields[[i,1]]];,betaFunction2L=0];,
MI,
	coup=1;
	betaFunction=BetaFunctionGaugino1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionGaugino2L[fields[[i,1]]];,betaFunction2L=0];,
DGI,
	coup=1;
	betaFunction=BetaFunctionDGi1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionDGi2L[fields[[i,1]]];,betaFunction2L=0];,
FI,
	coup=1;
	betaFunction=BetaFunctionFIi1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionFIi2L[fields[[i,1]]];,betaFunction2L=0];,
VEV,
	coup=fields[[i,2,2]];
	betaFunction=BetaFunctionVEV1L[fields[[i,1]]];
	If[twoloop,betaFunction2L=BetaFunctionVEV2L[fields[[i,1]]];,betaFunction2L=0];
 ];

DynamicCoupProgess[type]=CalcRGEValue[fields[[i,2,2]] /. Delta[a__]->1 /.epsTensor[a__]->1  /. RM[a___][b___]->1/. InvMat[a__][b__]->1];
res=GetNonZeroEntries[fields[[i,2,2]] /. Delta[gen1,a_]->1 /. Delta[a___,gen2,b___]->1];
subNonZero=res[[1]]; 
factor=DeleteCases[DeleteCases[fakeFac coup /. subNonZero,_?(MemberQ[{gen1,gen2,gen3},#]&),10]/. A_[{}]->1 /. A_[]->1 /. Conj[x_]->x,_?(MemberQ[Transpose[parameters][[1]],#]&),10] /. fakeFac ->1;

betaFunction =Expand[1/factor* CalcRGEValue[ExpandTerm[betaFunction ]/. subNonZero /. SA`gCoup[a__]->0 ,False]];
LoopProgess[type]="1-loop";
betaFunction2L = Expand[1/factor* CalcRGEValue[ExpandTerm[betaFunction2L] /. SA`SubIgnore2L /. 0[a__]->0 /. subNonZero,False]];
LoopProgess[type]="2-loop";


If[type===M2IJ,
If[listSMadd[[i,3]],betaFunction=betaFunction /. {gen2->gen1,gen1->gen2};betaFunction2L=betaFunction2L /. {gen2->gen1,gen1->gen2};];
 ];

If[type===VEV,
betaFunction=-betaFunction /. gen1->i1; betaFunction2L=-betaFunction2L /. gen1->i1;
];

subGenInd={}; nrInd=1;

For[j=1,j<=3,
If[FreeQ[fields[[i,2,2]],genf[j]]==False,
subGenInd=Join[subGenInd,{genf[j]->ToExpression["i"<>ToString[nrInd]]}];
nrInd++;
];
j++;]; 

(* subGenInd={gen1->i1,gen2->i2,gen3->i3,gen4->i4}; *)

If[Simp===True && ThreeIndexParametersInvolved=!=True,
SaveArray = Join[SaveArray,{{CalcRGEValue[fields[[i,2,2]]  /. Delta[a__]->1 /.epsTensor[a__]->1 /. RM[a___][b___]->1 /. InvMat[a__][b__]->1] /. subGenInd,Simplify[betaFunction/. subGenInd//.Conj->conj],Simplify[ betaFunction2L/. subGenInd//.Conj->conj]}}];,
SaveArray = Join[SaveArray,{{CalcRGEValue[fields[[i,2,2]] /. Delta[a__]->1 /.epsTensor[a__]->1  /. RM[a___][b___]->1/. InvMat[a__][b__]->1] /. subGenInd,betaFunction/. subGenInd//.Conj->conj, betaFunction2L/. subGenInd//.Conj->conj}}];
];
i++;];

Put[SaveArray,ToFileName[$sarahCurrentRGEDir,filename<>".m"]];


If[ThreeIndexParametersInvolved===True,
MakeMatrixMul=True;
For[i=1,i<=Length[SaveArray],
SaveArray3I=Join[SaveArray3I,{{SaveArray[[i,1]],Split3IndexParameter[SaveArray[[i,2]]]//.Conj->conj,Split3IndexParameter[SaveArray[[i,3]]]//.Conj->conj}}];
i++;];
MakeMatrixMul=False;
Put[SaveArray3I,ToFileName[$sarahCurrentRGEDir,filename3I<>".m"]];
];

Switch[type,
WIJKL, BetaWijkl=SaveArray; BetaWijkl3I=SaveArray3I;,
QIJKL, BetaQijkl=SaveArray; BetaQijkl3I=SaveArray3I;,
YIJK, BetaYijk=SaveArray; BetaYijk3I=SaveArray3I;,
MUIJ,BetaMuij=SaveArray; BetaMuij3I=SaveArray3I;,
LI,BetaLi=SaveArray; BetaLi3I=SaveArray3I;,
TIJK,BetaTijk=SaveArray; BetaTijk3I=SaveArray3I;,
BIJ,BetaBij=SaveArray; BetaBij3I=SaveArray3I;,
LSI,BetaLSi=SaveArray; BetaLSi3I=SaveArray3I;,
M2IJ,Betam2ij=SaveArray; Betam2ij3I=SaveArray3I;,
GAUGE,BetaGauge=SaveArray; BetaGauge3I=SaveArray3I;,
MI,BetaMi=SaveArray; BetaMi3I=SaveArray3I;,
DGI,BetaDGi=SaveArray; BetaDGi3I=SaveArray3I;,
FI,BetaFIi=SaveArray; BetaFIi3I=SaveArray3I;,
VEV,BetaVEV=SaveArray; BetaVEV3I=SaveArray3I;
];
UseSymmASymm=False;

DynamicCoupProgess[type]="All done in "<>ToString[TimeUsed[]-startedtime]<>"s";

];

CalcRGEtraces[TwoLoop_,Simp_]:=Block[{i,j,Spur,Spur2,startedtime},
Print[StyleForm["Calculate Traces for soft-scalar masses","Section",FontSize->12]];
TraceAbbr={{},{}};
startedtime=TimeUsed[];
DynamicProgressRGE[trace]=1;
Print["   Calculating: ",Dynamic[DynamicCoupProgess[trace]]];


MakeMatrixMul=True;

For[i=1,i<=AnzahlGauge,
DynamicCoupProgess[trace]=Tr1[Gauge[[i,1]]];
Spur=CalcRGEValue[ExpandTerm[ m2ij[pQ,pQ] TA[i,pQ,pQ]]] //. a_[x_,x_]->trace[a] /. conj[trace[a_]]->trace[a];
If[Simplify[Spur]===0,Tr1[i]=0;,TraceAbbr[[1]]=Join[TraceAbbr[[1]],{{Tr1[i],Spur }}];];
i++;];

MakeMatrixMul = MakeMatrixMulSave;


If[TwoLoop==True,
For[i=1,i<=AnzahlGauge,
MakeMatrixMul=True;
(* 2. Trace *)
DynamicProgressRGE[trace]=2;
DynamicCoupProgess[trace]=Tr2[Gauge[[i,1]]];
If[Gauge[[i,2]]===U[1],
For[j=1,j<=AnzahlGauge,
If[Gauge[[j,2]]===U[1],
Spur = CalcRGEValue[ExpandTerm[YBar[pL,i] YBar[pL,j] m2ij[pL,pL] ]] //. a_[x_,x_]->trace[a] /. conj[trace[a_]]->trace[a];
If[Spur===0,Tr2U1[i,j]=0;,TraceAbbr[[2]]=Join[TraceAbbr[[2]],{{Tr2U1[i,j],Spur}}];];
];
j++;];,
Spur=CalcRGEValue[ExpandTerm[ SA`Dynkin[getBlankSF[pL],i] m2ij[pL,pL]] /.sum[Gauge[[i,3]]/. subGC[6] /. subIndFinalX[6,6,"i"],__]->1] //. a_[x_,x_]->trace[a]/. conj[trace[a_]]->trace[a];
If[Spur===0,Tr2[i]=0;,TraceAbbr[[2]]=Join[TraceAbbr[[2]],{{Tr2[i],Spur}}];];
];

(* 3. Trace *)
Spur=0;
DynamicProgressRGE[trace]=3;
DynamicCoupProgess[trace]=Tr3[Gauge[[i,1]]];
subRGE = subRGEDelta;
 For[j=1,j<=AnzahlGauge,
If[Gauge[[j,2]]===U[1],
Spur+=CalcRGEValue[ExpandTerm[  TA[i,pN,pN] YBar[pN,j] YBar[pN,j] m2ij[pN,pN]]]  /.subValue[1,1] /. subValue[2,1] /.YBar[a__]->0;,
Spur+=CalcRGEValue[ExpandTerm[  gc[j]^2 TA[i,pN,pN] SA`Casimir[getBlankSF[pN],j] m2ij[pN,pN]]]  /.subValue[1,1] /. subValue[2,1] /.YBar[a__]->0;
];
j++]; 
MakeMatrixMul = MakeMatrixMulSave;
Spur2=-1/4ExpandTerm[ TA[i,pL,pM] Delta[gi6,gi8]  m2ij[pM,pR] Yijk[pL,pP,pQ] Conj[Yijk[pR,pP,pQ]]];
Spur=Spur+CalcRGEValue[Spur2] //. a_[x_,x_]->trace[a] //. a_[gi6,gi8]->trace[a] //. a_[gi8,gi6]->trace[a] /.trace[MatMul[a__]]->trace[a] /. conj[trace[a_]]->trace[a];
Spur = Spur /. conj[x_] ->Conj[x]/. A_[b_] MatMul[d__][b_]->MatMul[A,d] /. Conj[x_] ->conj[x] /. A_[b_] B_[b_]-> MatMul[A,B];
Spur = Simplify[Spur];
If[Spur===0,Tr3[i]=0;,TraceAbbr[[2]]=Join[TraceAbbr[[2]],{{Tr3[i],Spur}}];];

i++;];
];

subRGE = subRGENoDelta;
subRGE = subRGEDelta;
TraceAbbr = TraceAbbr /. GUTren[a_]->1;

If[Simp===True,TraceAbbr=Simplify[TraceAbbr];];

Put[TraceAbbr,ToFileName[$sarahCurrentRGEDir,"RGEtraces.m"]];

If[ThreeIndexParametersInvolved===True,
MakeMatrixMul=True;
TraceAbbr3I={{},{}};
TraceAbbr3I[[1]]=Simplify/@Split3IndexParameter/@TraceAbbr[[1]];
For[i=1,i<=Length[TraceAbbr[[2]]],
TraceAbbr3I[[2]]=Join[TraceAbbr3I[[2]],{Simplify/@Split3IndexParameter/@TraceAbbr[[2,i]]}];
i++;];
Put[TraceAbbr3I,ToFileName[$sarahCurrentRGEDir,"RGEtraces3I.m"]];
MakeMatrixMul=False;
];
DynamicCoupProgess[trace]="All done in "<>ToString[TimeUsed[]-startedtime]<>"s";
];


CalcBetaQuadSuperpotential[TwoL_,Simp_]:=CalcBetaFunctions[WIJKL,listW4One,"BetaWijkl","BetaWijkl3I",TwoL,Simp];
CalcBetaQuadSoftBreaking[TwoL_,Simp_]:=CalcBetaFunctions[QIJKL,listA4One,"BetaQijkl","BetaQijkl3I",TwoL,Simp];
CalcBetaTriSuperpotential[TwoL_,Simp_]:=CalcBetaFunctions[YIJK,listWtriOne,"BetaYijk","BetaYijk3I",TwoL,Simp];
CalcBetaBiSuperpotential[TwoL_,Simp_]:=CalcBetaFunctions[MUIJ,listWbiOne,"BetaMuij","BetaMuij3I",TwoL,Simp];
CalcBetaOneSuperpotential[TwoL_,Simp_]:=CalcBetaFunctions[LI,listWone,"BetaLi","BetaLi3I",TwoL,Simp];
CalcBetaTriSoftBreaking[TwoL_,Simp_]:=CalcBetaFunctions[TIJK,listAtriOne,"BetaTijk","BetaTijk3I",TwoL,Simp];
CalcBetaBiSoftBreaking[TwoL_,Simp_]:=CalcBetaFunctions[BIJ,listAbiOne,"BetaBij","BetaBij3I",TwoL,Simp];
CalcBetaOneSoftBreaking[TwoL_,Simp_]:=CalcBetaFunctions[LSI,listAone,"BetaLSi","BetaLSi3I",TwoL,Simp];
CalcBetaScalarMass[TwoL_,Simp_]:=CalcBetaFunctions[M2IJ,SA`ListM2ij,"Betam2ij","Betam2ij3I",TwoL,Simp];
CalcBetaGauge[TwoL_,Simp_]:=CalcBetaFunctions[GAUGE,SA`ListGaugeMixed,"BetaGauge","BetaGauge3I",TwoL,Simp];
CalcBetaDiracGauginos[TwoL_,Simp_]:=CalcBetaFunctions[DGI,SA`DiracGauginosInfo,"BetaDGi","BetaDGi3I",TwoL,Simp];
CalcBetaFI[TwoL_,Simp_]:=CalcBetaFunctions[FI,SA`listFIU1,"BetaFIi","BetaFIi3I",TwoL,Simp];
CalcBetaGaugino[TwoL_,Simp_]:=CalcBetaFunctions[MI,SA`ListGauginoMixed,"BetaMi","BetaMi3I",TwoL,Simp];
CalcBetaVEVs[TwoL_,Simp_]:=CalcBetaFunctions[VEV,SA`ListVEVi,"BetaVEV","BetaVEV3I",TwoL,Simp];


MakeDummyListRGEsSUSY:=Block[{i,j,sf,pos},
UseSymmASymm=True;
NeededAnaDimsForVEVs={};
listVEVi={};
SA`ListVEVi={};

For[j=1,j<=Length[NameOfStates],
If[Head[DEFINITION[NameOfStates[[j]]][VEVs]]===List,
For[i=1,i<=Length[DEFINITION[NameOfStates[[j]]][VEVs]],
If[FreeQ[listVEVi,DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]] && DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]=!=0 && DEFINITION[NameOfStates[[j]]][VEVs][[i,2,2]]=!=0,
pos=Position[SFieldsMultiplets,DEFINITION[NameOfStates[[j]]][VEVs][[i,1]]];
NeededAnaDimsForVEVs=Join[NeededAnaDimsForVEVs,{{getBlankSF[Extract[SFields,pos[[1,1]]]],DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]}}];
sf=RE[getFullSF[Extract[SFields,pos[[1,1]]]]];
listVEVi = Join[listVEVi,{{sf  makeDelta[pos[[1,1]],1,2,{generation}],DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]}}];
SA`ListVEVi = Join[SA`ListVEVi,{{sf, {-1,makeDelta[pos[[1,1]],1,2,{generation}] DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]]}}}];
VEVi[sf /. Delta[a__]->1 /. RM[a__][b__]->1 /. subGCRule[1]]=getFull[DEFINITION[NameOfStates[[j]]][VEVs][[i,2,1]],ALL] /. subGC[1];
];
i++;];
];
j++;];

BetaWijkl=Table[{listW4One[[i,2,2]],0,0},{i,1,Length[listW4One]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaYijk=Table[{listWtriOne[[i,2,2]],0,0},{i,1,Length[listWtriOne]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaMuij=Table[{listWbiOne[[i,2,2]],0,0},{i,1,Length[listWbiOne]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaLi=Table[{listWone[[i,2,2]],0,0},{i,1,Length[listWone]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};

BetaQijkl=Table[{listA4One[[i,2,2]],0,0},{i,1,Length[listA4One]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaTijk=Table[{listAtriOne[[i,2,2]],0,0},{i,1,Length[listAtriOne]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaBij=Table[{listAbiOne[[i,2,2]],0,0},{i,1,Length[listAbiOne]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaLSi=Table[{listAone[[i,2,2]],0,0},{i,1,Length[listAone]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};

Betam2ij=Table[{SA`ListM2ij[[i,2,2]],0,0},{i,1,Length[SA`ListM2ij]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};

BetaMi=Table[{SA`ListGauginoMixed[[i,2,2]],0,0},{i,1,Length[SA`ListGauginoMixed]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
BetaGauge=Table[{SA`ListGaugeMixed[[i,2,2]],0,0},{i,1,Length[SA`ListGaugeMixed]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};

BetaDGi = Table[{SA`DiracGauginosInfo[[i,2,2]],0,0},{i,1,Length[SA`DiracGauginosInfo]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};

BetaVEV= Table[{SA`ListVEVi[[i,2,2]],0,0},{i,1,Length[SA`ListVEVi]}]/. {Delta[a__]->1 ,epsTensor[a__]->1,CG[a__][b__]->1,gen1->i1,gen2->i2,gen3->i3,gen4->i4};
UseSymmASymm=False;
];






