
FSModelName = "@CLASSNAME@";
FSEigenstates = SARAH`EWSB;
FSDefaultSARAHModel = LRmodels/darkLR;
FSRGELoopOrder = 0;

(* left-right symmetric model of arXiv:1512.07212 *)

MINPAR = {
   {1, gRInput},
   {2, vtRInput},
   {3, vHRInput},
   {4, vHLInput},
   {5, vtLInput},
   {6, TanBeta},
   {10, lam1Input},
   {11, rho1Input},
   {12, rho2Input},
   {13, rho3Input},
   {14, alp1Input},
   {15, alp3Input},
   {16, beta2Input},
   {17, etaLLInput},
   {18, etaLRInput},
   {19, etaRLInput},
   {20, etaRRInput},
   {21, etaRR1Input},
   {22, etaRR2Input},
   {23, lamLInput},
   {24, lamRInput},
   {25, lamLRInput},
   {26, betaLInput},
   {27, betaRInput},
   {28, alpInput},
   {29, xiRInput},
   {30, xiLRInput}
};

EXTPAR = {};

FSExtraInputParameters = {};

EWSBOutputParameters = {mu12, lam3, mudL2, mudR2, muL2, muR2};

SUSYScale = LowScale;

SUSYScaleFirstGuess = LowScaleFirstGuess;

SUSYScaleInput = {};

LowScale = LowEnergyConstant[MZ];

LowScaleFirstGuess = LowEnergyConstant[MZ];

LowScaleInput = {
   {g3, LowEnergyConstant[g3SM]},
   {g2, LowEnergyConstant[g2SM]},
   {gR, gRInput},
   {gBL, (LowEnergyConstant[g1SM]*gRInput)/Sqrt[-LowEnergyConstant[g1SM]^2 + gRInput^2]},
   {vtR, vtRInput},
   {vHR, vHRInput},
   {vtL, vtLInput},
   {vHL, vHLInput},
   {v2, TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2]},
   {v1, TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2]},
   {lam1, lam1Input},
   {rho1, rho1Input},
   {rho2, rho2Input},
   {rho3, rho3Input},
   {alp1, alp1Input},
   {alp3, alp3Input},
   {beta2, beta2Input},
   {etaLL, etaLLInput},
   {etaLR, etaLRInput},
   {etaRL, etaRLInput},
   {etaRR, etaRRInput},
   {eRR1, etaRR1Input},
   {eRR2, etaRR2Input},
   {lamL, lamLInput},
   {lamR, lamRInput},
   {lamLR, lamLRInput},
   {betaL, betaLInput},
   {betaR, betaRInput},
   {alp, alpInput},
   {xiR, xiRInput},
   {xiLR, xiLRInput},
   {YQ1[1,1], LowEnergyConstant[yuSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YQ1[2,2], LowEnergyConstant[ycSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YQ1[3,3], LowEnergyConstant[ytSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[1,1], LowEnergyConstant[yeSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[2,2], LowEnergyConstant[ymSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[3,3], LowEnergyConstant[ylSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])}
};

InitialGuessAtLowScale = {
   {g3, LowEnergyConstant[g3SM]},
   {g2, LowEnergyConstant[g2SM]},
   {gR, gRInput},
   {gBL, (LowEnergyConstant[g1SM]*gRInput)/Sqrt[-LowEnergyConstant[g1SM]^2 + gRInput^2]},
   {vtR, vtRInput},
   {vHR, vHRInput},
   {vtL, vtLInput},
   {vHL, vHLInput},
   {v2, TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2]},
   {v1, Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2]},
   {lam1, lam1Input},
   {rho1, rho1Input},
   {rho2, rho2Input},
   {rho3, rho3Input},
   {alp1, alp1Input},
   {alp3, alp3Input},
   {beta2, beta2Input},
   {etaLL, etaLLInput},
   {etaLR, etaLRInput},
   {etaRL, etaRLInput},
   {etaRR, etaRRInput},
   {eRR1, etaRR1Input},
   {eRR2, etaRR2Input},
   {lamL, lamLInput},
   {lamR, lamRInput},
   {lamLR, lamLRInput},
   {betaL, betaLInput},
   {betaR, betaRInput},
   {alp, alpInput},
   {xiR, xiRInput},
   {xiLR, xiLRInput},
   {YQ1[1,1], LowEnergyConstant[yuSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YQ1[2,2], LowEnergyConstant[ycSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YQ1[3,3], LowEnergyConstant[ytSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[1,1], LowEnergyConstant[yeSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[2,2], LowEnergyConstant[ymSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])},
   {YL1[3,3], LowEnergyConstant[ylSM]*LowEnergyConstant[vSM]/(TanBeta*Sqrt[LowEnergyConstant[vSM]^2 - vHLInput^2 - 2*vtLInput^2]/Sqrt[1 + TanBeta^2])}
};

OnlyLowEnergyFlexibleSUSY = True;

FSWeakMixingAngleOptions = FSSetOption[FSWeakMixingAngleOptions, FSWeakMixingAngleInput -> FSFermiConstant];

DefaultPoleMassPrecision = MediumPrecision;
HighPoleMassPrecision    = {hh, Ah};
MediumPoleMassPrecision  = {};
LowPoleMassPrecision     = {};

PotentialLSPParticles    = {};

ExtraSLHAOutputBlocks = {
   {FlexibleSUSYOutput,
           {{1, Hold[SUSYScale]},
            {2, Hold[LowScale]} } }
};
